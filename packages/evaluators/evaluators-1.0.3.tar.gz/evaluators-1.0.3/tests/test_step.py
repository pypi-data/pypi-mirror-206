import numpy as np
import pytest
import torch

from evaluators import step

MAX_INSTANCES_PER_CATEGORY = 1000


def test_complex():
    gt_semseg = np.array(
        [
            [
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 2, 0, 1, 1, 1],
                [0, 2, 2, 2, 2, 1, 1, 1],
                [2, 2, 2, 2, 2, 2, 1, 1],
                [2, 2, 2, 2, 2, 2, 2, 1],
                [2, 2, 2, 2, 2, 2, 2, 1],
                [2, 2, 2, 2, 2, 2, 1, 1],
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 2, 0, 0, 1, 1, 0, 0],
                [2, 2, 2, 1, 1, 1, 1, 0],
                [2, 2, 2, 2, 1, 1, 1, 1],
                [2, 2, 2, 2, 2, 1, 1, 1],
                [2, 2, 2, 2, 2, 1, 1, 1],
                [2, 2, 2, 2, 1, 1, 1, 1],
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [2, 0, 1, 1, 1, 0, 0, 0],
                [2, 2, 1, 1, 1, 1, 0, 0],
                [2, 2, 2, 1, 1, 1, 1, 0],
                [2, 2, 2, 1, 1, 1, 1, 1],
                [2, 2, 2, 1, 1, 1, 1, 1],
            ],
        ]
    )
    gt_instances = np.array(
        [
            [
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 2, 0, 0, 0, 0],
                [0, 2, 2, 2, 2, 0, 0, 0],
                [2, 2, 2, 2, 2, 2, 0, 0],
                [2, 2, 2, 2, 2, 2, 2, 0],
                [2, 2, 2, 2, 2, 2, 2, 0],
                [2, 2, 2, 2, 2, 2, 0, 0],
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 2, 0, 0, 0, 0, 0, 0],
                [2, 2, 2, 0, 0, 0, 0, 0],
                [2, 2, 2, 2, 0, 0, 0, 0],
                [2, 2, 2, 2, 2, 0, 0, 0],
                [2, 2, 2, 2, 2, 0, 0, 0],
                [2, 2, 2, 2, 0, 0, 0, 0],
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [2, 0, 0, 0, 0, 0, 0, 0],
                [2, 2, 0, 0, 0, 0, 0, 0],
                [2, 2, 2, 0, 0, 0, 0, 0],
                [2, 2, 2, 0, 0, 0, 0, 0],
                [2, 2, 2, 0, 0, 0, 0, 0],
            ],
        ]
    )
    gt = gt_semseg * MAX_INSTANCES_PER_CATEGORY + gt_instances

    pred_semseg = np.array(
        [
            [
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 2, 2, 1, 1, 1],
                [0, 2, 2, 2, 2, 2, 1, 1],
                [2, 2, 2, 2, 2, 2, 2, 1],
                [2, 2, 2, 2, 2, 2, 2, 1],
                [2, 2, 2, 2, 2, 2, 2, 1],
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 1, 0, 0],
                [0, 2, 2, 2, 1, 1, 1, 1],
                [2, 2, 2, 2, 1, 1, 1, 1],
                [2, 2, 2, 2, 2, 1, 1, 1],
                [2, 2, 2, 2, 2, 2, 1, 1],
                [2, 2, 2, 2, 2, 1, 1, 1],
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 1, 1, 1, 1, 0, 0],
                [2, 2, 2, 1, 1, 1, 0, 0],
                [2, 2, 2, 1, 1, 1, 1, 1],
                [2, 2, 2, 2, 1, 1, 1, 1],
                [2, 2, 2, 2, 1, 1, 1, 1],
            ],
        ]
    )

    pred_instance = np.array(
        [
            [
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 2, 2, 0, 0, 0],
                [0, 2, 2, 2, 2, 1, 0, 0],
                [2, 2, 2, 2, 2, 1, 1, 0],
                [2, 2, 2, 2, 1, 1, 1, 0],
                [2, 2, 2, 2, 1, 1, 1, 0],
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 2, 2, 2, 0, 0, 0, 0],
                [2, 2, 2, 2, 0, 0, 0, 0],
                [2, 2, 2, 2, 2, 0, 0, 0],
                [2, 2, 2, 2, 1, 1, 0, 0],
                [2, 2, 2, 2, 1, 0, 0, 0],
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [2, 2, 2, 0, 0, 0, 0, 0],
                [2, 2, 2, 0, 0, 0, 0, 0],
                [2, 2, 2, 2, 0, 0, 0, 0],
                [2, 2, 2, 2, 0, 0, 0, 0],
            ],
        ]
    )
    prediction = pred_semseg * MAX_INSTANCES_PER_CATEGORY + pred_instance

    acc = step.STEPEvaluator(
        thing_classes=[2],
        stuff_classes=[0, 1],
        ignored_label=255,
        label_divisor=MAX_INSTANCES_PER_CATEGORY,
    )
    for i in range(3):
        acc.process(
            [step.STEPExposure(evaluate=True, labels=torch.as_tensor(gt[i, ...]), frame=i, sequence_id="A")],
            [step.STEPOutcome(panoptic_seg=(torch.as_tensor(prediction[i, ...]), None))],
        )
    assert len(acc._items) == 3
    res = acc.evaluate()
    assert res is not None
    res = res[acc.task_name]

    np.testing.assert_almost_equal(res["STQ"], 66.841773352)
    np.testing.assert_almost_equal(res["AQ"], 55.366581415)
    np.testing.assert_almost_equal(res["IoU"], 80.69529580309542)
