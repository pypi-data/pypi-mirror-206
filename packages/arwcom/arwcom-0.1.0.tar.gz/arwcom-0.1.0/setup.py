# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['arwcom', 'arwcom.client']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'arwcom',
    'version': '0.1.0',
    'description': 'Lightweight Python 3 API to access Windows COM Objects',
    'long_description': '# arwcom\n\nLightweight Python 3 API to access Windows COM Objects\n\n## Developer Configuration\n\n[Configure VS Code for Microsoft C++](https://code.visualstudio.com/docs/cpp/config-msvc)\n\n## References\n\nPython Bindings Libraries\n\n- [pywin32](https://github.com/mhammond/pywin32)\n  - Access to many of the Windows APIs from Python\n- [win32com](https://github.com/mhammond/pywin32/tree/master/com/win32com)\n  - Python COM Extensions, example: `xl = win32com.client.Dispatch("Excel.Application")`\n\n- [comtypes](https://github.com/enthought/comtypes)\n  - Lightweight Python COM package, based on the ctypes_FFI library, in less than 10000 lines of code (not counting the tests).\n\n- [win32-setctime](https://github.com/Delgan/win32-setctime)\n  - Pure python package using `from ctypes import windll, wintypes, byref, FormatError, WinError`\n\n- [SoundCard](https://github.com/bastibe/SoundCard/pull/89)\n  - Patch for combase.dll `_ole32 = _ffi.dlopen(\'ole32\')` and `_combase.CoUninitialize()`\n- [Python ctypes.OleDLL() Examples](https://www.programcreek.com/python/example/124455/ctypes.OleDLL)\n  - General examples of using `ctypes.OleDLL`\n- [NSF2X](https://github.com/adb014/nsf2x/blob/master/mapiex.py#L351)\n  - Example of finding a DLL in C2R version of COM object and get a COM object\n- [MSL-LoadLib](https://github.com/MSLNZ/msl-loadlib/blob/main/msl/loadlib/load_library.py#L162)\n  - Supported: `LIBTYPES = [\'cdll\', \'windll\', \'oledll\', \'net\', \'clr\', \'java\', \'com\', \'activex\']`\n- [pywinauto test_backend.py](https://github.com/pywinauto/pywinauto/blob/0da29f04583a9996bcfec10cefda4ddb86b880cc/pywinauto/unittests/test_backend.py#L70)\n  - Unit tests for Windows COM threading mode initialization by mocking pythoncom.CoInitializeEx\n- [Spark](https://github.com/xya/Spark/blob/master/src/spark/gui/filetypes/win32.py)\n  - `CoInitializeEx = windll.ole32.CoInitializeEx`\n- [pystrict3](https://github.com/JohannesBuchner/pystrict3/blob/master/tests/data/recipe-308035.py)\n  - Manual `pythoncom.CoInitializeEx(pythoncom.COINIT_APARTMENTTHREADED)` and `pythoncom.CoUninitialize()`\n\n- [pywin32-stubs](https://github.com/kaluluosi/pywin32-stubs/tree/master/win32-stubs)\n  - pywin32-stubs is generated from pywin32.chm\n- [pymfc](https://github.com/atsuoishimoto/pymfc)\n- [r2com](https://github.com/newlog/r2com)\n  - Reversing a binary calling the CoCreateInstance function from the OLE32.DLL library\n  - <https://reverseengineering.stackexchange.com/questions/2822/com-interface-methods/2823#2823>\n- [ComIDA](https://github.com/airbus-cert/comida/blob/master/comida.py#L371)\n  - `ea_cocreateinstance = find_import("ole32", "CoCreateInstance") or find_import("api-ms-win-core-com-l1-1-0", "CoCreateInstance")`\n\nOther language bindings to COM\n\n- [Go OLE](https://github.com/go-ole/go-ole)\n\nC/C++ Examples\n\n- [Fastboi](https://github.com/DXPower/Fastboi)\n  - A lightweight and simple C++20 game engine written over SDL2. It implements a basic component model and event system.\n- [Win32batch-GokhleSir](https://github.com/lihas/Win32CodingAssignments)\n  - COM, Class factory, Containment, Aggregation, Automation, etc.\n- [CommeCOM](https://github.com/alexonea/CommeCOM)\n  - Header-only library providing basic means for working with "comme" (like) COM objects - querying interfaces and acccessing functionality from dynamically loaded plug-ins (DLLs or shared objects)\n- [EasyOLE: C/C++ OLE Automation Client Library](https://github.com/abhisek/EasyOLE)\n  - Ease the development of OLE Automation Clients in C/C++ handling the internal not-so-friendly aspects of COM interfaces\n- [OLEVIEW Sample: ActiveX Object Viewer](https://github.com/microsoft/VCSamples/tree/master/VC2010Samples/MFC/ole/oleview)\n  - Illustrates how to implement ActiveX Object viewers through custom ActiveX interfaces\n- [MapWinGis](https://github.com/orapow/MapWinGis/blob/master/src/Utilities/ComHelper.cpp)\n\nWriting COM Applications\n\n- [OLE Component Object Model](https://docs.microsoft.com/en-us/windows/win32/multimedia/c---and-ole-programming-concepts)\n  - General overview of COM\n- [Get Started with Win32 and C++](https://docs.microsoft.com/en-us/windows/win32/learnwin32/learn-to-program-for-windows)\n  - Write a desktop program in C++ using Win32 and COM APIs\n- [COM Clients and Servers](https://docs.microsoft.com/en-us/windows/win32/com/com-clients-and-servers)\n  - Getting a Pointer to an Object, COM Glossary, etc.\n- [Active Template Library (ATL) Concepts](https://docs.microsoft.com/en-us/cpp/atl/active-template-library-atl-concepts?view=msvc-160)\n  - Active Template Library (ATL) is a set of template-based C++ classes that let you create small, fast Component Object Model (COM) objects\n  - CComPtr Class from atlbase.h\n\nCOM API Reference\n\n- [Windows System Services APIs](https://docs.microsoft.com/en-us/windows/win32/apiindex/windows-api-list#system-services)\n  - COM, COM+\n- [Component Object Model (COM)](https://docs.microsoft.com/en-us/windows/win32/api/_com/)\n  - Overview of the Component Object Model (COM) technology, header files, methods e.g. IUnknown interface (unknwn.h)\n\nBooks\n\n- Essential COM by Don Box\n- Atl Internals by Brent Rector\n- Inside COM by Dale Rogerson\n- Inside COM+ by Guy Eddon and Henry Eddon <https://thrysoee.dk/InsideCOM+/ch03b.htm>\n',
    'author': 'alwinw',
    'author_email': '16846521+alwinw@users.noreply.github.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
