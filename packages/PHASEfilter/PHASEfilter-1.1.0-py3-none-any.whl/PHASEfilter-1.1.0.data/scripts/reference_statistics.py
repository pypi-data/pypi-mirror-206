#!python
# encoding: utf-8
'''
reference_statistics.py -- shortdesc

With this application it is possible to obtain the number of nucleotides by chromosome.

@author:	 mmp

@copyright:  2019 iBiMED. All rights reserved.

@license:	license

@contact:	monsanto@ua.pt

@deffield	updated: Updated
'''
from PHASEfilter.lib.utils.util import Utils
from PHASEfilter.lib.utils.reference import Reference
from PHASEfilter.lib.constants import version
import os, re, sys

# export PYTHONPATH='/home/mmp/git/PHASEfilter'
# python3 reference_statistics.py 
#   --ref /home/projects/ua/candida/compare_A_vs_B/ref/genomeA/Ca22chr1A_C_albicans_SC5314.fasta 
#	--out report.txt

from optparse import OptionParser

__all__ = []
__version__ = version.VERSION_reference_statistics
__date__ = '2020-05-01'
__updated__ = '2021-09-06'

def checkRequiredArguments(opts, parser):
	missing_options = []
	for option in parser.option_list:
		if re.match(r'^\[REQUIRED\]', option.help) and eval('opts.' + option.dest) == None:
			missing_options.extend(option._long_opts)
	if len(missing_options) > 0:
		parser.error('Missing REQUIRED parameters: ' + str(missing_options))
		
		
def main(argv=None):
	'''Command line options.'''
	utils = Utils()
	
	program_name = os.path.basename(sys.argv[0])
	program_version = "{}".format(__version__)
	program_build_date = "%s" % __updated__

	program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
	#program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
	program_longdesc = '''
	Creates a report based on the number of bases that exists in the chromosomes.
	It accept 2 mandatory parameters.
	''' # optional - give further explanation about what the program does
	program_license = "Copyright 2020 (iBiMED)											\
				Licensed under the MIT\nhttps://spdx.org/licenses/MIT.html"

	if argv is None:
		argv = sys.argv[1:]
	
		# setup option parser
		parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
		parser.add_option("--ref", dest="reference", help="[REQUIRED] reference for genome", metavar="FILE")
		parser.add_option("--out", dest="outfile", help="[REQUIRED] report in tab separated value (tsv)", metavar="FILE")

		# process options
		(opts, args) = parser.parse_args(argv)
		checkRequiredArguments(opts, parser)
			
		if opts.reference: 	print("reference   = %s" % opts.reference)
		if opts.outfile: 	print("outfile     = %s" % opts.outfile)

		utils.test_file_exists(opts.reference)

		### test output file
		if (os.path.exists(opts.outfile)):
			read_input = input("Output file '{}' already exist, do you want to replace it? [y|Y] ".format(opts.outfile))
			if (len(read_input.strip()) > 0 and read_input.upper() != 'Y'): sys.exit("Exit by the user.")

		reference = Reference(opts.reference)
		reference.count_bases()
		reference.save_count_bases_in_file(opts.outfile)
			
		print("File created: " + opts.outfile)

if __name__ == "__main__":

	sys.exit(main())


