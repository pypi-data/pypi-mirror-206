# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from moneykit import schemas  # noqa: F401


class LinkStateChangedWebhook(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "webhook_idempotency_key",
            "link_tags",
            "state",
            "webhook_timestamp",
            "link_id",
        }

        class properties:
            webhook_idempotency_key = schemas.StrSchema
            webhook_timestamp = schemas.DateTimeSchema
            link_id = schemas.StrSchema

            class link_tags(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    _arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "link_tags":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            @staticmethod
            def state() -> typing.Type["LinkState"]:
                return LinkState

            class webhook_event(schemas.EnumBase, schemas.StrSchema):
                class MetaOapg:
                    enum_value_to_name = {
                        "link.state_changed": "LINK_STATE_CHANGED",
                    }

                @schemas.classproperty
                def LINK_STATE_CHANGED(cls):
                    return cls("link.state_changed")

            class webhook_major_version(schemas.EnumBase, schemas.IntSchema):
                class MetaOapg:
                    enum_value_to_name = {
                        1: "POSITIVE_1",
                    }

                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)

            class webhook_minor_version(schemas.EnumBase, schemas.IntSchema):
                class MetaOapg:
                    enum_value_to_name = {
                        0: "POSITIVE_0",
                    }

                @schemas.classproperty
                def POSITIVE_0(cls):
                    return cls(0)

            error = schemas.DictSchema

            class error_message(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "error_message":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            __annotations__ = {
                "webhook_idempotency_key": webhook_idempotency_key,
                "webhook_timestamp": webhook_timestamp,
                "link_id": link_id,
                "link_tags": link_tags,
                "state": state,
                "webhook_event": webhook_event,
                "webhook_major_version": webhook_major_version,
                "webhook_minor_version": webhook_minor_version,
                "error": error,
                "error_message": error_message,
            }

    webhook_idempotency_key: MetaOapg.properties.webhook_idempotency_key
    link_tags: MetaOapg.properties.link_tags
    state: "LinkState"
    webhook_timestamp: MetaOapg.properties.webhook_timestamp
    link_id: MetaOapg.properties.link_id

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["webhook_idempotency_key"]
    ) -> MetaOapg.properties.webhook_idempotency_key:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["webhook_timestamp"]
    ) -> MetaOapg.properties.webhook_timestamp:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link_id"]) -> MetaOapg.properties.link_id:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link_tags"]) -> MetaOapg.properties.link_tags:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> "LinkState":
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook_event"]) -> MetaOapg.properties.webhook_event:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["webhook_major_version"]
    ) -> MetaOapg.properties.webhook_major_version:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["webhook_minor_version"]
    ) -> MetaOapg.properties.webhook_minor_version:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_message"]) -> MetaOapg.properties.error_message:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "webhook_idempotency_key",
                "webhook_timestamp",
                "link_id",
                "link_tags",
                "state",
                "webhook_event",
                "webhook_major_version",
                "webhook_minor_version",
                "error",
                "error_message",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["webhook_idempotency_key"]
    ) -> MetaOapg.properties.webhook_idempotency_key:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["webhook_timestamp"]
    ) -> MetaOapg.properties.webhook_timestamp:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link_id"]) -> MetaOapg.properties.link_id:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link_tags"]) -> MetaOapg.properties.link_tags:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> "LinkState":
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["webhook_event"]
    ) -> typing.Union[MetaOapg.properties.webhook_event, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["webhook_major_version"]
    ) -> typing.Union[MetaOapg.properties.webhook_major_version, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["webhook_minor_version"]
    ) -> typing.Union[MetaOapg.properties.webhook_minor_version, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["error"]
    ) -> typing.Union[MetaOapg.properties.error, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["error_message"]
    ) -> typing.Union[MetaOapg.properties.error_message, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "webhook_idempotency_key",
                "webhook_timestamp",
                "link_id",
                "link_tags",
                "state",
                "webhook_event",
                "webhook_major_version",
                "webhook_minor_version",
                "error",
                "error_message",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        webhook_idempotency_key: typing.Union[
            MetaOapg.properties.webhook_idempotency_key,
            str,
        ],
        link_tags: typing.Union[
            MetaOapg.properties.link_tags,
            list,
            tuple,
        ],
        state: "LinkState",
        webhook_timestamp: typing.Union[
            MetaOapg.properties.webhook_timestamp,
            str,
            datetime,
        ],
        link_id: typing.Union[
            MetaOapg.properties.link_id,
            str,
        ],
        webhook_event: typing.Union[MetaOapg.properties.webhook_event, str, schemas.Unset] = schemas.unset,
        webhook_major_version: typing.Union[
            MetaOapg.properties.webhook_major_version, decimal.Decimal, int, schemas.Unset
        ] = schemas.unset,
        webhook_minor_version: typing.Union[
            MetaOapg.properties.webhook_minor_version, decimal.Decimal, int, schemas.Unset
        ] = schemas.unset,
        error: typing.Union[MetaOapg.properties.error, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        error_message: typing.Union[MetaOapg.properties.error_message, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "LinkStateChangedWebhook":
        return super().__new__(
            cls,
            *_args,
            webhook_idempotency_key=webhook_idempotency_key,
            link_tags=link_tags,
            state=state,
            webhook_timestamp=webhook_timestamp,
            link_id=link_id,
            webhook_event=webhook_event,
            webhook_major_version=webhook_major_version,
            webhook_minor_version=webhook_minor_version,
            error=error,
            error_message=error_message,
            _configuration=_configuration,
            **kwargs,
        )


from moneykit.model.link_state import LinkState
