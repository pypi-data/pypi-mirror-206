from typing import List
from enum import Enum
from pyVmomi import vim, vmodl
from datetime import datetime
from pyVmomi.VmomiSupport import ManagedObject, long


class VStorageObjectManagerBase(ManagedObject): ...


class BaseConfigInfo(vmodl.DynamicData):
    @property
    def id(self) -> ID: ...
    @property
    def name(self) -> str: ...
    @property
    def createTime(self) -> datetime: ...
    @property
    def keepAfterDeleteVm(self) -> bool: ...
    @property
    def relocationDisabled(self) -> bool: ...
    @property
    def nativeSnapshotSupported(self) -> bool: ...
    @property
    def changedBlockTrackingEnabled(self) -> bool: ...
    @property
    def backing(self) -> BaseConfigInfo.BackingInfo: ...
    @property
    def metadata(self) -> List[vim.KeyValue]: ...
    @property
    def vclock(self) -> VClockInfo: ...
    @property
    def iofilter(self) -> List[str]: ...


    class BackingInfo(vmodl.DynamicData):
        @property
        def datastore(self) -> vim.Datastore: ...


    class DiskFileBackingInfo(BaseConfigInfo.FileBackingInfo):
        @property
        def provisioningType(self) -> str: ...


        class ProvisioningType(Enum):
            thin = "thin"
            eagerZeroedThick = "eagerzeroedthick"
            lazyZeroedThick = "lazyzeroedthick"


    class FileBackingInfo(BaseConfigInfo.BackingInfo):
        @property
        def filePath(self) -> str: ...
        @property
        def backingObjectId(self) -> str: ...
        @property
        def parent(self) -> BaseConfigInfo.FileBackingInfo: ...
        @property
        def deltaSizeInMB(self) -> long: ...
        @property
        def keyId(self) -> vim.encryption.CryptoKeyId: ...


    class RawDiskMappingBackingInfo(BaseConfigInfo.FileBackingInfo):
        @property
        def lunUuid(self) -> str: ...
        @property
        def compatibilityMode(self) -> str: ...


class CloneSpec(MigrateSpec):
    @property
    def name(self) -> str: ...
    @property
    def keepAfterDeleteVm(self) -> bool: ...
    @property
    def metadata(self) -> List[vim.KeyValue]: ...


class CreateSpec(vmodl.DynamicData):
    @property
    def name(self) -> str: ...
    @property
    def keepAfterDeleteVm(self) -> bool: ...
    @property
    def backingSpec(self) -> CreateSpec.BackingSpec: ...
    @property
    def capacityInMB(self) -> long: ...
    @property
    def profile(self) -> List[vim.vm.ProfileSpec]: ...
    @property
    def crypto(self) -> vim.encryption.CryptoSpec: ...
    @property
    def metadata(self) -> List[vim.KeyValue]: ...


    class BackingSpec(vmodl.DynamicData):
        @property
        def datastore(self) -> vim.Datastore: ...
        @property
        def path(self) -> str: ...


    class DiskFileBackingSpec(CreateSpec.BackingSpec):
        @property
        def provisioningType(self) -> str: ...


    class RawDiskMappingBackingSpec(CreateSpec.BackingSpec):
        @property
        def lunUuid(self) -> str: ...
        @property
        def compatibilityMode(self) -> str: ...


class DiskCryptoSpec(vmodl.DynamicData):
    @property
    def parent(self) -> DiskCryptoSpec: ...
    @property
    def crypto(self) -> vim.encryption.CryptoSpec: ...


class ID(vmodl.DynamicData):
    @property
    def id(self) -> str: ...


class InfrastructureObjectPolicy(vmodl.DynamicData):
    @property
    def name(self) -> str: ...
    @property
    def backingObjectId(self) -> str: ...
    @property
    def profileId(self) -> str: ...
    @property
    def error(self) -> vmodl.MethodFault: ...


class InfrastructureObjectPolicySpec(vmodl.DynamicData):
    @property
    def datastore(self) -> vim.Datastore: ...
    @property
    def profile(self) -> List[vim.vm.ProfileSpec]: ...


class MigrateSpec(vmodl.DynamicData):
    @property
    def backingSpec(self) -> CreateSpec.BackingSpec: ...
    @property
    def profile(self) -> List[vim.vm.ProfileSpec]: ...
    @property
    def consolidate(self) -> bool: ...
    @property
    def disksCrypto(self) -> DiskCryptoSpec: ...


class RelocateSpec(MigrateSpec): ...


class StateInfo(vmodl.DynamicData):
    @property
    def tentative(self) -> bool: ...


class TagEntry(vmodl.DynamicData):
    @property
    def tagName(self) -> str: ...
    @property
    def parentCategoryName(self) -> str: ...


class VClockInfo(vmodl.DynamicData):
    @property
    def vClockTime(self) -> long: ...


class VStorageObject(vmodl.DynamicData):
    @property
    def config(self) -> VStorageObject.ConfigInfo: ...


    class ConfigInfo(BaseConfigInfo):
        @property
        def descriptorVersion(self) -> int: ...
        @property
        def capacityInMB(self) -> long: ...
        @property
        def consumptionType(self) -> List[str]: ...
        @property
        def consumerId(self) -> List[ID]: ...


    class ConsumptionType(Enum):
        disk = "disk"


class VStorageObjectSnapshotDetails(vmodl.DynamicData):
    @property
    def path(self) -> str: ...
    @property
    def changedBlockTrackingId(self) -> str: ...


class VStorageObjectSnapshotInfo(vmodl.DynamicData):
    @property
    def snapshots(self) -> List[VStorageObjectSnapshotInfo.VStorageObjectSnapshot]: ...


    class VStorageObjectSnapshot(vmodl.DynamicData):
        @property
        def id(self) -> ID: ...
        @property
        def backingObjectId(self) -> str: ...
        @property
        def createTime(self) -> datetime: ...
        @property
        def description(self) -> str: ...