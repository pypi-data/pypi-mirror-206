"""
    Plaid Compatibility Layer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from moneykit.plaid_compatible.api_client import ApiClient, Endpoint as _Endpoint
from moneykit.plaid_compatible.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from moneykit.plaid_compatible.model.accounts_get_request import AccountsGetRequest
from moneykit.plaid_compatible.model.accounts_get_response import AccountsGetResponse
from moneykit.plaid_compatible.model.auth_get_request import AuthGetRequest
from moneykit.plaid_compatible.model.auth_get_response import AuthGetResponse
from moneykit.plaid_compatible.model.http_validation_error import HTTPValidationError
from moneykit.plaid_compatible.model.identity_get_request import IdentityGetRequest
from moneykit.plaid_compatible.model.identity_get_response import IdentityGetResponse
from moneykit.plaid_compatible.model.institutions_get_by_id_request import InstitutionsGetByIdRequest
from moneykit.plaid_compatible.model.institutions_get_by_id_response import InstitutionsGetByIdResponse
from moneykit.plaid_compatible.model.item_get_request import ItemGetRequest
from moneykit.plaid_compatible.model.item_get_response import ItemGetResponse
from moneykit.plaid_compatible.model.item_public_token_exchange_request import ItemPublicTokenExchangeRequest
from moneykit.plaid_compatible.model.item_public_token_exchange_response import ItemPublicTokenExchangeResponse
from moneykit.plaid_compatible.model.item_remove_request import ItemRemoveRequest
from moneykit.plaid_compatible.model.item_remove_response import ItemRemoveResponse
from moneykit.plaid_compatible.model.link_token_create_request import LinkTokenCreateRequest
from moneykit.plaid_compatible.model.link_token_create_response import LinkTokenCreateResponse
from moneykit.plaid_compatible.model.transactions_get_request import TransactionsGetRequest
from moneykit.plaid_compatible.model.transactions_get_response import TransactionsGetResponse
from moneykit.plaid_compatible.model.transactions_refresh_request import TransactionsRefreshRequest
from moneykit.plaid_compatible.model.transactions_refresh_response import TransactionsRefreshResponse
from moneykit.plaid_compatible.model.transactions_sync_request import TransactionsSyncRequest
from moneykit.plaid_compatible.model.transactions_sync_response import TransactionsSyncResponse


class PlaidApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __accounts_get(
            self,
            accounts_get_request,
            **kwargs
        ):
            """/accounts/get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.accounts_get(accounts_get_request, async_req=True)
            >>> result = thread.get()

            Args:
                accounts_get_request (AccountsGetRequest):

            Keyword Args:
                plaid_version (str, none_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AccountsGetResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['accounts_get_request'] = \
                accounts_get_request
            return self.call_with_http_info(**kwargs)

        self.accounts_get = _Endpoint(
            settings={
                'response_type': (AccountsGetResponse,),
                'auth': [
                    'clientId',
                    'secret'
                ],
                'endpoint_path': '/accounts/get',
                'operation_id': 'accounts_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'accounts_get_request',
                    'plaid_version',
                ],
                'required': [
                    'accounts_get_request',
                ],
                'nullable': [
                    'plaid_version',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accounts_get_request':
                        (AccountsGetRequest,),
                    'plaid_version':
                        (str, none_type,),
                },
                'attribute_map': {
                    'plaid_version': 'Plaid-Version',
                },
                'location_map': {
                    'accounts_get_request': 'body',
                    'plaid_version': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__accounts_get
        )

        def __auth_get(
            self,
            auth_get_request,
            **kwargs
        ):
            """/auth/get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.auth_get(auth_get_request, async_req=True)
            >>> result = thread.get()

            Args:
                auth_get_request (AuthGetRequest):

            Keyword Args:
                plaid_version (str, none_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AuthGetResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['auth_get_request'] = \
                auth_get_request
            return self.call_with_http_info(**kwargs)

        self.auth_get = _Endpoint(
            settings={
                'response_type': (AuthGetResponse,),
                'auth': [
                    'clientId',
                    'secret'
                ],
                'endpoint_path': '/auth/get',
                'operation_id': 'auth_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'auth_get_request',
                    'plaid_version',
                ],
                'required': [
                    'auth_get_request',
                ],
                'nullable': [
                    'plaid_version',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'auth_get_request':
                        (AuthGetRequest,),
                    'plaid_version':
                        (str, none_type,),
                },
                'attribute_map': {
                    'plaid_version': 'Plaid-Version',
                },
                'location_map': {
                    'auth_get_request': 'body',
                    'plaid_version': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__auth_get
        )

        def __identity_get(
            self,
            identity_get_request,
            **kwargs
        ):
            """/identity/get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.identity_get(identity_get_request, async_req=True)
            >>> result = thread.get()

            Args:
                identity_get_request (IdentityGetRequest):

            Keyword Args:
                plaid_version (str, none_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IdentityGetResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identity_get_request'] = \
                identity_get_request
            return self.call_with_http_info(**kwargs)

        self.identity_get = _Endpoint(
            settings={
                'response_type': (IdentityGetResponse,),
                'auth': [
                    'clientId',
                    'secret'
                ],
                'endpoint_path': '/identity/get',
                'operation_id': 'identity_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'identity_get_request',
                    'plaid_version',
                ],
                'required': [
                    'identity_get_request',
                ],
                'nullable': [
                    'plaid_version',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identity_get_request':
                        (IdentityGetRequest,),
                    'plaid_version':
                        (str, none_type,),
                },
                'attribute_map': {
                    'plaid_version': 'Plaid-Version',
                },
                'location_map': {
                    'identity_get_request': 'body',
                    'plaid_version': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__identity_get
        )

        def __institutions_get_by_id(
            self,
            **kwargs
        ):
            """/institutions/get_by_id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.institutions_get_by_id(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                plaid_version (str, none_type): [optional]
                institutions_get_by_id_request (InstitutionsGetByIdRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InstitutionsGetByIdResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.institutions_get_by_id = _Endpoint(
            settings={
                'response_type': (InstitutionsGetByIdResponse,),
                'auth': [
                    'clientId',
                    'secret'
                ],
                'endpoint_path': '/institutions/get_by_id',
                'operation_id': 'institutions_get_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'plaid_version',
                    'institutions_get_by_id_request',
                ],
                'required': [],
                'nullable': [
                    'plaid_version',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'plaid_version':
                        (str, none_type,),
                    'institutions_get_by_id_request':
                        (InstitutionsGetByIdRequest,),
                },
                'attribute_map': {
                    'plaid_version': 'Plaid-Version',
                },
                'location_map': {
                    'plaid_version': 'header',
                    'institutions_get_by_id_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__institutions_get_by_id
        )

        def __item_get(
            self,
            item_get_request,
            **kwargs
        ):
            """/item/get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.item_get(item_get_request, async_req=True)
            >>> result = thread.get()

            Args:
                item_get_request (ItemGetRequest):

            Keyword Args:
                plaid_version (str, none_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ItemGetResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['item_get_request'] = \
                item_get_request
            return self.call_with_http_info(**kwargs)

        self.item_get = _Endpoint(
            settings={
                'response_type': (ItemGetResponse,),
                'auth': [
                    'clientId',
                    'secret'
                ],
                'endpoint_path': '/item/get',
                'operation_id': 'item_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_get_request',
                    'plaid_version',
                ],
                'required': [
                    'item_get_request',
                ],
                'nullable': [
                    'plaid_version',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_get_request':
                        (ItemGetRequest,),
                    'plaid_version':
                        (str, none_type,),
                },
                'attribute_map': {
                    'plaid_version': 'Plaid-Version',
                },
                'location_map': {
                    'item_get_request': 'body',
                    'plaid_version': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__item_get
        )

        def __item_public_token_exchange(
            self,
            item_public_token_exchange_request,
            **kwargs
        ):
            """/item/public_token/exchange  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.item_public_token_exchange(item_public_token_exchange_request, async_req=True)
            >>> result = thread.get()

            Args:
                item_public_token_exchange_request (ItemPublicTokenExchangeRequest):

            Keyword Args:
                plaid_version (str, none_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ItemPublicTokenExchangeResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['item_public_token_exchange_request'] = \
                item_public_token_exchange_request
            return self.call_with_http_info(**kwargs)

        self.item_public_token_exchange = _Endpoint(
            settings={
                'response_type': (ItemPublicTokenExchangeResponse,),
                'auth': [
                    'clientId',
                    'secret'
                ],
                'endpoint_path': '/item/public_token/exchange',
                'operation_id': 'item_public_token_exchange',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_public_token_exchange_request',
                    'plaid_version',
                ],
                'required': [
                    'item_public_token_exchange_request',
                ],
                'nullable': [
                    'plaid_version',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_public_token_exchange_request':
                        (ItemPublicTokenExchangeRequest,),
                    'plaid_version':
                        (str, none_type,),
                },
                'attribute_map': {
                    'plaid_version': 'Plaid-Version',
                },
                'location_map': {
                    'item_public_token_exchange_request': 'body',
                    'plaid_version': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__item_public_token_exchange
        )

        def __item_remove(
            self,
            item_remove_request,
            **kwargs
        ):
            """/item/remove  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.item_remove(item_remove_request, async_req=True)
            >>> result = thread.get()

            Args:
                item_remove_request (ItemRemoveRequest):

            Keyword Args:
                plaid_version (str, none_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ItemRemoveResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['item_remove_request'] = \
                item_remove_request
            return self.call_with_http_info(**kwargs)

        self.item_remove = _Endpoint(
            settings={
                'response_type': (ItemRemoveResponse,),
                'auth': [
                    'clientId',
                    'secret'
                ],
                'endpoint_path': '/item/remove',
                'operation_id': 'item_remove',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_remove_request',
                    'plaid_version',
                ],
                'required': [
                    'item_remove_request',
                ],
                'nullable': [
                    'plaid_version',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_remove_request':
                        (ItemRemoveRequest,),
                    'plaid_version':
                        (str, none_type,),
                },
                'attribute_map': {
                    'plaid_version': 'Plaid-Version',
                },
                'location_map': {
                    'item_remove_request': 'body',
                    'plaid_version': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__item_remove
        )

        def __link_token_create(
            self,
            link_token_create_request,
            **kwargs
        ):
            """/link/token/create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.link_token_create(link_token_create_request, async_req=True)
            >>> result = thread.get()

            Args:
                link_token_create_request (LinkTokenCreateRequest):

            Keyword Args:
                plaid_version (str, none_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                LinkTokenCreateResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['link_token_create_request'] = \
                link_token_create_request
            return self.call_with_http_info(**kwargs)

        self.link_token_create = _Endpoint(
            settings={
                'response_type': (LinkTokenCreateResponse,),
                'auth': [
                    'clientId',
                    'secret'
                ],
                'endpoint_path': '/link/token/create',
                'operation_id': 'link_token_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'link_token_create_request',
                    'plaid_version',
                ],
                'required': [
                    'link_token_create_request',
                ],
                'nullable': [
                    'plaid_version',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'link_token_create_request':
                        (LinkTokenCreateRequest,),
                    'plaid_version':
                        (str, none_type,),
                },
                'attribute_map': {
                    'plaid_version': 'Plaid-Version',
                },
                'location_map': {
                    'link_token_create_request': 'body',
                    'plaid_version': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__link_token_create
        )

        def __transactions_get(
            self,
            transactions_get_request,
            **kwargs
        ):
            """/transactions/get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transactions_get(transactions_get_request, async_req=True)
            >>> result = thread.get()

            Args:
                transactions_get_request (TransactionsGetRequest):

            Keyword Args:
                plaid_version (str, none_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionsGetResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['transactions_get_request'] = \
                transactions_get_request
            return self.call_with_http_info(**kwargs)

        self.transactions_get = _Endpoint(
            settings={
                'response_type': (TransactionsGetResponse,),
                'auth': [
                    'clientId',
                    'secret'
                ],
                'endpoint_path': '/transactions/get',
                'operation_id': 'transactions_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transactions_get_request',
                    'plaid_version',
                ],
                'required': [
                    'transactions_get_request',
                ],
                'nullable': [
                    'plaid_version',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transactions_get_request':
                        (TransactionsGetRequest,),
                    'plaid_version':
                        (str, none_type,),
                },
                'attribute_map': {
                    'plaid_version': 'Plaid-Version',
                },
                'location_map': {
                    'transactions_get_request': 'body',
                    'plaid_version': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__transactions_get
        )

        def __transactions_refresh(
            self,
            transactions_refresh_request,
            **kwargs
        ):
            """/transactions/refresh  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transactions_refresh(transactions_refresh_request, async_req=True)
            >>> result = thread.get()

            Args:
                transactions_refresh_request (TransactionsRefreshRequest):

            Keyword Args:
                plaid_version (str, none_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionsRefreshResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['transactions_refresh_request'] = \
                transactions_refresh_request
            return self.call_with_http_info(**kwargs)

        self.transactions_refresh = _Endpoint(
            settings={
                'response_type': (TransactionsRefreshResponse,),
                'auth': [
                    'clientId',
                    'secret'
                ],
                'endpoint_path': '/transactions/refresh',
                'operation_id': 'transactions_refresh',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transactions_refresh_request',
                    'plaid_version',
                ],
                'required': [
                    'transactions_refresh_request',
                ],
                'nullable': [
                    'plaid_version',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transactions_refresh_request':
                        (TransactionsRefreshRequest,),
                    'plaid_version':
                        (str, none_type,),
                },
                'attribute_map': {
                    'plaid_version': 'Plaid-Version',
                },
                'location_map': {
                    'transactions_refresh_request': 'body',
                    'plaid_version': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__transactions_refresh
        )

        def __transactions_sync(
            self,
            transactions_sync_request,
            **kwargs
        ):
            """/transactions/sync  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transactions_sync(transactions_sync_request, async_req=True)
            >>> result = thread.get()

            Args:
                transactions_sync_request (TransactionsSyncRequest):

            Keyword Args:
                plaid_version (str, none_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionsSyncResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['transactions_sync_request'] = \
                transactions_sync_request
            return self.call_with_http_info(**kwargs)

        self.transactions_sync = _Endpoint(
            settings={
                'response_type': (TransactionsSyncResponse,),
                'auth': [
                    'clientId',
                    'secret'
                ],
                'endpoint_path': '/transactions/sync',
                'operation_id': 'transactions_sync',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transactions_sync_request',
                    'plaid_version',
                ],
                'required': [
                    'transactions_sync_request',
                ],
                'nullable': [
                    'plaid_version',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transactions_sync_request':
                        (TransactionsSyncRequest,),
                    'plaid_version':
                        (str, none_type,),
                },
                'attribute_map': {
                    'plaid_version': 'Plaid-Version',
                },
                'location_map': {
                    'transactions_sync_request': 'body',
                    'plaid_version': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__transactions_sync
        )
