from Bio import SeqIOdef extract_annotations(genbank_file):    """    Extracts annotation information from a genbank file.    Parameters:    genbank_file (str): path to the genbank file    Returns:    list: a list of dictionaries containing the extracted annotation information    """    try:        annotations = []        for record in SeqIO.parse(genbank_file, "genbank"):            for feature in record.features:                if feature.type == "CDS":                    annotation_dict = {}                    if "gene" in feature.qualifiers:                        annotation_dict["gene"] = feature.qualifiers["gene"][0]                    if "product" in feature.qualifiers:                        annotation_dict["product"] = feature.qualifiers["product"][0]                    if "db_xref" in feature.qualifiers:                        for db_xref in feature.qualifiers["db_xref"]:                            if db_xref.startswith("ARO:"):                                annotation_dict["aro_accession"] = db_xref                                break                    annotations.append(annotation_dict)        return annotations    except Exception as e:        print(f"Error in extract_annotations: {e}")        return []def filter_annotations(annotations, filter_dict):    """    Filters annotation information based on user-defined criteria.    Parameters:    annotations (list): a list of dictionaries containing the annotation information    filter_dict (dict): a dictionary containing the filter criteria    Returns:    list: a list of dictionaries containing the filtered annotation information    """    try:        filtered_annotations = []        for annotation in annotations:            if all(key in annotation and annotation[key] == value for key, value in filter_dict.items()):                filtered_annotations.append(annotation)        return filtered_annotations    except Exception as e:        print(f"Error in filter_annotations: {e}")        return []def search_annotations(annotations, query):    """    Searches annotation information based on a user-defined query.    Parameters:    annotations (list): a list of dictionaries containing the annotation information    query (str): the user-defined query    Returns:    list: a list of dictionaries containing the matching annotation information    """    try:        matched_annotations = []        for annotation in annotations:            if query in str(annotation):                matched_annotations.append(annotation)        return matched_annotations    except Exception as e:        print(f"Error in search_annotations: {e}")        return []