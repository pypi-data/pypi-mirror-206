
#THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DO NOT CHANGE MANUALLY

from aipha_geo_solutions.webservice_api import AiphaClient, command_request, running_services_request, check_services_completed
import time

def list_running_services(client):

  return running_services_request(
        client.get_username(),
        client.get_token(),
        client.get_server_address())


def wait_for_completion(client,
  services):
  
  completed = False
  while not completed:
    time.sleep(10)
    completed =  check_services_completed(
        client.get_username(),
        client.get_token(),
        client.get_server_address(),
        services)


def point_cloud_classification_inference(client,
   file_in='file.laz',
   file_out='classified_file.laz',
   model_path='model_path',
   cols_data='x,y,z,intensity',
   cols_labels='classification',
   instance_type='P2'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "point cloud classification inference",
    all_parameters,
    client.get_server_address())


def convert_laz_point_formats(client,
   file_in='file.laz',
   file_out='converted_file.laz',
   format=7,
   instance_type='P2'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "convert laz point formats",
    all_parameters,
    client.get_server_address())


def point_cloud_crop_circle(client,
   in_file='file.laz',
   out_file='classified_file.laz',
   latitude=0,
   longitude=0,
   radius=1,
   instance_type='P2'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "point cloud crop circle",
    all_parameters,
    client.get_server_address())


def union_point_clouds(client,
   in_files='file.laz',
   out_file='converted_file.laz',
   instance_type='P2'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "union point clouds",
    all_parameters,
    client.get_server_address())


def point_cloud_filter_label_noise(client,
   file_in_data='file.laz',
   file_in_labels='converted_file.laz',
   file_out='converted_file.laz',
   k_nearest_neighbours=5,
   sigma=10,
   dim=3,
   invalid_label=0,
   instance_type='P2'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "point cloud filter label noise",
    all_parameters,
    client.get_server_address())


def segment_objects(client,
   in_points_file='file.laz',
   in_labels_file='file.laz',
   out_directory='objects',
   out_prefix='object',
   label_col='classification',
   object_class=6,
   max_distance=1,
   min_points=1,
   instance_type='P2'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "segment objects",
    all_parameters,
    client.get_server_address())


def select_center_object(client,
   in_directory='objects',
   out_file='selected.laz',
   latitude=1,
   longitude=1,
   instance_type='P2'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "select center object",
    all_parameters,
    client.get_server_address())


def assign_point_labels(client,
   file_source_in='file.laz',
   file_labels_in='file.laz',
   file_source_out='converted_file.laz',
   instance_type='P2'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "assign point labels",
    all_parameters,
    client.get_server_address())


def select_points_by_value(client,
   file_source_in='file.laz',
   min_value=1,
   max_value=1,
   attribute='classification',
   file_source_out='selected.laz',
   instance_type='P2'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "select points by value",
    all_parameters,
    client.get_server_address())


def download_data_to_cloud(client,
   url='',
   protocol='',
   username='',
   password='',
   port=21,
   download_type=0,
   destination='/data',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "download data to cloud",
    all_parameters,
    client.get_server_address())


def upload_data_from_cloud(client,
   url='',
   protocol='',
   username='',
   password='',
   port=21,
   target='/data',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "upload data from cloud",
    all_parameters,
    client.get_server_address())


def remove_files_from_cloud(client,
   target='/files',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "remove files from cloud",
    all_parameters,
    client.get_server_address())


def create_directory_in_cloud(client,
   destination='/files',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "create directory in cloud",
    all_parameters,
    client.get_server_address())


def qc_classification(client,
   project_id='',
   year='2022',
   lidar_new_data_folder='in/',
   out_folder='out/',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "qc classification",
    all_parameters,
    client.get_server_address())


def lidar_completeness(client,
   project_id='',
   year='2022',
   lidar_new_data_folder='in/',
   out_folder='out/',
   lidar_new_shp_file='out/',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "lidar completeness",
    all_parameters,
    client.get_server_address())


def ortho_completeness(client,
   project_id='',
   year='2022',
   orthophoto_folder='in/',
   out_folder='out/',
   orthophoto_new_shp_file='out/',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "ortho completeness",
    all_parameters,
    client.get_server_address())


def vegetation_consistency(client,
   project_id='',
   year='2022',
   lidar_old_data_reduced_folder='in/',
   lidar_new_data_reduced_folder='in/',
   out_folder='out/',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "vegetation consistency",
    all_parameters,
    client.get_server_address())


def generate_orthophoto_subset(client,
   trasse_id='',
   mapping_file='in/',
   orthophoto_path='in/',
   subset_path='out/',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "generate orthophoto subset",
    all_parameters,
    client.get_server_address())


def sg_qc_data_processing_init(client,
   ftp_server='',
   ftp_user='',
   ftp_password='',
   ftp_port=21,
   ftp_folder='/QC-AIPHA',
   processing_folder='/processing',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "sg qc data processing init",
    all_parameters,
    client.get_server_address())


def sg_qc_data_processing(client,
   ftp_server='',
   ftp_user='',
   ftp_password='',
   ftp_port=21,
   ftp_data_folder='',
   ftp_ortho_folders='',
   processing_folder='/processing',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "sg qc data processing",
    all_parameters,
    client.get_server_address())


def tower_displacement(client,
   laz_in_file_new='new.laz',
   laz_in_file_old='old.laz',
   laz_in_file_ref='ref.laz',
   results_out_file='results.csv',
   plots_out_folder='plots',
   year_new='2023',
   year_old='2021',
   year_ref='2019',
   tower_name='1010x001',
   instance_type='P2'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "tower displacement",
    all_parameters,
    client.get_server_address())


def las2las(client,
   i='file.las',
   o='file.las',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "las2las",
    all_parameters,
    client.get_server_address())


def sleep_infinity(client,
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "sleep infinity",
    all_parameters,
    client.get_server_address())
