(undo-tree-save-format-version . 1)
"4b3a33296d44bb2839fa75277f5ce89373e1e269"
[nil nil nil nil (25672 17565 829459 871000) 0 nil]
([nil nil ((#("        elif isinstance(when, When):
            when = when.abs()
" 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 23 (face font-lock-builtin-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t) 35 49 (fontified t) 49 53 (face font-lock-variable-name-face fontified t) 53 61 (fontified t) 61 64 (face font-lock-builtin-face fontified t) 64 65 (face (rainbow-delimiters-depth-1-face) fontified t) 65 66 (face (rainbow-delimiters-depth-1-face) fontified t) 66 67 (fontified t)) . 2604) (undo-tree-id7 . -66) (undo-tree-id8 . -37) (undo-tree-id9 . -67) (undo-tree-id10 . -30) (undo-tree-id11 . -34) (undo-tree-id12 . -30) (undo-tree-id13 . -66) (undo-tree-id14 . -30) (undo-tree-id15 . -30) (undo-tree-id16 . -66) (undo-tree-id17 . -67) (undo-tree-id18 . -30) (undo-tree-id19 . -30) (undo-tree-id20 . -30) (undo-tree-id21 . -66) (undo-tree-id22 . -66) (undo-tree-id23 . -30) (undo-tree-id24 . -66) (undo-tree-id25 . -67) (undo-tree-id26 . -66) 2670 (t 25671 63533 985097 211000)) nil (25672 17565 829456 467000) 0 nil])
([nil nil ((2619 . 2630) (#("f" 0 1 (fontified t)) . -2619) (undo-tree-id0 . -1) (2612 . 2620) (#("    " 0 4 (fontified t)) . -2612) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) 2616 (2603 . 2616) 2575) nil (25672 17565 829433 435000) 0 nil])
([nil nil ((2612 . 2617) (#("    " 0 4 (fontified t)) . -2612) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) 2616 (#("=" 0 1 (fontified t)) . -2616) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 2617 (2616 . 2617) (2603 . 2616) (t 25672 17565 849415 624000) 2600) nil (25672 17572 465631 420000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -2630) (undo-tree-id27 . -8) (undo-tree-id28 . -8) (undo-tree-id29 . -8) (2618 . 2630) 2630) nil (25672 17572 465613 256000) 0 nil])
([nil nil ((#("
class When:
    def __init__(self, time):
        if isinstance(time, When):
            return time
        self._time = time

    def abs(self, time):
        return self._time

    def next_check(self, time, first=False):
        return self._time
    
    def cond(self):
        return None


NEVER = When(INFINITY)


" 0 1 (fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 11 (face font-lock-type-face fontified t) 11 17 (fontified t) 17 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 29 (face font-lock-function-name-face fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 34 (face font-lock-keyword-face fontified t) 34 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-1-face) fontified t) 41 51 (fontified t) 51 53 (face font-lock-keyword-face fontified t) 53 54 (fontified t) 54 64 (face font-lock-builtin-face fontified t) 64 65 (face (rainbow-delimiters-depth-1-face) fontified t) 65 75 (fontified t) 75 76 (face (rainbow-delimiters-depth-1-face) fontified t) 76 90 (fontified t) 90 96 (face font-lock-keyword-face fontified t) 96 110 (fontified t) 110 114 (face font-lock-keyword-face fontified t) 114 133 (fontified t) 133 136 (face font-lock-keyword-face fontified t) 136 137 (fontified t) 137 140 (face font-lock-function-name-face fontified t) 140 141 (face (rainbow-delimiters-depth-1-face) fontified t) 141 145 (face font-lock-keyword-face fontified t) 145 151 (fontified t) 151 152 (face (rainbow-delimiters-depth-1-face) fontified t) 152 162 (fontified t) 162 164 (face font-lock-keyword-face fontified t) 164 168 (face font-lock-keyword-face fontified t) 168 169 (fontified t) 169 173 (face font-lock-keyword-face fontified t) 173 185 (fontified t) 185 188 (face font-lock-keyword-face fontified t) 188 189 (fontified t) 189 199 (face font-lock-function-name-face fontified t) 199 200 (face (rainbow-delimiters-depth-1-face) fontified t) 200 204 (face font-lock-keyword-face fontified t) 204 218 (fontified t) 218 223 (face font-lock-constant-face fontified t) 223 224 (face (rainbow-delimiters-depth-1-face) fontified t) 224 234 (fontified t) 234 240 (face font-lock-keyword-face fontified t) 240 241 (fontified t) 241 245 (face font-lock-keyword-face fontified t) 245 261 (fontified t) 261 264 (face font-lock-keyword-face fontified t) 264 265 (fontified t) 265 269 (face font-lock-function-name-face fontified t) 269 270 (face (rainbow-delimiters-depth-1-face) fontified t) 270 274 (face font-lock-keyword-face fontified t) 274 275 (face (rainbow-delimiters-depth-1-face) fontified t) 275 285 (fontified t) 285 291 (face font-lock-keyword-face fontified t) 291 292 (fontified t) 292 296 (face font-lock-constant-face fontified t) 296 299 (fontified t) 299 304 (face font-lock-variable-name-face fontified t) 304 311 (fontified t) 311 312 (face (rainbow-delimiters-depth-1-face) fontified t) 312 320 (fontified t) 320 321 (face (rainbow-delimiters-depth-1-face) fontified t) 321 324 (fontified t)) . 337) (undo-tree-id85 . -323) (undo-tree-id86 . -323) (undo-tree-id87 . -324) (undo-tree-id88 . -323) (undo-tree-id89 . -323) (undo-tree-id90 . -181) (undo-tree-id91 . -181) (undo-tree-id92 . -226) (undo-tree-id93 . -226) (undo-tree-id94 . -252) (undo-tree-id95 . -252) (undo-tree-id96 . -257) (undo-tree-id97 . -257) (undo-tree-id98 . -277) (undo-tree-id99 . -277) (undo-tree-id100 . -90) (undo-tree-id101 . -101) (undo-tree-id102 . -7) (undo-tree-id103 . -11) (undo-tree-id104 . -71) (undo-tree-id105 . -75) (undo-tree-id106 . -307) (undo-tree-id107 . -311) (undo-tree-id108 . -7) (undo-tree-id109 . -323) (undo-tree-id110 . -7) (undo-tree-id111 . -7) (undo-tree-id112 . -7) (undo-tree-id113 . -71) (undo-tree-id114 . -7) (undo-tree-id115 . -1) (undo-tree-id116 . -41) (undo-tree-id117 . -71) (undo-tree-id118 . -1) (undo-tree-id119 . -11) (undo-tree-id120 . -41) (undo-tree-id121 . -1) (undo-tree-id122 . -11) (undo-tree-id123 . -1) (undo-tree-id124 . -11) (undo-tree-id125 . -41) (undo-tree-id126 . -11) (undo-tree-id127 . -71) (undo-tree-id128 . -41) (undo-tree-id129 . -41) (undo-tree-id130 . -71) (undo-tree-id131 . -11) (undo-tree-id132 . -41) (undo-tree-id133 . -11) (undo-tree-id134 . -324) (undo-tree-id135 . -323) (undo-tree-id136 . -128) (undo-tree-id137 . -128) (undo-tree-id138 . -180) (undo-tree-id139 . -128) (undo-tree-id140 . -180) (undo-tree-id141 . -252) (undo-tree-id142 . -180) (undo-tree-id143 . -252) (undo-tree-id144 . -297) (undo-tree-id145 . -252) (undo-tree-id146 . -297) (undo-tree-id147 . -322) (undo-tree-id148 . -297) (undo-tree-id149 . -323) (undo-tree-id150 . -322) (undo-tree-id151 . -323) (undo-tree-id152 . -324) 660 (t 25672 17572 481352 919000)) nil (25672 17592 330625 930000) 0 nil])
([nil nil ((#("class Delta(When):
    def __init__(self, delta):
        self._delta = delta

    def abs(self, time):
        return time + self._delta

    def __eq__(self, other):
        if isinstance(other, Delta):
            return self._delta == other._delta
        return False

    def next_check(self, time, first=False):
        return time + self._delta

    def __repr__(self):
        return str(f\"Delta({self._delta})\")

" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 11 (face font-lock-type-face fontified t) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t) 12 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-1-face) fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 23 (fontified t) 23 26 (face font-lock-keyword-face fontified t) 26 27 (fontified t) 27 35 (face font-lock-function-name-face fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 40 (face font-lock-keyword-face fontified t) 40 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-1-face) fontified t) 48 58 (fontified t) 58 62 (face font-lock-keyword-face fontified t) 62 83 (fontified t) 83 86 (face font-lock-keyword-face fontified t) 86 87 (fontified t) 87 90 (face font-lock-function-name-face fontified t) 90 91 (face (rainbow-delimiters-depth-1-face) fontified t) 91 95 (face font-lock-keyword-face fontified t) 95 101 (fontified t) 101 102 (face (rainbow-delimiters-depth-1-face) fontified t) 102 112 (fontified t) 112 118 (face font-lock-keyword-face fontified t) 118 126 (fontified t) 126 130 (face font-lock-keyword-face fontified t) 130 143 (fontified t) 143 146 (face font-lock-keyword-face fontified t) 146 147 (fontified t) 147 153 (face font-lock-function-name-face fontified t) 153 154 (face (rainbow-delimiters-depth-1-face) fontified t) 154 158 (face font-lock-keyword-face fontified t) 158 165 (fontified t) 165 166 (face (rainbow-delimiters-depth-1-face) fontified t) 166 176 (fontified t) 176 178 (face font-lock-keyword-face fontified t) 178 179 (fontified t) 179 189 (face font-lock-builtin-face fontified t) 189 190 (face (rainbow-delimiters-depth-1-face) fontified t) 190 202 (fontified t) 202 203 (face (rainbow-delimiters-depth-1-face) fontified t) 203 217 (fontified t) 217 223 (face font-lock-keyword-face fontified t) 223 224 (fontified t) 224 228 (face font-lock-keyword-face fontified t) 228 260 (fontified t) 260 266 (face font-lock-keyword-face fontified t) 266 267 (fontified t) 267 272 (face font-lock-constant-face fontified t) 272 278 (fontified t) 278 281 (face font-lock-keyword-face fontified t) 281 282 (fontified t) 282 292 (face font-lock-function-name-face fontified t) 292 293 (face (rainbow-delimiters-depth-1-face) fontified t) 293 297 (face font-lock-keyword-face fontified t) 297 311 (fontified t) 311 316 (face font-lock-constant-face fontified t) 316 317 (face (rainbow-delimiters-depth-1-face) fontified t) 317 327 (fontified t) 327 333 (face font-lock-keyword-face fontified t) 333 340 (fontified t) 340 341 (fontified t) 341 345 (face font-lock-keyword-face fontified t) 345 358 (fontified t) 358 361 (face font-lock-keyword-face fontified t) 361 362 (fontified t) 362 370 (face font-lock-function-name-face fontified t) 370 371 (face (rainbow-delimiters-depth-1-face) fontified t) 371 375 (face font-lock-keyword-face fontified t) 375 376 (face (rainbow-delimiters-depth-1-face) fontified t) 376 386 (fontified t) 386 392 (face font-lock-keyword-face fontified t) 392 393 (fontified t) 393 396 (face font-lock-builtin-face fontified t) 396 397 (face (rainbow-delimiters-depth-1-face) fontified t) 397 398 (fontified t) 398 399 (face font-lock-string-face fontified t syntax-table (15)) 399 419 (face font-lock-string-face fontified t) 419 420 (face font-lock-string-face fontified t syntax-table (15)) 420 421 (face (rainbow-delimiters-depth-1-face) fontified t) 421 423 (fontified t)) . 337) (undo-tree-id46 . -422) (undo-tree-id47 . -409) (undo-tree-id48 . -422) (undo-tree-id49 . -423) (undo-tree-id50 . -409) (undo-tree-id51 . -6) (undo-tree-id52 . -6) (undo-tree-id53 . -422) (undo-tree-id54 . -422) (undo-tree-id55 . -104) (undo-tree-id56 . -104) (undo-tree-id57 . -274) (undo-tree-id58 . -274) (undo-tree-id59 . -319) (undo-tree-id60 . -319) (undo-tree-id61 . -12) (undo-tree-id62 . -16) (undo-tree-id63 . -422) (undo-tree-id64 . -18) (undo-tree-id65 . -386) (undo-tree-id66 . -386) (undo-tree-id67 . -18) (undo-tree-id68 . -423) (undo-tree-id69 . -422) (undo-tree-id70 . -78) (undo-tree-id71 . -78) (undo-tree-id72 . -138) (undo-tree-id73 . -78) (undo-tree-id74 . -138) (undo-tree-id75 . -273) (undo-tree-id76 . -138) (undo-tree-id77 . -273) (undo-tree-id78 . -353) (undo-tree-id79 . -273) (undo-tree-id80 . -353) (undo-tree-id81 . -422) (undo-tree-id82 . -353) (undo-tree-id83 . -422) (undo-tree-id84 . -423) 759) nil (25672 17592 329899 245000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 337) (undo-tree-id43 . -1) (undo-tree-id44 . 1) (undo-tree-id45 . -1)) nil (25672 17592 329863 766000) 0 nil])
([nil nil ((336 . 337) 336) nil (25672 17592 329845 631000) 0 nil])
([nil nil ((#("
class BaseCond:
    def __init__(self, msg=None, delta=1, eager=False):
        self._msg = msg
        self._delta = delta
        self.eager = eager

    def next_check(self, time, first=False):
        if first and self.eager:
            return time
        if self._delta:
            return time + self._delta
        return None

    def return_value(self, agent):
        return None
    
    def cond(self):
        return self
    
    def abs(self, time):
        return time + self._delta

    def __repr__(self):
        return self._msg or self.__class__.__name__


class Cond(BaseCond):
    def __init__(self, func, *args, **kwargs):
        self._func = func
        super().__init__(*args, **kwargs)

    def ready(self, agent):
        return self._func(agent)

    def __repr__(self):
        if self._msg:
            return self._msg
        return str(f'Cond(\"{dedent(getsource(self._func)).strip()}\")')
" 0 1 (fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 15 (face font-lock-type-face fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 21 (fontified t) 21 24 (face font-lock-keyword-face fontified t) 24 25 (fontified t) 25 33 (face font-lock-function-name-face fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 38 (face font-lock-keyword-face fontified t) 38 44 (fontified t) 44 48 (face font-lock-constant-face fontified t) 48 56 (fontified t) 56 57 (face highlight-numbers-number fontified t) 57 65 (fontified t) 65 70 (face font-lock-constant-face fontified t) 70 71 (face (rainbow-delimiters-depth-1-face) fontified t) 71 81 (fontified t) 81 85 (face font-lock-keyword-face fontified t) 85 95 (fontified t) 95 105 (fontified t) 105 109 (face font-lock-keyword-face fontified t) 109 133 (fontified t) 133 137 (face font-lock-keyword-face fontified t) 137 157 (fontified t) 157 160 (face font-lock-keyword-face fontified t) 160 161 (fontified t) 161 171 (face font-lock-function-name-face fontified t) 171 172 (face (rainbow-delimiters-depth-1-face) fontified t) 172 176 (face font-lock-keyword-face fontified t) 176 190 (fontified t) 190 195 (face font-lock-constant-face fontified t) 195 196 (face (rainbow-delimiters-depth-1-face) fontified t) 196 206 (fontified t) 206 208 (face font-lock-keyword-face fontified t) 208 215 (fontified t) 215 218 (face font-lock-keyword-face fontified t) 218 219 (fontified t) 219 223 (face font-lock-keyword-face fontified t) 223 243 (fontified t) 243 249 (face font-lock-keyword-face fontified t) 249 263 (fontified t) 263 265 (face font-lock-keyword-face fontified t) 265 266 (fontified t) 266 270 (face font-lock-keyword-face fontified t) 270 291 (fontified t) 291 297 (face font-lock-keyword-face fontified t) 297 305 (fontified t) 305 309 (face font-lock-keyword-face fontified t) 309 325 (fontified t) 325 331 (face font-lock-keyword-face fontified t) 331 332 (fontified t) 332 336 (face font-lock-constant-face fontified t) 336 342 (fontified t) 342 345 (face font-lock-keyword-face fontified t) 345 346 (fontified t) 346 358 (face font-lock-function-name-face fontified t) 358 359 (face (rainbow-delimiters-depth-1-face) fontified t) 359 363 (face font-lock-keyword-face fontified t) 363 370 (fontified t) 370 371 (face (rainbow-delimiters-depth-1-face) fontified t) 371 381 (fontified t) 381 387 (face font-lock-keyword-face fontified t) 387 388 (fontified t) 388 392 (face font-lock-constant-face fontified t) 392 402 (fontified t) 402 405 (face font-lock-keyword-face fontified t) 405 406 (fontified t) 406 410 (face font-lock-function-name-face fontified t) 410 411 (face (rainbow-delimiters-depth-1-face) fontified t) 411 415 (face font-lock-keyword-face fontified t) 415 416 (face (rainbow-delimiters-depth-1-face) fontified t) 416 417 (fontified t) 417 426 (fontified t) 426 432 (face font-lock-keyword-face fontified t) 432 433 (fontified t) 433 437 (face font-lock-keyword-face fontified t) 437 447 (fontified t) 447 450 (face font-lock-keyword-face fontified t) 450 451 (fontified t) 451 454 (face font-lock-function-name-face fontified t) 454 455 (face (rainbow-delimiters-depth-1-face) fontified t) 455 459 (face font-lock-keyword-face fontified t) 459 465 (fontified t) 465 466 (face (rainbow-delimiters-depth-1-face) fontified t) 466 476 (fontified t) 476 482 (face font-lock-keyword-face fontified t) 482 490 (fontified t) 490 494 (face font-lock-keyword-face fontified t) 494 501 (fontified t) 501 507 (fontified t) 507 510 (face font-lock-keyword-face fontified t) 510 511 (fontified t) 511 519 (face font-lock-function-name-face fontified t) 519 520 (face (rainbow-delimiters-depth-1-face) fontified t) 520 524 (face font-lock-keyword-face fontified t) 524 525 (face (rainbow-delimiters-depth-1-face) fontified t) 525 535 (fontified t) 535 541 (face font-lock-keyword-face fontified t) 541 542 (fontified t) 542 546 (face font-lock-keyword-face fontified t) 546 552 (fontified t) 552 554 (face font-lock-keyword-face fontified t) 554 555 (fontified t) 555 559 (face font-lock-keyword-face fontified t) 559 570 (fontified t) 570 578 (face font-lock-builtin-face fontified t) 578 581 (fontified t) 581 586 (face font-lock-keyword-face fontified t) 586 587 (fontified t) 587 591 (face font-lock-type-face fontified t) 591 592 (face (rainbow-delimiters-depth-1-face) fontified t) 592 595 (fontified t) 595 600 (fontified t) 600 601 (face (rainbow-delimiters-depth-1-face) fontified t) 601 607 (fontified t) 607 610 (face font-lock-keyword-face fontified t) 610 611 (fontified t) 611 619 (face font-lock-function-name-face fontified t) 619 620 (face (rainbow-delimiters-depth-1-face) fontified t) 620 624 (face font-lock-keyword-face fontified t) 624 647 (fontified t) 647 648 (face (rainbow-delimiters-depth-1-face) fontified t) 648 658 (fontified t) 658 662 (face font-lock-keyword-face fontified t) 662 684 (fontified t) 684 689 (face font-lock-builtin-face fontified t) 689 690 (face (rainbow-delimiters-depth-1-face) fontified t) 690 691 (face (rainbow-delimiters-depth-1-face) fontified t) 691 700 (fontified t) 700 701 (face (rainbow-delimiters-depth-1-face) fontified t) 701 716 (fontified t) 716 717 (face (rainbow-delimiters-depth-1-face) fontified t) 717 723 (fontified t) 723 726 (face font-lock-keyword-face fontified t) 726 727 (fontified t) 727 732 (face font-lock-function-name-face fontified t) 732 733 (face (rainbow-delimiters-depth-1-face) fontified t) 733 737 (face font-lock-keyword-face fontified t) 737 744 (fontified t) 744 745 (face (rainbow-delimiters-depth-1-face) fontified t) 745 755 (fontified t) 755 761 (face font-lock-keyword-face fontified t) 761 762 (fontified t) 762 766 (face font-lock-keyword-face fontified t) 766 772 (fontified t) 772 773 (face (rainbow-delimiters-depth-1-face) fontified t) 773 778 (fontified t) 778 779 (face (rainbow-delimiters-depth-1-face) fontified t) 779 785 (fontified t) 785 788 (face font-lock-keyword-face fontified t) 788 789 (fontified t) 789 797 (face font-lock-function-name-face fontified t) 797 798 (face (rainbow-delimiters-depth-1-face) fontified t) 798 802 (face font-lock-keyword-face fontified t) 802 803 (face (rainbow-delimiters-depth-1-face) fontified t) 803 813 (fontified t) 813 815 (face font-lock-keyword-face fontified t) 815 816 (fontified t) 816 820 (face font-lock-keyword-face fontified t) 820 839 (fontified t) 839 845 (face font-lock-keyword-face fontified t) 845 846 (fontified t) 846 850 (face font-lock-keyword-face fontified t) 850 864 (fontified t) 864 870 (face font-lock-keyword-face fontified t) 870 871 (fontified t) 871 874 (face font-lock-builtin-face fontified t) 874 875 (face (rainbow-delimiters-depth-1-face) fontified t) 875 876 (fontified t) 876 877 (face font-lock-string-face fontified t syntax-table (15)) 877 917 (face font-lock-string-face fontified t) 917 924 (face font-lock-string-face fontified t) 924 925 (face font-lock-string-face fontified t syntax-table (15)) 925 926 (face (rainbow-delimiters-depth-1-face) fontified t) 926 927 (fontified t)) . 337) (undo-tree-id159 . -878) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -878) (undo-tree-id163 . -926) (undo-tree-id164 . -579) (undo-tree-id165 . 927) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -17) (undo-tree-id170 . -17) (undo-tree-id171 . -153) (undo-tree-id172 . -153) (undo-tree-id173 . -231) (undo-tree-id174 . -231) (undo-tree-id175 . -279) (undo-tree-id176 . -279) (undo-tree-id177 . -317) (undo-tree-id178 . -317) (undo-tree-id179 . -393) (undo-tree-id180 . -393) (undo-tree-id181 . -398) (undo-tree-id182 . -398) (undo-tree-id183 . -418) (undo-tree-id184 . -418) (undo-tree-id185 . -438) (undo-tree-id186 . -438) (undo-tree-id187 . -443) (undo-tree-id188 . -443) (undo-tree-id189 . -468) (undo-tree-id190 . -468) (undo-tree-id191 . -719) (undo-tree-id192 . -719) (undo-tree-id193 . -96) (undo-tree-id194 . -96) (undo-tree-id195 . -97) (undo-tree-id196 . -96) (undo-tree-id197 . -1) (undo-tree-id198 . -337) (undo-tree-id199 . 52) (undo-tree-id200 . -881) (undo-tree-id201 . -927) (undo-tree-id202 . -878) (undo-tree-id203 . -878) (undo-tree-id204 . -780) (undo-tree-id205 . -718) (undo-tree-id206 . -780) (undo-tree-id207 . -337) (undo-tree-id208 . -718) (undo-tree-id209 . -580) (undo-tree-id210 . -718) (undo-tree-id211 . -337) (undo-tree-id212 . -580) (undo-tree-id213 . -502) (undo-tree-id214 . -580) (undo-tree-id215 . -337) (undo-tree-id216 . -502) (undo-tree-id217 . -438) (undo-tree-id218 . -502) (undo-tree-id219 . -337) (undo-tree-id220 . -438) (undo-tree-id221 . -393) (undo-tree-id222 . -438) (undo-tree-id223 . -337) (undo-tree-id224 . -393) (undo-tree-id225 . -337) (undo-tree-id226 . -393) (undo-tree-id227 . -337) (undo-tree-id228 . -337) (undo-tree-id229 . -152) (undo-tree-id230 . -337) (undo-tree-id231 . -337) (undo-tree-id232 . -152) (undo-tree-id233 . -152) (undo-tree-id234 . -152) (undo-tree-id235 . -927) (t 25672 17592 353164 275000)) nil (25672 20123 447545 633000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 337) (undo-tree-id153 . 1) (undo-tree-id154 . 1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1)) nil (25672 20123 447473 992000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1859) (undo-tree-id241 . -8) (undo-tree-id242 . -8) (undo-tree-id243 . -8) (undo-tree-id244 . -8) 1867 (1858 . 1867) (t 25672 20123 477183 589000) 1794) nil (25672 20307 442007 375000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1860) (undo-tree-id239 . -1) (undo-tree-id240 . -1)) nil (25672 20307 442000 284000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1860) (undo-tree-id236 . -8) (undo-tree-id237 . -8) (undo-tree-id238 . -8) 1868 (1859 . 1868) 1859) nil (25672 20307 441991 682000) 0 nil])
([nil nil ((#("            self._next.pop(agent.unique_id, None)
" 0 12 (fontified t) 12 16 (face font-lock-keyword-face fontified t) 16 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 44 (fontified t) 44 48 (face font-lock-constant-face fontified t) 48 49 (face (rainbow-delimiters-depth-1-face) fontified t) 49 50 (fontified t)) . 2053) (undo-tree-id245 . -49) (undo-tree-id246 . -50) (undo-tree-id247 . -27) (undo-tree-id248 . -27) (undo-tree-id249 . -27) (undo-tree-id250 . -27) (undo-tree-id251 . -31) (undo-tree-id252 . -31) (undo-tree-id253 . -17) (undo-tree-id254 . -22) (undo-tree-id255 . -17) (undo-tree-id256 . -17) (undo-tree-id257 . -17) (undo-tree-id258 . -17) (undo-tree-id259 . -17) (undo-tree-id260 . -17) (undo-tree-id261 . -17) (undo-tree-id262 . -17) (undo-tree-id263 . -50) (undo-tree-id264 . -17) (undo-tree-id265 . -17) (undo-tree-id266 . -50) (undo-tree-id267 . -17) (undo-tree-id268 . -17) (undo-tree-id269 . -50) (undo-tree-id270 . -17) (undo-tree-id271 . -17) (undo-tree-id272 . -50) (undo-tree-id273 . -17) (undo-tree-id274 . -22) (undo-tree-id275 . -17) (undo-tree-id276 . -50) 2070 (t 25672 20307 455430 340000)) nil (25672 20353 555296 888000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1994) (undo-tree-id287 . 1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (t 25672 20353 574985 786000)) nil (25672 20368 152314 714000) 0 nil])
([nil nil ((1892 . 1894) (#("9" 0 1 (fontified t)) . -1892) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (#("0" 0 1 (fontified t)) . -1893) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) 1894 (1889 . 1894) (1868 . 1889) (1859 . 1868) 1859) nil (25672 20368 152302 41000) 0 nil])
([nil nil ((1008 . 1013) (987 . 1008) (974 . 987) (t 25672 20368 170844 735000) 974) nil (25672 20580 920997 75000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -983) (975 . 983) 1012) nil (25672 20580 920987 952000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1191) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (#("+" 0 1 (fontified t)) . -1192) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#(" " 0 1 (fontified t)) . -1193) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (#("1" 0 1 (face highlight-numbers-number fontified t)) . -1194) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) 1195 (t 25672 20580 936772 166000)) nil (25672 20768 237935 368000) 0 nil])
([nil nil ((#("        import pdb;pdb.set_trace()
" 0 8 (fontified t) 8 14 (face font-lock-keyword-face fontified t) 14 23 (fontified t) 23 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 35 (fontified t)) . 975) (undo-tree-id347 . -34) (undo-tree-id348 . -35) (undo-tree-id349 . 1) (undo-tree-id350 . -33) (undo-tree-id351 . -33) (undo-tree-id352 . -33) (undo-tree-id353 . -33) (undo-tree-id354 . -35) (undo-tree-id355 . -35) (undo-tree-id356 . -19) (undo-tree-id357 . -22) (undo-tree-id358 . -15) (undo-tree-id359 . -18) (undo-tree-id360 . -15) (undo-tree-id361 . -15) (undo-tree-id362 . -15) (undo-tree-id363 . -15) (undo-tree-id364 . -35) 990 (t 25672 20768 254927 788000)) nil (25672 20792 683873 830000) 0 nil])
([nil nil ((#("        import pdb;pdb.set_trace()
" 0 8 (fontified t) 8 14 (face font-lock-keyword-face fontified t) 14 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 35 (fontified t)) . 1856) (undo-tree-id324 . -34) (undo-tree-id325 . -33) (undo-tree-id326 . -33) (undo-tree-id327 . -33) (undo-tree-id328 . -33) (undo-tree-id329 . -33) (undo-tree-id330 . -33) (undo-tree-id331 . -33) (undo-tree-id332 . -35) (undo-tree-id333 . -33) (undo-tree-id334 . -33) (undo-tree-id335 . -33) (undo-tree-id336 . -33) (undo-tree-id337 . -35) (undo-tree-id338 . -35) (undo-tree-id339 . -15) (undo-tree-id340 . -18) (undo-tree-id341 . -19) (undo-tree-id342 . -22) (undo-tree-id343 . -15) (undo-tree-id344 . -15) (undo-tree-id345 . -15) (undo-tree-id346 . -35) 1871) nil (25672 20792 683855 981000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1856) (undo-tree-id322 . -1) (undo-tree-id323 . -1)) nil (25672 20792 683812 222000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1678) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) 1679 (t 25672 20792 698686 90000)) nil (25672 56173 80228 200000) 0 nil])
([nil nil ((1712 . 1718) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1712) (undo-tree-id369 . -1) (1709 . 1713) (#("%" 0 1 (fontified t)) . -1709) (undo-tree-id370 . -1) (undo-tree-id371 . -1) 1710 (1707 . 1710)) nil (25672 56173 80220 914000) 0 nil])
([nil nil ((1695 . 1697)) nil (25672 56173 80215 842000) 0 nil])
([nil nil ((#("{self.time}" 0 11 (face font-lock-string-face fontified t)) . 1697) (undo-tree-id367 . -10) (undo-tree-id368 . 11)) nil (25672 56173 80213 513000) 0 nil])
([nil nil ((1817 . 1818) (#("f" 0 1 (fontified t)) . -1817) (undo-tree-id365 . -1) (1817 . 1818) (#("f" 0 1 (fontified t)) . -1817) (undo-tree-id366 . -1) 1818) nil (25672 56173 80204 908000) 0 nil])
([nil nil ((1835 . 1840) (1831 . 1835) (#("e" 0 1 (fontified t)) . -1831) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("r" 0 1 (fontified t)) . -1832) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#("." 0 1 (fontified t)) . -1833) (undo-tree-id385 . -1) (undo-tree-id386 . -1) 1834 (1827 . 1834) (apply yas--snippet-revive 1814 1828 #s(yas--snippet nil nil #s(yas--exit 1827 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1827 nil) 1 nil nil nil nil)) (1814 . 1828) (#("isEnabledFor($0)" 0 16 (fontified nil)) . 1814) (1814 . 1830) (#("isEnabledFor" 0 12 (fontified nil)) . -1814) (1814 . 1826) (#("isE" 0 3 (fontified t)) . -1814) (undo-tree-id387 . -3) 1817 (1805 . 1817) (#("f" 0 1 (fontified nil)) . -1805) (1800 . 1806) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1800) (undo-tree-id388 . -1) (1799 . 1801) (1790 . 1799) (t 25672 56173 100027 260000) 1790) nil (25672 56472 540082 999000) 0 nil])
([nil nil ((1841 . 1842)) nil (25672 56472 540068 824000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -1855) (1843 . 1855) 1893) nil (25672 56472 540066 617000) 0 nil])
([nil nil ((208 . 222) (207 . 208) 206) nil (25672 56472 540064 118000) 0 nil])
([nil nil ((#("import logging
" 0 6 (face font-lock-keyword-face fontified t) 6 14 (fontified t) 14 15 (fontified t)) . 208) (undo-tree-id377 . -14) (undo-tree-id378 . 1) (undo-tree-id379 . -15) (undo-tree-id380 . -13) 221) nil (25672 56472 540060 638000) 0 nil])
([nil nil ((nil rear-nonsticky nil 121 . 122) (#("
" 0 1 (fontified nil)) . -136) (121 . 137) 110) nil (25672 56472 540040 207000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1674 . 1675) (#("
" 0 1 (fontified nil)) . -1718) (1666 . 1719)) nil (25672 56483 464227 527000) 0 nil])
([nil nil ((#("        " 0 5 (fontified nil) 5 8 (fontified nil)) . -1731) (undo-tree-id393 . -8) (undo-tree-id394 . -8) (undo-tree-id395 . -8) (undo-tree-id396 . -8) (undo-tree-id397 . -8) (undo-tree-id398 . -8) (1719 . 1731) 1727) nil (25672 56483 464224 544000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -1782) (undo-tree-id389 . -12) (undo-tree-id390 . -12) (undo-tree-id391 . -12) (undo-tree-id392 . -12) 1794 (1781 . 1794) 1727) nil (25672 56483 464212 132000) 0 nil])
([nil nil ((3013 . 3026) (apply yas--snippet-revive 3000 3014 #s(yas--snippet nil nil #s(yas--exit 3013 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3013 nil) 2 nil nil nil nil)) (3000 . 3014) (#("isEnabledFor($0)" 0 16 (fontified nil)) . 3000) (3000 . 3016) (#("isEnabledFor" 0 12 (fontified nil)) . -3000) (3000 . 3012) (#("isE" 0 3 (fontified t)) . -3000) (undo-tree-id402 . -3) 3003 (2991 . 3003) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -2991) (undo-tree-id403 . -1) (2986 . 2992) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -2986) (undo-tree-id404 . -1) (2985 . 2987) (2976 . 2985) (t 25672 56483 484281 661000) 2975) nil (25672 56559 953515 421000) 0 nil])
([nil nil ((3027 . 3028)) nil (25672 56559 953501 905000) 0 nil])
([nil nil ((#("        " 0 7 (fontified nil) 7 8 (fontified nil)) . -3041) (undo-tree-id399 . -8) (undo-tree-id400 . -8) (undo-tree-id401 . -8) (3029 . 3041) 3079) nil (25672 56559 953493 32000) 0 nil])
([nil nil ((2158 . 2171) (apply yas--snippet-revive 2145 2159 #s(yas--snippet nil nil #s(yas--exit 2158 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2158 nil) 3 nil nil nil nil)) (2145 . 2159) (#("isEnabledFor($0)" 0 16 (fontified nil)) . 2145) (2145 . 2161) (#("isEnabledFor" 0 12 (fontified nil)) . -2145) (2145 . 2157) (#("is" 0 2 (face font-lock-keyword-face fontified t)) . -2145) (undo-tree-id409 . -2) 2147 (2136 . 2147) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -2136) (undo-tree-id410 . -1) (2131 . 2137) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -2131) (undo-tree-id411 . -1) (2130 . 2132) (2117 . 2130) (t 25672 56559 971357 858000) 2117) nil (25672 56589 221433 236000) 0 nil])
([nil nil ((2172 . 2173)) nil (25672 56589 221422 250000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -2190) (undo-tree-id405 . -12) (undo-tree-id406 . -12) (undo-tree-id407 . -12) (undo-tree-id408 . -12) (2174 . 2190) 2228) nil (25672 56589 221407 726000) 0 nil])
([nil nil ((2475 . 2488) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -2475) (undo-tree-id427 . -1) (2474 . 2476) (2461 . 2474) (t 25672 56589 235004 347000) 2438) nil (25672 57008 719153 248000) 0 nil])
([nil nil ((2477 . 2481)) nil (25672 57008 719149 643000) 0 nil])
([nil nil ((2492 . 2493)) nil (25672 57008 719148 349000) 0 nil])
([nil nil ((#("            if not getattr(agent, \"alive\", True):
" 0 10 (fontified t) 10 12 (fontified t) 12 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 17 (face font-lock-keyword-face fontified t) 17 18 (face font-lock-keyword-face fontified t) 18 19 (fontified t) 19 26 (face font-lock-builtin-face fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 31 (fontified t) 31 32 (fontified t) 32 34 (fontified t) 34 35 (face font-lock-string-face fontified t syntax-table (15)) 35 40 (face font-lock-string-face fontified t) 40 41 (face font-lock-string-face fontified t syntax-table (15)) 41 43 (fontified t) 43 47 (face font-lock-constant-face fontified t) 47 48 (face (rainbow-delimiters-depth-1-face) fontified t) 48 50 (fontified t)) . 2494) (undo-tree-id415 . -49) (undo-tree-id416 . -19) (undo-tree-id417 . -26) (undo-tree-id418 . -19) (undo-tree-id419 . -30) (undo-tree-id420 . -50) (undo-tree-id421 . -19) (undo-tree-id422 . -19) (undo-tree-id423 . 24) (undo-tree-id424 . -27) (undo-tree-id425 . 3) (undo-tree-id426 . -48) 2524) nil (25672 57008 719145 228000) 0 nil])
([nil nil ((#("            # Check status for MESA agents
" 0 12 (fontified t) 12 14 (face font-lock-comment-delimiter-face fontified t) 14 42 (face font-lock-comment-face fontified t) 42 43 (face font-lock-comment-face fontified t)) . 2419) (undo-tree-id412 . -42) (undo-tree-id413 . -30) (undo-tree-id414 . -43) 2449) nil (25672 57749 546338 720000) 0 nil])
([nil nil ((#("        self._next[agent.unique_id] = key
" 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t) 35 42 (fontified t)) . 1307) (undo-tree-id477 . -42) (undo-tree-id478 . -42) (undo-tree-id479 . -13) (undo-tree-id480 . -13) (undo-tree-id481 . -13) (undo-tree-id482 . -18) (undo-tree-id483 . -13)) ((1307 . 1349)) (25672 57751 40774 439000) 0 nil])
([nil nil ((#("        self._next = {}
" 0 5 (fontified t) 5 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-1-face) fontified t) 22 23 (face (rainbow-delimiters-depth-1-face) fontified t) 23 24 (fontified t)) . 632) (undo-tree-id484 . -13) (undo-tree-id485 . -13) (undo-tree-id486 . -13) (undo-tree-id487 . -13)) ((632 . 656) (t 25672 57593 50867 141000)) (25672 57753 778166 839000) 0 nil])
([nil nil ((1834 . 1852) (1816 . 1834) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1816) (undo-tree-id537 . -1) (1813 . 1817) (#("l" 0 1 (fontified t)) . -1813) (undo-tree-id538 . -1) 1814 (1805 . 1814) (1796 . 1805) (#("        " 0 8 (fontified t)) . 1796) (undo-tree-id539 . -8) 1804 (1795 . 1804) (t 25672 57593 50867 141000) 1794) nil (25672 58295 547614 998000) 0 nil] [nil nil ((918 . 931) (#("e" 0 1 (fontified t)) . 918) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (t 25672 57593 50867 141000)) ((918 . 919) (#("
            " 0 1 (fontified t) 1 13 (fontified t)) . 918) (undo-tree-id500 . -1) (undo-tree-id501 . -13) (undo-tree-id502 . -13) (undo-tree-id503 . -13) (undo-tree-id504 . -13) (undo-tree-id505 . -12) (undo-tree-id506 . -12) (undo-tree-id507 . -1) (undo-tree-id508 . -13) (undo-tree-id509 . -12) (undo-tree-id510 . -12) (undo-tree-id511 . -1) (undo-tree-id512 . -13) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1)) (25672 57753 272146 740000) 0 nil])
([nil nil ((1865 . 1870) (#("self.logger.isEnabledFor(logging.DEBUG)" 0 4 (face font-lock-keyword-face fontified t) 4 12 (fontified t) 12 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-1-face default) fontified t) 25 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-1-face default) fontified t)) . 1865) (undo-tree-id526 . -10) (undo-tree-id527 . -10) (undo-tree-id528 . 28) (undo-tree-id529 . -10) (undo-tree-id530 . -10) (undo-tree-id531 . -38) (undo-tree-id532 . -33) (undo-tree-id533 . -39) (undo-tree-id534 . -39) (undo-tree-id535 . -39) (undo-tree-id536 . -39)) nil (25672 58295 547602 794000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . 919) (undo-tree-id490 . -12) (undo-tree-id491 . -12) (undo-tree-id492 . -12) (undo-tree-id493 . -12) (undo-tree-id494 . -11) (undo-tree-id495 . -11) (undo-tree-id496 . -12) (undo-tree-id497 . -11) (undo-tree-id498 . -11) (undo-tree-id499 . -12)) ((919 . 931)) (25672 57751 592968 160000) 0 nil])
([nil nil ((1807 . 1809) (#("f" 0 1 (face font-lock-variable-name-face fontified t)) . -1807) (undo-tree-id540 . -1) (1805 . 1808)) nil (25672 58301 126367 770000) 0 nil])
nil
([nil nil ((#("def " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 1805) (undo-tree-id627 . -3) (undo-tree-id628 . -4) 1809) nil (25672 58356 107831 967000) 0 nil] [nil nil ((1814 . 1815)) ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1814)) (25672 58301 123091 126000) 0 nil])
([nil nil ((1845 . 1849) (1832 . 1845) (1815 . 1832) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1815) (undo-tree-id619 . -1) 1816 (1807 . 1816) (#("f" 0 1 (fontified t)) . -1807) (undo-tree-id620 . -1) (1805 . 1808) (#("debug " 0 5 (fontified t) 5 6 (fontified t)) . -1805) (undo-tree-id621 . 1) (undo-tree-id622 . -6) 1811 (#("d" 0 1 (fontified t)) . -1811) (undo-tree-id623 . -1) 1812 (1811 . 1812) (#("= " 0 2 (fontified t)) . -1811) (undo-tree-id624 . -2) 1813 (#("lambda " 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . -1813) (undo-tree-id625 . -7) 1820 (#("*" 0 1 (fontified t)) . -1820) (undo-tree-id626 . -1) 1821 (1813 . 1821)) nil (25672 58356 107825 225000) 0 nil])
nil
([nil nil ((1859 . 1861) (#("f" 0 1 (fontified t)) . -1859) (undo-tree-id611 . -1) (1858 . 1860) (1849 . 1858) (#("i" 0 1 (fontified t)) . -1849) (undo-tree-id612 . -1) (#("
" 0 1 (fontified t)) . -1850) (undo-tree-id613 . -1) (undo-tree-id614 . -1) 1851 (#("    " 0 4 (fontified t)) . -1851) (undo-tree-id615 . -4) 1855 (#("    " 0 4 (fontified t)) . -1855) (undo-tree-id616 . -4) 1859 (#("    " 0 4 (fontified t)) . -1859) (undo-tree-id617 . -4) 1863 (1850 . 1863) (1849 . 1850) (1845 . 1849) (#("pas" 0 3 (fontified nil)) . -1845) (1845 . 1848) (#("pass" 0 4 (fontified t)) . -1845) (undo-tree-id618 . -4) 1849) nil (25672 58356 107602 769000) 0 nil])
([nil nil ((1923 . 1940) (#(" " 0 1 (fontified t)) . -1923) (undo-tree-id610 . -1) 1924 (1916 . 1924) (#("f" 0 1 (fontified nil)) . -1916) (1914 . 1917) (1901 . 1914) (1900 . 1901)) nil (25672 58356 107587 593000) 0 nil])
([nil nil ((1934 . 1939) (#("b" 0 1 (fontified t)) . -1934) (undo-tree-id608 . -1) 1935 (1925 . 1935) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1925) (undo-tree-id609 . -1) (1914 . 1926) (1901 . 1914) 1850) nil (25672 58356 107582 195000) 0 nil])
([nil nil ((#("            def debug(*args, **kwargs)
" 0 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 21 (face font-lock-function-name-face fontified t) 21 22 (face (rainbow-delimiters-depth-1-face) fontified t) 22 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 39 (fontified t)) . 1940) (undo-tree-id600 . -38) (undo-tree-id601 . -39) (undo-tree-id602 . -39) (undo-tree-id603 . -36) (undo-tree-id604 . 18) (undo-tree-id605 . -22) (undo-tree-id606 . 2) (undo-tree-id607 . -38) 1976) nil (25672 58356 107576 571000) 0 nil])
([nil nil ((1971 . 1976) (#("self.logger.debug" 0 2 (face font-lock-keyword-face fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 17 (fontified t)) . 1971) (undo-tree-id593 . -16) (undo-tree-id594 . -12) (undo-tree-id595 . -12) (undo-tree-id596 . -12) (undo-tree-id597 . -12) (undo-tree-id598 . -3) (undo-tree-id599 . -3)) nil (25672 58356 107567 264000) 0 nil])
([nil nil ((#("        if debug:
" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t)) . 1941) (undo-tree-id579 . -11) (undo-tree-id580 . 2) (undo-tree-id581 . -11) (undo-tree-id582 . -11) (undo-tree-id583 . -17) (undo-tree-id584 . -11) (undo-tree-id585 . -18) (undo-tree-id586 . -18) (undo-tree-id587 . -18) (undo-tree-id588 . -16) (undo-tree-id589 . -11) (undo-tree-id590 . -16) (undo-tree-id591 . -16) (undo-tree-id592 . -18) 1957) nil (25672 58356 107559 78000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -1949) (undo-tree-id566 . 12) (undo-tree-id567 . -12) (undo-tree-id568 . -12) (undo-tree-id569 . -12) (undo-tree-id570 . -12) (undo-tree-id571 . -12) (undo-tree-id572 . -12) (undo-tree-id573 . -12) (undo-tree-id574 . -12) (undo-tree-id575 . -12) (undo-tree-id576 . -12) (undo-tree-id577 . -12) (undo-tree-id578 . -12) (1941 . 1949) 1957) nil (25672 58356 107544 905000) 0 nil])
([nil nil ((#("self" 0 4 (face font-lock-keyword-face fontified t)) . 2200) (undo-tree-id563 . -3) (undo-tree-id564 . -4) (undo-tree-id565 . -4)) nil (25672 58356 107530 695000) 0 nil])
([nil nil ((#(".logger" 0 7 (fontified t)) . 2200) (undo-tree-id562 . -6)) nil (25672 58356 107526 247000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2200) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) 2201) nil (25672 58356 107523 446000) 0 nil])
([nil nil ((#("self" 0 4 (face font-lock-keyword-face fontified t)) . 3038) (undo-tree-id556 . -3)) nil (25672 58356 107516 543000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 3038)) nil (25672 58356 107513 850000) 0 nil])
([nil nil ((#("logger" 0 6 (fontified t)) . 3038) (undo-tree-id555 . -5)) nil (25672 58356 107511 965000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 3038) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1)) nil (25672 58356 107508 467000) 0 nil])
([nil nil ((#("        if self.logger.isEnabledFor(logging.DEBUG):
" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 15 (face font-lock-keyword-face fontified t) 15 23 (fontified t) 23 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-1-face) fontified t) 50 51 (fontified t) 51 52 (fontified t)) . 2974) (undo-tree-id545 . -51) (undo-tree-id546 . -52) (undo-tree-id547 . -52) (undo-tree-id548 . -52) (undo-tree-id549 . -44) (undo-tree-id550 . -49) (undo-tree-id551 . -12) 2986) nil (25672 58356 107502 876000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -2982) (undo-tree-id541 . -12) (undo-tree-id542 . -12) (undo-tree-id543 . -12) (undo-tree-id544 . -12) (2974 . 2982) 2986) nil (25672 58356 107489 1000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1850) (undo-tree-id629 . -8) (undo-tree-id630 . -8) (undo-tree-id631 . -8) (undo-tree-id632 . -8) 1858 (1849 . 1858) (t 25672 58356 121754 499000) 1848) nil (25672 58373 757848 662000) 0 nil])
([nil nil ((#("                " 0 16 (fontified nil)) . -2197) (undo-tree-id760 . -16) (undo-tree-id761 . -16) (undo-tree-id762 . -16) (undo-tree-id763 . -16) (undo-tree-id764 . -15) (undo-tree-id765 . -15) (undo-tree-id766 . -16) (undo-tree-id767 . -16) (2185 . 2197) 2201 (t 25672 58373 769840 772000)) nil (25672 58424 787513 19000) 0 nil])
([nil nil ((#("            if self.logger.isEnabledFor(logging.DEBUG):
" 0 12 (fontified t) 12 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-keyword-face fontified t) 19 27 (fontified t) 27 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-1-face) fontified t) 40 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-1-face) fontified t) 54 55 (fontified t) 55 56 (fontified t)) . 2129) (undo-tree-id755 . -55) (undo-tree-id756 . -56) (undo-tree-id757 . -16) (undo-tree-id758 . -56) (undo-tree-id759 . -56) 2145) nil (25672 58424 787503 195000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 1676) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) 1677) nil (25672 58424 787496 482000) 0 nil])
([nil nil ((#("logger" 0 6 (fontified t)) . 1670) (undo-tree-id748 . -5) (undo-tree-id749 . -6) (undo-tree-id750 . -6) (undo-tree-id751 . -6) 1676) nil (25672 58424 787492 84000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 1669) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) 1670) nil (25672 58424 787487 243000) 0 nil])
([nil nil ((#("self" 0 4 (fontified t)) . 1665) (undo-tree-id741 . -3) (undo-tree-id742 . -4) (undo-tree-id743 . -4) (undo-tree-id744 . -4) 1669) nil (25672 58424 787482 987000) 0 nil])
([nil nil ((#("            debug(\"Simulation step %s\", self.time)
" 0 3 (fontified t) 3 4 (fontified t) 4 12 (fontified t) 12 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 19 (face font-lock-string-face syntax-table (15) fontified t) 19 37 (face font-lock-string-face fontified t) 37 38 (face font-lock-string-face syntax-table (15) fontified t) 38 40 (fontified t) 40 44 (face font-lock-keyword-face fontified t) 44 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-1-face) fontified t) 50 51 (fontified t)) . 1653) (undo-tree-id726 . -50) (undo-tree-id727 . -12) (undo-tree-id728 . -18) (undo-tree-id729 . -18) (undo-tree-id730 . -18) (undo-tree-id731 . -39) (undo-tree-id732 . -38) (undo-tree-id733 . -39) (undo-tree-id734 . -41) (undo-tree-id735 . -40) (undo-tree-id736 . -12) (undo-tree-id737 . -51) (undo-tree-id738 . -51) (undo-tree-id739 . -51) (undo-tree-id740 . -12) 1665) nil (25672 58424 787476 670000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1798 . 1799) (#("
" 0 1 (fontified nil)) . -1837) (1786 . 1838) 1770) nil (25672 58424 787337 947000) 0 nil])
([nil nil ((#("            " 0 3 (fontified nil) 3 4 (fontified nil) 4 11 (fontified nil) 11 12 (rear-nonsticky t fontified nil)) . -1795) (undo-tree-id725 . -12) (1787 . 1795) 1799) nil (25672 58424 787335 790000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1787) (undo-tree-id724 . -8) 1795 (1786 . 1795) 1782) nil (25672 58424 787332 811000) 0 nil])
([nil nil ((#("        if self.logger.isEnabledFor(logging.DEBUG):
" 0 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 15 (face font-lock-keyword-face fontified t) 15 23 (fontified t) 23 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-1-face) fontified t) 50 51 (fontified t) 51 52 (fontified t)) . 1601) (undo-tree-id702 . -23) (undo-tree-id703 . -51) (undo-tree-id704 . -52) (undo-tree-id705 . -52) (undo-tree-id706 . -52) (undo-tree-id707 . -52) (undo-tree-id708 . -52) (undo-tree-id709 . -52) (undo-tree-id710 . -52) (undo-tree-id711 . -52) (undo-tree-id712 . -52) (undo-tree-id713 . -44) (undo-tree-id714 . -52) (undo-tree-id715 . -52) (undo-tree-id716 . -52) (undo-tree-id717 . -52) (undo-tree-id718 . -52) (undo-tree-id719 . -52) (undo-tree-id720 . -23) (undo-tree-id721 . -23) (undo-tree-id722 . -23) (undo-tree-id723 . -23) 1624) nil (25672 58424 787328 564000) 0 nil])
([nil nil ((#("        if not self.model.running or self.time == INFINITY:
            return
" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-keyword-face fontified t) 19 34 (fontified t) 34 36 (face font-lock-keyword-face fontified t) 36 37 (fontified t) 37 41 (face font-lock-keyword-face fontified t) 41 60 (fontified t) 60 72 (fontified t) 72 78 (face font-lock-keyword-face fontified t) 78 79 (fontified t)) . 1602) (undo-tree-id688 . -60) (undo-tree-id689 . -60) (undo-tree-id690 . -78) (undo-tree-id691 . -77) (undo-tree-id692 . -77) (undo-tree-id693 . -77) (undo-tree-id694 . -78) (undo-tree-id695 . -77) (undo-tree-id696 . -77) (undo-tree-id697 . -77) (undo-tree-id698 . -60) (undo-tree-id699 . -79) (undo-tree-id700 . -60) (undo-tree-id701 . -60) 1662) nil (25672 58424 787305 266000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1711 . 1712) (#("
" 0 1 (fontified nil)) . -1782) (1703 . 1783) 1657) nil (25672 58424 787291 549000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1704) (undo-tree-id687 . -8) 1712 (1703 . 1712) 1665) nil (25672 58424 787289 245000) 0 nil])
([nil nil ((#("        if self.logger.isEnabledFor(logging.DEBUG):
            debug = self.logger.debug

" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 15 (face font-lock-keyword-face fontified t) 15 23 (fontified t) 23 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-1-face) fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 64 (fontified t) 64 69 (face font-lock-variable-name-face fontified t) 69 72 (fontified t) 72 76 (face font-lock-keyword-face fontified t) 76 89 (fontified t) 89 90 (fontified t) 90 91 (fontified t)) . 1785) (undo-tree-id663 . -90) (undo-tree-id664 . -90) (undo-tree-id665 . -90) (undo-tree-id666 . -90) (undo-tree-id667 . -91) (undo-tree-id668 . -90) (undo-tree-id669 . -91) (undo-tree-id670 . -50) (undo-tree-id671 . -50) (undo-tree-id672 . -50) (undo-tree-id673 . -49) (undo-tree-id674 . -49) (undo-tree-id675 . -91) (undo-tree-id676 . -91) (undo-tree-id677 . -52) (undo-tree-id678 . -52) (undo-tree-id679 . -90) (undo-tree-id680 . -90) (undo-tree-id681 . -91) (undo-tree-id682 . -91) (undo-tree-id683 . -23) (undo-tree-id684 . -32) (undo-tree-id685 . -90) (undo-tree-id686 . -90) 1875) nil (25672 58424 787284 765000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1663 . 1664) (#("
" 0 1 (fontified nil)) . -1746) (1655 . 1747) 1639) nil (25672 58424 787254 686000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1656) (undo-tree-id662 . -8) 1664 (1655 . 1664) 1647) nil (25672 58424 787252 258000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1600) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1)) nil (25672 58424 787247 122000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1600) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1)) nil (25672 58424 787221 173000) 0 nil])
([nil nil ((1755 . 1757) 1774 (t 25672 58424 802047 724000)) nil (25673 7410 429156 268000) 0 nil])
([nil nil ((1721 . 1723) (1667 . 1669) (1647 . 1649) (1609 . 1611) 1745) nil (25673 7410 429154 308000) 0 nil])
([nil nil ((1893 . 1895)) nil (25673 7410 429152 258000) 0 nil])
([nil nil ((2086 . 2088) 2084) nil (25673 7410 429150 143000) 0 nil])
([nil nil ((2870 . 2872)) nil (25673 7410 429143 314000) 0 nil])
([nil nil ((1949 . 1965) (1940 . 1949) (#("        " 0 8 (fontified t)) . 1940) (undo-tree-id784 . -8) 1948 (1939 . 1948) (t 25673 7410 449205 82000) 1915) nil (25673 7700 784064 418000) 0 nil])
([nil nil ((2093 . 2109) (2076 . 2093) 2067) nil (25673 7700 784060 657000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2132) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1)) nil (25673 7700 784058 589000) 0 nil])
([nil nil ((#("        next_time = self._queue[0][0][0]
" 0 8 (fontified t) 8 13 (face font-lock-variable-name-face fontified t) 13 17 (face font-lock-variable-name-face fontified t) 17 20 (fontified t) 20 24 (face font-lock-keyword-face fontified t) 24 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-1-face) fontified t) 32 33 (face highlight-numbers-number fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t) 35 36 (face highlight-numbers-number fontified t) 36 37 (face (rainbow-delimiters-depth-1-face) fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 39 (face highlight-numbers-number fontified t) 39 40 (face (rainbow-delimiters-depth-1-face) fontified t) 40 41 (fontified t)) . 2680) (undo-tree-id779 . -40) (undo-tree-id780 . -41)) nil (25673 7700 784053 926000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2679) (undo-tree-id778 . -1)) nil (25673 7700 784050 492000) 0 nil])
([nil nil ((1961 . 1969) (#("None" 0 4 (face font-lock-constant-face fontified t)) . 1961) (undo-tree-id775 . -3) (undo-tree-id776 . -4) (undo-tree-id777 . -4)) nil (25673 7700 784047 859000) 0 nil])
([nil nil ((2593 . 2597) (2573 . 2593) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -2573) (undo-tree-id774 . -1) (2572 . 2574) (2563 . 2572) 2563) nil (25673 7700 784043 49000) 0 nil])
([nil nil ((2613 . 2626) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -2613) (undo-tree-id773 . -1) (2610 . 2614) (2597 . 2610) 2596) nil (25673 7700 784039 108000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -2627) (undo-tree-id769 . -12) (undo-tree-id770 . -12) (undo-tree-id771 . -12) (undo-tree-id772 . -12) 2639 (2626 . 2639) 2625) nil (25673 7700 794756 622000) 0 nil])
([nil nil ((2380 . 2390) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -2380) (undo-tree-id908 . -1) (2379 . 2381) (2366 . 2379) (#("            " 0 12 (fontified t)) . 2366) (undo-tree-id909 . -12) (undo-tree-id910 . -12) (undo-tree-id911 . -12) (undo-tree-id912 . -12) 2378 (2365 . 2378) 2364) nil (25673 7788 915184 557000) 0 nil] [nil nil ((1849 . 1858) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1849) (undo-tree-id768 . -1) (1841 . 1850)) ((#(" not self" 0 1 (fontified nil) 1 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 8 (face font-lock-keyword-face fontified nil) 8 9 (face font-lock-keyword-face fontified nil)) . 1841) (undo-tree-id785 . -9) (undo-tree-id786 . -8) (undo-tree-id787 . -8) (undo-tree-id788 . -8) (1849 . 1850) (#("f._queue:" 0 1 (face font-lock-keyword-face fontified t) 1 9 (fontified t)) . 1849) (undo-tree-id789 . -8) (undo-tree-id790 . -8) (undo-tree-id791 . -8) (undo-tree-id792 . -8)) (25673 7700 784022 105000) 0 nil])
([nil nil ((#("            if when == 
" 0 12 (fontified t) 12 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (fontified t) 19 23 (fontified t) 23 24 (fontified t)) . 2367) (undo-tree-id868 . -23) (undo-tree-id869 . 1) (undo-tree-id870 . -24) (undo-tree-id871 . -22) (undo-tree-id872 . -24) (undo-tree-id873 . -24) (undo-tree-id874 . -24) (undo-tree-id875 . -24) (undo-tree-id876 . -24) (undo-tree-id877 . -24) (undo-tree-id878 . -12) (undo-tree-id879 . -12) (undo-tree-id880 . -12) (undo-tree-id881 . -12) (undo-tree-id882 . -13) (undo-tree-id883 . -12) (undo-tree-id884 . -14) (undo-tree-id885 . -13) (undo-tree-id886 . -15) (undo-tree-id887 . -14) (undo-tree-id888 . -16) (undo-tree-id889 . -15) (undo-tree-id890 . -17) (undo-tree-id891 . -16) (undo-tree-id892 . -18) (undo-tree-id893 . -17) (undo-tree-id894 . -19) (undo-tree-id895 . -18) (undo-tree-id896 . -20) (undo-tree-id897 . -19) (undo-tree-id898 . -21) (undo-tree-id899 . -20) (undo-tree-id900 . -22) (undo-tree-id901 . -21) (undo-tree-id902 . -23) (undo-tree-id903 . -22) (undo-tree-id904 . -22) (undo-tree-id905 . -22) (undo-tree-id906 . -22) (undo-tree-id907 . -24) 2389) nil (25673 7788 915175 111000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 2367) (undo-tree-id863 . 1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1)) nil (25673 7788 915137 351000) 0 nil])
([nil nil ((2615 . 2636) (#("running " 0 8 (fontified t)) . -2615) (undo-tree-id858 . -8) (undo-tree-id859 . -8) (undo-tree-id860 . -7) (undo-tree-id861 . -8) 2623 (2613 . 2623) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -2613) (undo-tree-id862 . -1) (2610 . 2614) (2597 . 2610) 2585) nil (25673 7788 915130 519000) 0 nil])
([nil nil ((#("            self._queue = []
" 0 12 (fontified t) 12 16 (face font-lock-keyword-face fontified t) 16 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 29 (fontified t)) . 2637) (undo-tree-id848 . -28) (undo-tree-id849 . -29) (undo-tree-id850 . -27) (undo-tree-id851 . -27) (undo-tree-id852 . 3) (undo-tree-id853 . -27) (undo-tree-id854 . 2) (undo-tree-id855 . -28) (undo-tree-id856 . -27) (undo-tree-id857 . -29) 2664) nil (25673 7788 915123 163000) 0 nil])
([nil nil ((#("        if not self._queue:
" 0 1 (fontified t) 1 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-keyword-face fontified t) 19 28 (fontified t)) . 2638) (undo-tree-id845 . -27) (undo-tree-id846 . -28) (undo-tree-id847 . -28)) nil (25673 7788 915109 939000) 0 nil])
([nil nil ((#("            self.model.running = False
" 0 1 (fontified t) 1 12 (fontified t) 12 16 (face font-lock-keyword-face fontified t) 16 22 (fontified t) 22 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 38 (face font-lock-constant-face fontified t) 38 39 (fontified t)) . 2638) (undo-tree-id840 . -38) (undo-tree-id841 . -39) (undo-tree-id842 . -38) (undo-tree-id843 . -38) (undo-tree-id844 . -39)) nil (25673 7788 915105 848000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2637) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1)) nil (25673 7788 915098 544000) 0 nil])
([nil nil ((2575 . 2593) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -2575) (undo-tree-id820 . -1) (2572 . 2576) (2563 . 2572) 2563) nil (25673 7788 915079 264000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -2594) (undo-tree-id816 . -8) (undo-tree-id817 . -8) (undo-tree-id818 . -8) (undo-tree-id819 . -8) 2602 (2593 . 2602) 2592) nil (25673 7788 915075 288000) 0 nil])
([nil nil ((#("        # debug(\"Updating time step: %s -> %s \", self.time, next_time)

        self.time = next_time
" 0 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 15 (face font-lock-comment-face fontified t) 15 16 (face font-lock-comment-face fontified t) 16 17 (face font-lock-comment-face fontified t syntax-table (15)) 17 24 (face font-lock-comment-face fontified t) 24 46 (face font-lock-comment-face fontified t) 46 47 (face font-lock-comment-face fontified t syntax-table (15)) 47 49 (face font-lock-comment-face fontified t) 49 53 (face font-lock-comment-face fontified t) 53 69 (face font-lock-comment-face fontified t) 69 70 (face font-lock-comment-face fontified t) 70 71 (face font-lock-comment-face fontified t) 71 75 (fontified t) 75 79 (fontified t) 79 80 (fontified t) 80 84 (face font-lock-keyword-face fontified t) 84 88 (fontified t) 88 102 (fontified t)) . 2919) (undo-tree-id794 . -72) (undo-tree-id795 . -72) (undo-tree-id796 . -101) (undo-tree-id797 . -8) (undo-tree-id798 . -8) (undo-tree-id799 . -71) (undo-tree-id800 . -8) (undo-tree-id801 . -8) (undo-tree-id802 . -8) (undo-tree-id803 . -10) (undo-tree-id804 . -15) (undo-tree-id805 . -71) (undo-tree-id806 . -72) (undo-tree-id807 . -71) (undo-tree-id808 . -102) (undo-tree-id809 . -72) (undo-tree-id810 . -72) (undo-tree-id811 . -72) (undo-tree-id812 . -71) (undo-tree-id813 . -72) (undo-tree-id814 . -71) (undo-tree-id815 . -102)) nil (25673 7934 353013 37000) 0 nil])
([nil nil ((#("        if next_time < self.time:
            raise Exception(
                f\"An agent has been scheduled for a time in the past, there is probably an error ({when} < {self.time})\"
            )
" 0 4 (fontified t) 4 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 23 (fontified t) 23 27 (face font-lock-keyword-face fontified t) 27 34 (fontified t) 34 46 (fontified t) 46 51 (face font-lock-keyword-face fontified t) 51 52 (fontified t) 52 60 (face font-lock-type-face fontified t) 60 61 (face font-lock-type-face fontified t) 61 62 (face (rainbow-delimiters-depth-1-face) fontified t) 62 74 (fontified t) 74 80 (fontified t) 80 81 (face font-lock-string-face syntax-table (15) fontified t) 81 84 (face font-lock-string-face fontified t) 84 86 (face font-lock-string-face fontified t) 86 117 (face font-lock-string-face fontified t) 117 118 (face font-lock-string-face fontified t) 118 123 (face font-lock-string-face fontified t) 123 131 (face font-lock-string-face fontified t) 131 133 (face font-lock-string-face fontified t) 133 140 (face font-lock-string-face fontified t) 140 150 (face font-lock-string-face fontified t) 150 155 (face font-lock-string-face fontified t) 155 172 (face font-lock-string-face fontified t) 172 182 (face font-lock-string-face fontified t) 182 183 (face font-lock-string-face syntax-table (15) fontified t) 183 184 (fontified t) 184 196 (fontified t) 196 197 (face (rainbow-delimiters-depth-1-face) fontified t) 197 198 (fontified t)) . 2721) (undo-tree-id1079 . -198) (undo-tree-id1080 . -198) (undo-tree-id1081 . -184) (undo-tree-id1082 . -198) (undo-tree-id1083 . -198) (undo-tree-id1084 . -198) (undo-tree-id1085 . -198) (undo-tree-id1086 . -198) (undo-tree-id1087 . -198) (undo-tree-id1088 . -198) (undo-tree-id1089 . -198) (undo-tree-id1090 . -198) (undo-tree-id1091 . -198) (undo-tree-id1092 . -198) (undo-tree-id1093 . 187) (undo-tree-id1094 . -11) (undo-tree-id1095 . -11) (undo-tree-id1096 . -11) (undo-tree-id1097 . -11) (undo-tree-id1098 . -11) (undo-tree-id1099 . -11) (undo-tree-id1100 . -46) (undo-tree-id1101 . -46) (undo-tree-id1102 . -46) (undo-tree-id1103 . -15) (undo-tree-id1104 . -11) (undo-tree-id1105 . -16) (undo-tree-id1106 . -15) (undo-tree-id1107 . -16) (undo-tree-id1108 . -16) (undo-tree-id1109 . -50) (undo-tree-id1110 . -16) (undo-tree-id1111 . -79) (undo-tree-id1112 . -50) (undo-tree-id1113 . -197) (undo-tree-id1114 . -79) (undo-tree-id1115 . -196) (undo-tree-id1116 . -184) (undo-tree-id1117 . -197) (undo-tree-id1118 . -196) (undo-tree-id1119 . -46) (undo-tree-id1120 . -46) (undo-tree-id1121 . -46) (undo-tree-id1122 . 137) (undo-tree-id1123 . -62) (undo-tree-id1124 . 2) (undo-tree-id1125 . -197) (undo-tree-id1126 . -196)) ((2721 . 2919)) (25673 7935 430213 759000) 0 nil] [nil nil ((2735 . 2737) (#("f" 0 1 (fontified t)) . -2735) (undo-tree-id793 . -1) (2732 . 2736)) ((#("self" 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil)) . 2732) (undo-tree-id913 . -4) (undo-tree-id914 . -3) (undo-tree-id915 . -3) (undo-tree-id916 . -3) (2735 . 2736) (#("f." 0 1 (face font-lock-keyword-face fontified t) 1 2 (fontified t)) . 2735) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1)) (25673 7788 915040 49000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2571 . 2572) (#("
" 0 1 (fontified nil)) . 2761) (2563 . 2762)) ((#("
        if next_time < self.time:
            raise Exception(
                f\"An agent has been scheduled for a time in the past, there is probably an error ({when} < {self.time})\"
            )
" 0 1 (fontified t) 1 5 (fontified nil) 5 8 (fontified nil) 8 9 (rear-nonsticky nil fontified nil) 9 11 (face font-lock-keyword-face fontified nil) 11 12 (fontified nil) 12 24 (fontified nil) 24 28 (face font-lock-keyword-face fontified nil) 28 35 (fontified nil) 35 47 (fontified t) 47 52 (face font-lock-keyword-face fontified t) 52 53 (fontified t) 53 61 (face font-lock-type-face fontified t) 61 62 (face font-lock-type-face fontified t) 62 63 (face (rainbow-delimiters-depth-1-face) fontified t) 63 75 (fontified t) 75 81 (fontified t) 81 82 (face font-lock-string-face syntax-table (15) fontified t) 82 85 (face font-lock-string-face fontified t) 85 87 (face font-lock-string-face fontified t) 87 118 (face font-lock-string-face fontified t) 118 119 (face font-lock-string-face fontified t) 119 124 (face font-lock-string-face fontified t) 124 132 (face font-lock-string-face fontified t) 132 134 (face font-lock-string-face fontified t) 134 141 (face font-lock-string-face fontified t) 141 151 (face font-lock-string-face fontified t) 151 156 (face font-lock-string-face fontified t) 156 173 (face font-lock-string-face fontified t) 173 183 (face font-lock-string-face fontified t) 183 184 (face font-lock-string-face syntax-table (15) fontified t) 184 185 (fontified t) 185 197 (fontified nil) 197 198 (face (rainbow-delimiters-depth-1-face) fontified nil) 198 199 (fontified nil)) . 2563) (undo-tree-id999 . -28) (undo-tree-id1000 . -1) (undo-tree-id1001 . -28) (undo-tree-id1002 . -198) (undo-tree-id1003 . -185) (undo-tree-id1004 . -198) (undo-tree-id1005 . -198) (undo-tree-id1006 . -198) (undo-tree-id1007 . -198) (undo-tree-id1008 . -198) (undo-tree-id1009 . -198) (undo-tree-id1010 . -198) (undo-tree-id1011 . -197) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -198) (undo-tree-id1015 . -198) (undo-tree-id1016 . -198) (undo-tree-id1017 . -198) (undo-tree-id1018 . -198) (undo-tree-id1019 . -198) (undo-tree-id1020 . -58) (undo-tree-id1021 . -58) (undo-tree-id1022 . -61) (undo-tree-id1023 . -61) (undo-tree-id1024 . -198) (undo-tree-id1025 . -198) (undo-tree-id1026 . -198) (undo-tree-id1027 . -198) (undo-tree-id1028 . -198) (undo-tree-id1029 . -198) (undo-tree-id1030 . -61) (undo-tree-id1031 . -61) (undo-tree-id1032 . -61) (undo-tree-id1033 . -61) (undo-tree-id1034 . -61) (undo-tree-id1035 . -61) (undo-tree-id1036 . -198) (undo-tree-id1037 . -198) (undo-tree-id1038 . -197) (undo-tree-id1039 . -198) (undo-tree-id1040 . -63) (undo-tree-id1041 . -63) (undo-tree-id1042 . -197) (undo-tree-id1043 . -198) (undo-tree-id1044 . -197) (undo-tree-id1045 . -198) (undo-tree-id1046 . -114) (undo-tree-id1047 . -114) (undo-tree-id1048 . -114) (undo-tree-id1049 . -114) (undo-tree-id1050 . -62) (undo-tree-id1051 . -63) (undo-tree-id1052 . -62) (undo-tree-id1053 . -63) (undo-tree-id1054 . -62) (undo-tree-id1055 . -62) (undo-tree-id1056 . -28) (undo-tree-id1057 . -62) (undo-tree-id1058 . -28) (undo-tree-id1059 . -28) (undo-tree-id1060 . -62) (undo-tree-id1061 . -28) (undo-tree-id1062 . -91) (undo-tree-id1063 . -62) (undo-tree-id1064 . -198) (undo-tree-id1065 . -91) (undo-tree-id1066 . -185) (undo-tree-id1067 . -198) (undo-tree-id1068 . -197) (undo-tree-id1069 . -198) (undo-tree-id1070 . 137) (undo-tree-id1071 . -63) (undo-tree-id1072 . 2) (undo-tree-id1073 . -198) (undo-tree-id1074 . -185) (undo-tree-id1075 . -198) (undo-tree-id1076 . -197) (undo-tree-id1077 . -197) (undo-tree-id1078 . -197) (2761 . 2762) (nil rear-nonsticky t 2571 . 2572)) (25673 7935 603936 609000) 0 nil])
nil
([nil nil ((#("        " 0 8 (fontified nil)) . 2762) (undo-tree-id1127 . -8) (undo-tree-id1128 . -8) (2761 . 2770)) ((#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 2761) (undo-tree-id977 . -1) (undo-tree-id978 . -9) (undo-tree-id979 . -9) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (2762 . 2770) (t 25673 7796 909047 129000)) (25673 7935 761230 249000) 0 nil])
([nil nil ((2762 . 2764) (2639 . 2641) (2608 . 2610) (2572 . 2574) 2563 (t 25673 7796 909047 129000)) nil (25674 8093 242010 93000) 0 nil])
([nil nil ((2496 . 2502)) nil (25674 8131 133475 901000) 0 nil] [nil nil ((#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 2756) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 2635) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 2606) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 2572)) ((2572 . 2574) (2606 . 2608) (2635 . 2637) (2756 . 2758)) (25674 8093 105614 126000) 0 nil] [nil nil ((1875 . 1877) (1813 . 1815) 1884 (t 25673 7938 507537 122000)) ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . 1813) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . 1875) (t 25673 8029 294571 417000)) (25673 8029 276149 577000) 0 nil])
([nil nil ((#("when=when o" 0 5 (fontified t) 5 10 (fontified t) 10 11 (fontified t face font-lock-keyword-face)) . 2502) (undo-tree-id118 . -10) (undo-tree-id119 . 11) (undo-tree-id120 . -5) (undo-tree-id121 . -9) (undo-tree-id122 . -4) (undo-tree-id123 . -5) (undo-tree-id124 . -5) (undo-tree-id125 . 11) (undo-tree-id126 . -11)) nil (25674 8131 133473 868000) 0 nil])
([nil nil ((1637 . 1646) (#("f" 0 1 (face font-lock-comment-face fontified nil)) . 1637) (1611 . 1638) (#("R" 0 1 (face font-lock-comment-face fontified nil)) . 1611) (1600 . 1612)) ((#("
        # R" 0 1 (fontified t) 1 9 (fontified nil) 9 11 (fontified nil face font-lock-comment-delimiter-face) 11 12 (face font-lock-comment-face fontified nil)) . 1600) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -11) (undo-tree-id79 . -11) (undo-tree-id80 . -11) (undo-tree-id81 . -11) (undo-tree-id82 . -11) (undo-tree-id83 . -11) (undo-tree-id84 . -1) (undo-tree-id85 . -11) (undo-tree-id86 . -11) (undo-tree-id87 . -11) (undo-tree-id88 . -11) (undo-tree-id89 . -11) (undo-tree-id90 . -11) (1611 . 1612) (#("TODO: recover debugging inf" 0 4 (fontified nil face (:inherit hl-todo :foreground "#cc9393" font-lock-comment-face)) 4 21 (fontified nil face font-lock-comment-face) 21 26 (fontified nil face font-lock-comment-face) 26 27 (face font-lock-comment-face fontified nil)) . 1611) (undo-tree-id91 . -26) (undo-tree-id92 . -26) (undo-tree-id93 . -26) (undo-tree-id94 . -26) (undo-tree-id95 . -26) (undo-tree-id96 . -26) (undo-tree-id97 . -26) (undo-tree-id98 . -26) (undo-tree-id99 . -26) (undo-tree-id100 . -26) (undo-tree-id101 . -26) (undo-tree-id102 . -26) (1637 . 1638) (#("formation" 0 9 (fontified t face font-lock-comment-face)) . 1637) (t 25673 17030 808529 256000)) (25674 8092 435719 311000) 0 nil])
nil
([nil nil ((#("r self.time + 1, " 0 1 (fontified t) 1 2 (fontified t) 2 6 (fontified t face font-lock-keyword-face) 6 14 (fontified t) 14 15 (fontified t face highlight-numbers-number) 15 17 (fontified t)) . 2502) (undo-tree-id113 . -16) (undo-tree-id114 . -12) (undo-tree-id115 . 17) (undo-tree-id116 . -2) (undo-tree-id117 . 17)) nil (25674 8131 133463 517000) 0 nil])
([nil nil ((2550 . 2560) (#("f" 0 1 (fontified t)) . -2550) (undo-tree-id48 . -1) (2547 . 2551) (t 25673 17030 808529 256000)) ((#("self" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil)) . 2547) (undo-tree-id54 . -3) (undo-tree-id55 . 1) (undo-tree-id56 . -3) (2550 . 2551) (#("f.time + (" 0 1 (fontified t face font-lock-keyword-face) 1 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-2-face))) . 2550) (undo-tree-id57 . -10) (undo-tree-id58 . 1) (undo-tree-id59 . -10)) (25674 8088 60712 109000) 0 nil])
([nil nil ((2060 . 2067) (2047 . 2060) 2038) nil (25674 8131 884902 149000) 0 nil])
([nil nil ((2568 . 2570)) ((#("1)" 0 1 (fontified t face highlight-numbers-number) 1 2 (fontified t face (rainbow-delimiters-depth-2-face))) . 2568) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2)) (25674 8088 47214 151000) 0 nil])
([nil nil ((#("            when = 
" 0 12 (fontified t) 12 16 (fontified t face font-lock-variable-name-face) 16 19 (fontified t) 19 20 (fontified t)) . 2048) (undo-tree-id173 . -19) (undo-tree-id174 . -20) (undo-tree-id175 . -18) 2066) nil (25674 8159 51355 926000) 0 nil] [nil nil ((#("            when = 
" 0 12 (fontified t) 12 16 (fontified t face font-lock-variable-name-face) 16 19 (fontified t) 19 20 (fontified t)) . 2048) (undo-tree-id109 . -19) (undo-tree-id110 . -20) (undo-tree-id111 . 1) (undo-tree-id112 . -18) 2066) ((2048 . 2068)) (25674 8131 249269 956000) 0 nil])
([nil nil ((#("self.time + 1" 0 4 (fontified t face font-lock-keyword-face) 4 12 (fontified t) 12 13 (fontified t face highlight-numbers-number)) . 2570) (undo-tree-id2 . -10) (undo-tree-id3 . -12) (undo-tree-id4 . -10) (undo-tree-id5 . -12) (undo-tree-id6 . -10) (undo-tree-id7 . -10) (undo-tree-id8 . -10) (undo-tree-id9 . -10) (undo-tree-id10 . -10) (undo-tree-id11 . -10) (undo-tree-id12 . -10) (undo-tree-id13 . -10) (undo-tree-id14 . -10) (undo-tree-id15 . -10) (undo-tree-id16 . -10) (undo-tree-id17 . -10) (undo-tree-id18 . -10) (undo-tree-id19 . -10) (undo-tree-id20 . -10) (undo-tree-id21 . -10) (undo-tree-id22 . -10) (undo-tree-id23 . -10) (undo-tree-id24 . -10) (undo-tree-id25 . -10) (undo-tree-id26 . -10) (undo-tree-id27 . -10) (undo-tree-id28 . -10) (undo-tree-id29 . -11) (undo-tree-id30 . -10) (undo-tree-id31 . -12) (undo-tree-id32 . -11) (undo-tree-id33 . -13) (undo-tree-id34 . -12) (undo-tree-id35 . -12) (undo-tree-id36 . -13) (undo-tree-id37 . -10) (undo-tree-id38 . -12) (undo-tree-id39 . -5) (undo-tree-id40 . -10) (undo-tree-id41 . -4) (undo-tree-id42 . -5) (undo-tree-id43 . -4) (undo-tree-id44 . 13) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -13)) ((2570 . 2583)) (25674 8088 42647 424000) 0 nil])
([nil nil ((2264 . 2274) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -2264) (undo-tree-id172 . -1) (2261 . 2265) (2254 . 2261) (2237 . 2254) 2220) nil (25674 8159 51351 463000) 0 nil])
([nil nil ((2072 . 2089) (2070 . 2072)) ((#("0:" 0 1 (fontified nil face highlight-numbers-number) 1 2 (fontified nil)) . 2070) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (#("
                " 0 1 (fontified t) 1 17 (fontified t)) . 2072) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -16) (undo-tree-id135 . -16) (undo-tree-id136 . -16)) (25674 8131 136494 738000) 0 nil])
nil
([nil nil ((1988 . 1994) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -1988) (undo-tree-id170 . -1) (1979 . 1989) (1970 . 1979) (#("        " 0 8 (fontified t)) . 1970) (undo-tree-id171 . -8) 1978 (1969 . 1978) 1968) nil (25674 8159 51347 254000) 0 nil])
([nil nil ((#("                self.time:
" 0 16 (fontified t) 16 20 (fontified t face font-lock-keyword-face) 20 26 (fontified t) 26 27 (fontified t)) . 2073) (undo-tree-id103 . -27) (undo-tree-id104 . -27) (undo-tree-id105 . -26) (undo-tree-id106 . -27) (undo-tree-id107 . 11) (undo-tree-id108 . -15) 2088) ((2073 . 2100)) (25674 8131 133378 720000) 0 nil])
([nil nil ((2099 . 2116) (2095 . 2099)) nil (25674 8159 51342 430000) 0 nil])
nil
([nil nil ((#("                self.time:
" 0 16 (fontified t) 16 20 (fontified t face font-lock-keyword-face) 20 26 (fontified t) 26 27 (fontified t)) . 2100) (undo-tree-id164 . -27) (undo-tree-id165 . -27) (undo-tree-id166 . -26) (undo-tree-id167 . -27) (undo-tree-id168 . 11) (undo-tree-id169 . -15) 2115) nil (25674 8159 51339 385000) 0 nil])
([nil nil ((2280 . 2284) (#("i" 0 1 (fontified t)) . -2280) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -2281) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#("o" 0 1 (fontified t)) . -2282) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) 2283 (2280 . 2283) (#("self.time " 0 4 (fontified t face font-lock-keyword-face) 4 10 (fontified t)) . 2280) (undo-tree-id160 . -9) (undo-tree-id161 . -4) (undo-tree-id162 . -10) (undo-tree-id163 . -10)) nil (25674 21800 16121 696000) 0 nil])
([nil nil ((2278 . 2284) (#("= now + 1" 0 2 (fontified t) 2 6 (fontified t) 6 8 (fontified t) 8 9 (fontified t face highlight-numbers-number)) . 2278) (undo-tree-id1124 . -8) (undo-tree-id1125 . -9) (undo-tree-id1126 . -8) (undo-tree-id1127 . -9) (undo-tree-id1128 . -8)) ((2278 . 2287) (#("+= now" 0 6 (fontified t)) . 2278)) (25674 32877 833242 51000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2952) (undo-tree-id1155 . -1)) ((2952 . 2953)) (25674 32878 204257 99000) 0 nil])
([nil nil ((2256 . 2261)) ((#(" or 1" 0 1 (fontified t) 1 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 5 (fontified t face highlight-numbers-number)) . 2256) (undo-tree-id1147 . -4) (undo-tree-id1148 . -4) (undo-tree-id1149 . -4) (undo-tree-id1150 . -4) (undo-tree-id1151 . -4) (undo-tree-id1152 . -4) (undo-tree-id1153 . -4) (undo-tree-id1154 . -4) (t 25674 8657 236015 523000)) (25674 32910 132632 467000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3251 . 3252) (#("
" 0 1 (fontified nil)) . -3289) (3251 . 3290) (t 25674 8657 236015 523000)) nil (25674 32940 727295 726000) 0 nil] [nil nil ((nil rear-nonsticky nil 3322 . 3323) (nil fontified nil 3252 . 3323) (3252 . 3323) (#("" 0 1 (fontified t)) . -3252) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (#("u" 0 1 (fontified t)) . -3253) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (#("i" 0 1 (fontified t)) . -3254) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) 3255 (3253 . 3255) (3252 . 3253) (#("i" 0 1 (fontified t)) . -3252) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) 3253 (3252 . 3253) (#("    " 0 4 (fontified nil)) . -3252) (undo-tree-id1192 . -4) (undo-tree-id1193 . -4) (undo-tree-id1194 . -4) (undo-tree-id1195 . -4) (undo-tree-id1196 . -4) (undo-tree-id1197 . -4) (undo-tree-id1198 . -4) (undo-tree-id1199 . -4) (undo-tree-id1200 . -4) (undo-tree-id1201 . -4) 3256 (#("    " 0 4 (fontified t)) . -3256) (undo-tree-id1202 . -4) (undo-tree-id1203 . -4) (undo-tree-id1204 . -4) (undo-tree-id1205 . -4) (undo-tree-id1206 . -4) (undo-tree-id1207 . -4) 3260 (3251 . 3260) (t 25674 8657 236015 523000) 3251) ((#("
        " 0 1 (fontified t) 1 5 (fontified nil) 5 9 (fontified nil)) . 3251) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -9) (undo-tree-id1211 . -9) (undo-tree-id1212 . -9) (undo-tree-id1213 . -9) (undo-tree-id1214 . -5) (undo-tree-id1215 . -5) (undo-tree-id1216 . -5) (undo-tree-id1217 . -5) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (3252 . 3260) (#("i" 0 1 (fontified nil)) . 3252) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (3252 . 3253) (#("" 0 1 (fontified nil)) . 3252) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (#("ui" 0 1 (fontified nil) 1 2 (fontified nil)) . 3253) (undo-tree-id1262 . -2) (undo-tree-id1263 . -2) (undo-tree-id1264 . -1) (undo-tree-id1265 . -2) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (3252 . 3255) (#("An Empirical Comparison of
Priority-queue and Event-set Implementations" 0 27 (fontified nil) 27 42 (fontified nil) 42 45 (fontified nil face font-lock-keyword-face) 45 52 (fontified nil) 52 55 (fontified nil face font-lock-builtin-face) 55 70 (fontified nil) 70 71 (fontified nil rear-nonsticky nil)) . 3252) (undo-tree-id1269 . -27) (undo-tree-id1270 . -25) (undo-tree-id1271 . -2) (undo-tree-id1272 . -13) (undo-tree-id1273 . -23) (undo-tree-id1274 . -3) (undo-tree-id1275 . -12) (undo-tree-id1276 . -24) (undo-tree-id1277 . -26) (undo-tree-id1278 . -27) (undo-tree-id1279 . -35) (undo-tree-id1280 . -36) (undo-tree-id1281 . -41) (undo-tree-id1282 . -46) (undo-tree-id1283 . -51) (undo-tree-id1284 . -56) (undo-tree-id1285 . -71) (undo-tree-id1286 . -25) (undo-tree-id1287 . -25) (undo-tree-id1288 . -25) (nil fontified t 3252 . 3279) (nil rear-nonsticky t 3322 . 3323)) (25674 32910 96853 63000) 0 nil] [nil nil ((#("                heappop(self._queue)
" 0 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 28 (fontified t face font-lock-keyword-face) 28 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-1-face)) 36 37 (fontified t)) . 2356) (undo-tree-id1159 . -37) (undo-tree-id1160 . -16) (undo-tree-id1161 . -16) (undo-tree-id1162 . -16) (t 25674 8657 236015 523000)) ((2356 . 2393)) (25674 32880 402869 515000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -3252) (undo-tree-id1323 . -8) (undo-tree-id1324 . -8) (undo-tree-id1325 . -8) (undo-tree-id1326 . -8) (undo-tree-id1327 . -8) 3260 (3251 . 3260) 3251) nil (25674 32940 727292 568000) 0 nil])
nil
([nil nil ((#("                heappop(self._queue)
" 0 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 28 (fontified t face font-lock-keyword-face) 28 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-1-face)) 36 37 (fontified t)) . 2414) (undo-tree-id1134 . -24) (undo-tree-id1135 . -16) (undo-tree-id1136 . -16) (undo-tree-id1138 . -16)) ((2414 . 2451)) (25674 21802 767304 115000) 0 nil])
([nil nil ((3259 . 3264)) nil (25674 32940 727273 792000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1996) (undo-tree-id458 . -8) (undo-tree-id460 . -8) (undo-tree-id462 . -8) 2004 (1995 . 2004) (#("        " 0 8 (fontified t)) . 1995) (undo-tree-id464 . -8) (undo-tree-id466 . -8) 2003 (1994 . 2003) 1983) ((#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 1994) (undo-tree-id1099 . -1) (undo-tree-id1100 . 9) (undo-tree-id1101 . -9) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (1995 . 2003) (#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 1995) (undo-tree-id1110 . -1) (undo-tree-id1111 . -9) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (1996 . 2004)) (25674 21796 863486 282000) 0 nil])
([nil nil ((#("TimedTimed" 0 5 (fontified t face font-lock-type-face) 5 10 (fontified t face font-lock-type-face)) . 3259) (undo-tree-id1294 . -9) (undo-tree-id1295 . 5) (undo-tree-id1296 . -10) (undo-tree-id1297 . -1) (undo-tree-id1298 . -2) (undo-tree-id1299 . -1) (undo-tree-id1300 . -3) (undo-tree-id1301 . -2) (undo-tree-id1302 . -4) (undo-tree-id1303 . -3) (undo-tree-id1304 . -5) (undo-tree-id1305 . -4) (undo-tree-id1306 . 6) (undo-tree-id1307 . -4) (undo-tree-id1308 . -4) (undo-tree-id1309 . -5) (undo-tree-id1310 . -4) (undo-tree-id1311 . -6) (undo-tree-id1312 . -5) (undo-tree-id1313 . -7) (undo-tree-id1314 . -6) (undo-tree-id1315 . -8) (undo-tree-id1316 . -7) (undo-tree-id1317 . -9) (undo-tree-id1318 . -8) (undo-tree-id1319 . -10) (undo-tree-id1320 . -9) (undo-tree-id1321 . -10) (undo-tree-id1322 . -10) 3269) nil (25674 32940 727269 232000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1996) (undo-tree-id455 . 1) (undo-tree-id456 . -1)) ((1996 . 1997)) (25674 21796 537877 105000) 0 nil])
([nil nil ((3259 . 3264)) nil (25674 32940 727231 571000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1996) (undo-tree-id452 . 1) (undo-tree-id453 . -1)) ((1996 . 1997)) (25674 21796 241630 614000) 0 nil])
([nil nil ((3278 . 3283) (3274 . 3278)) nil (25674 32940 733748 731000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1996) (undo-tree-id448 . -8) (undo-tree-id450 . -8) 2004 (1995 . 2004) 1995) ((#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 1995) (undo-tree-id1098 . -1) (1996 . 2004)) (25674 21795 850366 25000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3303 . 3304) (#("
" 0 1 (fontified nil)) . -3581) (3299 . 3582) 3284) nil (25674 33173 756269 625000) 0 nil] [nil nil ((3284 . 3299) (#("BaseScheduler" 0 13 (fontified t)) . 3284) (undo-tree-id1289 . -12) (undo-tree-id1290 . -6) (undo-tree-id1291 . -7) (undo-tree-id1292 . -13) (undo-tree-id1293 . -13)) ((3284 . 3297) (#("TimedActivation" 0 15 (fontified t)) . 3284) (undo-tree-id1328 . -14)) (25674 32940 727220 929000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1995) (undo-tree-id440 . -1) (undo-tree-id442 . -1) (undo-tree-id444 . -1) (undo-tree-id446 . -1)) ((1995 . 1996)) (25674 21795 347172 976000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . 3253) (3252 . 3261)) nil (25674 33173 756267 711000) 0 nil])
nil
([nil nil ((1995 . 2020) (#("        " 0 8 (fontified nil)) . 1995) (1994 . 2003)) ((#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 1994) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . 9) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (1995 . 2003) (#("
        to_schedule = []" 0 1 (fontified t) 1 9 (fontified t) 9 20 (fontified t face font-lock-variable-name-face) 20 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 25 (fontified t face (rainbow-delimiters-depth-1-face))) . 1995) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -9) (undo-tree-id1094 . -1) (undo-tree-id1095 . -9) (undo-tree-id1096 . -9) (undo-tree-id1097 . -9)) (25674 21795 61848 297000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 3253) (undo-tree-id1435 . -1)) nil (25674 33173 756266 184000) 0 nil])
([nil nil ((#("        to_schedule = []
" 0 8 (fontified t) 8 19 (fontified t face font-lock-variable-name-face) 19 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-1-face)) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 25 (fontified t)) . 1996) (undo-tree-id945 . -24) (undo-tree-id946 . -25) (undo-tree-id947 . -8) 2004) ((1996 . 2021)) (25674 21794 851498 901000) 0 nil] [nil nil ((2489 . 2494) (#("." 0 1 (fontified t)) . -2489) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (#("." 0 1 (fontified t)) . -2490) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) 2491 (2490 . 2491) (#("a" 0 1 (fontified t)) . -2490) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (#("d" 0 1 (fontified t)) . -2491) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) 2492 (2489 . 2492) (#("." 0 1 (fontified t)) . -2489) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (#("a" 0 1 (fontified t)) . -2490) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("p" 0 1 (fontified t)) . -2491) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#("p" 0 1 (fontified t)) . -2492) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#("e" 0 1 (fontified t)) . -2493) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("n" 0 1 (fontified t)) . -2494) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (#("d" 0 1 (fontified t)) . -2495) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) 2496 (2478 . 2496) (2465 . 2478) 2465) ((#("
            " 0 1 (fontified t) 1 13 (fontified nil)) . 2465) (undo-tree-id560 . -13) (undo-tree-id561 . -13) (undo-tree-id562 . -1) (undo-tree-id563 . -13) (undo-tree-id564 . -13) (undo-tree-id565 . -13) (undo-tree-id566 . -13) (undo-tree-id567 . -13) (undo-tree-id568 . -13) (undo-tree-id569 . -13) (undo-tree-id570 . -13) (undo-tree-id571 . -13) (undo-tree-id572 . -13) (undo-tree-id573 . -13) (undo-tree-id574 . -13) (undo-tree-id575 . -13) (undo-tree-id576 . -13) (undo-tree-id577 . -13) (undo-tree-id578 . -13) (undo-tree-id579 . -13) (undo-tree-id580 . -13) (undo-tree-id581 . -13) (undo-tree-id582 . -13) (undo-tree-id583 . -13) (undo-tree-id584 . -13) (undo-tree-id585 . -13) (undo-tree-id586 . -13) (undo-tree-id587 . -13) (undo-tree-id588 . -13) (undo-tree-id589 . -13) (undo-tree-id590 . -13) (undo-tree-id591 . -13) (undo-tree-id592 . -13) (undo-tree-id593 . -13) (undo-tree-id594 . -13) (undo-tree-id595 . -13) (undo-tree-id596 . -13) (undo-tree-id597 . -13) (undo-tree-id598 . -13) (undo-tree-id599 . -13) (undo-tree-id600 . -13) (undo-tree-id601 . -13) (undo-tree-id602 . -13) (undo-tree-id603 . -13) (undo-tree-id604 . -13) (undo-tree-id605 . -13) (undo-tree-id606 . -13) (undo-tree-id607 . -13) (undo-tree-id608 . -13) (undo-tree-id609 . -13) (undo-tree-id610 . -13) (undo-tree-id611 . -13) (undo-tree-id612 . -13) (undo-tree-id613 . -13) (undo-tree-id614 . -13) (undo-tree-id615 . -13) (undo-tree-id616 . -13) (undo-tree-id617 . -13) (undo-tree-id618 . -13) (undo-tree-id619 . -13) (undo-tree-id620 . -13) (undo-tree-id621 . -13) (undo-tree-id622 . -13) (undo-tree-id623 . -13) (undo-tree-id624 . -13) (undo-tree-id625 . -13) (undo-tree-id626 . -1) (undo-tree-id627 . -13) (undo-tree-id628 . -13) (undo-tree-id629 . -13) (undo-tree-id630 . -13) (undo-tree-id631 . -13) (undo-tree-id632 . -13) (#("to_schedule.append" 0 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (fontified nil) 14 15 (fontified nil) 15 16 (fontified nil) 16 17 (fontified nil) 17 18 (fontified nil)) . 2478) (undo-tree-id633 . -11) (undo-tree-id634 . -11) (undo-tree-id635 . -3) (undo-tree-id636 . -7) (undo-tree-id637 . -16) (undo-tree-id638 . -15) (undo-tree-id639 . -17) (undo-tree-id640 . -16) (undo-tree-id641 . -18) (undo-tree-id642 . -16) (undo-tree-id643 . -18) (undo-tree-id644 . -18) (undo-tree-id645 . -18) (undo-tree-id646 . -18) (undo-tree-id647 . -18) (undo-tree-id648 . -18) (undo-tree-id649 . -17) (undo-tree-id650 . -17) (undo-tree-id651 . -16) (undo-tree-id652 . -16) (undo-tree-id653 . -15) (undo-tree-id654 . -15) (undo-tree-id655 . -14) (undo-tree-id656 . -14) (undo-tree-id657 . -13) (undo-tree-id658 . -13) (undo-tree-id659 . -12) (undo-tree-id660 . -12) (undo-tree-id661 . -11) (undo-tree-id662 . -11) (undo-tree-id663 . -11) (undo-tree-id664 . -11) (undo-tree-id665 . -11) (undo-tree-id666 . -11) (undo-tree-id667 . -11) (undo-tree-id668 . -11) (undo-tree-id669 . -11) (undo-tree-id670 . -11) (undo-tree-id671 . -11) (undo-tree-id672 . -11) (undo-tree-id673 . -11) (undo-tree-id674 . -11) (undo-tree-id675 . -11) (undo-tree-id676 . -11) (undo-tree-id677 . -11) (undo-tree-id678 . -11) (undo-tree-id679 . -11) (undo-tree-id680 . -11) (undo-tree-id681 . -11) (undo-tree-id682 . -11) (undo-tree-id683 . -11) (undo-tree-id684 . -11) (undo-tree-id685 . -11) (undo-tree-id686 . -11) (undo-tree-id687 . -11) (undo-tree-id688 . -11) (undo-tree-id689 . -11) (undo-tree-id690 . -11) (undo-tree-id691 . -11) (undo-tree-id692 . -11) (undo-tree-id693 . -11) (undo-tree-id694 . -11) (undo-tree-id695 . -11) (undo-tree-id696 . -11) (undo-tree-id697 . -11) (undo-tree-id698 . -11) (undo-tree-id699 . -11) (undo-tree-id700 . -11) (undo-tree-id701 . -11) (undo-tree-id702 . -11) (undo-tree-id703 . -11) (2489 . 2496) (#(".ad" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2489) (undo-tree-id704 . -3) (undo-tree-id705 . -1) (undo-tree-id706 . -2) (undo-tree-id707 . -1) (undo-tree-id708 . -3) (undo-tree-id709 . -2) (undo-tree-id710 . -2) (undo-tree-id711 . -2) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (2490 . 2492) (#("." 0 1 (fontified nil)) . 2490) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (2489 . 2491) (#(".add(" 0 1 (fontified t) 1 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-1-face))) . 2489) (undo-tree-id720 . -1) (undo-tree-id721 . -3) (undo-tree-id722 . 1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -2) (undo-tree-id726 . -3) (undo-tree-id727 . -2) (undo-tree-id728 . -4) (undo-tree-id729 . -3) (undo-tree-id730 . -4) (undo-tree-id731 . -4) (undo-tree-id732 . -4) (undo-tree-id733 . -4) (undo-tree-id734 . 1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -5) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -5) (undo-tree-id751 . -1) (undo-tree-id752 . -5) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1)) (25674 20659 818205 914000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3585 . 3586) (#("
" 0 1 (fontified nil)) . -3798) (3581 . 3799) 3547) nil (25674 33173 756264 24000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1996) (undo-tree-id944 . -1)) ((1996 . 1997)) (25674 21794 661276 395000) 0 nil])
([nil nil ((2490 . 2498) (#("add" 0 3 (fontified t)) . 2490) (undo-tree-id276 . -2) (undo-tree-id277 . -1) (undo-tree-id278 . -2) (undo-tree-id279 . -1) (undo-tree-id280 . -3) (undo-tree-id281 . -2) (undo-tree-id282 . -3) (undo-tree-id283 . -3) (undo-tree-id284 . -3) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -3)) ((2490 . 2493) (#("append{A" 0 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-1-face)) 7 8 (fontified t)) . 2490) (undo-tree-id540 . -6) (undo-tree-id541 . -8) (undo-tree-id542 . -8) (undo-tree-id543 . -7) (undo-tree-id544 . -7) (undo-tree-id545 . -7) (undo-tree-id546 . -7) (undo-tree-id547 . -8) (undo-tree-id548 . -8) (undo-tree-id549 . -7) (undo-tree-id550 . -7) (undo-tree-id551 . -6) (undo-tree-id552 . -6) (undo-tree-id553 . -6) (undo-tree-id554 . 3) (undo-tree-id555 . -7) (undo-tree-id556 . -6) (undo-tree-id557 . -6) (undo-tree-id558 . -8) (undo-tree-id559 . -8)) (25674 20659 788280 900000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -3582) (undo-tree-id1434 . -8) 3590 (3581 . 3590) 3551) nil (25674 33173 756261 992000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1996) (undo-tree-id942 . -8) 2004 (1995 . 2004) (#("        " 0 8 (fontified t)) . 1995) (undo-tree-id943 . -8) 2003 (1994 . 2003) 1989) ((#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 1994) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -9) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (1995 . 2003) (#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 1995) (undo-tree-id1078 . -1) (undo-tree-id1079 . 9) (undo-tree-id1080 . -9) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (1996 . 2004)) (25674 21794 468082 56000) 0 nil])
([nil nil ((2496 . 2497) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2496) (undo-tree-id245 . -1) (undo-tree-id246 . 1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("A" 0 1 (fontified t)) . -2497) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2498) (undo-tree-id269 . 1) (undo-tree-id270 . -1) (undo-tree-id271 . 1) (undo-tree-id272 . 1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) 2499) ((2496 . 2499) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 2496) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . 1) (undo-tree-id539 . -1)) (25674 20659 777534 980000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3458 . 3459) (nil fontified nil 3430 . 3459) (3421 . 3459) 3397) nil (25674 33173 756259 366000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1996) (undo-tree-id940 . 1) (undo-tree-id941 . -1)) ((1996 . 1997)) (25674 21794 225166 495000) 0 nil])
nil
([nil nil ((#("        from collections import deque
" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 25 (fontified t) 25 31 (fontified t face font-lock-keyword-face) 31 36 (fontified t) 36 37 (fontified t rear-nonsticky t) 37 38 (fontified t)) . 3422) (undo-tree-id1429 . -8) (undo-tree-id1430 . -37) (undo-tree-id1431 . 1) (undo-tree-id1432 . -38) (undo-tree-id1433 . -36) 3458) nil (25674 33173 756256 983000) 0 nil])
([nil nil ((2010 . 2019) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -2010) (undo-tree-id938 . -1) (2005 . 2011) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -2005) (undo-tree-id939 . -1) (2004 . 2006) (1995 . 2004) 1995) ((#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 1995) (undo-tree-id1032 . -1) (undo-tree-id1033 . -9) (undo-tree-id1034 . -9) (undo-tree-id1035 . -9) (undo-tree-id1036 . -9) (undo-tree-id1037 . -9) (undo-tree-id1038 . -9) (undo-tree-id1039 . -9) (undo-tree-id1040 . -9) (#("if" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil face font-lock-keyword-face)) . 2004) (undo-tree-id1041 . -1) (undo-tree-id1042 . -2) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (2005 . 2006) (#("f self" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil) 2 5 (fontified nil face font-lock-keyword-face) 5 6 (fontified nil face font-lock-keyword-face)) . 2005) (undo-tree-id1049 . -5) (undo-tree-id1050 . -6) (undo-tree-id1051 . -5) (undo-tree-id1052 . -5) (undo-tree-id1053 . -5) (undo-tree-id1054 . -5) (undo-tree-id1055 . -5) (undo-tree-id1056 . -5) (2010 . 2011) (#("f._queue:" 0 1 (fontified t face font-lock-keyword-face) 1 9 (fontified t)) . 2010) (undo-tree-id1057 . -9) (undo-tree-id1058 . -8) (undo-tree-id1059 . -9) (undo-tree-id1060 . -9) (undo-tree-id1061 . -9) (undo-tree-id1062 . -8) (undo-tree-id1063 . -9) (undo-tree-id1064 . -8)) (25674 21793 738776 545000) 0 nil])
([nil nil ((nil rear-nonsticky nil 117 . 118) (#("
" 0 1 (fontified nil)) . -147) (109 . 148) 91) nil (25674 33173 756251 788000) 0 nil])
([nil nil ((2032 . 2037) (#("f" 0 1 (fontified t)) . -2032) (undo-tree-id937 . -1) (2032 . 2033) (2019 . 2032) 2018) ((#("
            " 0 1 (fontified t) 1 13 (fontified nil)) . 2019) (undo-tree-id1019 . -1) (undo-tree-id1020 . -13) (undo-tree-id1021 . -13) (undo-tree-id1022 . -1) (undo-tree-id1023 . -13) (undo-tree-id1024 . -13) (undo-tree-id1025 . -13) (#("f" 0 1 (fontified nil)) . 2032) (undo-tree-id1026 . -1) (2032 . 2033) (#("for (" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-1-face))) . 2032) (undo-tree-id1027 . -3) (undo-tree-id1028 . -4) (undo-tree-id1029 . -5) (undo-tree-id1030 . -4) (undo-tree-id1031 . -4)) (25674 21793 537461 905000) 0 nil])
([nil nil ((#("        " 0 7 (fontified t) 7 8 (fontified t rear-nonsticky t)) . -110) (undo-tree-id1428 . -8) 118) nil (25674 33173 756249 866000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2036) (undo-tree-id934 . -1) (undo-tree-id935 . 1) (undo-tree-id936 . -1) 2037) ((2036 . 2037)) (25674 21792 932992 835000) 0 nil])
([nil nil ((3449 . 3456) (#("[]" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 2 (fontified t face (rainbow-delimiters-depth-1-face))) . -3449) (undo-tree-id1427 . -2) 3451) nil (25674 33173 756247 168000) 0 nil])
([nil nil ((#(", replace=True" 0 2 (fontified t) 2 10 (fontified t) 10 14 (fontified t face font-lock-constant-face)) . 2520) (undo-tree-id916 . -13) (undo-tree-id917 . -2) (undo-tree-id918 . -2) (undo-tree-id919 . -2) (undo-tree-id920 . -2) (undo-tree-id921 . -9) (undo-tree-id922 . -2) (undo-tree-id923 . -2) (undo-tree-id924 . -2) (undo-tree-id925 . -2) (undo-tree-id926 . -2) (undo-tree-id927 . -2) (undo-tree-id928 . -9) (undo-tree-id929 . -2) (undo-tree-id930 . -1) (undo-tree-id931 . -2) (undo-tree-id932 . -1) (undo-tree-id933 . -14)) ((2520 . 2534)) (25674 21792 769709 811000) 0 nil])
([nil nil ((3774 . 3778) (#("f" 0 1 (fontified t)) . -3774) (undo-tree-id1423 . -1) (3774 . 3775) (#("    " 0 4 (fontified t)) . -3774) (undo-tree-id1424 . -4) 3778 (3765 . 3778) (#("        " 0 8 (fontified t)) . 3765) (undo-tree-id1425 . -8) 3773 (#("    " 0 4 (fontified t)) . -3773) (undo-tree-id1426 . -4) 3777 (3764 . 3777) 3762) nil (25674 33173 756243 115000) 0 nil])
([nil nil ((#(", replace=False" 0 10 (fontified t) 10 15 (fontified t face font-lock-constant-face)) . 1076) (undo-tree-id902 . -14) (undo-tree-id903 . -2) (undo-tree-id904 . -2) (undo-tree-id905 . -2) (undo-tree-id906 . -2) (undo-tree-id907 . -2) (undo-tree-id908 . -2) (undo-tree-id909 . -2) (undo-tree-id910 . -9) (undo-tree-id911 . -2) (undo-tree-id912 . -1) (undo-tree-id913 . -2) (undo-tree-id914 . -1) (undo-tree-id915 . -15)) ((1076 . 1091)) (25674 21792 638292 83000) 0 nil])
([nil nil ((#("        for 
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 13 (fontified t)) . 3766) (undo-tree-id1419 . -12) (undo-tree-id1420 . 1) (undo-tree-id1421 . -13) (undo-tree-id1422 . -11) 3777) nil (25674 33173 756233 26000) 0 nil])
([nil nil ((1277 . 1291) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -1277) (undo-tree-id900 . -1) (1276 . 1278) (#("    " 0 4 (fontified t)) . -1276) (undo-tree-id901 . -4) 1280 (1267 . 1280) 1266) ((#("
            " 0 1 (fontified t) 1 9 (fontified nil) 9 13 (fontified nil)) . 1267) (undo-tree-id949 . -1) (undo-tree-id950 . -13) (undo-tree-id951 . -9) (undo-tree-id952 . -9) (undo-tree-id953 . -9) (undo-tree-id954 . -9) (undo-tree-id955 . -9) (undo-tree-id956 . -9) (undo-tree-id957 . -9) (undo-tree-id958 . -9) (undo-tree-id959 . -9) (undo-tree-id960 . -9) (undo-tree-id961 . -9) (undo-tree-id962 . -9) (undo-tree-id963 . -9) (undo-tree-id964 . -9) (undo-tree-id965 . -9) (undo-tree-id966 . -9) (undo-tree-id967 . -9) (undo-tree-id968 . -9) (undo-tree-id969 . -9) (undo-tree-id970 . -9) (undo-tree-id971 . -9) (undo-tree-id972 . -9) (1276 . 1280) (#("if" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil face font-lock-keyword-face)) . 1276) (undo-tree-id973 . -2) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (1277 . 1278) (#("f when not in " 0 1 (fontified t face font-lock-keyword-face) 1 7 (fontified t) 7 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t)) . 1277) (undo-tree-id996 . -13) (undo-tree-id997 . -7) (undo-tree-id998 . -6) (undo-tree-id999 . -8) (undo-tree-id1000 . -7) (undo-tree-id1001 . -9) (undo-tree-id1002 . -7) (undo-tree-id1003 . -10) (undo-tree-id1004 . -7) (undo-tree-id1005 . -11) (undo-tree-id1006 . -7) (undo-tree-id1007 . -12) (undo-tree-id1008 . -11) (undo-tree-id1009 . -13) (undo-tree-id1010 . -12) (undo-tree-id1011 . -14) (undo-tree-id1012 . -13) (undo-tree-id1013 . -13) (undo-tree-id1014 . -13) (undo-tree-id1015 . -13) (undo-tree-id1016 . -13) (undo-tree-id1017 . -13) (undo-tree-id1018 . -13)) (25674 21792 434610 200000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3766) (undo-tree-id1416 . 1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1)) nil (25674 33173 756227 606000) 0 nil])
([nil nil ((#("        if self._shuffle:
            key = (when, self.model.random.random())
        else:
            key = (when, agent.unique_id)
        if when not in 
" 0 8 (fontified t) 8 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 15 (fontified t face font-lock-keyword-face) 15 38 (fontified t) 38 41 (fontified t face font-lock-variable-name-face) 41 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-1-face)) 45 51 (fontified t) 51 55 (fontified t face font-lock-keyword-face) 55 75 (fontified t) 75 76 (fontified t face (rainbow-delimiters-depth-2-face)) 76 77 (fontified t face (rainbow-delimiters-depth-2-face)) 77 78 (fontified t face (rainbow-delimiters-depth-1-face)) 78 87 (fontified t) 87 91 (fontified t face font-lock-keyword-face) 91 93 (fontified t) 93 105 (fontified t) 105 108 (fontified t face font-lock-variable-name-face) 108 111 (fontified t) 111 112 (fontified t face (rainbow-delimiters-depth-1-face)) 112 133 (fontified t) 133 134 (fontified t face (rainbow-delimiters-depth-1-face)) 134 135 (fontified t) 135 143 (fontified t) 143 145 (fontified t face font-lock-keyword-face) 145 151 (fontified t) 151 154 (fontified t face font-lock-keyword-face) 154 155 (fontified t) 155 157 (fontified t face font-lock-keyword-face) 157 158 (fontified t) 158 159 (fontified t)) . 1133) (undo-tree-id832 . -157) (undo-tree-id833 . -56) (undo-tree-id834 . -56) (undo-tree-id835 . -56) (undo-tree-id836 . -56) (undo-tree-id837 . -56) (undo-tree-id838 . -56) (undo-tree-id839 . -22) (undo-tree-id840 . -157) (undo-tree-id841 . -158) (undo-tree-id842 . 1) (undo-tree-id843 . -26) (undo-tree-id844 . -26) (undo-tree-id845 . -93) (undo-tree-id846 . -93) (undo-tree-id847 . -135) (undo-tree-id848 . -159) (undo-tree-id849 . -25) (undo-tree-id850 . -157) (undo-tree-id851 . -151) (undo-tree-id852 . -150) (undo-tree-id853 . -152) (undo-tree-id854 . -151) (undo-tree-id855 . -153) (undo-tree-id856 . -151) (undo-tree-id857 . -154) (undo-tree-id858 . -151) (undo-tree-id859 . -155) (undo-tree-id860 . -151) (undo-tree-id861 . -156) (undo-tree-id862 . -155) (undo-tree-id863 . -157) (undo-tree-id864 . -156) (undo-tree-id865 . -158) (undo-tree-id866 . -157) (undo-tree-id867 . -158) (undo-tree-id868 . -158) (undo-tree-id869 . -157) (undo-tree-id870 . -157) (undo-tree-id871 . -115) (undo-tree-id872 . -157) (undo-tree-id873 . -91) (undo-tree-id874 . -115) (undo-tree-id875 . -48) (undo-tree-id876 . -91) (undo-tree-id877 . -22) (undo-tree-id878 . -48) (undo-tree-id879 . -22) (undo-tree-id880 . -22) (undo-tree-id881 . -159) (undo-tree-id882 . -22) (undo-tree-id883 . -22) (undo-tree-id884 . -22) (undo-tree-id885 . -157) (undo-tree-id886 . -48) (undo-tree-id887 . -22) (undo-tree-id888 . -92) (undo-tree-id889 . -48) (undo-tree-id890 . -115) (undo-tree-id891 . -92) (undo-tree-id892 . 48) (undo-tree-id893 . -112) (undo-tree-id894 . 26) (undo-tree-id895 . -134) (undo-tree-id896 . -157) (undo-tree-id897 . -115) (undo-tree-id898 . -157) (undo-tree-id899 . -159) 1290) ((1133 . 1292)) (25674 21792 274812 892000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3765) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1)) nil (25674 33173 756222 982000) 0 nil])
([nil nil ((#("        if replace:
            heapreplace(self._queue, (key, agent))
" 0 8 (fontified t) 8 10 (fontified t face font-lock-keyword-face) 10 19 (fontified t) 19 20 (fontified t) 20 43 (fontified t) 43 44 (fontified t face (rainbow-delimiters-depth-1-face)) 44 48 (fontified t face font-lock-keyword-face) 48 57 (fontified t) 57 58 (fontified t face (rainbow-delimiters-depth-2-face)) 58 68 (fontified t) 68 69 (fontified t face (rainbow-delimiters-depth-2-face)) 69 70 (fontified t face (rainbow-delimiters-depth-1-face)) 70 71 (fontified t)) . 1133) (undo-tree-id785 . -38) (undo-tree-id786 . -44) (undo-tree-id787 . -18) (undo-tree-id788 . -38) (undo-tree-id789 . -70) (undo-tree-id790 . 71) (undo-tree-id791 . -71) (undo-tree-id792 . -71) (undo-tree-id793 . -71) (undo-tree-id794 . -71) (undo-tree-id795 . -20) (undo-tree-id796 . -71) (undo-tree-id797 . -32) (undo-tree-id798 . -32) (undo-tree-id799 . -36) (undo-tree-id800 . -43) (undo-tree-id801 . -38) (undo-tree-id802 . -11) (undo-tree-id803 . -11) (undo-tree-id804 . -36) (undo-tree-id805 . -36) (undo-tree-id806 . -11) (undo-tree-id807 . -18) (undo-tree-id808 . -19) (undo-tree-id809 . -18) (undo-tree-id810 . -18) (undo-tree-id811 . -18) (undo-tree-id812 . -11) (undo-tree-id813 . -18) (undo-tree-id814 . -58) (undo-tree-id815 . -61) (undo-tree-id816 . -19) (undo-tree-id817 . -19) (undo-tree-id818 . -19) (undo-tree-id819 . -18) (undo-tree-id820 . -19) (undo-tree-id821 . -71) (undo-tree-id822 . -18) (undo-tree-id823 . -18) (undo-tree-id824 . -18) (undo-tree-id825 . -38) (undo-tree-id826 . -38) (undo-tree-id827 . -18) (undo-tree-id828 . -32) (undo-tree-id829 . -43) (undo-tree-id830 . -38) (undo-tree-id831 . -71) 1171) ((1133 . 1204)) (25674 21792 188907 49000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3837 . 3838) (#("
" 0 1 (fontified nil)) . -3891) (3833 . 3892) 3811) nil (25674 33173 756211 166000) 0 nil])
([nil nil ((#("        else:
" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 14 (fontified t)) . 1133) (undo-tree-id772 . 14) (undo-tree-id773 . -13) (undo-tree-id774 . 14) (undo-tree-id775 . -14) (undo-tree-id776 . -12) (undo-tree-id777 . -13) (undo-tree-id778 . -12) (undo-tree-id779 . -12) (undo-tree-id780 . -12) (undo-tree-id781 . -11) (undo-tree-id782 . -13) (undo-tree-id783 . -12) (undo-tree-id784 . -14) 1145) ((1133 . 1147)) (25674 21792 185196 868000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -3834) (undo-tree-id1401 . -8) (undo-tree-id1402 . -8) (undo-tree-id1403 . -8) (undo-tree-id1404 . -8) 3842 (3833 . 3842) 3811) nil (25674 33173 756208 448000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -1141) (undo-tree-id763 . 12) (undo-tree-id764 . 12) (undo-tree-id765 . -12) (undo-tree-id766 . -12) (undo-tree-id767 . -12) (undo-tree-id768 . -12) (undo-tree-id769 . -12) (undo-tree-id770 . -12) (undo-tree-id771 . -12) (1133 . 1141) 1145) ((#("        " 0 8 (fontified nil)) . 1133) (1141 . 1153)) (25674 21792 154914 838000) 0 nil])
([nil nil ((3922 . 3935) (3915 . 3922) (3913 . 3915) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -3913) (undo-tree-id1396 . -1) (3901 . 3914) (#("f" 0 1 (fontified t)) . -3901) (undo-tree-id1397 . -1) (3901 . 3902) (#("for " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . -3901) (undo-tree-id1398 . -4) (undo-tree-id1399 . -4) 3905 (3901 . 3905) (#("f" 0 1 (fontified t)) . -3901) (undo-tree-id1400 . -1) (3901 . 3902) (3892 . 3901) 3843) nil (25674 33173 756201 57000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1141) (undo-tree-id762 . -4) 1145 (1132 . 1145) 1131) ((#("
            " 0 1 (fontified t) 1 9 (fontified nil) 9 13 (fontified nil)) . 1132) (undo-tree-id948 . -1) (1141 . 1145)) (25674 21792 146634 852000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . 3923) (undo-tree-id1384 . -12) (undo-tree-id1385 . -11) (undo-tree-id1386 . -12) (undo-tree-id1387 . -12) (undo-tree-id1388 . -12) (undo-tree-id1389 . -11) (undo-tree-id1390 . -12) (undo-tree-id1391 . -11) (undo-tree-id1392 . -11) (undo-tree-id1393 . -11) (undo-tree-id1394 . -12) (undo-tree-id1395 . -12) 3935) nil (25674 33173 756192 164000) 0 nil])
nil
([nil nil ((3946 . 3949) (#("-" 0 1 (fontified t)) . -3946) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (#("-" 0 1 (fontified t)) . -3947) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) 3948 (3946 . 3948) (3942 . 3946) (#("." 0 1 (fontified t)) . -3942) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) 3943 (3936 . 3943) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -3936) (undo-tree-id1377 . -1) (3935 . 3937) (#("
" 0 1 (fontified t)) . 3935) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (3922 . 3935) 3893) nil (25674 33173 756178 668000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -3942) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (#("0" 0 1 (fontified t face highlight-numbers-number)) . -3943) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -3944) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) 3945) nil (25674 33173 756152 619000) 0 nil])
([nil nil ((3980 . 3986) (3968 . 3980) (3951 . 3968) (3946 . 3951)) nil (25674 33173 756106 828000) 0 nil])
([nil nil ((3986 . 3987)) nil (25674 33173 756099 786000) 0 nil])
([nil nil ((4004 . 4021) (3987 . 3999) (#("        " 0 8 (fontified nil)) . 3987) (undo-tree-id1451 . -8) (undo-tree-id1452 . -8) (undo-tree-id1453 . -8) (undo-tree-id1454 . -8) (undo-tree-id1455 . -8) (undo-tree-id1456 . -8) (undo-tree-id1457 . -8) (undo-tree-id1458 . -8) (undo-tree-id1459 . -8) (undo-tree-id1460 . -8) (undo-tree-id1461 . -8) (undo-tree-id1462 . -8) (undo-tree-id1463 . -8) (undo-tree-id1464 . -8) (undo-tree-id1465 . -8) (undo-tree-id1466 . -8) (3995 . 4000) (#("    " 0 4 (fontified t)) . -3995) (undo-tree-id1467 . -4) (undo-tree-id1468 . -4) (undo-tree-id1469 . -4) (undo-tree-id1470 . -4) (undo-tree-id1471 . -4) (undo-tree-id1472 . -4) (undo-tree-id1473 . -4) (undo-tree-id1474 . -4) (undo-tree-id1475 . -4) (undo-tree-id1476 . -4) 3999 (#("    " 0 4 (fontified t)) . -3999) (undo-tree-id1477 . -4) (undo-tree-id1478 . -4) (undo-tree-id1479 . -4) (undo-tree-id1480 . -4) (undo-tree-id1481 . -4) (undo-tree-id1482 . -4) 4003 (3986 . 4003) (t 25674 33173 773618 214000) 3985) nil (25674 33198 551029 903000) 0 nil])
([nil nil ((#("                " 0 16 (fontified t)) . 4005) (undo-tree-id1442 . -15) (undo-tree-id1443 . -16) (undo-tree-id1444 . -16) (undo-tree-id1445 . -16) (undo-tree-id1446 . -15) (undo-tree-id1447 . -15) (undo-tree-id1448 . -15) (undo-tree-id1449 . -16) (undo-tree-id1450 . -16) 4021) nil (25674 33198 550996 656000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -3995) (undo-tree-id1436 . -12) (undo-tree-id1437 . -12) (undo-tree-id1438 . -12) (undo-tree-id1439 . -12) (undo-tree-id1440 . -12) (undo-tree-id1441 . -12) (3987 . 3995)) nil (25674 33198 550985 217000) 0 nil])
([nil nil ((4003 . 4008) (3986 . 4003) 3952) nil (25674 33198 550961 687000) 0 nil])
([nil nil ((4061 . 4070) (#("list" 0 4 (fontified t face font-lock-builtin-face)) . -4061) (undo-tree-id1483 . -4) (undo-tree-id1484 . -4) (undo-tree-id1485 . -4) (undo-tree-id1486 . -4) (undo-tree-id1487 . -4) 4065 (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4065) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . 1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) 4066 (4055 . 4066) (4038 . 4055) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -4038) (undo-tree-id1494 . -1) (4035 . 4039) (4022 . 4035) (t 25674 33198 569418 588000) 4021) nil (25674 33215 843763 646000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4071) (undo-tree-id1523 . -1) (t 25674 33215 865278 189000)) nil (25674 33356 323836 129000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4075 . 4076) (#("
" 0 1 (fontified nil)) . -4254) (4071 . 4255)) nil (25674 33356 323833 297000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4262 . 4263) (#("
" 0 1 (fontified nil)) . -4444) (4255 . 4445) (nil fontified t 4254 . 4255) (nil face font-lock-doc-face 4254 . 4255) (4254 . 4255) 4253) nil (25674 33356 323831 33000) 0 nil])
([nil nil ((#("        # debug(f\"Queue length: %s\", len(self._queue))
" 0 8 (fontified t) 8 10 (fontified t face font-lock-comment-delimiter-face) 10 17 (fontified t face font-lock-comment-face) 17 18 (fontified t syntax-table (15) face font-lock-comment-face) 18 31 (fontified t face font-lock-comment-face) 31 34 (fontified t face font-lock-comment-face) 34 35 (fontified t syntax-table (15) face font-lock-comment-face) 35 55 (fontified t face font-lock-comment-face)) . 4335) (undo-tree-id1520 . -54) (undo-tree-id1521 . -55) (undo-tree-id1522 . -25) 4360) nil (25674 33356 323828 81000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4335) (undo-tree-id1519 . -1)) nil (25674 33356 323823 193000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -4389) (undo-tree-id1517 . -8) (undo-tree-id1518 . -8) 4397 (4388 . 4397) 4385) nil (25674 33356 323820 554000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-keyword-face)) . 1846) (undo-tree-id1516 . -1)) nil (25674 33356 323696 47000) 0 nil])
([nil nil ((#("ot self.m" 0 2 (fontified t) 2 3 (fontified t) 3 7 (fontified t face font-lock-keyword-face) 7 9 (fontified t)) . 1846) (undo-tree-id1502 . -8) (undo-tree-id1503 . -8) (undo-tree-id1504 . -8) (undo-tree-id1505 . -8) (undo-tree-id1506 . -8) (undo-tree-id1507 . -5) (undo-tree-id1508 . -5) (undo-tree-id1509 . -3) (undo-tree-id1510 . -3) (undo-tree-id1511 . -3) (undo-tree-id1512 . -3) (undo-tree-id1513 . -3) (undo-tree-id1514 . -3) (undo-tree-id1515 . -9)) nil (25674 33356 323692 429000) 0 nil])
([nil nil ((#("odel.running " 0 13 (fontified t)) . 1846) (undo-tree-id1499 . -12) (undo-tree-id1500 . -12) (undo-tree-id1501 . -13)) nil (25674 33356 323674 810000) 0 nil])
([nil nil ((#("or " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . 1846) (undo-tree-id1495 . -2) (undo-tree-id1496 . -3) (undo-tree-id1497 . -3) (undo-tree-id1498 . -3)) nil (25674 33356 323664 298000) 0 nil])
([nil nil ((#("not " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 4240) (undo-tree-id1548 . -3) (undo-tree-id1549 . -4) (undo-tree-id1550 . -4) (t 25674 33356 344082 502000)) nil (25674 33464 869946 225000) 0 nil])
([nil nil ((#("self.model.running or " 0 4 (fontified t face font-lock-keyword-face) 4 19 (fontified t) 19 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t)) . 4240) (undo-tree-id1542 . -18) (undo-tree-id1543 . 3) (undo-tree-id1544 . -18) (undo-tree-id1545 . -18) (undo-tree-id1546 . -21) (undo-tree-id1547 . -7)) nil (25674 33485 194409 617000) 0 nil])
([nil nil ((4256 . 4269) (4247 . 4256) (#("f" 0 1 (fontified t)) . -4247) (undo-tree-id1769 . -1) (4240 . 4248)) nil (25674 33512 370669 397000) 0 nil] [nil nil ((#("        if self.time == INFINITY:
            return
" 0 7 (fontified t) 7 8 (rear-nonsticky t fontified t) 8 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 15 (fontified t face font-lock-keyword-face) 15 34 (fontified t) 34 41 (fontified t) 41 46 (fontified t) 46 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t)) . 4229) (undo-tree-id1526 . -45) (undo-tree-id1527 . -11) (undo-tree-id1528 . -45) (undo-tree-id1529 . -52) (undo-tree-id1530 . -34) (undo-tree-id1531 . -53) (undo-tree-id1532 . -11) (undo-tree-id1533 . -15) (undo-tree-id1534 . -15) (undo-tree-id1535 . -45) (undo-tree-id1537 . -34) (undo-tree-id1539 . -53) (undo-tree-id1540 . -11) (undo-tree-id1541 . -45) 4274) ((4229 . 4282)) (25674 33484 698925 219000) 0 nil])
([nil nil ((#("            self.time == INFINITY:
" 0 12 (fontified t) 12 16 (fontified t face font-lock-keyword-face) 16 35 (fontified t)) . 4257) (undo-tree-id1755 . -34) (undo-tree-id1756 . 23) (undo-tree-id1757 . -35) (undo-tree-id1758 . -16) (undo-tree-id1759 . -16) (undo-tree-id1760 . -11) (undo-tree-id1761 . 23) (undo-tree-id1762 . -12) (undo-tree-id1763 . -12) (undo-tree-id1764 . -12) (undo-tree-id1765 . -11) (undo-tree-id1766 . -11) (undo-tree-id1767 . -11) (undo-tree-id1768 . -35) 4268) nil (25674 33512 370664 651000) 0 nil])
([nil nil ((4269 . 4275) (4256 . 4269) (4247 . 4256) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -4247) (undo-tree-id1524 . -1) (4238 . 4248) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -4238) (undo-tree-id1525 . -1) (4237 . 4239) (4229 . 4237) (nil face font-lock-doc-face 4228 . 4229) (nil fontified t 4228 . 4229) (4228 . 4229) 4217) ((#("
" 0 1 (fontified nil face font-lock-doc-face)) . 4228) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (nil fontified nil 4228 . 4229) (nil face nil 4228 . 4229) (#("        " 0 8 (fontified nil)) . 4229) (undo-tree-id1632 . -8) (undo-tree-id1633 . -8) (undo-tree-id1634 . -8) (undo-tree-id1635 . -8) (undo-tree-id1636 . -8) (undo-tree-id1637 . -8) (undo-tree-id1638 . -8) (undo-tree-id1639 . -8) (undo-tree-id1640 . -8) (undo-tree-id1641 . -8) (undo-tree-id1642 . -8) (undo-tree-id1643 . -8) (undo-tree-id1644 . -8) (undo-tree-id1645 . -8) (undo-tree-id1646 . -8) (undo-tree-id1647 . -8) (undo-tree-id1648 . -8) (undo-tree-id1649 . -8) (undo-tree-id1650 . -8) (undo-tree-id1651 . -8) (undo-tree-id1652 . -8) (undo-tree-id1653 . -8) (undo-tree-id1654 . -8) (undo-tree-id1655 . -8) (undo-tree-id1656 . -8) (undo-tree-id1657 . -8) (#("if" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil face font-lock-keyword-face)) . 4237) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -2) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (4238 . 4239) (#("f not self" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil) 2 5 (fontified nil face font-lock-keyword-face) 5 6 (fontified nil) 6 9 (fontified nil face font-lock-keyword-face) 9 10 (fontified nil face font-lock-keyword-face)) . 4238) (undo-tree-id1684 . -9) (undo-tree-id1685 . -9) (undo-tree-id1686 . -9) (undo-tree-id1687 . -9) (undo-tree-id1688 . -9) (undo-tree-id1689 . -9) (undo-tree-id1690 . -8) (undo-tree-id1691 . -9) (undo-tree-id1692 . -9) (undo-tree-id1693 . -9) (undo-tree-id1694 . -9) (undo-tree-id1695 . -9) (undo-tree-id1696 . -9) (undo-tree-id1697 . -9) (undo-tree-id1698 . -9) (undo-tree-id1699 . -9) (undo-tree-id1700 . -9) (undo-tree-id1701 . -9) (undo-tree-id1702 . -9) (undo-tree-id1703 . -9) (undo-tree-id1704 . -9) (undo-tree-id1705 . -9) (undo-tree-id1706 . -9) (undo-tree-id1707 . -8) (undo-tree-id1708 . -9) (undo-tree-id1709 . -8) (4247 . 4248) (#("f._queue:" 0 1 (fontified nil face font-lock-keyword-face) 1 9 (fontified nil)) . 4247) (undo-tree-id1710 . -9) (undo-tree-id1711 . -9) (undo-tree-id1712 . -9) (undo-tree-id1713 . -9) (undo-tree-id1714 . -9) (undo-tree-id1715 . -9) (undo-tree-id1716 . -9) (undo-tree-id1717 . -9) (undo-tree-id1718 . -9) (undo-tree-id1719 . -9) (undo-tree-id1720 . -9) (undo-tree-id1721 . -9) (undo-tree-id1722 . -9) (undo-tree-id1723 . -9) (undo-tree-id1724 . -9) (undo-tree-id1725 . -9) (undo-tree-id1726 . -9) (undo-tree-id1727 . -9) (undo-tree-id1728 . -9) (undo-tree-id1729 . -9) (undo-tree-id1730 . -9) (undo-tree-id1731 . -9) (undo-tree-id1732 . -9) (#("
            " 0 1 (fontified t) 1 13 (fontified nil)) . 4256) (undo-tree-id1733 . 13) (undo-tree-id1734 . -1) (undo-tree-id1735 . 13) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -13) (undo-tree-id1739 . -13) (undo-tree-id1740 . -13) (undo-tree-id1741 . -13) (#("return" 0 6 (fontified t face font-lock-keyword-face)) . 4269) (undo-tree-id1742 . -5) (undo-tree-id1743 . -5) (undo-tree-id1744 . -5) (undo-tree-id1745 . -5)) (25674 33484 308675 94000) 0 nil])
([nil nil ((4366 . 4370) (#("f" 0 1 (fontified t)) . -4366) (undo-tree-id1746 . -1) (4363 . 4367) (#("p" 0 1 (fontified t)) . -4363) (undo-tree-id1747 . -1) (#("_" 0 1 (fontified t)) . -4364) (undo-tree-id1748 . -1) 4365 (4361 . 4365) (4352 . 4361) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -4352) (undo-tree-id1749 . -1) (4340 . 4353) (#("n" 0 1 (fontified t)) . -4340) (undo-tree-id1750 . -1) 4341 (4340 . 4341) (#("next " 0 4 (fontified t face font-lock-builtin-face) 4 5 (fontified t)) . -4340) (undo-tree-id1751 . -5) 4345 (4342 . 4345) (#("t" 0 1 (fontified t)) . -4342) (undo-tree-id1752 . -1) 4343 (4340 . 4343) (#("let " 0 4 (fontified t)) . -4340) (undo-tree-id1753 . -4) 4344 (4340 . 4344) (4331 . 4340) (#("        " 0 8 (fontified t)) . 4331) (undo-tree-id1754 . -8) 4339 (4330 . 4339) 4318) nil (25674 33512 370581 379000) 0 nil])
([nil nil ((4272 . 4289) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -4272) (undo-tree-id1551 . -1) (4269 . 4273) (4256 . 4269) (t 25674 33464 891109 29000) 4246) ((#("
            " 0 1 (fontified t) 1 13 (fontified nil)) . 4256) (undo-tree-id1552 . -1) (undo-tree-id1553 . -13) (undo-tree-id1554 . -13) (undo-tree-id1555 . -13) (undo-tree-id1556 . -13) (undo-tree-id1557 . -13) (undo-tree-id1558 . -13) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -13) (undo-tree-id1562 . -13) (undo-tree-id1563 . -13) (undo-tree-id1564 . -13) (undo-tree-id1565 . -13) (undo-tree-id1566 . -13) (undo-tree-id1567 . -13) (undo-tree-id1568 . -13) (undo-tree-id1569 . -13) (#("self" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil face font-lock-keyword-face)) . 4269) (undo-tree-id1570 . -3) (undo-tree-id1571 . -3) (undo-tree-id1572 . -3) (undo-tree-id1573 . -3) (undo-tree-id1574 . -3) (undo-tree-id1575 . -4) (undo-tree-id1576 . -3) (undo-tree-id1577 . -3) (undo-tree-id1578 . -3) (undo-tree-id1579 . -3) (undo-tree-id1580 . -3) (undo-tree-id1581 . -3) (undo-tree-id1582 . -3) (undo-tree-id1583 . -3) (undo-tree-id1584 . -3) (4272 . 4273) (#("f.time = INFINITY" 0 1 (fontified t face font-lock-keyword-face) 1 17 (fontified t)) . 4272) (undo-tree-id1585 . 1) (undo-tree-id1586 . -16) (undo-tree-id1587 . -16) (undo-tree-id1588 . -16) (undo-tree-id1589 . -16) (undo-tree-id1590 . -16) (undo-tree-id1591 . -16) (undo-tree-id1592 . -16) (undo-tree-id1593 . -16) (undo-tree-id1594 . -16) (undo-tree-id1595 . -16) (undo-tree-id1596 . -16) (undo-tree-id1597 . -16) (undo-tree-id1598 . -9) (undo-tree-id1599 . -17) (undo-tree-id1600 . -16) (undo-tree-id1601 . -16) (undo-tree-id1602 . -16) (t 25674 33475 783012 298000)) (25674 33475 763286 701000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -4371) (undo-tree-id1810 . -8) 4379 (4370 . 4379) (t 25674 33512 390688 214000) 4369) nil (25674 33651 145886 863000) 0 nil])
nil
([nil nil ((4382 . 4393) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -4382) (undo-tree-id1809 . -1) (4379 . 4383) (4370 . 4379) 4332) nil (25674 33651 145883 263000) 0 nil])
([nil nil ((#("        self._queue.ap
" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 22 (fontified t) 22 23 (fontified t)) . 4371) (undo-tree-id1804 . -22) (undo-tree-id1805 . 1) (undo-tree-id1806 . -23) (undo-tree-id1807 . -21) (undo-tree-id1808 . 1) 4392) nil (25674 33651 145879 870000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -4371) (undo-tree-id1803 . -8) 4379 (4370 . 4379) 4332) nil (25674 33651 145869 649000) 0 nil])
([nil nil ((4380 . 4384) (#("f" 0 1 (fontified t)) . -4380) (undo-tree-id1801 . -1) (4371 . 4381) (#("        " 0 8 (fontified t)) . 4371) (undo-tree-id1802 . -8) 4379 (4370 . 4379) 4332) nil (25674 33651 145864 375000) 0 nil])
([nil nil ((#("        for 
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 13 (fontified t)) . 4372) (undo-tree-id1797 . -12) (undo-tree-id1798 . 1) (undo-tree-id1799 . -13) (undo-tree-id1800 . -11) 4383) nil (25674 33651 145860 5000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4371) (undo-tree-id1796 . -1)) nil (25674 33651 145854 737000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -4331) (undo-tree-id1795 . -8) 4339 (4330 . 4339) 4323) nil (25674 33651 145852 345000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4331) (undo-tree-id1791 . 1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1)) nil (25674 33651 145848 773000) 0 nil])
([nil nil ((4349 . 4353) (#(" " 0 1 (fontified t)) . -4349) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) 4350 (4340 . 4350) (4331 . 4340) (#("        " 0 8 (fontified t)) . 4331) (undo-tree-id1790 . -8) 4339 (4330 . 4339) 4325) nil (25674 33651 145842 496000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -4345) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) 4346) nil (25674 33651 145833 980000) 0 nil])
([nil nil ((4355 . 4366) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -4355) (undo-tree-id1780 . -1) (4352 . 4356)) nil (25674 33651 145825 464000) 0 nil])
([nil nil ((4406 . 4419) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -4406) (undo-tree-id1770 . -1) (4403 . 4407) (4390 . 4403) (4386 . 4390) (#("self" 0 4 (fontified t face font-lock-keyword-face)) . -4386) (undo-tree-id1771 . -4) 4390 (#("." 0 1 (fontified t)) . -4390) (undo-tree-id1772 . -1) 4391 (#("time" 0 4 (fontified t)) . -4391) (undo-tree-id1773 . -4) 4395 (#(":" 0 1 (fontified t)) . -4395) (undo-tree-id1774 . -1) 4396 (4389 . 4396) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -4389) (undo-tree-id1775 . -1) (4384 . 4390) (#("<" 0 1 (fontified t)) . -4384) (undo-tree-id1776 . -1) (#(" " 0 1 (fontified t)) . -4385) (undo-tree-id1777 . -1) 4386 (4377 . 4386) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -4377) (undo-tree-id1778 . -1) (4376 . 4378) (4367 . 4376) (#("        " 0 8 (fontified t)) . 4367) (undo-tree-id1779 . -8) 4375 (4366 . 4375) 4365) nil (25674 33651 145817 697000) 0 nil])
([nil nil ((4432 . 4438) (4419 . 4432) 4418) nil (25674 33651 145787 957000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -4439) (undo-tree-id1824 . -8) 4447 (4438 . 4447) (t 25674 33651 165471 78000) 4437) nil (25674 33718 239570 137000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4439) (undo-tree-id1820 . 1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1)) nil (25674 33718 239566 112000) 0 nil])
([nil nil ((4478 . 4481)) nil (25674 33718 239560 505000) 0 nil])
([nil nil ((#("bucket " 0 6 (fontified t face font-lock-variable-name-face) 6 7 (fontified t)) . 4448) (undo-tree-id1819 . -6)) nil (25674 33718 239559 75000) 0 nil])
([nil nil ((#("= " 0 2 (fontified t)) . 4448) (undo-tree-id1818 . -1)) nil (25674 33718 239556 705000) 0 nil])
([nil nil ((4448 . 4457) (#("i" 0 1 (fontified t)) . -4448) (undo-tree-id1817 . -1) 4449 (4448 . 4449)) nil (25674 33718 239554 45000) 0 nil])
([nil nil ((4510 . 4523) (4503 . 4510) (4494 . 4503) (#("b" 0 1 (fontified t)) . -4494) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (#("u" 0 1 (fontified t)) . -4495) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) 4496 (4490 . 4496) (#("f" 0 1 (fontified t)) . -4490) (undo-tree-id1816 . -1) (4481 . 4491) 4456) nil (25674 33718 239548 703000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . 4511) (undo-tree-id1811 . -11) 4523) nil (25674 33718 239490 429000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4522 . 4523) (#("
" 0 1 (fontified nil)) . -4874) (4510 . 4875) 4482) nil (25674 33718 239472 112000) 0 nil])
([nil nil ((3977 . 3983) (3960 . 3977) (t 25674 33718 260887 364000) 3946) nil (25674 33888 915647 706000) 0 nil])
([nil nil ((#("                break
" 0 16 (fontified t) 16 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t)) . 3984) (undo-tree-id1844 . -21) (undo-tree-id1845 . -22) (undo-tree-id1846 . -20) (undo-tree-id1847 . -22) (undo-tree-id1848 . -22) 4004) nil (25674 33888 915645 551000) 0 nil])
([nil nil ((4011 . 4028) (4004 . 4011) (3997 . 4004) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -3997) (undo-tree-id1843 . -1) (3996 . 3998) (3983 . 3996) 3973) nil (25674 33888 915638 926000) 0 nil])
([nil nil ((#("                " 0 16 (fontified t)) . 4012) (undo-tree-id1842 . -15) 4028) nil (25674 33888 915635 322000) 0 nil])
([nil nil ((3875 . 3881) (3866 . 3875) 3809) nil (25674 33888 915633 82000) 0 nil])
([nil nil ((3892 . 3893) (#("." 0 1 (fontified t)) . -3892) (undo-tree-id1835 . -1) (#("l" 0 1 (fontified t)) . -3893) (undo-tree-id1836 . -1) (#("e" 0 1 (fontified t)) . -3894) (undo-tree-id1837 . -1) (#("n" 0 1 (fontified t face font-lock-builtin-face)) . -3895) (undo-tree-id1838 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -3896) (undo-tree-id1839 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -3897) (undo-tree-id1840 . -1) 3898 (3884 . 3898) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -3884) (undo-tree-id1841 . -1) (3881 . 3885)) nil (25674 33888 915629 403000) 0 nil])
([nil nil ((3881 . 3885)) nil (25674 33888 915620 296000) 0 nil])
([nil nil ((4059 . 4065) (4042 . 4059) 4032) nil (25674 33888 915618 999000) 0 nil])
([nil nil ((3910 . 3915)) nil (25674 33888 915617 316000) 0 nil])
([nil nil ((3916 . 3917)) nil (25674 33888 915616 317000) 0 nil])
([nil nil ((3921 . 3931)) nil (25674 33888 915615 353000) 0 nil])
([nil nil ((3942 . 3943)) nil (25674 33888 915614 393000) 0 nil])
([nil nil ((4082 . 4084)) nil (25674 33888 915613 344000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4085) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1)) nil (25674 33888 915611 872000) 0 nil])
([nil nil ((#("        else:
" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 14 (fontified t)) . 4085) (undo-tree-id1826 . -13) (undo-tree-id1827 . -14) (undo-tree-id1828 . -14) (undo-tree-id1829 . -14)) nil (25674 33888 915605 721000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -4093) (4085 . 4093)) nil (25674 33888 915598 867000) 0 nil])
([nil nil ((4105 . 4111) (#("append" 0 6 (fontified t)) . 4105) (undo-tree-id1825 . -5)) nil (25674 33888 915595 723000) 0 nil])
([nil nil ((4112 . 4117)) nil (25674 33888 915577 937000) 0 nil])
([nil nil ((#("                heappop(self._queue)
" 0 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 28 (fontified t face font-lock-keyword-face) 28 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-1-face)) 36 37 (fontified t)) . 4847) (undo-tree-id1900 . -36) (undo-tree-id1901 . -37) (undo-tree-id1902 . -37) (undo-tree-id1903 . -37) (t 25674 33888 935411 71000)) nil (25674 34031 199296 221000) 0 nil])
([nil nil ((#("                " 0 16 (fontified t)) . -4847) (undo-tree-id1899 . -16) 4863 (4846 . 4863) 4815) nil (25674 34031 199291 248000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4847) (undo-tree-id1893 . 1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1)) nil (25674 34031 199288 139000) 0 nil])
([nil nil ((#("not " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 4830) (undo-tree-id1892 . -3)) nil (25674 34031 199281 558000) 0 nil])
([nil nil ((#("            self._schedule(agent, when, replace=True)
" 0 12 (fontified t) 12 16 (fontified t face font-lock-keyword-face) 16 18 (fontified t) 18 23 (fontified t) 23 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 38 (fontified t) 38 40 (fontified t) 40 48 (fontified t) 48 52 (fontified t face font-lock-constant-face) 52 53 (fontified t face (rainbow-delimiters-depth-1-face)) 53 54 (fontified t)) . 4869) (undo-tree-id1885 . -53) (undo-tree-id1886 . -54) (undo-tree-id1887 . -54) (undo-tree-id1888 . -54) (undo-tree-id1889 . -15) (undo-tree-id1890 . -54) (undo-tree-id1891 . -54) 4884) nil (25674 34031 199278 614000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4854 . 4855) (#("
" 0 1 (fontified nil)) . -4896) (4842 . 4897) 4815) nil (25674 34031 199270 665000) 0 nil])
([nil nil ((4843 . 4859) (#("            " 0 11 (fontified t) 11 12 (fontified t rear-nonsticky t)) . 4843) (undo-tree-id1884 . -12) 4855) nil (25674 34031 199268 695000) 0 nil])
([nil nil ((#("                continue
" 0 16 (fontified t) 16 19 (fontified t face font-lock-keyword-face) 19 24 (fontified t face font-lock-keyword-face) 24 25 (fontified t)) . 4901) (undo-tree-id1878 . -24) (undo-tree-id1879 . 25) (undo-tree-id1880 . -25) (undo-tree-id1881 . -12) (undo-tree-id1882 . -25) (undo-tree-id1883 . -25) 4913) nil (25674 34031 199265 684000) 0 nil])
([nil nil ((4430 . 4435)) nil (25674 34031 199259 426000) 0 nil])
([nil nil ((4435 . 4439) (#("when" 0 3 (fontified t) 3 4 (fontified t)) . 4435) (undo-tree-id1875 . -3) (undo-tree-id1876 . 4) (undo-tree-id1877 . -4)) nil (25674 34031 199257 721000) 0 nil])
([nil nil ((4473 . 4482) (#("when" 0 4 (fontified t)) . 4473) (undo-tree-id1872 . -3) (undo-tree-id1873 . -4) (undo-tree-id1874 . -4) 4477) nil (25674 34031 199253 365000) 0 nil])
([nil nil ((4514 . 4523) (#("when" 0 4 (fontified t)) . 4514) (undo-tree-id1870 . -3) (undo-tree-id1871 . -4)) nil (25674 34031 199249 135000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4439) (undo-tree-id1866 . -1) (#(" " 0 1 (fontified t)) . -4440) (undo-tree-id1867 . -1) (#("_" 0 1 (fontified t)) . -4441) (undo-tree-id1868 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -4442) (undo-tree-id1869 . -1) 4443) nil (25674 34031 199244 795000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -4429) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . 1) (undo-tree-id1865 . -1) 4430) nil (25674 34031 199238 746000) 0 nil])
([nil nil ((4455 . 4458)) nil (25674 34031 199233 628000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4923 . 4924) (#("
" 0 1 (fontified nil)) . -4953) (4915 . 4954)) nil (25674 34031 199232 178000) 0 nil])
([nil nil ((4927 . 4929) (#("f" 0 1 (fontified nil)) . -4927) (4924 . 4928)) nil (25674 34031 199230 175000) 0 nil])
([nil nil ((4929 . 4933) (#("next" 0 4 (fontified t)) . 4929) (undo-tree-id1860 . -3) (undo-tree-id1861 . 4)) nil (25674 34031 199228 307000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 4933) (undo-tree-id1859 . 1)) nil (25674 34031 199224 808000) 0 nil])
([nil nil ((#("time " 0 4 (fontified t) 4 5 (fontified t)) . 4933) (undo-tree-id1857 . -4) (undo-tree-id1858 . 5)) nil (25674 34031 199222 5000) 0 nil])
([nil nil ((4933 . 4934)) nil (25674 34031 199217 995000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4914) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1)) nil (25674 34031 199212 217000) 0 nil])
([nil nil ((3263 . 3269) (t 25674 34031 218186 154000)) nil (25674 34046 152488 575000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t face font-lock-type-face)) . -3284) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -3285) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -3286) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (#("h" 0 1 (fontified t face font-lock-type-face)) . -3287) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (#("A" 0 1 (fontified t face font-lock-type-face)) . -3288) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (#("L" 0 1 (fontified t face font-lock-type-face)) . -3289) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -3290) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -3291) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -3292) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) 3293) nil (25674 34046 152475 603000) 0 nil])
([nil nil ((3263 . 3282) (#("L" 0 1 (fontified t face font-lock-type-face)) . -3263) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) 3264 (3263 . 3264) (#("Timed" 0 5 (fontified t face font-lock-type-face)) . -3263) (undo-tree-id2071 . -5) (undo-tree-id2072 . -1) (undo-tree-id2073 . -2) (undo-tree-id2074 . -3) (undo-tree-id2075 . -4) (undo-tree-id2076 . -5) (undo-tree-id2077 . -4) (undo-tree-id2078 . -5) 3268 (3263 . 3268) (#("L" 0 1 (fontified t face font-lock-type-face)) . -3263) (undo-tree-id2079 . -1) 3264 (3263 . 3264) (#("SimpleTimedActivation" 0 6 (fontified t face font-lock-type-face) 6 11 (fontified t face font-lock-type-face) 11 21 (fontified t face font-lock-type-face)) . 3263) (undo-tree-id2080 . -20) (undo-tree-id2081 . -21) (undo-tree-id2082 . -21) (undo-tree-id2083 . -21) (t 25674 34046 178057 559000)) nil (25674 37407 233875 438000) 0 nil])
([nil nil ((3277 . 3281) (3263 . 3277) (#("TimedListActivation" 0 19 (fontified t face font-lock-type-face)) . 3263) (undo-tree-id2022 . -18) (undo-tree-id2023 . -1) (undo-tree-id2024 . -2) (undo-tree-id2025 . -1) (undo-tree-id2026 . -3) (undo-tree-id2027 . -2) (undo-tree-id2028 . -4) (undo-tree-id2029 . -3) (undo-tree-id2030 . -5) (undo-tree-id2031 . -4) (undo-tree-id2032 . -6) (undo-tree-id2033 . -5) (undo-tree-id2034 . -7) (undo-tree-id2035 . -6) (undo-tree-id2036 . -8) (undo-tree-id2037 . -7) (undo-tree-id2038 . -9) (undo-tree-id2039 . -8) (undo-tree-id2040 . -10) (undo-tree-id2041 . -9) (undo-tree-id2042 . -11) (undo-tree-id2043 . -10) (undo-tree-id2044 . -12) (undo-tree-id2045 . -11) (undo-tree-id2046 . -13) (undo-tree-id2047 . -12) (undo-tree-id2048 . -14) (undo-tree-id2049 . -13) (undo-tree-id2050 . -15) (undo-tree-id2051 . -14) (undo-tree-id2052 . -16) (undo-tree-id2053 . -15) (undo-tree-id2054 . -17) (undo-tree-id2055 . -16) (undo-tree-id2056 . -18) (undo-tree-id2057 . -17) (undo-tree-id2058 . -19) (undo-tree-id2059 . -18) (undo-tree-id2060 . -18) (undo-tree-id2061 . -18) (undo-tree-id2062 . -18) (undo-tree-id2063 . -19) (undo-tree-id2064 . -19) (undo-tree-id2065 . -19) (undo-tree-id2066 . -19) (undo-tree-id2067 . -19)) nil (25674 37407 233847 496000) 0 nil])
([nil nil ((3890 . 3893) (3887 . 3890) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -3887) (undo-tree-id2084 . -1) (3869 . 3888) (3860 . 3869) (t 25674 37407 260137 509000) 3838) nil (25674 37505 676688 955000) 0 nil])
([nil nil ((4527 . 4546) (4514 . 4527) (t 25674 37478 987554 742000) 4513) nil (25674 37515 651555 421000) 0 nil] [nil nil ((4485 . 4489) (#("f" 0 1 (fontified t)) . -4485) (undo-tree-id2091 . -1) (4479 . 4486) (t 25674 37478 987554 742000)) ((#(".poplef" 0 6 (fontified nil) 6 7 (fontified nil)) . 4479) (undo-tree-id2092 . -6) (undo-tree-id2093 . -6) (undo-tree-id2094 . -7) (undo-tree-id2095 . 1) (undo-tree-id2096 . -6) (undo-tree-id2097 . 1) (undo-tree-id2098 . -6) (undo-tree-id2099 . -6) (undo-tree-id2100 . -6) (undo-tree-id2101 . -6) (undo-tree-id2102 . -6) (undo-tree-id2103 . -6) (4485 . 4486) (#("ft()" 0 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-1-face)) 3 4 (fontified t face (rainbow-delimiters-depth-1-face))) . 4485) (undo-tree-id2104 . -4) (undo-tree-id2105 . -4) (undo-tree-id2106 . -4) (undo-tree-id2107 . 2) (undo-tree-id2108 . -3) (undo-tree-id2109 . 1) (undo-tree-id2110 . -4) (undo-tree-id2111 . -3) (undo-tree-id2112 . -3) (undo-tree-id2113 . -3) (undo-tree-id2114 . -4) (undo-tree-id2115 . -4)) (25674 37505 652442 623000) 0 nil])
([nil nil ((#("            print(\"STILL TIME\")
" 0 12 (fontified t) 12 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t face (rainbow-delimiters-depth-1-face)) 18 19 (fontified t syntax-table (15) face font-lock-string-face) 19 29 (fontified t face font-lock-string-face) 29 30 (fontified t syntax-table (15) face font-lock-string-face) 30 31 (fontified t face (rainbow-delimiters-depth-1-face)) 31 32 (fontified t)) . 4515) (undo-tree-id2116 . -31) (undo-tree-id2117 . 1) (undo-tree-id2118 . -32) (undo-tree-id2119 . -18) (undo-tree-id2120 . -17) (undo-tree-id2121 . -18) (undo-tree-id2122 . -30) (undo-tree-id2123 . -30) (undo-tree-id2124 . -30) (undo-tree-id2125 . -30) (undo-tree-id2126 . -30) (undo-tree-id2127 . -30) (undo-tree-id2128 . -32) (undo-tree-id2129 . -32) (undo-tree-id2130 . -30) (undo-tree-id2131 . -30) (undo-tree-id2132 . -30) (undo-tree-id2133 . -30) (undo-tree-id2134 . -30) (undo-tree-id2135 . -30) (undo-tree-id2136 . 15) (undo-tree-id2137 . -18) (undo-tree-id2138 . 2) (undo-tree-id2139 . -31) (undo-tree-id2140 . -30) (undo-tree-id2141 . -32) 4545 (t 25674 37515 675256 571000)) nil (25674 37545 969696 940000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 4489) (undo-tree-id2089 . 1) (undo-tree-id2090 . 1)) ((4489 . 4490)) (25674 37505 631911 142000) 0 nil])
([nil nil ((4652 . 4664) (4639 . 4652) 4638) nil (25674 37545 969629 968000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t face highlight-numbers-number)) . -4489) (undo-tree-id2085 . 1) (undo-tree-id2086 . -1) (undo-tree-id2087 . 1) (#("]" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . -4490) (undo-tree-id2088 . -1) 4491) ((4489 . 4491)) (25674 37505 625744 662000) 0 nil])
([nil nil ((4686 . 4693) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -4686) (undo-tree-id2160 . -1) (4677 . 4687) (4664 . 4677) (t 25674 37545 995010 112000) 4663) nil (25674 37595 196791 534000) 0 nil])
nil
([nil nil ((#("            print(self.time)
" 0 12 (fontified t) 12 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t face (rainbow-delimiters-depth-1-face)) 18 22 (fontified t face font-lock-keyword-face) 22 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 29 (fontified t)) . 4665) (undo-tree-id2143 . -28) (undo-tree-id2144 . 1) (undo-tree-id2145 . -29) (undo-tree-id2146 . -29) (undo-tree-id2147 . -29) (undo-tree-id2148 . -27) (undo-tree-id2149 . -27) (undo-tree-id2150 . 1) (undo-tree-id2151 . -28) (undo-tree-id2152 . -28) (undo-tree-id2153 . -28) (undo-tree-id2154 . -27) (undo-tree-id2155 . -27) (undo-tree-id2156 . 12) (undo-tree-id2157 . -18) (undo-tree-id2158 . 2) (undo-tree-id2159 . -28) 4692) nil (25674 37595 196787 512000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4622 . 4623) (#("
" 0 1 (fontified nil)) . -4639) (4610 . 4640) 4584) nil (25674 37595 196768 713000) 0 nil])
([nil nil ((#("            " 0 11 (fontified nil) 11 12 (fontified nil rear-nonsticky t)) . -4619) (undo-tree-id2142 . -12) (4611 . 4619) 4623) nil (25674 37595 200060 806000) 0 nil])
([nil nil ((4677 . 4679)) nil (25674 37596 952364 855000) 0 nil] [nil nil ((4623 . 4632)) ((#("
        " 0 9 (fontified t)) . 4623)) (25674 37595 196748 950000) 0 nil])
([nil nil ((5043 . 5055) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -5043) (undo-tree-id2161 . -1) (5040 . 5044) (5031 . 5040) (t 25674 37596 974595 637000) 4994) nil (25674 37611 376743 972000) 0 nil])
nil
([nil nil ((#("        print(self.time)
" 0 8 (fontified t) 8 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 18 (fontified t face font-lock-keyword-face) 18 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 25 (fontified t)) . 4611) (undo-tree-id2189 . -24) (undo-tree-id2190 . -25) (undo-tree-id2191 . -24) (undo-tree-id2192 . -22) (undo-tree-id2193 . -25) (undo-tree-id2194 . -25) (undo-tree-id2195 . -22) (undo-tree-id2196 . -22) (undo-tree-id2197 . 12) (undo-tree-id2198 . -14) (undo-tree-id2199 . 2) (undo-tree-id2200 . -24) (undo-tree-id2201 . -25) 4633 (t 25674 37611 410478 253000)) nil (25674 37620 723201 713000) 0 nil])
([nil nil ((#("            # print(agent)
" 0 12 (fontified t) 12 14 (fontified t face font-lock-comment-delimiter-face) 14 19 (fontified t face font-lock-comment-face) 19 20 (fontified t face font-lock-comment-face) 20 25 (fontified t face font-lock-comment-face) 25 26 (fontified t face font-lock-comment-face) 26 27 (fontified t face font-lock-comment-face)) . 4640) (undo-tree-id2162 . -26) (undo-tree-id2163 . -12) (undo-tree-id2164 . -26) (undo-tree-id2165 . -26) (undo-tree-id2166 . -26) (undo-tree-id2167 . -25) (undo-tree-id2168 . -25) (undo-tree-id2169 . -27) (undo-tree-id2170 . -27) (undo-tree-id2171 . -27) (undo-tree-id2172 . -27) (undo-tree-id2173 . -27) (undo-tree-id2174 . -12) (undo-tree-id2175 . -12) (undo-tree-id2176 . -12) (undo-tree-id2177 . -12) (undo-tree-id2178 . -27) (undo-tree-id2179 . -22) (undo-tree-id2180 . -27) (undo-tree-id2181 . -27) (undo-tree-id2182 . -22) (undo-tree-id2183 . -22) (undo-tree-id2184 . -22) (undo-tree-id2185 . -22) (undo-tree-id2186 . -22) (undo-tree-id2187 . -22) (undo-tree-id2188 . -27) 4662) nil (25674 37620 723180 745000) 0 nil])
([nil nil ((4956 . 4965) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -4956) (undo-tree-id2210 . -1) (4951 . 4957) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -4951) (undo-tree-id2211 . -1) (4950 . 4952) (#("    " 0 4 (fontified t)) . -4950) (undo-tree-id2212 . -4) 4954 (#("    " 0 4 (fontified t)) . -4954) (undo-tree-id2213 . -4) 4958 (#("i" 0 1 (fontified t)) . -4958) (undo-tree-id2214 . -1) 4959 (4958 . 4959) (4941 . 4958) (t 25674 37620 746402 335000) 4941) nil (25674 37635 239254 22000) 0 nil])
([nil nil ((#("        " 0 5 (fontified nil) 5 7 (fontified nil) 7 8 (rear-nonsticky t fontified nil)) . -4978) (4966 . 4978) 4988) nil (25674 37635 239243 962000) 0 nil])
([nil nil ((#("        self.steps += 1
" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 22 (fontified t) 22 23 (fontified t face highlight-numbers-number) 23 24 (fontified t)) . 5008) (undo-tree-id2202 . -23) (undo-tree-id2203 . -24) (undo-tree-id2204 . -22) (undo-tree-id2205 . -24) (undo-tree-id2206 . -24) (undo-tree-id2207 . -22) (undo-tree-id2208 . -22) (undo-tree-id2209 . -24) 5030) nil (25674 37635 239241 127000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4949 . 4950) (#("
" 0 1 (fontified nil)) . -4965) (4941 . 4966)) nil (25674 37635 243730 533000) 0 nil])
([nil nil ((5070 . 5078) (5061 . 5070) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -5061) (undo-tree-id2219 . -1) (5058 . 5062) (5045 . 5058) (5040 . 5045) (#("    " 0 4 (fontified t)) . -5040) (undo-tree-id2220 . -4) (undo-tree-id2221 . -4) (undo-tree-id2222 . -4) (undo-tree-id2223 . -4) (undo-tree-id2224 . -4) (undo-tree-id2225 . -4) 5044 (5031 . 5044) 5001) nil (25674 37641 238953 928000) 0 nil] [nil nil ((4977 . 4981)) ((#("not " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 4977) (undo-tree-id2215 . -3) (undo-tree-id2216 . -3) (undo-tree-id2217 . -3) (undo-tree-id2218 . -3)) (25674 37635 239213 937000) 0 nil])
([nil nil ((#("class CalendarActivation(BaseScheduler):
    def __init__(self, *args, shuffle=True, **kwargs):
        super().__init__(*args, **kwargs)
        self._queue = deque()
        self._shuffle = shuffle
        self.logger = getattr(self.model, \"logger\", logger).getChild(f\"time_{ self.model }\")
        self.next_time = self.time

    def add(self, agent: MesaAgent, when=None):
        if when is None:
            when = self.time
        else:
            when = float(when)
        self._schedule(agent, None, when)
        super().add(agent)

    def _schedule(self, agent, when=None, replace=False):
        when = when or self.time
        pos = len(self._queue)
        for (ix, l) in enumerate(self._queue):
            if l[0] == when:
                l[1].append(agent)
                return
            if l[0] < when:
                pos = ix
        self._queue.insert(pos, (when, [agent]))

    def step(self) -> None:
        \"\"\"
        Executes agents in order, one at a time. After each step,
        an agent will signal when it wants to be scheduled next.
        \"\"\"
        if not self._queue:
            return

        next_time = INFINITY

        now = self.time

        next_time = self._queue[0][0]

        if next_time > now:
            self.time = next_time
            return

        bucket = self._queue.popleft()[1]
        for agent in bucket:
            try:
                when = agent.step() or 1
                when += now
            except DeadAgent:
                agent.alive = False
                heappop(self._queue)
                continue

            if agent.alive:
                self._schedule(agent, when, replace=True)

        self.steps += 1
        if self._queue:
            self.time = self._queue[0][0]
        else:
            self.time = INFINITY


" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 24 (fontified t face font-lock-type-face) 24 25 (fontified t face (rainbow-delimiters-depth-1-face)) 25 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-1-face)) 39 40 (fontified t) 40 41 (fontified t) 41 44 (fontified t) 44 45 (rear-nonsticky t fontified t) 45 48 (fontified t face font-lock-keyword-face) 48 49 (fontified t) 49 57 (fontified t face font-lock-function-name-face) 57 58 (fontified t face (rainbow-delimiters-depth-1-face)) 58 62 (fontified t face font-lock-keyword-face) 62 79 (fontified t) 79 83 (fontified t face font-lock-constant-face) 83 93 (fontified t) 93 94 (fontified t face (rainbow-delimiters-depth-1-face)) 94 104 (fontified t) 104 106 (fontified t face font-lock-builtin-face) 106 109 (fontified t face font-lock-builtin-face) 109 110 (fontified t face (rainbow-delimiters-depth-1-face)) 110 111 (fontified t face (rainbow-delimiters-depth-1-face)) 111 120 (fontified t) 120 121 (fontified t face (rainbow-delimiters-depth-1-face)) 121 136 (fontified t) 136 137 (fontified t face (rainbow-delimiters-depth-1-face)) 137 138 (fontified t) 138 146 (fontified t) 146 150 (fontified t face font-lock-keyword-face) 150 165 (fontified t) 165 166 (fontified t face (rainbow-delimiters-depth-1-face)) 166 167 (fontified t face (rainbow-delimiters-depth-1-face)) 167 168 (fontified t) 168 176 (fontified t) 176 180 (fontified t face font-lock-keyword-face) 180 199 (fontified t) 199 200 (fontified t) 200 208 (fontified t) 208 212 (fontified t face font-lock-keyword-face) 212 222 (fontified t) 222 229 (fontified t face font-lock-builtin-face) 229 230 (fontified t face (rainbow-delimiters-depth-1-face)) 230 234 (fontified t face font-lock-keyword-face) 234 242 (fontified t) 242 243 (syntax-table (15) fontified t face font-lock-string-face) 243 249 (fontified t face font-lock-string-face) 249 250 (syntax-table (15) fontified t face font-lock-string-face) 250 258 (fontified t) 258 259 (fontified t face (rainbow-delimiters-depth-1-face)) 259 268 (fontified t) 268 269 (fontified t face (rainbow-delimiters-depth-1-face)) 269 270 (fontified t) 270 271 (syntax-table (15) fontified t face font-lock-string-face) 271 290 (fontified t face font-lock-string-face) 290 291 (syntax-table (15) fontified t face font-lock-string-face) 291 292 (fontified t face (rainbow-delimiters-depth-1-face)) 292 293 (fontified t) 293 301 (fontified t) 301 305 (fontified t face font-lock-keyword-face) 305 318 (fontified t) 318 322 (fontified t face font-lock-keyword-face) 322 327 (fontified t) 327 328 (fontified t) 328 329 (fontified t) 329 332 (fontified t) 332 333 (rear-nonsticky t fontified t) 333 336 (fontified t face font-lock-keyword-face) 336 337 (fontified t) 337 340 (fontified t face font-lock-function-name-face) 340 341 (fontified t face (rainbow-delimiters-depth-1-face)) 341 345 (fontified t face font-lock-keyword-face) 345 356 (fontified t) 356 370 (fontified t) 370 374 (fontified t face font-lock-constant-face) 374 375 (fontified t face (rainbow-delimiters-depth-1-face)) 375 385 (fontified t) 385 387 (fontified t face font-lock-keyword-face) 387 393 (fontified t) 393 395 (fontified t face font-lock-keyword-face) 395 396 (fontified t) 396 400 (fontified t face font-lock-constant-face) 400 414 (fontified t) 414 418 (fontified t face font-lock-variable-name-face) 418 421 (fontified t) 421 425 (fontified t face font-lock-keyword-face) 425 439 (fontified t) 439 443 (fontified t face font-lock-keyword-face) 443 445 (fontified t) 445 457 (fontified t) 457 461 (fontified t face font-lock-variable-name-face) 461 464 (fontified t) 464 469 (fontified t face font-lock-builtin-face) 469 470 (fontified t face (rainbow-delimiters-depth-1-face)) 470 474 (fontified t) 474 475 (fontified t face (rainbow-delimiters-depth-1-face)) 475 476 (fontified t) 476 484 (fontified t) 484 488 (fontified t face font-lock-keyword-face) 488 498 (fontified t) 498 499 (fontified t face (rainbow-delimiters-depth-1-face)) 499 506 (fontified t) 506 510 (fontified t face font-lock-constant-face) 510 511 (fontified t) 511 516 (fontified t) 516 517 (fontified t face (rainbow-delimiters-depth-1-face)) 517 518 (fontified t) 518 526 (fontified t) 526 531 (fontified t face font-lock-builtin-face) 531 532 (fontified t face (rainbow-delimiters-depth-1-face)) 532 533 (fontified t face (rainbow-delimiters-depth-1-face)) 533 537 (fontified t) 537 538 (fontified t face (rainbow-delimiters-depth-1-face)) 538 541 (fontified t) 541 543 (fontified t) 543 544 (fontified t face (rainbow-delimiters-depth-1-face)) 544 545 (fontified t) 545 546 (fontified t) 546 549 (fontified t) 549 550 (rear-nonsticky t fontified t) 550 553 (fontified t face font-lock-keyword-face) 553 554 (fontified t) 554 563 (fontified t face font-lock-function-name-face) 563 564 (fontified t face (rainbow-delimiters-depth-1-face)) 564 568 (fontified t face font-lock-keyword-face) 568 582 (fontified t) 582 586 (fontified t face font-lock-constant-face) 586 596 (fontified t) 596 601 (fontified t face font-lock-constant-face) 601 602 (fontified t face (rainbow-delimiters-depth-1-face)) 602 603 (fontified t) 603 604 (fontified t) 604 612 (fontified t) 612 616 (fontified t face font-lock-variable-name-face) 616 624 (fontified t) 624 626 (fontified t face font-lock-keyword-face) 626 627 (fontified t) 627 631 (fontified t face font-lock-keyword-face) 631 636 (fontified t) 636 637 (fontified t) 637 645 (fontified t) 645 648 (fontified t face font-lock-variable-name-face) 648 651 (fontified t) 651 654 (fontified t face font-lock-builtin-face) 654 655 (fontified t face (rainbow-delimiters-depth-1-face)) 655 659 (fontified t face font-lock-keyword-face) 659 666 (fontified t) 666 667 (fontified t face (rainbow-delimiters-depth-1-face)) 667 668 (fontified t) 668 670 (fontified t) 670 676 (fontified t) 676 679 (fontified t face font-lock-keyword-face) 679 680 (fontified t) 680 681 (fontified t face (rainbow-delimiters-depth-1-face)) 681 685 (fontified t) 685 686 (fontified t) 686 687 (fontified t face (rainbow-delimiters-depth-1-face)) 687 688 (fontified t) 688 690 (fontified t face font-lock-keyword-face) 690 691 (fontified t) 691 700 (fontified t face font-lock-builtin-face) 700 701 (fontified t face (rainbow-delimiters-depth-1-face)) 701 705 (fontified t face font-lock-keyword-face) 705 712 (fontified t) 712 713 (fontified t face (rainbow-delimiters-depth-1-face)) 713 714 (fontified t) 714 715 (fontified t) 715 727 (fontified t) 727 729 (fontified t face font-lock-keyword-face) 729 731 (fontified t) 731 732 (fontified t face (rainbow-delimiters-depth-1-face)) 732 733 (fontified t face highlight-numbers-number) 733 734 (fontified t face (rainbow-delimiters-depth-1-face)) 734 744 (fontified t) 744 761 (fontified t) 761 762 (fontified t face (rainbow-delimiters-depth-1-face)) 762 763 (fontified t face highlight-numbers-number) 763 764 (fontified t face (rainbow-delimiters-depth-1-face)) 764 771 (fontified t) 771 772 (fontified t face (rainbow-delimiters-depth-1-face)) 772 777 (fontified t) 777 778 (fontified t face (rainbow-delimiters-depth-1-face)) 778 779 (fontified t) 779 795 (fontified t) 795 801 (fontified t face font-lock-keyword-face) 801 802 (fontified t) 802 814 (fontified t) 814 816 (fontified t face font-lock-keyword-face) 816 818 (fontified t) 818 819 (fontified t face (rainbow-delimiters-depth-1-face)) 819 820 (fontified t face highlight-numbers-number) 820 821 (fontified t face (rainbow-delimiters-depth-1-face)) 821 829 (fontified t) 829 830 (fontified t) 830 846 (fontified t) 846 849 (fontified t face font-lock-variable-name-face) 849 854 (fontified t) 854 855 (fontified t) 855 863 (fontified t) 863 867 (fontified t face font-lock-keyword-face) 867 875 (fontified t) 875 881 (fontified t) 881 882 (fontified t face (rainbow-delimiters-depth-1-face)) 882 887 (fontified t) 887 888 (fontified t face (rainbow-delimiters-depth-2-face)) 888 894 (fontified t) 894 895 (fontified t face (rainbow-delimiters-depth-3-face)) 895 900 (fontified t) 900 901 (fontified t face (rainbow-delimiters-depth-3-face)) 901 902 (fontified t face (rainbow-delimiters-depth-2-face)) 902 903 (fontified t face (rainbow-delimiters-depth-1-face)) 903 904 (fontified t) 904 905 (fontified t) 905 908 (fontified t) 908 909 (rear-nonsticky t fontified t) 909 912 (fontified t face font-lock-keyword-face) 912 913 (fontified t) 913 917 (fontified t face font-lock-function-name-face) 917 918 (fontified t face (rainbow-delimiters-depth-1-face)) 918 922 (fontified t face font-lock-keyword-face) 922 923 (fontified t face (rainbow-delimiters-depth-1-face)) 923 927 (fontified t) 927 931 (fontified t face font-lock-constant-face) 931 941 (fontified t) 941 942 (syntax-table (15) fontified t face font-lock-doc-face) 942 945 (fontified t face font-lock-doc-face) 945 989 (fontified t face font-lock-doc-face) 989 1011 (fontified t face font-lock-doc-face) 1011 1073 (fontified t face font-lock-doc-face) 1073 1074 (fontified t face font-lock-doc-face) 1074 1076 (fontified t face font-lock-doc-face) 1076 1082 (fontified t face font-lock-doc-face) 1082 1086 (fontified t face font-lock-doc-face) 1086 1087 (syntax-table (15) fontified t face font-lock-doc-face) 1087 1088 (fontified t) 1088 1095 (fontified t) 1095 1096 (rear-nonsticky t fontified t) 1096 1098 (fontified t face font-lock-keyword-face) 1098 1099 (fontified t) 1099 1102 (fontified t face font-lock-keyword-face) 1102 1103 (fontified t) 1103 1107 (fontified t face font-lock-keyword-face) 1107 1116 (fontified t) 1116 1123 (fontified t) 1123 1128 (fontified t) 1128 1134 (fontified t face font-lock-keyword-face) 1134 1135 (fontified t) 1135 1136 (fontified t) 1136 1137 (fontified t) 1137 1144 (fontified t) 1144 1150 (fontified t face font-lock-variable-name-face) 1150 1153 (fontified t face font-lock-variable-name-face) 1153 1164 (fontified t) 1164 1165 (fontified t) 1165 1166 (fontified t) 1166 1174 (fontified t) 1174 1177 (fontified t face font-lock-variable-name-face) 1177 1180 (fontified t) 1180 1184 (fontified t face font-lock-keyword-face) 1184 1189 (fontified t) 1189 1190 (fontified t) 1190 1191 (fontified t) 1191 1196 (fontified t) 1196 1199 (fontified t) 1199 1208 (fontified t face font-lock-variable-name-face) 1208 1211 (fontified t) 1211 1215 (fontified t face font-lock-keyword-face) 1215 1222 (fontified t) 1222 1223 (fontified t face (rainbow-delimiters-depth-1-face)) 1223 1224 (fontified t face highlight-numbers-number) 1224 1225 (fontified t face (rainbow-delimiters-depth-1-face)) 1225 1226 (fontified t face (rainbow-delimiters-depth-1-face)) 1226 1227 (fontified t face highlight-numbers-number) 1227 1228 (fontified t face (rainbow-delimiters-depth-1-face)) 1228 1229 (fontified t) 1229 1230 (fontified t) 1230 1238 (fontified t) 1238 1240 (fontified t face font-lock-keyword-face) 1240 1241 (fontified t) 1241 1250 (fontified t) 1250 1257 (fontified t) 1257 1258 (fontified t) 1258 1270 (fontified t) 1270 1274 (fontified t face font-lock-keyword-face) 1274 1282 (fontified t) 1282 1291 (fontified t) 1291 1292 (fontified t) 1292 1304 (fontified t) 1304 1310 (fontified t face font-lock-keyword-face) 1310 1311 (fontified t) 1311 1312 (fontified t) 1312 1320 (fontified t) 1320 1326 (fontified t face font-lock-variable-name-face) 1326 1329 (fontified t) 1329 1333 (fontified t face font-lock-keyword-face) 1333 1348 (fontified t) 1348 1349 (fontified t face (rainbow-delimiters-depth-1-face)) 1349 1350 (fontified t face (rainbow-delimiters-depth-1-face)) 1350 1351 (fontified t face (rainbow-delimiters-depth-1-face)) 1351 1352 (fontified t face highlight-numbers-number) 1352 1353 (fontified t face (rainbow-delimiters-depth-1-face)) 1353 1354 (fontified t) 1354 1355 (fontified t) 1355 1362 (fontified t) 1362 1365 (fontified t face font-lock-keyword-face) 1365 1372 (fontified t) 1372 1374 (fontified t face font-lock-keyword-face) 1374 1382 (fontified t) 1382 1383 (fontified t) 1383 1394 (fontified t) 1394 1395 (rear-nonsticky t fontified t) 1395 1398 (fontified t face font-lock-keyword-face) 1398 1399 (fontified t) 1399 1400 (fontified t) 1400 1416 (fontified t) 1416 1417 (fontified t face font-lock-variable-name-face) 1417 1420 (fontified t face font-lock-variable-name-face) 1420 1433 (fontified t) 1433 1434 (fontified t face (rainbow-delimiters-depth-1-face)) 1434 1435 (fontified t face (rainbow-delimiters-depth-1-face)) 1435 1436 (fontified t) 1436 1438 (fontified t face font-lock-keyword-face) 1438 1439 (fontified t) 1439 1440 (fontified t face highlight-numbers-number) 1440 1441 (fontified t) 1441 1457 (fontified t) 1457 1461 (fontified t face font-lock-variable-name-face) 1461 1462 (fontified t) 1462 1468 (fontified t) 1468 1469 (fontified t) 1469 1481 (fontified t) 1481 1487 (fontified t face font-lock-keyword-face) 1487 1509 (fontified t) 1509 1515 (fontified t) 1515 1526 (fontified t face font-lock-variable-name-face) 1526 1529 (fontified t) 1529 1534 (fontified t face font-lock-constant-face) 1534 1535 (fontified t) 1535 1544 (fontified t) 1544 1558 (fontified t) 1558 1559 (fontified t face (rainbow-delimiters-depth-1-face)) 1559 1563 (fontified t face font-lock-keyword-face) 1563 1570 (fontified t) 1570 1571 (fontified t face (rainbow-delimiters-depth-1-face)) 1571 1572 (fontified t) 1572 1574 (fontified t) 1574 1588 (fontified t) 1588 1590 (fontified t face font-lock-keyword-face) 1590 1596 (fontified t face font-lock-keyword-face) 1596 1597 (fontified t) 1597 1598 (fontified t) 1598 1610 (fontified t) 1610 1612 (fontified t face font-lock-keyword-face) 1612 1613 (fontified t) 1613 1625 (fontified t) 1625 1626 (fontified t) 1626 1637 (fontified t) 1637 1642 (fontified t) 1642 1646 (fontified t face font-lock-keyword-face) 1646 1648 (fontified t) 1648 1653 (fontified t) 1653 1656 (fontified t) 1656 1657 (fontified t face (rainbow-delimiters-depth-1-face)) 1657 1668 (fontified t) 1668 1670 (fontified t) 1670 1678 (fontified t) 1678 1682 (fontified t face font-lock-constant-face) 1682 1683 (fontified t face (rainbow-delimiters-depth-1-face default default)) 1683 1684 (fontified t) 1684 1685 (fontified t) 1685 1692 (fontified t) 1692 1693 (fontified t rear-nonsticky t) 1693 1697 (fontified t face font-lock-keyword-face) 1697 1707 (fontified t) 1707 1708 (fontified t face highlight-numbers-number) 1708 1709 (fontified t) 1709 1717 (fontified t) 1717 1719 (fontified t face font-lock-keyword-face) 1719 1720 (fontified t) 1720 1724 (fontified t face font-lock-keyword-face) 1724 1732 (fontified t) 1732 1733 (fontified t) 1733 1745 (fontified t) 1745 1749 (fontified t face font-lock-keyword-face) 1749 1755 (fontified t) 1755 1757 (fontified t) 1757 1761 (fontified t face font-lock-keyword-face) 1761 1768 (fontified t) 1768 1769 (fontified t face (rainbow-delimiters-depth-1-face)) 1769 1770 (fontified t face highlight-numbers-number) 1770 1771 (fontified t face (rainbow-delimiters-depth-1-face)) 1771 1772 (fontified t face (rainbow-delimiters-depth-1-face)) 1772 1773 (fontified t face highlight-numbers-number) 1773 1774 (fontified t face (rainbow-delimiters-depth-1-face)) 1774 1775 (fontified t) 1775 1783 (fontified t) 1783 1787 (fontified t face font-lock-keyword-face) 1787 1789 (fontified t) 1789 1801 (fontified t) 1801 1805 (fontified t face font-lock-keyword-face) 1805 1821 (fontified t) 1821 1822 (fontified t) 1822 1823 (fontified t) 1823 1824 (fontified t)) . 3257) (undo-tree-id2265 . -1824) (undo-tree-id2266 . -30) (undo-tree-id2267 . -1824) (undo-tree-id2268 . -1823) (undo-tree-id2269 . 3) (undo-tree-id2270 . -25) (undo-tree-id2271 . -198) (undo-tree-id2272 . -467) (undo-tree-id2273 . -1116) (undo-tree-id2274 . -1684) (undo-tree-id2275 . -713) (undo-tree-id2276 . -713) (undo-tree-id2277 . -138) (undo-tree-id2278 . -696) (undo-tree-id2279 . -713) (undo-tree-id2280 . -712) (undo-tree-id2281 . -712) (undo-tree-id2282 . -138) (undo-tree-id2283 . -886) (undo-tree-id2284 . -1597) (undo-tree-id2285 . -1684) (undo-tree-id2286 . -23) (undo-tree-id2287 . -23) (undo-tree-id2288 . -23) (undo-tree-id2289 . -23) (undo-tree-id2290 . -443) (undo-tree-id2291 . -1258) (undo-tree-id2292 . -1258) (undo-tree-id2293 . -431) (undo-tree-id2294 . -1258) (undo-tree-id2295 . -1258) (undo-tree-id2296 . -1258) (undo-tree-id2297 . -431) (undo-tree-id2298 . -1383) (undo-tree-id2299 . -1383) (undo-tree-id2300 . -431) (undo-tree-id2301 . -1383) (undo-tree-id2302 . -1383) (undo-tree-id2303 . -1383) (undo-tree-id2304 . -431) (undo-tree-id2305 . -1161) (undo-tree-id2306 . -1161) (undo-tree-id2307 . -431) (undo-tree-id2308 . -1161) (undo-tree-id2309 . -1161) (undo-tree-id2310 . -431) (undo-tree-id2311 . -1383) (undo-tree-id2312 . -1383) (undo-tree-id2313 . -431) (undo-tree-id2314 . -431) (undo-tree-id2315 . -1383) (undo-tree-id2316 . -1383) (undo-tree-id2317 . -1383) (undo-tree-id2318 . -431) (undo-tree-id2319 . -1383) (undo-tree-id2320 . -1383) (undo-tree-id2321 . -431) (undo-tree-id2322 . -1383) (undo-tree-id2323 . -1383) (undo-tree-id2324 . -431) (undo-tree-id2325 . 4) (undo-tree-id2326 . -41) (undo-tree-id2327 . -41) (undo-tree-id2328 . -96) (undo-tree-id2329 . -96) (undo-tree-id2330 . -138) (undo-tree-id2331 . -138) (undo-tree-id2332 . -168) (undo-tree-id2333 . -168) (undo-tree-id2334 . -200) (undo-tree-id2335 . -200) (undo-tree-id2336 . -293) (undo-tree-id2337 . -293) (undo-tree-id2338 . -328) (undo-tree-id2339 . -328) (undo-tree-id2340 . -329) (undo-tree-id2341 . -329) (undo-tree-id2342 . -377) (undo-tree-id2343 . -377) (undo-tree-id2344 . -402) (undo-tree-id2345 . -402) (undo-tree-id2346 . -431) (undo-tree-id2347 . -431) (undo-tree-id2348 . -445) (undo-tree-id2349 . -445) (undo-tree-id2350 . -476) (undo-tree-id2351 . -476) (undo-tree-id2352 . -518) (undo-tree-id2353 . -518) (undo-tree-id2354 . -545) (undo-tree-id2355 . -545) (undo-tree-id2356 . -546) (undo-tree-id2357 . -546) (undo-tree-id2358 . -604) (undo-tree-id2359 . -604) (undo-tree-id2360 . -637) (undo-tree-id2361 . -637) (undo-tree-id2362 . -668) (undo-tree-id2363 . -668) (undo-tree-id2364 . -715) (undo-tree-id2365 . -715) (undo-tree-id2366 . -744) (undo-tree-id2367 . -744) (undo-tree-id2368 . -779) (undo-tree-id2369 . -779) (undo-tree-id2370 . -802) (undo-tree-id2371 . -802) (undo-tree-id2372 . -830) (undo-tree-id2373 . -830) (undo-tree-id2374 . -855) (undo-tree-id2375 . -855) (undo-tree-id2376 . -904) (undo-tree-id2377 . -904) (undo-tree-id2378 . -905) (undo-tree-id2379 . -905) (undo-tree-id2380 . -933) (undo-tree-id2381 . -933) (undo-tree-id2382 . -945) (undo-tree-id2383 . -945) (undo-tree-id2384 . -1011) (undo-tree-id2385 . -1011) (undo-tree-id2386 . -1076) (undo-tree-id2387 . -1076) (undo-tree-id2388 . -1088) (undo-tree-id2389 . -1088) (undo-tree-id2390 . -1116) (undo-tree-id2391 . -1116) (undo-tree-id2392 . -1135) (undo-tree-id2393 . -1135) (undo-tree-id2394 . -1136) (undo-tree-id2395 . -1136) (undo-tree-id2396 . -1165) (undo-tree-id2397 . -1165) (undo-tree-id2398 . -1166) (undo-tree-id2399 . -1166) (undo-tree-id2400 . -1190) (undo-tree-id2401 . -1190) (undo-tree-id2402 . -1191) (undo-tree-id2403 . -1191) (undo-tree-id2404 . -1229) (undo-tree-id2405 . -1229) (undo-tree-id2406 . -1230) (undo-tree-id2407 . -1230) (undo-tree-id2408 . -1258) (undo-tree-id2409 . -1258) (undo-tree-id2410 . -1292) (undo-tree-id2411 . -1292) (undo-tree-id2412 . -1311) (undo-tree-id2413 . -1311) (undo-tree-id2414 . -1312) (undo-tree-id2415 . -1312) (undo-tree-id2416 . -1354) (undo-tree-id2417 . -1354) (undo-tree-id2418 . -1383) (undo-tree-id2419 . -1383) (undo-tree-id2420 . -1400) (undo-tree-id2421 . -1400) (undo-tree-id2422 . -1441) (undo-tree-id2423 . -1441) (undo-tree-id2424 . -1469) (undo-tree-id2425 . -1469) (undo-tree-id2426 . -1499) (undo-tree-id2427 . -1499) (undo-tree-id2428 . -1535) (undo-tree-id2429 . -1535) (undo-tree-id2430 . -1572) (undo-tree-id2431 . -1572) (undo-tree-id2432 . -1597) (undo-tree-id2433 . -1597) (undo-tree-id2434 . -1598) (undo-tree-id2435 . -1598) (undo-tree-id2436 . -1626) (undo-tree-id2437 . -1626) (undo-tree-id2438 . -1684) (undo-tree-id2439 . -1684) (undo-tree-id2440 . -1685) (undo-tree-id2441 . -1685) (undo-tree-id2442 . -1709) (undo-tree-id2443 . -1709) (undo-tree-id2444 . -1733) (undo-tree-id2445 . -1733) (undo-tree-id2446 . -1775) (undo-tree-id2447 . -1775) (undo-tree-id2448 . -1789) (undo-tree-id2449 . -1789) (undo-tree-id2450 . -1822) (undo-tree-id2451 . -1822) (undo-tree-id2452 . -1823) (undo-tree-id2453 . -1823) (undo-tree-id2454 . -1188) (undo-tree-id2455 . -192) (undo-tree-id2456 . -1824) (undo-tree-id2457 . -545) (undo-tree-id2458 . -1824) (undo-tree-id2459 . -1824) (undo-tree-id2460 . -30) (undo-tree-id2461 . -1824) (undo-tree-id2462 . -30) (undo-tree-id2463 . -328) (undo-tree-id2464 . -545) (undo-tree-id2465 . -904) (undo-tree-id2466 . -1135) (undo-tree-id2467 . -1165) (undo-tree-id2468 . -1190) (undo-tree-id2469 . -1229) (undo-tree-id2470 . -1311) (undo-tree-id2471 . -1597) (undo-tree-id2472 . -1684) (undo-tree-id2473 . -1822) (undo-tree-id2474 . -1824) 5081 (t 25674 37641 262235 493000)) nil (25674 38335 449467 224000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 2960 . 2961) (#("
" 0 1 (fontified nil)) . -4784) (2960 . 4785) 2942) nil (25674 38335 448962 425000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -2961) (undo-tree-id2264 . -8) 2969 (2960 . 2969) 2942) nil (25674 38335 448960 120000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -2962) (undo-tree-id2263 . -8) 2970 (2961 . 2970) 2961) nil (25674 38335 448957 19000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4786) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1)) nil (25674 38335 448953 568000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4785) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1)) nil (25674 38335 448944 482000) 0 nil])
([nil nil ((395 . 405) (392 . 395) (#("u" 0 1 (fontified t face font-lock-type-face)) . -392) (undo-tree-id2233 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -393) (undo-tree-id2234 . -1) 394 (392 . 394) (#("i" 0 1 (fontified t face font-lock-type-face)) . -392) (undo-tree-id2235 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -393) (undo-tree-id2236 . -1) 394 (389 . 394) (#("Queue" 0 5 (fontified t face font-lock-type-face)) . -389) (undo-tree-id2237 . -5) 394 (389 . 394) (#("TimedQ" 0 6 (fontified t face font-lock-type-face)) . -389) (undo-tree-id2238 . -6) 395 (394 . 395) (#("Q" 0 1 (fontified t face font-lock-type-face)) . -394) (undo-tree-id2239 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -395) (undo-tree-id2240 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -396) (undo-tree-id2241 . -1) (#("u" 0 1 (fontified nil face font-lock-type-face)) . -397) (undo-tree-id2242 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -398) (undo-tree-id2243 . -1) 399 (396 . 399) (393 . 396) (#("d" 0 1 (fontified t face font-lock-type-face)) . -393) (undo-tree-id2244 . -1) 394 (389 . 394) (#("Queue" 0 5 (fontified t face font-lock-type-face)) . -389) (undo-tree-id2245 . -5) 394 (389 . 394) (#("TimedActivation" 0 15 (fontified t face font-lock-type-face)) . 389) (undo-tree-id2246 . -14)) nil (25674 38335 448927 527000) 0 nil])
([nil current ((2976 . 2985) (#("C" 0 1 (fontified t face font-lock-type-face)) . -2976) (undo-tree-id2226 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -2977) (undo-tree-id2227 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -2978) (undo-tree-id2228 . -1) (#("v" 0 1 (fontified t face font-lock-type-face)) . -2979) (undo-tree-id2229 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -2980) (undo-tree-id2230 . -1) 2981 (2970 . 2981) (#("CalendarActivation" 0 18 (fontified t face font-lock-type-face)) . 2970) (undo-tree-id2231 . -17) (undo-tree-id2232 . -8)) nil (25674 38335 448854 916000) 0 nil])
nil
