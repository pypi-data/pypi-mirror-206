
"""
Trait definitions in the 'content' namespace.

Traits related to abstract content.
"""

# WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

from typing import Union

from openassetio import TraitBase


class LocatableContentTrait(TraitBase):
    """
    This trait characterizes an entity whose data is persisted
    externally to the API through data accessible via a valid URL.

    The `location` property holds the most applicable location of the
    entity's content for the current process environment - considering
    platform, host, etc. Location is in the form of a URL.
    Usage: entity
    """
    kId = "openassetio-mediacreation:content.LocatableContent"

    
    def setLocation(self, location: str):
        """
        Sets the location property.

        The location of the entities external content.

        This must be a valid URL so special characters need to be
        encoded.
        """
        if not isinstance(location, str):
            raise TypeError("location must be a 'str'.")
        self._data.setTraitProperty(self.kId, "location", location)

    def getLocation(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the location property or the supplied default.

        The location of the entities external content.

        This must be a valid URL so special characters need to be
        encoded.
        """
        value = self._data.getTraitProperty(self.kId, "location")
        if value is None:
            return defaultValue

        if not isinstance(value, str):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    

