# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from electricalclientv4 import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from electricalclientv4 import schemas  # noqa: F401

from electricalclientv4.model.paginated_history_list import PaginatedHistoryList

from . import path

# Query params
DatetimeSchema = schemas.DateTimeSchema
DatetimeCreateSchema = schemas.DateTimeSchema
DeviceKeySchema = schemas.StrSchema
EnergyActiveSchema = schemas.NumberSchema
EnergyApparentSchema = schemas.NumberSchema
EnergyInactiveSchema = schemas.NumberSchema
EnergyReactiveSchema = schemas.NumberSchema
FrequencySchema = schemas.NumberSchema
IrmsSchema = schemas.NumberSchema
OrderingSchema = schemas.StrSchema
PageSchema = schemas.IntSchema
PhaseShiftAnglesSchema = schemas.NumberSchema
PlaceKeySchema = schemas.StrSchema
PowerActiveSchema = schemas.NumberSchema
PowerApparentSchema = schemas.NumberSchema
PowerFactorSchema = schemas.NumberSchema
PowerReactiveSchema = schemas.NumberSchema
PowerTotalSchema = schemas.NumberSchema
SearchSchema = schemas.StrSchema
UrmsSchema = schemas.NumberSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'datetime': typing.Union[DatetimeSchema, str, datetime, ],
        'datetime_create': typing.Union[DatetimeCreateSchema, str, datetime, ],
        'device_key': typing.Union[DeviceKeySchema, str, ],
        'energy_active': typing.Union[EnergyActiveSchema, decimal.Decimal, int, float, ],
        'energy_apparent': typing.Union[EnergyApparentSchema, decimal.Decimal, int, float, ],
        'energy_inactive': typing.Union[EnergyInactiveSchema, decimal.Decimal, int, float, ],
        'energy_reactive': typing.Union[EnergyReactiveSchema, decimal.Decimal, int, float, ],
        'frequency': typing.Union[FrequencySchema, decimal.Decimal, int, float, ],
        'irms': typing.Union[IrmsSchema, decimal.Decimal, int, float, ],
        'ordering': typing.Union[OrderingSchema, str, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'phase_shift_angles': typing.Union[PhaseShiftAnglesSchema, decimal.Decimal, int, float, ],
        'place_key': typing.Union[PlaceKeySchema, str, ],
        'power_active': typing.Union[PowerActiveSchema, decimal.Decimal, int, float, ],
        'power_apparent': typing.Union[PowerApparentSchema, decimal.Decimal, int, float, ],
        'power_factor': typing.Union[PowerFactorSchema, decimal.Decimal, int, float, ],
        'power_reactive': typing.Union[PowerReactiveSchema, decimal.Decimal, int, float, ],
        'power_total': typing.Union[PowerTotalSchema, decimal.Decimal, int, float, ],
        'search': typing.Union[SearchSchema, str, ],
        'urms': typing.Union[UrmsSchema, decimal.Decimal, int, float, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_datetime = api_client.QueryParameter(
    name="datetime",
    style=api_client.ParameterStyle.FORM,
    schema=DatetimeSchema,
    explode=True,
)
request_query_datetime_create = api_client.QueryParameter(
    name="datetime_create",
    style=api_client.ParameterStyle.FORM,
    schema=DatetimeCreateSchema,
    explode=True,
)
request_query_device_key = api_client.QueryParameter(
    name="device_key",
    style=api_client.ParameterStyle.FORM,
    schema=DeviceKeySchema,
    explode=True,
)
request_query_energy_active = api_client.QueryParameter(
    name="energy_active",
    style=api_client.ParameterStyle.FORM,
    schema=EnergyActiveSchema,
    explode=True,
)
request_query_energy_apparent = api_client.QueryParameter(
    name="energy_apparent",
    style=api_client.ParameterStyle.FORM,
    schema=EnergyApparentSchema,
    explode=True,
)
request_query_energy_inactive = api_client.QueryParameter(
    name="energy_inactive",
    style=api_client.ParameterStyle.FORM,
    schema=EnergyInactiveSchema,
    explode=True,
)
request_query_energy_reactive = api_client.QueryParameter(
    name="energy_reactive",
    style=api_client.ParameterStyle.FORM,
    schema=EnergyReactiveSchema,
    explode=True,
)
request_query_frequency = api_client.QueryParameter(
    name="frequency",
    style=api_client.ParameterStyle.FORM,
    schema=FrequencySchema,
    explode=True,
)
request_query_irms = api_client.QueryParameter(
    name="irms",
    style=api_client.ParameterStyle.FORM,
    schema=IrmsSchema,
    explode=True,
)
request_query_ordering = api_client.QueryParameter(
    name="ordering",
    style=api_client.ParameterStyle.FORM,
    schema=OrderingSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_phase_shift_angles = api_client.QueryParameter(
    name="phase_shift_angles",
    style=api_client.ParameterStyle.FORM,
    schema=PhaseShiftAnglesSchema,
    explode=True,
)
request_query_place_key = api_client.QueryParameter(
    name="place_key",
    style=api_client.ParameterStyle.FORM,
    schema=PlaceKeySchema,
    explode=True,
)
request_query_power_active = api_client.QueryParameter(
    name="power_active",
    style=api_client.ParameterStyle.FORM,
    schema=PowerActiveSchema,
    explode=True,
)
request_query_power_apparent = api_client.QueryParameter(
    name="power_apparent",
    style=api_client.ParameterStyle.FORM,
    schema=PowerApparentSchema,
    explode=True,
)
request_query_power_factor = api_client.QueryParameter(
    name="power_factor",
    style=api_client.ParameterStyle.FORM,
    schema=PowerFactorSchema,
    explode=True,
)
request_query_power_reactive = api_client.QueryParameter(
    name="power_reactive",
    style=api_client.ParameterStyle.FORM,
    schema=PowerReactiveSchema,
    explode=True,
)
request_query_power_total = api_client.QueryParameter(
    name="power_total",
    style=api_client.ParameterStyle.FORM,
    schema=PowerTotalSchema,
    explode=True,
)
request_query_search = api_client.QueryParameter(
    name="search",
    style=api_client.ParameterStyle.FORM,
    schema=SearchSchema,
    explode=True,
)
request_query_urms = api_client.QueryParameter(
    name="urms",
    style=api_client.ParameterStyle.FORM,
    schema=UrmsSchema,
    explode=True,
)
_auth = [
    'basicAuth',
    'cookieAuth',
]
SchemaFor200ResponseBodyApplicationJson = PaginatedHistoryList


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _history_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _history_list_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _history_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _history_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_datetime,
            request_query_datetime_create,
            request_query_device_key,
            request_query_energy_active,
            request_query_energy_apparent,
            request_query_energy_inactive,
            request_query_energy_reactive,
            request_query_frequency,
            request_query_irms,
            request_query_ordering,
            request_query_page,
            request_query_phase_shift_angles,
            request_query_place_key,
            request_query_power_active,
            request_query_power_apparent,
            request_query_power_factor,
            request_query_power_reactive,
            request_query_power_total,
            request_query_search,
            request_query_urms,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class HistoryList(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def history_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def history_list(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def history_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def history_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._history_list_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._history_list_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


