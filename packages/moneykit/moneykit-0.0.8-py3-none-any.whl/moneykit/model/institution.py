# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from moneykit import schemas  # noqa: F401


class Institution(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "country",
            "color",
            "name",
            "is_featured",
            "institution_id",
        }

        class properties:
            institution_id = schemas.StrSchema
            name = schemas.StrSchema

            class country(
                schemas.ComposedSchema,
            ):
                class MetaOapg:
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            Country,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "country":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            color = schemas.StrSchema
            is_featured = schemas.BoolSchema

            class domain(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "domain":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            class color_dark(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "color_dark":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            __annotations__ = {
                "institution_id": institution_id,
                "name": name,
                "country": country,
                "color": color,
                "is_featured": is_featured,
                "domain": domain,
                "color_dark": color_dark,
            }

    country: MetaOapg.properties.country
    color: MetaOapg.properties.color
    name: MetaOapg.properties.name
    is_featured: MetaOapg.properties.is_featured
    institution_id: MetaOapg.properties.institution_id

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_featured"]) -> MetaOapg.properties.is_featured:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color_dark"]) -> MetaOapg.properties.color_dark:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "institution_id",
                "name",
                "country",
                "color",
                "is_featured",
                "domain",
                "color_dark",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_featured"]) -> MetaOapg.properties.is_featured:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["domain"]
    ) -> typing.Union[MetaOapg.properties.domain, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["color_dark"]
    ) -> typing.Union[MetaOapg.properties.color_dark, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "institution_id",
                "name",
                "country",
                "color",
                "is_featured",
                "domain",
                "color_dark",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        country: typing.Union[
            MetaOapg.properties.country,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader,
        ],
        color: typing.Union[
            MetaOapg.properties.color,
            str,
        ],
        name: typing.Union[
            MetaOapg.properties.name,
            str,
        ],
        is_featured: typing.Union[
            MetaOapg.properties.is_featured,
            bool,
        ],
        institution_id: typing.Union[
            MetaOapg.properties.institution_id,
            str,
        ],
        domain: typing.Union[MetaOapg.properties.domain, None, str, schemas.Unset] = schemas.unset,
        color_dark: typing.Union[MetaOapg.properties.color_dark, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "Institution":
        return super().__new__(
            cls,
            *_args,
            country=country,
            color=color,
            name=name,
            is_featured=is_featured,
            institution_id=institution_id,
            domain=domain,
            color_dark=color_dark,
            _configuration=_configuration,
            **kwargs,
        )


from moneykit.model.country import Country
