#!/usr/bin/env python3
import sys
import openai
import argparse
from rich import print as rprint  # Import the print function from the rich library
from core.web.search_google_direct.grab import extract_url_from_prompt, fetch_content_from_url

def grab_internet(user_prompt, model):
    url = extract_url_from_prompt(user_prompt)

    if url:
        content = fetch_content_from_url(url)
    else:
        content = ""

    messages = [
        {"role": "system", "content": "InternetAccess: True"},
        {"role": "system", "content": content},
        {"role": "user", "content": user_prompt}
    ]

    completion = openai.ChatCompletion.create(
        model=model,
        messages=messages
    )

    message = completion.choices[0]['message']['content']
    role = completion.choices[0]['message']['role']
    rprint(f"[bold][{role}]:[/bold] [cyan]{message}[/cyan]")

def parse_args():
    parser = argparse.ArgumentParser(description="Python script for generating text completions using OpenAI's GPT model.")
    parser.add_argument("-grab", action="store_true", help="Run the grab_internet function.")
    parser.add_argument("--prompt", type=str, required=True, help="Text prompt for the GPT model.")
    parser.add_argument("--model", type=str, default="gpt-4", help="GPT model to be used (default: gpt-4).")
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args(sys.argv[1:])
    if args.grab:
        grab_internet(args.prompt, args.model)
    else:
        print("No function specified. Use the '-grab' flag to run the grab_internet function.")