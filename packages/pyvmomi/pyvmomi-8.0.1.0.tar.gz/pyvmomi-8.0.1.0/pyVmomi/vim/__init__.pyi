from typing import List
from enum import Enum
from pyVmomi import HbrManager, OvfConsumer, storageDrs, vApp, vim, vmodl
from datetime import datetime
from pyVmomi.VmomiSupport import ManagedMethod, ManagedObject, NoneType, byte, double, long
from . import alarm, cluster, dvs, encryption, event, ext, host, option, profile, scheduler, tenant, vcha, view, vm, vsan, vslm


class AuthorizationManager(ManagedObject):
    @property
    def privilegeList(self) -> List[AuthorizationManager.Privilege]: ...
    @property
    def roleList(self) -> List[AuthorizationManager.Role]: ...
    @property
    def description(self) -> AuthorizationDescription: ...
    def AddRole(self, name: str, privIds: List[str]) -> int: ...
    def RemoveRole(self, roleId: int, failIfUsed: bool) -> NoneType: ...
    def UpdateRole(self, roleId: int, newName: str, privIds: List[str]) -> NoneType: ...
    def MergePermissions(self, srcRoleId: int, dstRoleId: int) -> NoneType: ...
    def RetrieveRolePermissions(self, roleId: int) -> List[AuthorizationManager.Permission]: ...
    def RetrieveEntityPermissions(self, entity: ManagedEntity, inherited: bool) -> List[AuthorizationManager.Permission]: ...
    def RetrieveAllPermissions(self) -> List[AuthorizationManager.Permission]: ...
    def SetEntityPermissions(self, entity: ManagedEntity, permission: List[AuthorizationManager.Permission]) -> NoneType: ...
    def ResetEntityPermissions(self, entity: ManagedEntity, permission: List[AuthorizationManager.Permission]) -> NoneType: ...
    def RemoveEntityPermission(self, entity: ManagedEntity, user: str, isGroup: bool) -> NoneType: ...
    def HasPrivilegeOnEntity(self, entity: ManagedEntity, sessionId: str, privId: List[str]) -> List[bool]: ...
    def HasPrivilegeOnEntities(self, entity: List[ManagedEntity], sessionId: str, privId: List[str]) -> List[AuthorizationManager.EntityPrivilege]: ...
    def HasUserPrivilegeOnEntities(self, entities: List[ManagedObject], userName: str, privId: List[str]) -> List[AuthorizationManager.EntityPrivilege]: ...
    def FetchUserPrivilegeOnEntities(self, entities: List[ManagedEntity], userName: str) -> List[AuthorizationManager.UserPrivilegeResult]: ...


    class EntityPrivilege(vmodl.DynamicData):
        @property
        def entity(self) -> ManagedEntity: ...
        @property
        def privAvailability(self) -> List[AuthorizationManager.PrivilegeAvailability]: ...


    class Permission(vmodl.DynamicData):
        @property
        def entity(self) -> ManagedEntity: ...
        @property
        def principal(self) -> str: ...
        @property
        def group(self) -> bool: ...
        @property
        def roleId(self) -> int: ...
        @property
        def propagate(self) -> bool: ...


    class Privilege(vmodl.DynamicData):
        @property
        def privId(self) -> str: ...
        @property
        def onParent(self) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def privGroupName(self) -> str: ...


    class PrivilegeAvailability(vmodl.DynamicData):
        @property
        def privId(self) -> str: ...
        @property
        def isGranted(self) -> bool: ...


    class Role(vmodl.DynamicData):
        @property
        def roleId(self) -> int: ...
        @property
        def system(self) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def info(self) -> Description: ...
        @property
        def privilege(self) -> List[str]: ...


    class UserPrivilegeResult(vmodl.DynamicData):
        @property
        def entity(self) -> ManagedEntity: ...
        @property
        def privileges(self) -> List[str]: ...


class CertificateManager(ManagedObject):
    def RefreshCACertificatesAndCRLs(self, host: List[HostSystem]) -> Task: ...
    def RefreshCertificates(self, host: List[HostSystem]) -> Task: ...
    def RevokeCertificates(self, host: List[HostSystem]) -> Task: ...


class ClusterComputeResource(ComputeResource):
    @property
    def configuration(self) -> cluster.ConfigInfo: ...
    @property
    def recommendation(self) -> List[cluster.Recommendation]: ...
    @property
    def drsRecommendation(self) -> List[cluster.DrsRecommendation]: ...
    @property
    def summaryEx(self) -> ClusterComputeResource.Summary: ...
    @property
    def hciConfig(self) -> ClusterComputeResource.HCIConfigInfo: ...
    @property
    def migrationHistory(self) -> List[cluster.DrsMigration]: ...
    @property
    def actionHistory(self) -> List[cluster.ActionHistory]: ...
    @property
    def drsFault(self) -> List[cluster.DrsFaults]: ...
    def ConfigureHCI(self, clusterSpec: ClusterComputeResource.HCIConfigSpec, hostInputs: List[ClusterComputeResource.HostConfigurationInput]) -> Task: ...
    def ExtendHCI(self, hostInputs: List[ClusterComputeResource.HostConfigurationInput], vSanConfigSpec: SDDCBase) -> Task: ...
    def AbandonHciWorkflow(self) -> NoneType: ...
    def ValidateHCIConfiguration(self, hciConfigSpec: ClusterComputeResource.HCIConfigSpec, hosts: List[HostSystem]) -> List[ClusterComputeResource.ValidationResultBase]: ...
    def Reconfigure(self, spec: cluster.ConfigSpec, modify: bool) -> Task: ...
    def ApplyRecommendation(self, key: str) -> NoneType: ...
    def CancelRecommendation(self, key: str) -> NoneType: ...
    def RecommendHostsForVm(self, vm: VirtualMachine, pool: ResourcePool) -> List[cluster.HostRecommendation]: ...
    def AddHost(self, spec: host.ConnectSpec, asConnected: bool, resourcePool: ResourcePool, license: str) -> Task: ...
    def MoveInto(self, host: List[HostSystem]) -> Task: ...
    def MoveHostInto(self, host: HostSystem, resourcePool: ResourcePool) -> Task: ...
    def RefreshRecommendation(self) -> NoneType: ...
    def EvcManager(self) -> cluster.EVCManager: ...
    def RetrieveDasAdvancedRuntimeInfo(self) -> cluster.DasAdvancedRuntimeInfo: ...
    def EnterMaintenanceMode(self, host: List[HostSystem], option: List[option.OptionValue]) -> cluster.EnterMaintenanceResult: ...
    def PlaceVm(self, placementSpec: cluster.PlacementSpec) -> cluster.PlacementResult: ...
    def FindRulesForVm(self, vm: VirtualMachine) -> List[cluster.RuleInfo]: ...
    def StampAllRulesWithUuid(self) -> Task: ...
    def GetResourceUsage(self) -> cluster.ResourceUsageSummary: ...
    def SetCryptoMode(self, cryptoMode: str) -> NoneType: ...
    def GetSystemVMsRestrictedDatastores(self) -> List[Datastore]: ...


    class ClusterConfigResult(vmodl.DynamicData):
        @property
        def failedHosts(self) -> List[Folder.FailedHostResult]: ...
        @property
        def configuredHosts(self) -> List[HostSystem]: ...


    class DVSConfigurationValidation(ClusterComputeResource.ValidationResultBase):
        @property
        def isDvsValid(self) -> bool: ...
        @property
        def isDvpgValid(self) -> bool: ...


    class DVSSetting(vmodl.DynamicData):
        @property
        def dvSwitch(self) -> DistributedVirtualSwitch: ...
        @property
        def pnicDevices(self) -> List[str]: ...
        @property
        def dvPortgroupSetting(self) -> List[ClusterComputeResource.DVSSetting.DVPortgroupToServiceMapping]: ...


        class DVPortgroupToServiceMapping(vmodl.DynamicData):
            @property
            def dvPortgroup(self) -> dvs.DistributedVirtualPortgroup: ...
            @property
            def service(self) -> str: ...


    class DvsProfile(vmodl.DynamicData):
        @property
        def dvsName(self) -> str: ...
        @property
        def dvSwitch(self) -> DistributedVirtualSwitch: ...
        @property
        def pnicDevices(self) -> List[str]: ...
        @property
        def dvPortgroupMapping(self) -> List[ClusterComputeResource.DvsProfile.DVPortgroupSpecToServiceMapping]: ...


        class DVPortgroupSpecToServiceMapping(vmodl.DynamicData):
            @property
            def dvPortgroupSpec(self) -> dvs.DistributedVirtualPortgroup.ConfigSpec: ...
            @property
            def dvPortgroup(self) -> dvs.DistributedVirtualPortgroup: ...
            @property
            def service(self) -> str: ...


    class HCIConfigInfo(vmodl.DynamicData):
        @property
        def workflowState(self) -> str: ...
        @property
        def dvsSetting(self) -> List[ClusterComputeResource.DVSSetting]: ...
        @property
        def configuredHosts(self) -> List[HostSystem]: ...
        @property
        def hostConfigProfile(self) -> ClusterComputeResource.HostConfigurationProfile: ...


    class HCIConfigSpec(vmodl.DynamicData):
        @property
        def dvsProf(self) -> List[ClusterComputeResource.DvsProfile]: ...
        @property
        def hostConfigProfile(self) -> ClusterComputeResource.HostConfigurationProfile: ...
        @property
        def vSanConfigSpec(self) -> SDDCBase: ...
        @property
        def vcProf(self) -> ClusterComputeResource.VCProfile: ...


    class HostConfigurationInput(vmodl.DynamicData):
        @property
        def host(self) -> HostSystem: ...
        @property
        def hostVmkNics(self) -> List[ClusterComputeResource.HostVmkNicInfo]: ...
        @property
        def allowedInNonMaintenanceMode(self) -> bool: ...


    class HostConfigurationProfile(vmodl.DynamicData):
        @property
        def dateTimeConfig(self) -> host.DateTimeConfig: ...
        @property
        def lockdownMode(self) -> host.HostAccessManager.LockdownMode: ...


    class HostConfigurationValidation(ClusterComputeResource.ValidationResultBase):
        @property
        def host(self) -> HostSystem: ...
        @property
        def isDvsSettingValid(self) -> bool: ...
        @property
        def isVmknicSettingValid(self) -> bool: ...
        @property
        def isNtpSettingValid(self) -> bool: ...
        @property
        def isLockdownModeValid(self) -> bool: ...


    class HostVmkNicInfo(vmodl.DynamicData):
        @property
        def nicSpec(self) -> host.VirtualNic.Specification: ...
        @property
        def service(self) -> str: ...


    class Summary(ComputeResource.Summary):
        @property
        def currentFailoverLevel(self) -> int: ...
        @property
        def admissionControlInfo(self) -> cluster.DasAdmissionControlInfo: ...
        @property
        def numVmotions(self) -> int: ...
        @property
        def targetBalance(self) -> int: ...
        @property
        def currentBalance(self) -> int: ...
        @property
        def drsScore(self) -> int: ...
        @property
        def numVmsPerDrsScoreBucket(self) -> List[int]: ...
        @property
        def usageSummary(self) -> cluster.UsageSummary: ...
        @property
        def currentEVCModeKey(self) -> str: ...
        @property
        def currentEVCGraphicsModeKey(self) -> str: ...
        @property
        def dasData(self) -> cluster.DasData: ...
        @property
        def clusterMaintenanceModeStatus(self) -> str: ...
        @property
        def vcsHealthStatus(self) -> str: ...
        @property
        def vcsSlots(self) -> List[ClusterComputeResource.VcsSlots]: ...


        class QuickStats(vmodl.DynamicData):
            @property
            def overallCpuUsage(self) -> long: ...
            @property
            def overallCpuDemand(self) -> long: ...
            @property
            def guestMemoryUsage(self) -> long: ...
            @property
            def hostMemoryUsage(self) -> long: ...
            @property
            def distributedCpuEntitlement(self) -> long: ...
            @property
            def distributedMemoryEntitlement(self) -> long: ...
            @property
            def staticCpuEntitlement(self) -> int: ...
            @property
            def staticMemoryEntitlement(self) -> int: ...
            @property
            def privateMemory(self) -> long: ...
            @property
            def sharedMemory(self) -> long: ...
            @property
            def swappedMemory(self) -> long: ...
            @property
            def balloonedMemory(self) -> long: ...
            @property
            def overheadMemory(self) -> long: ...
            @property
            def consumedOverheadMemory(self) -> long: ...
            @property
            def compressedMemory(self) -> long: ...


        class MaintenanceModeState(Enum):
            normal = "normal"
            enteringMaintenance = "enteringmaintenance"
            inMaintenance = "inmaintenance"


    class VCProfile(vmodl.DynamicData):
        @property
        def clusterSpec(self) -> cluster.ConfigSpecEx: ...
        @property
        def evcModeKey(self) -> str: ...
        @property
        def evcGraphicsModeKey(self) -> str: ...


    class ValidationResultBase(vmodl.DynamicData):
        @property
        def info(self) -> List[vmodl.LocalizableMessage]: ...


    class VcsSlots(vmodl.DynamicData):
        @property
        def systemId(self) -> str: ...
        @property
        def host(self) -> HostSystem: ...
        @property
        def datastore(self) -> List[Datastore]: ...
        @property
        def totalSlots(self) -> int: ...


    class HCIWorkflowState(Enum):
        in_progress = "in_progress"
        done = "done"
        invalid = "invalid"


    class VcsHealthStatus(Enum):
        healthy = "healthy"
        degraded = "degraded"
        nonhealthy = "nonhealthy"


class ComputeResource(ManagedEntity):
    @property
    def resourcePool(self) -> ResourcePool: ...
    @property
    def host(self) -> List[HostSystem]: ...
    @property
    def datastore(self) -> List[Datastore]: ...
    @property
    def network(self) -> List[Network]: ...
    @property
    def summary(self) -> ComputeResource.Summary: ...
    @property
    def environmentBrowser(self) -> EnvironmentBrowser: ...
    @property
    def configurationEx(self) -> ComputeResource.ConfigInfo: ...
    @property
    def lifecycleManaged(self) -> bool: ...
    @property
    def configManagerEnabled(self) -> bool: ...
    def ReconfigureEx(self, spec: ComputeResource.ConfigSpec, modify: bool) -> Task: ...


    class ConfigInfo(vmodl.DynamicData):
        @property
        def vmSwapPlacement(self) -> str: ...
        @property
        def spbmEnabled(self) -> bool: ...
        @property
        def defaultHardwareVersionKey(self) -> str: ...
        @property
        def maximumHardwareVersionKey(self) -> str: ...


    class ConfigSpec(vmodl.DynamicData):
        @property
        def vmSwapPlacement(self) -> str: ...
        @property
        def spbmEnabled(self) -> bool: ...
        @property
        def defaultHardwareVersionKey(self) -> str: ...
        @property
        def desiredSoftwareSpec(self) -> DesiredSoftwareSpec: ...
        @property
        def maximumHardwareVersionKey(self) -> str: ...
        @property
        def enableConfigManager(self) -> bool: ...


    class HostSPBMLicenseInfo(vmodl.DynamicData):
        @property
        def host(self) -> HostSystem: ...
        @property
        def licenseState(self) -> ComputeResource.HostSPBMLicenseInfo.HostSPBMLicenseState: ...


        class HostSPBMLicenseState(Enum):
            licensed = "licensed"
            unlicensed = "unlicensed"
            unknown = "unknown"


class CustomFieldsManager(ManagedObject):
    @property
    def field(self) -> List[CustomFieldsManager.FieldDef]: ...
    def AddFieldDefinition(self, name: str, moType: type, fieldDefPolicy: PrivilegePolicyDef, fieldPolicy: PrivilegePolicyDef) -> CustomFieldsManager.FieldDef: ...
    def RemoveFieldDefinition(self, key: int) -> NoneType: ...
    def RenameFieldDefinition(self, key: int, name: str) -> NoneType: ...
    def SetField(self, entity: ManagedEntity, key: int, value: str) -> NoneType: ...


    class FieldDef(vmodl.DynamicData):
        @property
        def key(self) -> int: ...
        @property
        def name(self) -> str: ...
        @property
        def type(self) -> type: ...
        @property
        def managedObjectType(self) -> type: ...
        @property
        def fieldDefPrivileges(self) -> PrivilegePolicyDef: ...
        @property
        def fieldInstancePrivileges(self) -> PrivilegePolicyDef: ...


    class StringValue(CustomFieldsManager.Value):
        @property
        def value(self) -> str: ...


    class Value(vmodl.DynamicData):
        @property
        def key(self) -> int: ...


class CustomizationSpecManager(ManagedObject):
    @property
    def info(self) -> List[CustomizationSpecInfo]: ...
    @property
    def encryptionKey(self) -> List[byte]: ...
    def Exists(self, name: str) -> bool: ...
    def Get(self, name: str) -> CustomizationSpecItem: ...
    def Create(self, item: CustomizationSpecItem) -> NoneType: ...
    def Overwrite(self, item: CustomizationSpecItem) -> NoneType: ...
    def Delete(self, name: str) -> NoneType: ...
    def Duplicate(self, name: str, newName: str) -> NoneType: ...
    def Rename(self, name: str, newName: str) -> NoneType: ...
    def SpecItemToXml(self, item: CustomizationSpecItem) -> str: ...
    def XmlToSpecItem(self, specItemXml: str) -> CustomizationSpecItem: ...
    def CheckResources(self, guestOs: str) -> NoneType: ...


class Datacenter(ManagedEntity):
    @property
    def vmFolder(self) -> Folder: ...
    @property
    def hostFolder(self) -> Folder: ...
    @property
    def datastoreFolder(self) -> Folder: ...
    @property
    def networkFolder(self) -> Folder: ...
    @property
    def datastore(self) -> List[Datastore]: ...
    @property
    def network(self) -> List[Network]: ...
    @property
    def configuration(self) -> Datacenter.ConfigInfo: ...
    def BatchQueryConnectInfo(self, hostSpecs: List[host.ConnectSpec]) -> List[Datacenter.BasicConnectInfo]: ...
    def QueryConnectionInfo(self, hostname: str, port: int, username: str, password: str, sslThumbprint: str) -> host.ConnectInfo: ...
    def QueryConnectionInfoViaSpec(self, spec: host.ConnectSpec) -> host.ConnectInfo: ...
    def PowerOnVm(self, vm: List[VirtualMachine], option: List[option.OptionValue]) -> Task: ...
    def QueryConfigOptionDescriptor(self) -> List[vm.ConfigOptionDescriptor]: ...
    def Reconfigure(self, spec: Datacenter.ConfigSpec, modify: bool) -> Task: ...


    class BasicConnectInfo(vmodl.DynamicData):
        @property
        def hostname(self) -> str: ...
        @property
        def error(self) -> vmodl.MethodFault: ...
        @property
        def serverIp(self) -> str: ...
        @property
        def numVm(self) -> int: ...
        @property
        def numPoweredOnVm(self) -> int: ...
        @property
        def hostProductInfo(self) -> AboutInfo: ...
        @property
        def hardwareVendor(self) -> str: ...
        @property
        def hardwareModel(self) -> str: ...


class Datastore(ManagedEntity):
    @property
    def info(self) -> Datastore.Info: ...
    @property
    def summary(self) -> Datastore.Summary: ...
    @property
    def host(self) -> List[Datastore.HostMount]: ...
    @property
    def vm(self) -> List[VirtualMachine]: ...
    @property
    def browser(self) -> host.DatastoreBrowser: ...
    @property
    def capability(self) -> Datastore.Capability: ...
    @property
    def iormConfiguration(self) -> StorageResourceManager.IORMConfigInfo: ...
    def Refresh(self) -> NoneType: ...
    def RefreshStorageInfo(self) -> NoneType: ...
    def UpdateVirtualMachineFiles(self, mountPathDatastoreMapping: List[Datastore.MountPathDatastorePair]) -> Task: ...
    def RenameDatastore(self, newName: str) -> NoneType: ...
    def DestroyDatastore(self) -> NoneType: ...
    def EnterMaintenanceMode(self) -> storageDrs.StoragePlacementResult: ...
    def ExitMaintenanceMode(self) -> Task: ...
    def IsClusteredVmdkEnabled(self) -> bool: ...
    def UpdateVVolVirtualMachineFiles(self, failoverPair: List[Datastore.VVolContainerFailoverPair]) -> Task: ...


    class HostMount(vmodl.DynamicData):
        @property
        def key(self) -> HostSystem: ...
        @property
        def mountInfo(self) -> host.MountInfo: ...


    class Info(vmodl.DynamicData):
        @property
        def name(self) -> str: ...
        @property
        def url(self) -> str: ...
        @property
        def freeSpace(self) -> long: ...
        @property
        def maxFileSize(self) -> long: ...
        @property
        def maxVirtualDiskCapacity(self) -> long: ...
        @property
        def maxMemoryFileSize(self) -> long: ...
        @property
        def timestamp(self) -> datetime: ...
        @property
        def containerId(self) -> str: ...
        @property
        def aliasOf(self) -> str: ...


    class MountPathDatastorePair(vmodl.DynamicData):
        @property
        def oldMountPath(self) -> str: ...
        @property
        def datastore(self) -> Datastore: ...


    class VVolContainerFailoverPair(vmodl.DynamicData):
        @property
        def srcContainer(self) -> str: ...
        @property
        def tgtContainer(self) -> str: ...
        @property
        def vvolMapping(self) -> List[KeyValue]: ...


    class Accessible(Enum):
        True
        False


class DatastoreNamespaceManager(ManagedObject):
    def CreateDirectory(self, datastore: Datastore, displayName: str, policy: str, size: long) -> str: ...
    def DeleteDirectory(self, datacenter: Datacenter, datastorePath: str) -> NoneType: ...
    def ConvertNamespacePathToUuidPath(self, datacenter: Datacenter, namespaceUrl: str) -> str: ...
    def IncreaseDirectorySize(self, datacenter: Datacenter, stableName: str, size: long) -> NoneType: ...
    def QueryDirectoryInfo(self, datacenter: Datacenter, stableName: str) -> DatastoreNamespaceManager.DirectoryInfo: ...


    class DirectoryInfo(vmodl.DynamicData):
        @property
        def capacity(self) -> long: ...
        @property
        def used(self) -> long: ...


class DiagnosticManager(ManagedObject):
    def QueryDescriptions(self, host: HostSystem) -> List[DiagnosticManager.LogDescriptor]: ...
    def Browse(self, host: HostSystem, key: str, start: int, lines: int) -> DiagnosticManager.LogHeader: ...
    def GenerateLogBundles(self, includeDefault: bool, host: List[HostSystem]) -> Task: ...
    def FetchAuditRecords(self, token: str) -> DiagnosticManager.AuditRecordResult: ...
    def EmitSyslogMark(self, message: str) -> NoneType: ...


    class AuditRecordResult(vmodl.DynamicData):
        @property
        def records(self) -> List[str]: ...
        @property
        def nextToken(self) -> str: ...


    class BundleInfo(vmodl.DynamicData):
        @property
        def system(self) -> HostSystem: ...
        @property
        def url(self) -> str: ...


    class LogDescriptor(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def fileName(self) -> str: ...
        @property
        def creator(self) -> str: ...
        @property
        def format(self) -> str: ...
        @property
        def mimeType(self) -> str: ...
        @property
        def info(self) -> Description: ...


        class Creator(Enum):
            vpxd = "vpxd"
            vpxa = "vpxa"
            hostd = "hostd"
            serverd = "serverd"
            install = "install"
            vpxClient = "vpxclient"
            recordLog = "recordlog"


        class Format(Enum):
            plain = "plain"


    class LogHeader(vmodl.DynamicData):
        @property
        def lineStart(self) -> int: ...
        @property
        def lineEnd(self) -> int: ...
        @property
        def lineText(self) -> List[str]: ...


class DistributedVirtualSwitch(ManagedEntity):
    @property
    def uuid(self) -> str: ...
    @property
    def capability(self) -> DistributedVirtualSwitch.Capability: ...
    @property
    def summary(self) -> DistributedVirtualSwitch.Summary: ...
    @property
    def config(self) -> DistributedVirtualSwitch.ConfigInfo: ...
    @property
    def networkResourcePool(self) -> List[dvs.NetworkResourcePool]: ...
    @property
    def portgroup(self) -> List[dvs.DistributedVirtualPortgroup]: ...
    @property
    def runtime(self) -> DistributedVirtualSwitch.RuntimeInfo: ...
    def FetchPortKeys(self, criteria: dvs.PortCriteria) -> List[str]: ...
    def FetchPorts(self, criteria: dvs.PortCriteria) -> List[dvs.DistributedVirtualPort]: ...
    def QueryUsedVlanId(self) -> List[int]: ...
    def Reconfigure(self, spec: DistributedVirtualSwitch.ConfigSpec) -> Task: ...
    def PerformProductSpecOperation(self, operation: str, productSpec: dvs.ProductSpec) -> Task: ...
    def Merge(self, dvs: DistributedVirtualSwitch) -> Task: ...
    def AddPortgroups(self, spec: List[dvs.DistributedVirtualPortgroup.ConfigSpec]) -> Task: ...
    def MovePort(self, portKey: List[str], destinationPortgroupKey: str) -> Task: ...
    def UpdateCapability(self, capability: DistributedVirtualSwitch.Capability) -> NoneType: ...
    def ReconfigurePort(self, port: List[dvs.DistributedVirtualPort.ConfigSpec]) -> Task: ...
    def RefreshPortState(self, portKeys: List[str]) -> NoneType: ...
    def RectifyHost(self, hosts: List[HostSystem]) -> Task: ...
    def UpdateNetworkResourcePool(self, configSpec: List[dvs.NetworkResourcePool.ConfigSpec]) -> NoneType: ...
    def AddNetworkResourcePool(self, configSpec: List[dvs.NetworkResourcePool.ConfigSpec]) -> NoneType: ...
    def RemoveNetworkResourcePool(self, key: List[str]) -> NoneType: ...
    def ReconfigureVmVnicNetworkResourcePool(self, configSpec: List[dvs.VmVnicNetworkResourcePool.ConfigSpec]) -> Task: ...
    def EnableNetworkResourceManagement(self, enable: bool) -> NoneType: ...
    def Rollback(self, entityBackup: dvs.EntityBackup.Config) -> Task: ...
    def AddPortgroup(self, spec: dvs.DistributedVirtualPortgroup.ConfigSpec) -> Task: ...
    def UpdateHealthCheckConfig(self, healthCheckConfig: List[DistributedVirtualSwitch.HealthCheckConfig]) -> Task: ...
    def LookupPortgroup(self, portgroupKey: str) -> dvs.DistributedVirtualPortgroup: ...


    class BackupRestoreCapability(vmodl.DynamicData):
        @property
        def backupRestoreSupported(self) -> bool: ...


    class ContactInfo(vmodl.DynamicData):
        @property
        def name(self) -> str: ...
        @property
        def contact(self) -> str: ...


    class CreateSpec(vmodl.DynamicData):
        @property
        def configSpec(self) -> DistributedVirtualSwitch.ConfigSpec: ...
        @property
        def productInfo(self) -> dvs.ProductSpec: ...
        @property
        def capability(self) -> DistributedVirtualSwitch.Capability: ...


    class FeatureCapability(vmodl.DynamicData):
        @property
        def networkResourceManagementSupported(self) -> bool: ...
        @property
        def vmDirectPathGen2Supported(self) -> bool: ...
        @property
        def nicTeamingPolicy(self) -> List[str]: ...
        @property
        def networkResourcePoolHighShareValue(self) -> int: ...
        @property
        def networkResourceManagementCapability(self) -> DistributedVirtualSwitch.NetworkResourceManagementCapability: ...
        @property
        def healthCheckCapability(self) -> DistributedVirtualSwitch.HealthCheckFeatureCapability: ...
        @property
        def rollbackCapability(self) -> DistributedVirtualSwitch.RollbackCapability: ...
        @property
        def backupRestoreCapability(self) -> DistributedVirtualSwitch.BackupRestoreCapability: ...
        @property
        def networkFilterSupported(self) -> bool: ...
        @property
        def macLearningSupported(self) -> bool: ...


    class HealthCheckConfig(vmodl.DynamicData):
        @property
        def enable(self) -> bool: ...
        @property
        def interval(self) -> int: ...


    class HealthCheckFeatureCapability(vmodl.DynamicData): ...


    class HostInfrastructureTrafficResource(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def description(self) -> str: ...
        @property
        def allocationInfo(self) -> DistributedVirtualSwitch.HostInfrastructureTrafficResource.ResourceAllocation: ...


        class ResourceAllocation(vmodl.DynamicData):
            @property
            def limit(self) -> long: ...
            @property
            def shares(self) -> SharesInfo: ...
            @property
            def reservation(self) -> long: ...


    class NameArrayUplinkPortPolicy(DistributedVirtualSwitch.UplinkPortPolicy):
        @property
        def uplinkPortName(self) -> List[str]: ...


    class NetworkResourceManagementCapability(vmodl.DynamicData):
        @property
        def networkResourceManagementSupported(self) -> bool: ...
        @property
        def networkResourcePoolHighShareValue(self) -> int: ...
        @property
        def qosSupported(self) -> bool: ...
        @property
        def userDefinedNetworkResourcePoolsSupported(self) -> bool: ...
        @property
        def networkResourceControlVersion3Supported(self) -> bool: ...
        @property
        def userDefinedInfraTrafficPoolSupported(self) -> bool: ...


    class ResourceRuntimeInfo(vmodl.DynamicData):
        @property
        def capacity(self) -> int: ...
        @property
        def usage(self) -> int: ...
        @property
        def available(self) -> int: ...
        @property
        def allocatedResource(self) -> List[dvs.VmVnicNetworkResourcePool.VnicAllocatedResource]: ...
        @property
        def vmVnicNetworkResourcePoolRuntime(self) -> List[dvs.VmVnicNetworkResourcePool.RuntimeInfo]: ...


    class RollbackCapability(vmodl.DynamicData):
        @property
        def rollbackSupported(self) -> bool: ...


    class RuntimeInfo(vmodl.DynamicData):
        @property
        def hostMemberRuntime(self) -> List[dvs.HostMember.RuntimeInfo]: ...
        @property
        def resourceRuntimeInfo(self) -> DistributedVirtualSwitch.ResourceRuntimeInfo: ...


    class SwitchPolicy(vmodl.DynamicData):
        @property
        def autoPreInstallAllowed(self) -> bool: ...
        @property
        def autoUpgradeAllowed(self) -> bool: ...
        @property
        def partialUpgradeAllowed(self) -> bool: ...


    class UplinkPortPolicy(vmodl.DynamicData): ...


    class HostInfrastructureTrafficClass(Enum):
        management = "management"
        faultTolerance = "faulttolerance"
        vmotion = "vmotion"
        virtualMachine = "virtualmachine"
        iSCSI = "iscsi"
        nfs = "nfs"
        hbr = "hbr"
        vsan = "vsan"
        vdp = "vdp"
        backupNfc = "backupnfc"
        nvmetcp = "nvmetcp"


    class NetworkResourceControlVersion(Enum):
        version2 = "version2"
        version3 = "version3"


    class NicTeamingPolicyMode(Enum):
        loadbalance_ip = "loadbalance_ip"
        loadbalance_srcmac = "loadbalance_srcmac"
        loadbalance_srcid = "loadbalance_srcid"
        failover_explicit = "failover_explicit"
        loadbalance_loadbased = "loadbalance_loadbased"


    class ProductSpecOperationType(Enum):
        preInstall = "preinstall"
        upgrade = "upgrade"
        notifyAvailableUpgrade = "notifyavailableupgrade"
        proceedWithUpgrade = "proceedwithupgrade"
        updateBundleInfo = "updatebundleinfo"


class EnvironmentBrowser(ManagedObject):
    @property
    def datastoreBrowser(self) -> host.DatastoreBrowser: ...
    def QueryConfigOptionDescriptor(self) -> List[vm.ConfigOptionDescriptor]: ...
    def QueryConfigOption(self, key: str, host: HostSystem) -> vm.ConfigOption: ...
    def QueryConfigOptionEx(self, spec: EnvironmentBrowser.ConfigOptionQuerySpec) -> vm.ConfigOption: ...
    def QueryConfigTarget(self, host: HostSystem) -> vm.ConfigTarget: ...
    def QueryTargetCapabilities(self, host: HostSystem) -> host.Capability: ...


    class ConfigOptionQuerySpec(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def host(self) -> HostSystem: ...
        @property
        def guestId(self) -> List[str]: ...


class ExtensibleManagedObject(ManagedObject):
    @property
    def value(self) -> List[CustomFieldsManager.Value]: ...
    @property
    def availableField(self) -> List[CustomFieldsManager.FieldDef]: ...
    def SetCustomValue(self, key: str, value: str) -> NoneType: ...


class ExtensionManager(ManagedObject):
    @property
    def extensionList(self) -> List[Extension]: ...
    def UnregisterExtension(self, extensionKey: str) -> NoneType: ...
    def FindExtension(self, extensionKey: str) -> Extension: ...
    def RegisterExtension(self, extension: Extension) -> NoneType: ...
    def UpdateExtension(self, extension: Extension) -> NoneType: ...
    def GetPublicKey(self) -> str: ...
    def SetPublicKey(self, extensionKey: str, publicKey: str) -> NoneType: ...
    def SetCertificate(self, extensionKey: str, certificatePem: str) -> NoneType: ...
    def QueryManagedBy(self, extensionKey: str) -> List[ManagedEntity]: ...
    def QueryExtensionIpAllocationUsage(self, extensionKeys: List[str]) -> List[ExtensionManager.IpAllocationUsage]: ...


    class IpAllocationUsage(vmodl.DynamicData):
        @property
        def extensionKey(self) -> str: ...
        @property
        def numAddresses(self) -> int: ...


class FileManager(ManagedObject):
    def MoveFile(self, sourceName: str, sourceDatacenter: Datacenter, destinationName: str, destinationDatacenter: Datacenter, force: bool) -> Task: ...
    def CopyFile(self, sourceName: str, sourceDatacenter: Datacenter, destinationName: str, destinationDatacenter: Datacenter, force: bool) -> Task: ...
    def DeleteFile(self, name: str, datacenter: Datacenter) -> Task: ...
    def MakeDirectory(self, name: str, datacenter: Datacenter, createParentDirectories: bool) -> NoneType: ...
    def ChangeOwner(self, name: str, datacenter: Datacenter, owner: str) -> NoneType: ...


class Folder(ManagedEntity):
    @property
    def childType(self) -> List[type]: ...
    @property
    def childEntity(self) -> List[ManagedEntity]: ...
    @property
    def namespace(self) -> str: ...
    def CreateFolder(self, name: str) -> Folder: ...
    def MoveInto(self, list: List[ManagedEntity]) -> Task: ...
    def CreateVm(self, config: vm.ConfigSpec, pool: ResourcePool, host: HostSystem) -> Task: ...
    def RegisterVm(self, path: str, name: str, asTemplate: bool, pool: ResourcePool, host: HostSystem) -> Task: ...
    def CreateCluster(self, name: str, spec: cluster.ConfigSpec) -> ClusterComputeResource: ...
    def CreateClusterEx(self, name: str, spec: cluster.ConfigSpecEx) -> ClusterComputeResource: ...
    def AddStandaloneHost(self, spec: host.ConnectSpec, compResSpec: ComputeResource.ConfigSpec, addConnected: bool, license: str) -> Task: ...
    def CreateDatacenter(self, name: str) -> Datacenter: ...
    def UnregisterAndDestroy(self) -> Task: ...
    def CreateDistributedVirtualSwitch(self, spec: DistributedVirtualSwitch.CreateSpec) -> Task: ...
    def CreateStoragePod(self, name: str) -> StoragePod: ...
    def BatchAddStandaloneHosts(self, newHosts: List[Folder.NewHostSpec], compResSpec: ComputeResource.ConfigSpec, addConnected: bool) -> Task: ...
    def BatchAddHostsToCluster(self, cluster: ClusterComputeResource, newHosts: List[Folder.NewHostSpec], existingHosts: List[HostSystem], compResSpec: ComputeResource.ConfigSpec, desiredState: str) -> Task: ...


    class BatchAddHostsToClusterResult(vmodl.DynamicData):
        @property
        def hostsAddedToCluster(self) -> List[HostSystem]: ...
        @property
        def hostsFailedInventoryAdd(self) -> List[Folder.FailedHostResult]: ...
        @property
        def hostsFailedMoveToCluster(self) -> List[Folder.FailedHostResult]: ...


    class BatchAddStandaloneHostsResult(vmodl.DynamicData):
        @property
        def addedHosts(self) -> List[HostSystem]: ...
        @property
        def hostsFailedInventoryAdd(self) -> List[Folder.FailedHostResult]: ...


    class FailedHostResult(vmodl.DynamicData):
        @property
        def hostName(self) -> str: ...
        @property
        def host(self) -> HostSystem: ...
        @property
        def context(self) -> vmodl.LocalizableMessage: ...
        @property
        def fault(self) -> vmodl.MethodFault: ...


    class NewHostSpec(vmodl.DynamicData):
        @property
        def hostCnxSpec(self) -> host.ConnectSpec: ...
        @property
        def esxLicense(self) -> str: ...


    class DesiredHostState(Enum):
        maintenance = "maintenance"
        non_maintenance = "non_maintenance"


class HealthUpdateManager(ManagedObject):
    def RegisterProvider(self, name: str, healthUpdateInfo: List[HealthUpdateInfo]) -> str: ...
    def UnregisterProvider(self, providerId: str) -> NoneType: ...
    def QueryProviderList(self) -> List[str]: ...
    def HasProvider(self, id: str) -> bool: ...
    def QueryProviderName(self, id: str) -> str: ...
    def QueryHealthUpdateInfos(self, providerId: str) -> List[HealthUpdateInfo]: ...
    def AddMonitoredEntities(self, providerId: str, entities: List[ManagedEntity]) -> NoneType: ...
    def RemoveMonitoredEntities(self, providerId: str, entities: List[ManagedEntity]) -> NoneType: ...
    def QueryMonitoredEntities(self, providerId: str) -> List[ManagedEntity]: ...
    def HasMonitoredEntity(self, providerId: str, entity: ManagedEntity) -> bool: ...
    def QueryUnmonitoredHosts(self, providerId: str, cluster: ClusterComputeResource) -> List[HostSystem]: ...
    def PostHealthUpdates(self, providerId: str, updates: List[HealthUpdate]) -> NoneType: ...
    def QueryHealthUpdates(self, providerId: str) -> List[HealthUpdate]: ...
    def AddFilter(self, providerId: str, filterName: str, infoIds: List[str]) -> str: ...
    def QueryFilterList(self, providerId: str) -> List[str]: ...
    def QueryFilterName(self, filterId: str) -> str: ...
    def QueryFilterInfoIds(self, filterId: str) -> List[str]: ...
    def QueryFilterEntities(self, filterId: str) -> List[ManagedEntity]: ...
    def AddFilterEntities(self, filterId: str, entities: List[ManagedEntity]) -> NoneType: ...
    def RemoveFilterEntities(self, filterId: str, entities: List[ManagedEntity]) -> NoneType: ...
    def RemoveFilter(self, filterId: str) -> NoneType: ...


class HistoryCollector(ManagedObject):
    @property
    def filter(self) -> object: ...
    def SetLatestPageSize(self, maxCount: int) -> NoneType: ...
    def Rewind(self) -> NoneType: ...
    def Reset(self) -> NoneType: ...
    def Remove(self) -> NoneType: ...


class HostSystem(ManagedEntity):
    @property
    def runtime(self) -> host.RuntimeInfo: ...
    @property
    def summary(self) -> host.Summary: ...
    @property
    def hardware(self) -> host.HardwareInfo: ...
    @property
    def capability(self) -> host.Capability: ...
    @property
    def licensableResource(self) -> LicenseManager.LicensableResourceInfo: ...
    @property
    def remediationState(self) -> HostSystem.RemediationState: ...
    @property
    def precheckRemediationResult(self) -> profile.host.ProfileManager.ApplyHostConfigSpec: ...
    @property
    def remediationResult(self) -> profile.host.ProfileManager.ApplyHostConfigResult: ...
    @property
    def complianceCheckState(self) -> HostSystem.ComplianceCheckState: ...
    @property
    def complianceCheckResult(self) -> profile.ComplianceResult: ...
    @property
    def configManager(self) -> host.ConfigManager: ...
    @property
    def config(self) -> host.ConfigInfo: ...
    @property
    def vm(self) -> List[VirtualMachine]: ...
    @property
    def datastore(self) -> List[Datastore]: ...
    @property
    def network(self) -> List[Network]: ...
    @property
    def datastoreBrowser(self) -> host.DatastoreBrowser: ...
    @property
    def systemResources(self) -> host.SystemResourceInfo: ...
    @property
    def answerFileValidationState(self) -> profile.host.AnswerFileStatusResult: ...
    @property
    def answerFileValidationResult(self) -> profile.host.AnswerFileStatusResult: ...
    def QueryTpmAttestationReport(self) -> host.TpmAttestationReport: ...
    def QueryConnectionInfo(self) -> host.ConnectInfo: ...
    def UpdateSystemResources(self, resourceInfo: host.SystemResourceInfo) -> NoneType: ...
    def UpdateSystemSwapConfiguration(self, sysSwapConfig: host.SystemSwapConfiguration) -> NoneType: ...
    def Reconnect(self, cnxSpec: host.ConnectSpec, reconnectSpec: HostSystem.ReconnectSpec) -> Task: ...
    def Disconnect(self) -> Task: ...
    def EnterMaintenanceMode(self, timeout: int, evacuatePoweredOffVms: bool, maintenanceSpec: host.MaintenanceSpec) -> Task: ...
    def ExitMaintenanceMode(self, timeout: int) -> Task: ...
    def Reboot(self, force: bool) -> Task: ...
    def Shutdown(self, force: bool) -> Task: ...
    def EnterStandbyMode(self, timeoutSec: int, evacuatePoweredOffVms: bool) -> Task: ...
    def ExitStandbyMode(self, timeoutSec: int) -> Task: ...
    def QueryOverhead(self, memorySize: long, videoRamSize: int, numVcpus: int) -> long: ...
    def QueryOverheadEx(self, vmConfigInfo: vm.ConfigInfo) -> long: ...
    def ReconfigureDAS(self) -> Task: ...
    def UpdateFlags(self, flagInfo: host.FlagInfo) -> NoneType: ...
    def EnterLockdownMode(self) -> NoneType: ...
    def ExitLockdownMode(self) -> NoneType: ...
    def AcquireCimServicesTicket(self) -> HostServiceTicket: ...
    def UpdateIpmi(self, ipmiInfo: host.IpmiInfo) -> NoneType: ...
    def RetrieveHardwareUptime(self) -> long: ...
    def PrepareCrypto(self) -> NoneType: ...
    def EnableCrypto(self, keyPlain: encryption.CryptoKeyPlain) -> NoneType: ...
    def ConfigureCryptoKey(self, keyId: encryption.CryptoKeyId) -> NoneType: ...
    def QueryProductLockerLocation(self) -> str: ...
    def UpdateProductLockerLocation(self, path: str) -> Task: ...
    def RetrieveFreeEpcMemory(self) -> long: ...


    class ComplianceCheckState(vmodl.DynamicData):
        @property
        def state(self) -> str: ...
        @property
        def checkTime(self) -> datetime: ...


    class ReconnectSpec(vmodl.DynamicData):
        @property
        def syncState(self) -> bool: ...


    class RemediationState(vmodl.DynamicData):
        @property
        def state(self) -> str: ...
        @property
        def operationTime(self) -> datetime: ...


    class ConnectionState(Enum):
        connected = "connected"
        notResponding = "notresponding"
        disconnected = "disconnected"


    class CryptoState(Enum):
        incapable = "incapable"
        prepared = "prepared"
        safe = "safe"
        pendingIncapable = "pendingincapable"


    class PowerState(Enum):
        poweredOn = "poweredon"
        poweredOff = "poweredoff"
        standBy = "standby"
        unknown = "unknown"


    class StandbyMode(Enum):
        entering = "entering"
        exiting = "exiting"
        in = "in"
        none = "none"


class HttpNfcLease(ManagedObject):
    @property
    def initializeProgress(self) -> int: ...
    @property
    def transferProgress(self) -> int: ...
    @property
    def mode(self) -> str: ...
    @property
    def capabilities(self) -> HttpNfcLease.Capabilities: ...
    @property
    def info(self) -> HttpNfcLease.Info: ...
    @property
    def state(self) -> HttpNfcLease.State: ...
    @property
    def error(self) -> vmodl.MethodFault: ...
    def GetManifest(self) -> List[HttpNfcLease.ManifestEntry]: ...
    def SetManifestChecksumType(self, deviceUrlsToChecksumTypes: List[KeyValue]) -> NoneType: ...
    def Complete(self) -> NoneType: ...
    def Abort(self, fault: vmodl.MethodFault) -> NoneType: ...
    def Progress(self, percent: int) -> NoneType: ...
    def PullFromUrls(self, files: List[HttpNfcLease.SourceFile]) -> Task: ...
    def ProbeUrls(self, files: List[HttpNfcLease.SourceFile], timeout: int) -> List[HttpNfcLease.ProbeResult]: ...


    class Capabilities(vmodl.DynamicData):
        @property
        def pullModeSupported(self) -> bool: ...
        @property
        def corsSupported(self) -> bool: ...


    class DatastoreLeaseInfo(vmodl.DynamicData):
        @property
        def datastoreKey(self) -> str: ...
        @property
        def hosts(self) -> List[HttpNfcLease.HostInfo]: ...


    class DeviceUrl(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def importKey(self) -> str: ...
        @property
        def url(self) -> str: ...
        @property
        def sslThumbprint(self) -> str: ...
        @property
        def disk(self) -> bool: ...
        @property
        def targetId(self) -> str: ...
        @property
        def datastoreKey(self) -> str: ...
        @property
        def fileSize(self) -> long: ...


    class HostInfo(vmodl.DynamicData):
        @property
        def url(self) -> str: ...
        @property
        def sslThumbprint(self) -> str: ...


    class ManifestEntry(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def sha1(self) -> str: ...
        @property
        def checksum(self) -> str: ...
        @property
        def checksumType(self) -> str: ...
        @property
        def size(self) -> long: ...
        @property
        def disk(self) -> bool: ...
        @property
        def capacity(self) -> long: ...
        @property
        def populatedSize(self) -> long: ...


        class ChecksumType(Enum):
            sha1 = "sha1"
            sha256 = "sha256"


    class ProbeResult(vmodl.DynamicData):
        @property
        def serverAccessible(self) -> bool: ...


    class SourceFile(vmodl.DynamicData):
        @property
        def targetDeviceId(self) -> str: ...
        @property
        def url(self) -> str: ...
        @property
        def memberName(self) -> str: ...
        @property
        def create(self) -> bool: ...
        @property
        def sslThumbprint(self) -> str: ...
        @property
        def httpHeaders(self) -> List[KeyValue]: ...
        @property
        def size(self) -> long: ...


    class Mode(Enum):
        pushOrGet = "pushorget"
        pull = "pull"


class IoFilterManager(ManagedObject):
    def InstallIoFilter(self, vibUrl: str, compRes: ComputeResource) -> Task: ...
    def UninstallIoFilter(self, filterId: str, compRes: ComputeResource) -> Task: ...
    def UpgradeIoFilter(self, filterId: str, compRes: ComputeResource, vibUrl: str) -> Task: ...
    def QueryIssue(self, filterId: str, compRes: ComputeResource) -> IoFilterManager.QueryIssueResult: ...
    def QueryIoFilterInfo(self, compRes: ComputeResource) -> List[IoFilterManager.ClusterIoFilterInfo]: ...
    def ResolveInstallationErrorsOnHost(self, filterId: str, host: HostSystem) -> Task: ...
    def ResolveInstallationErrorsOnCluster(self, filterId: str, cluster: ClusterComputeResource) -> Task: ...
    def QueryDisksUsingFilter(self, filterId: str, compRes: ComputeResource) -> List[vm.device.VirtualDiskId]: ...


    class ClusterIoFilterInfo(IoFilterManager.IoFilterInfo):
        @property
        def opType(self) -> str: ...
        @property
        def vibUrl(self) -> str: ...


    class HostIoFilterInfo(IoFilterManager.IoFilterInfo):
        @property
        def available(self) -> bool: ...


    class IoFilterInfo(vmodl.DynamicData):
        @property
        def id(self) -> str: ...
        @property
        def name(self) -> str: ...
        @property
        def vendor(self) -> str: ...
        @property
        def version(self) -> str: ...
        @property
        def type(self) -> str: ...
        @property
        def summary(self) -> str: ...
        @property
        def releaseDate(self) -> str: ...


    class QueryIssueResult(vmodl.DynamicData):
        @property
        def opType(self) -> str: ...
        @property
        def hostIssue(self) -> List[IoFilterManager.QueryIssueResult.HostIssue]: ...


        class HostIssue(vmodl.DynamicData):
            @property
            def host(self) -> HostSystem: ...
            @property
            def issue(self) -> List[vmodl.MethodFault]: ...


    class IoFilterType(Enum):
        cache = "cache"
        replication = "replication"
        encryption = "encryption"
        compression = "compression"
        inspection = "inspection"
        datastoreIoControl = "datastoreiocontrol"
        dataProvider = "dataprovider"
        dataCapture = "datacapture"


    class OperationType(Enum):
        install = "install"
        uninstall = "uninstall"
        upgrade = "upgrade"


class IpPoolManager(ManagedObject):
    def QueryIpPools(self, dc: Datacenter) -> List[vApp.IpPool]: ...
    def CreateIpPool(self, dc: Datacenter, pool: vApp.IpPool) -> int: ...
    def UpdateIpPool(self, dc: Datacenter, pool: vApp.IpPool) -> NoneType: ...
    def DestroyIpPool(self, dc: Datacenter, id: int, force: bool) -> NoneType: ...
    def AllocateIpv4Address(self, dc: Datacenter, poolId: int, allocationId: str) -> str: ...
    def AllocateIpv6Address(self, dc: Datacenter, poolId: int, allocationId: str) -> str: ...
    def ReleaseIpAllocation(self, dc: Datacenter, poolId: int, allocationId: str) -> NoneType: ...
    def QueryIPAllocations(self, dc: Datacenter, poolId: int, extensionKey: str) -> List[IpPoolManager.IpAllocation]: ...


    class IpAllocation(vmodl.DynamicData):
        @property
        def ipAddress(self) -> str: ...
        @property
        def allocationId(self) -> str: ...


class LicenseAssignmentManager(ManagedObject):
    def UpdateAssignedLicense(self, entity: str, licenseKey: str, entityDisplayName: str) -> LicenseManager.LicenseInfo: ...
    def RemoveAssignedLicense(self, entityId: str) -> NoneType: ...
    def QueryAssignedLicenses(self, entityId: str) -> List[LicenseAssignmentManager.LicenseAssignment]: ...


    class LicenseAssignment(vmodl.DynamicData):
        @property
        def entityId(self) -> str: ...
        @property
        def scope(self) -> str: ...
        @property
        def entityDisplayName(self) -> str: ...
        @property
        def assignedLicense(self) -> LicenseManager.LicenseInfo: ...
        @property
        def properties(self) -> List[vmodl.KeyAnyValue]: ...


class LicenseManager(ManagedObject):
    @property
    def source(self) -> LicenseManager.LicenseSource: ...
    @property
    def sourceAvailable(self) -> bool: ...
    @property
    def diagnostics(self) -> LicenseManager.DiagnosticInfo: ...
    @property
    def featureInfo(self) -> List[LicenseManager.FeatureInfo]: ...
    @property
    def licensedEdition(self) -> str: ...
    @property
    def licenses(self) -> List[LicenseManager.LicenseInfo]: ...
    @property
    def licenseAssignmentManager(self) -> LicenseAssignmentManager: ...
    @property
    def evaluation(self) -> LicenseManager.EvaluationInfo: ...
    def QuerySupportedFeatures(self, host: HostSystem) -> List[LicenseManager.FeatureInfo]: ...
    def QuerySourceAvailability(self, host: HostSystem) -> List[LicenseManager.AvailabilityInfo]: ...
    def QueryUsage(self, host: HostSystem) -> LicenseManager.LicenseUsageInfo: ...
    def SetEdition(self, host: HostSystem, featureKey: str) -> NoneType: ...
    def CheckFeature(self, host: HostSystem, featureKey: str) -> bool: ...
    def Enable(self, host: HostSystem, featureKey: str) -> bool: ...
    def Disable(self, host: HostSystem, featureKey: str) -> bool: ...
    def ConfigureSource(self, host: HostSystem, licenseSource: LicenseManager.LicenseSource) -> NoneType: ...
    def UpdateLicense(self, licenseKey: str, labels: List[KeyValue]) -> LicenseManager.LicenseInfo: ...
    def AddLicense(self, licenseKey: str, labels: List[KeyValue]) -> LicenseManager.LicenseInfo: ...
    def RemoveLicense(self, licenseKey: str) -> NoneType: ...
    def DecodeLicense(self, licenseKey: str) -> LicenseManager.LicenseInfo: ...
    def UpdateLabel(self, licenseKey: str, labelKey: str, labelValue: str) -> NoneType: ...
    def RemoveLabel(self, licenseKey: str, labelKey: str) -> NoneType: ...


    class AvailabilityInfo(vmodl.DynamicData):
        @property
        def feature(self) -> LicenseManager.FeatureInfo: ...
        @property
        def total(self) -> int: ...
        @property
        def available(self) -> int: ...


    class DiagnosticInfo(vmodl.DynamicData):
        @property
        def sourceLastChanged(self) -> datetime: ...
        @property
        def sourceLost(self) -> str: ...
        @property
        def sourceLatency(self) -> float: ...
        @property
        def licenseRequests(self) -> str: ...
        @property
        def licenseRequestFailures(self) -> str: ...
        @property
        def licenseFeatureUnknowns(self) -> str: ...
        @property
        def opState(self) -> LicenseManager.LicenseState: ...
        @property
        def lastStatusUpdate(self) -> datetime: ...
        @property
        def opFailureMessage(self) -> str: ...


    class EvaluationInfo(vmodl.DynamicData):
        @property
        def properties(self) -> List[vmodl.KeyAnyValue]: ...


    class EvaluationLicense(LicenseManager.LicenseSource):
        @property
        def remainingHours(self) -> long: ...


    class FeatureInfo(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def featureName(self) -> str: ...
        @property
        def featureDescription(self) -> str: ...
        @property
        def state(self) -> LicenseManager.FeatureInfo.State: ...
        @property
        def costUnit(self) -> str: ...
        @property
        def sourceRestriction(self) -> str: ...
        @property
        def dependentKey(self) -> List[str]: ...
        @property
        def edition(self) -> bool: ...
        @property
        def expiresOn(self) -> datetime: ...


        class CostUnit(Enum):
            host = "host"
            cpuCore = "cpucore"
            cpuPackage = "cpupackage"
            server = "server"
            vm = "vm"


        class SourceRestriction(Enum):
            unrestricted = "unrestricted"
            served = "served"
            file = "file"


    class LicensableResourceInfo(vmodl.DynamicData):
        @property
        def resource(self) -> List[vmodl.KeyAnyValue]: ...


        class ResourceKey(Enum):
            numCpuPackages = "numcpupackages"
            numCpuCores = "numcpucores"
            memorySize = "memorysize"
            memoryForVms = "memoryforvms"
            numVmsStarted = "numvmsstarted"
            numVmsStarting = "numvmsstarting"


    class LicenseInfo(vmodl.DynamicData):
        @property
        def licenseKey(self) -> str: ...
        @property
        def editionKey(self) -> str: ...
        @property
        def name(self) -> str: ...
        @property
        def total(self) -> int: ...
        @property
        def used(self) -> int: ...
        @property
        def costUnit(self) -> str: ...
        @property
        def properties(self) -> List[vmodl.KeyAnyValue]: ...
        @property
        def labels(self) -> List[KeyValue]: ...


    class LicenseServer(LicenseManager.LicenseSource):
        @property
        def licenseServer(self) -> str: ...


    class LicenseSource(vmodl.DynamicData): ...


    class LicenseUsageInfo(vmodl.DynamicData):
        @property
        def source(self) -> LicenseManager.LicenseSource: ...
        @property
        def sourceAvailable(self) -> bool: ...
        @property
        def reservationInfo(self) -> List[LicenseManager.ReservationInfo]: ...
        @property
        def featureInfo(self) -> List[LicenseManager.FeatureInfo]: ...


    class LocalLicense(LicenseManager.LicenseSource):
        @property
        def licenseKeys(self) -> str: ...


    class ReservationInfo(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def state(self) -> LicenseManager.ReservationInfo.State: ...
        @property
        def required(self) -> int: ...


    class LicenseKey(Enum):
        esxFull = "esxfull"
        esxVmtn = "esxvmtn"
        esxExpress = "esxexpress"
        san = "san"
        iscsi = "iscsi"
        nas = "nas"
        vsmp = "vsmp"
        backup = "backup"
        vc = "vc"
        vcExpress = "vcexpress"
        esxHost = "esxhost"
        gsxHost = "gsxhost"
        serverHost = "serverhost"
        drsPower = "drspower"
        vmotion = "vmotion"
        drs = "drs"
        das = "das"


    class LicenseState(Enum):
        initializing = "initializing"
        normal = "normal"
        marginal = "marginal"
        fault = "fault"


class LocalizationManager(ManagedObject):
    @property
    def catalog(self) -> List[LocalizationManager.MessageCatalog]: ...


    class MessageCatalog(vmodl.DynamicData):
        @property
        def moduleName(self) -> str: ...
        @property
        def catalogName(self) -> str: ...
        @property
        def locale(self) -> str: ...
        @property
        def catalogUri(self) -> str: ...
        @property
        def lastModified(self) -> datetime: ...
        @property
        def md5sum(self) -> str: ...
        @property
        def version(self) -> str: ...


class ManagedEntity(ExtensibleManagedObject):
    @property
    def parent(self) -> ManagedEntity: ...
    @property
    def customValue(self) -> List[CustomFieldsManager.Value]: ...
    @property
    def overallStatus(self) -> ManagedEntity.Status: ...
    @property
    def configStatus(self) -> ManagedEntity.Status: ...
    @property
    def configIssue(self) -> List[event.Event]: ...
    @property
    def effectiveRole(self) -> List[int]: ...
    @property
    def permission(self) -> List[AuthorizationManager.Permission]: ...
    @property
    def name(self) -> str: ...
    @property
    def disabledMethod(self) -> List[ManagedMethod]: ...
    @property
    def recentTask(self) -> List[Task]: ...
    @property
    def declaredAlarmState(self) -> List[alarm.AlarmState]: ...
    @property
    def triggeredAlarmState(self) -> List[alarm.AlarmState]: ...
    @property
    def alarmActionsEnabled(self) -> bool: ...
    @property
    def tag(self) -> List[Tag]: ...
    def Reload(self) -> NoneType: ...
    def Rename(self, newName: str) -> Task: ...
    def Destroy(self) -> Task: ...


    class Status(Enum):
        gray = "gray"
        green = "green"
        yellow = "yellow"
        red = "red"


class Network(ManagedEntity):
    @property
    def summary(self) -> Network.Summary: ...
    @property
    def host(self) -> List[HostSystem]: ...
    @property
    def vm(self) -> List[VirtualMachine]: ...
    def DestroyNetwork(self) -> NoneType: ...


class OpaqueNetwork(Network):
    @property
    def capability(self) -> OpaqueNetwork.Capability: ...
    @property
    def extraConfig(self) -> List[option.OptionValue]: ...


class OverheadMemoryManager(ManagedObject):
    def LookupVmOverheadMemory(self, vm: VirtualMachine, host: HostSystem) -> long: ...


class OvfManager(ManagedObject):
    @property
    def ovfImportOption(self) -> List[OvfManager.OvfOptionInfo]: ...
    @property
    def ovfExportOption(self) -> List[OvfManager.OvfOptionInfo]: ...
    def ValidateHost(self, ovfDescriptor: str, host: HostSystem, vhp: OvfManager.ValidateHostParams) -> OvfManager.ValidateHostResult: ...
    def ParseDescriptor(self, ovfDescriptor: str, pdp: OvfManager.ParseDescriptorParams) -> OvfManager.ParseDescriptorResult: ...
    def CreateImportSpec(self, ovfDescriptor: str, resourcePool: ResourcePool, datastore: Datastore, cisp: OvfManager.CreateImportSpecParams) -> OvfManager.CreateImportSpecResult: ...
    def CreateDescriptor(self, obj: ManagedEntity, cdp: OvfManager.CreateDescriptorParams) -> OvfManager.CreateDescriptorResult: ...


    class CommonParams(vmodl.DynamicData):
        @property
        def locale(self) -> str: ...
        @property
        def deploymentOption(self) -> str: ...
        @property
        def msgBundle(self) -> List[KeyValue]: ...
        @property
        def importOption(self) -> List[str]: ...


    class CreateDescriptorParams(vmodl.DynamicData):
        @property
        def ovfFiles(self) -> List[OvfManager.OvfFile]: ...
        @property
        def name(self) -> str: ...
        @property
        def description(self) -> str: ...
        @property
        def includeImageFiles(self) -> bool: ...
        @property
        def exportOption(self) -> List[str]: ...
        @property
        def snapshot(self) -> vm.Snapshot: ...


    class CreateDescriptorResult(vmodl.DynamicData):
        @property
        def ovfDescriptor(self) -> str: ...
        @property
        def error(self) -> List[vmodl.MethodFault]: ...
        @property
        def warning(self) -> List[vmodl.MethodFault]: ...
        @property
        def includeImageFiles(self) -> bool: ...


    class CreateImportSpecParams(OvfManager.CommonParams):
        @property
        def entityName(self) -> str: ...
        @property
        def hostSystem(self) -> HostSystem: ...
        @property
        def networkMapping(self) -> List[OvfManager.NetworkMapping]: ...
        @property
        def ipAllocationPolicy(self) -> str: ...
        @property
        def ipProtocol(self) -> str: ...
        @property
        def propertyMapping(self) -> List[KeyValue]: ...
        @property
        def resourceMapping(self) -> List[OvfManager.ResourceMap]: ...
        @property
        def diskProvisioning(self) -> str: ...
        @property
        def instantiationOst(self) -> OvfConsumer.OstNode: ...


        class DiskProvisioningType(Enum):
            monolithicSparse = "monolithicsparse"
            monolithicFlat = "monolithicflat"
            twoGbMaxExtentSparse = "twogbmaxextentsparse"
            twoGbMaxExtentFlat = "twogbmaxextentflat"
            thin = "thin"
            thick = "thick"
            seSparse = "sesparse"
            eagerZeroedThick = "eagerzeroedthick"
            sparse = "sparse"
            flat = "flat"


    class CreateImportSpecResult(vmodl.DynamicData):
        @property
        def importSpec(self) -> ImportSpec: ...
        @property
        def fileItem(self) -> List[OvfManager.FileItem]: ...
        @property
        def warning(self) -> List[vmodl.MethodFault]: ...
        @property
        def error(self) -> List[vmodl.MethodFault]: ...


    class DeploymentOption(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def label(self) -> str: ...
        @property
        def description(self) -> str: ...


    class FileItem(vmodl.DynamicData):
        @property
        def deviceId(self) -> str: ...
        @property
        def path(self) -> str: ...
        @property
        def compressionMethod(self) -> str: ...
        @property
        def chunkSize(self) -> long: ...
        @property
        def size(self) -> long: ...
        @property
        def cimType(self) -> int: ...
        @property
        def create(self) -> bool: ...


    class NetworkInfo(vmodl.DynamicData):
        @property
        def name(self) -> str: ...
        @property
        def description(self) -> str: ...


    class NetworkMapping(vmodl.DynamicData):
        @property
        def name(self) -> str: ...
        @property
        def network(self) -> Network: ...


    class OvfFile(vmodl.DynamicData):
        @property
        def deviceId(self) -> str: ...
        @property
        def path(self) -> str: ...
        @property
        def compressionMethod(self) -> str: ...
        @property
        def chunkSize(self) -> long: ...
        @property
        def size(self) -> long: ...
        @property
        def capacity(self) -> long: ...
        @property
        def populatedSize(self) -> long: ...


    class OvfOptionInfo(vmodl.DynamicData):
        @property
        def option(self) -> str: ...
        @property
        def description(self) -> vmodl.LocalizableMessage: ...


    class ParseDescriptorParams(OvfManager.CommonParams): ...


    class ParseDescriptorResult(vmodl.DynamicData):
        @property
        def eula(self) -> List[str]: ...
        @property
        def network(self) -> List[OvfManager.NetworkInfo]: ...
        @property
        def ipAllocationScheme(self) -> List[str]: ...
        @property
        def ipProtocols(self) -> List[str]: ...
        @property
        def property(self) -> List[vApp.PropertyInfo]: ...
        @property
        def productInfo(self) -> vApp.ProductInfo: ...
        @property
        def annotation(self) -> str: ...
        @property
        def approximateDownloadSize(self) -> long: ...
        @property
        def approximateFlatDeploymentSize(self) -> long: ...
        @property
        def approximateSparseDeploymentSize(self) -> long: ...
        @property
        def defaultEntityName(self) -> str: ...
        @property
        def virtualApp(self) -> bool: ...
        @property
        def deploymentOption(self) -> List[OvfManager.DeploymentOption]: ...
        @property
        def defaultDeploymentOption(self) -> str: ...
        @property
        def entityName(self) -> List[KeyValue]: ...
        @property
        def annotatedOst(self) -> OvfConsumer.OstNode: ...
        @property
        def error(self) -> List[vmodl.MethodFault]: ...
        @property
        def warning(self) -> List[vmodl.MethodFault]: ...


    class ResourceMap(vmodl.DynamicData):
        @property
        def source(self) -> str: ...
        @property
        def parent(self) -> ResourcePool: ...
        @property
        def resourceSpec(self) -> ResourceConfigSpec: ...
        @property
        def datastore(self) -> Datastore: ...


    class ValidateHostParams(OvfManager.CommonParams): ...


    class ValidateHostResult(vmodl.DynamicData):
        @property
        def downloadSize(self) -> long: ...
        @property
        def flatDeploymentSize(self) -> long: ...
        @property
        def sparseDeploymentSize(self) -> long: ...
        @property
        def error(self) -> List[vmodl.MethodFault]: ...
        @property
        def warning(self) -> List[vmodl.MethodFault]: ...
        @property
        def supportedDiskProvisioning(self) -> List[str]: ...


class PerformanceManager(ManagedObject):
    @property
    def description(self) -> PerformanceDescription: ...
    @property
    def historicalInterval(self) -> List[HistoricalInterval]: ...
    @property
    def perfCounter(self) -> List[PerformanceManager.CounterInfo]: ...
    def QueryProviderSummary(self, entity: ManagedObject) -> PerformanceManager.ProviderSummary: ...
    def QueryAvailableMetric(self, entity: ManagedObject, beginTime: datetime, endTime: datetime, intervalId: int) -> List[PerformanceManager.MetricId]: ...
    def QueryCounter(self, counterId: List[int]) -> List[PerformanceManager.CounterInfo]: ...
    def QueryCounterByLevel(self, level: int) -> List[PerformanceManager.CounterInfo]: ...
    def QueryStats(self, querySpec: List[PerformanceManager.QuerySpec]) -> List[PerformanceManager.EntityMetricBase]: ...
    def QueryCompositeStats(self, querySpec: PerformanceManager.QuerySpec) -> PerformanceManager.CompositeEntityMetric: ...
    def CreateHistoricalInterval(self, intervalId: HistoricalInterval) -> NoneType: ...
    def RemoveHistoricalInterval(self, samplePeriod: int) -> NoneType: ...
    def UpdateHistoricalInterval(self, interval: HistoricalInterval) -> NoneType: ...
    def UpdateCounterLevelMapping(self, counterLevelMap: List[PerformanceManager.CounterLevelMapping]) -> NoneType: ...
    def ResetCounterLevelMapping(self, counters: List[int]) -> NoneType: ...


    class CompositeEntityMetric(vmodl.DynamicData):
        @property
        def entity(self) -> PerformanceManager.EntityMetricBase: ...
        @property
        def childEntity(self) -> List[PerformanceManager.EntityMetricBase]: ...


    class CounterInfo(vmodl.DynamicData):
        @property
        def key(self) -> int: ...
        @property
        def nameInfo(self) -> ElementDescription: ...
        @property
        def groupInfo(self) -> ElementDescription: ...
        @property
        def unitInfo(self) -> ElementDescription: ...
        @property
        def rollupType(self) -> PerformanceManager.CounterInfo.RollupType: ...
        @property
        def statsType(self) -> PerformanceManager.CounterInfo.StatsType: ...
        @property
        def level(self) -> int: ...
        @property
        def perDeviceLevel(self) -> int: ...
        @property
        def associatedCounterId(self) -> List[int]: ...


        class RollupType(Enum):
            average = "average"
            maximum = "maximum"
            minimum = "minimum"
            latest = "latest"
            summation = "summation"
            none = "none"


        class StatsType(Enum):
            absolute = "absolute"
            delta = "delta"
            rate = "rate"


        class Unit(Enum):
            percent = "percent"
            kiloBytes = "kilobytes"
            megaBytes = "megabytes"
            megaHertz = "megahertz"
            number = "number"
            microsecond = "microsecond"
            millisecond = "millisecond"
            second = "second"
            kiloBytesPerSecond = "kilobytespersecond"
            megaBytesPerSecond = "megabytespersecond"
            watt = "watt"
            joule = "joule"
            teraBytes = "terabytes"
            celsius = "celsius"
            mgCO2eqPerHour = "mgco2eqperhour"
            nanosecond = "nanosecond"


    class CounterLevelMapping(vmodl.DynamicData):
        @property
        def counterId(self) -> int: ...
        @property
        def aggregateLevel(self) -> int: ...
        @property
        def perDeviceLevel(self) -> int: ...


    class EntityMetric(PerformanceManager.EntityMetricBase):
        @property
        def sampleInfo(self) -> List[PerformanceManager.SampleInfo]: ...
        @property
        def value(self) -> List[PerformanceManager.MetricSeries]: ...


    class EntityMetricBase(vmodl.DynamicData):
        @property
        def entity(self) -> ManagedObject: ...


    class EntityMetricCSV(PerformanceManager.EntityMetricBase):
        @property
        def sampleInfoCSV(self) -> str: ...
        @property
        def value(self) -> List[PerformanceManager.MetricSeriesCSV]: ...


    class IntSeries(PerformanceManager.MetricSeries):
        @property
        def value(self) -> List[long]: ...


    class MetricId(vmodl.DynamicData):
        @property
        def counterId(self) -> int: ...
        @property
        def instance(self) -> str: ...


    class MetricSeries(vmodl.DynamicData):
        @property
        def id(self) -> PerformanceManager.MetricId: ...


    class MetricSeriesCSV(PerformanceManager.MetricSeries):
        @property
        def value(self) -> str: ...


    class ProviderSummary(vmodl.DynamicData):
        @property
        def entity(self) -> ManagedObject: ...
        @property
        def currentSupported(self) -> bool: ...
        @property
        def summarySupported(self) -> bool: ...
        @property
        def refreshRate(self) -> int: ...


    class QuerySpec(vmodl.DynamicData):
        @property
        def entity(self) -> ManagedObject: ...
        @property
        def startTime(self) -> datetime: ...
        @property
        def endTime(self) -> datetime: ...
        @property
        def maxSample(self) -> int: ...
        @property
        def metricId(self) -> List[PerformanceManager.MetricId]: ...
        @property
        def intervalId(self) -> int: ...
        @property
        def format(self) -> str: ...


    class SampleInfo(vmodl.DynamicData):
        @property
        def timestamp(self) -> datetime: ...
        @property
        def interval(self) -> int: ...


class ResourcePlanningManager(ManagedObject):
    def EstimateDatabaseSize(self, dbSizeParam: ResourcePlanningManager.DatabaseSizeParam) -> ResourcePlanningManager.DatabaseSizeEstimate: ...


    class DatabaseSizeEstimate(vmodl.DynamicData):
        @property
        def size(self) -> long: ...


    class DatabaseSizeParam(vmodl.DynamicData):
        @property
        def inventoryDesc(self) -> ResourcePlanningManager.InventoryDescription: ...
        @property
        def perfStatsDesc(self) -> ResourcePlanningManager.PerfStatsDescription: ...


    class InventoryDescription(vmodl.DynamicData):
        @property
        def numHosts(self) -> int: ...
        @property
        def numVirtualMachines(self) -> int: ...
        @property
        def numResourcePools(self) -> int: ...
        @property
        def numClusters(self) -> int: ...
        @property
        def numCpuDev(self) -> int: ...
        @property
        def numNetDev(self) -> int: ...
        @property
        def numDiskDev(self) -> int: ...
        @property
        def numvCpuDev(self) -> int: ...
        @property
        def numvNetDev(self) -> int: ...
        @property
        def numvDiskDev(self) -> int: ...


    class PerfStatsDescription(vmodl.DynamicData):
        @property
        def intervals(self) -> List[HistoricalInterval]: ...


class ResourcePool(ManagedEntity):
    @property
    def summary(self) -> ResourcePool.Summary: ...
    @property
    def runtime(self) -> ResourcePool.RuntimeInfo: ...
    @property
    def owner(self) -> ComputeResource: ...
    @property
    def resourcePool(self) -> List[ResourcePool]: ...
    @property
    def vm(self) -> List[VirtualMachine]: ...
    @property
    def config(self) -> ResourceConfigSpec: ...
    @property
    def namespace(self) -> str: ...
    @property
    def childConfiguration(self) -> List[ResourceConfigSpec]: ...
    def UpdateConfig(self, name: str, config: ResourceConfigSpec) -> NoneType: ...
    def MoveInto(self, list: List[ManagedEntity]) -> NoneType: ...
    def UpdateChildResourceConfiguration(self, spec: List[ResourceConfigSpec]) -> NoneType: ...
    def CreateResourcePool(self, name: str, spec: ResourceConfigSpec) -> ResourcePool: ...
    def DestroyChildren(self) -> NoneType: ...
    def CreateVApp(self, name: str, resSpec: ResourceConfigSpec, configSpec: vApp.VAppConfigSpec, vmFolder: Folder) -> VirtualApp: ...
    def CreateVm(self, config: vm.ConfigSpec, host: HostSystem) -> Task: ...
    def RegisterVm(self, path: str, name: str, host: HostSystem) -> Task: ...
    def ImportVApp(self, spec: ImportSpec, folder: Folder, host: HostSystem) -> HttpNfcLease: ...
    def QueryResourceConfigOption(self) -> ResourceConfigOption: ...
    def RefreshRuntime(self) -> NoneType: ...


    class ResourceUsage(vmodl.DynamicData):
        @property
        def reservationUsed(self) -> long: ...
        @property
        def reservationUsedForVm(self) -> long: ...
        @property
        def unreservedForPool(self) -> long: ...
        @property
        def unreservedForVm(self) -> long: ...
        @property
        def overallUsage(self) -> long: ...
        @property
        def maxUsage(self) -> long: ...


class SearchIndex(ManagedObject):
    def FindByUuid(self, datacenter: Datacenter, uuid: str, vmSearch: bool, instanceUuid: bool) -> ManagedEntity: ...
    def FindByDatastorePath(self, datacenter: Datacenter, path: str) -> VirtualMachine: ...
    def FindByDnsName(self, datacenter: Datacenter, dnsName: str, vmSearch: bool) -> ManagedEntity: ...
    def FindByIp(self, datacenter: Datacenter, ip: str, vmSearch: bool) -> ManagedEntity: ...
    def FindByInventoryPath(self, inventoryPath: str) -> ManagedEntity: ...
    def FindChild(self, entity: ManagedEntity, name: str) -> ManagedEntity: ...
    def FindAllByUuid(self, datacenter: Datacenter, uuid: str, vmSearch: bool, instanceUuid: bool) -> List[ManagedEntity]: ...
    def FindAllByDnsName(self, datacenter: Datacenter, dnsName: str, vmSearch: bool) -> List[ManagedEntity]: ...
    def FindAllByIp(self, datacenter: Datacenter, ip: str, vmSearch: bool) -> List[ManagedEntity]: ...


class ServiceInstance(ManagedObject):
    @property
    def serverClock(self) -> datetime: ...
    @property
    def capability(self) -> Capability: ...
    @property
    def content(self) -> ServiceInstanceContent: ...
    def CurrentTime(self) -> datetime: ...
    def RetrieveContent(self) -> ServiceInstanceContent: ...
    def ValidateMigration(self, vm: List[VirtualMachine], state: VirtualMachine.PowerState, testType: List[str], pool: ResourcePool, host: HostSystem) -> List[event.Event]: ...
    def QueryVMotionCompatibility(self, vm: VirtualMachine, host: List[HostSystem], compatibility: List[str]) -> List[ServiceInstance.HostVMotionCompatibility]: ...
    def RetrieveProductComponents(self) -> List[ServiceInstance.ProductComponentInfo]: ...


    class HostVMotionCompatibility(vmodl.DynamicData):
        @property
        def host(self) -> HostSystem: ...
        @property
        def compatibility(self) -> List[str]: ...


    class ProductComponentInfo(vmodl.DynamicData):
        @property
        def id(self) -> str: ...
        @property
        def name(self) -> str: ...
        @property
        def version(self) -> str: ...
        @property
        def release(self) -> int: ...


    class VMotionCompatibilityType(Enum):
        cpu = "cpu"
        software = "software"


    class ValidateMigrationTestType(Enum):
        sourceTests = "sourcetests"
        compatibilityTests = "compatibilitytests"
        diskAccessibilityTests = "diskaccessibilitytests"
        resourceTests = "resourcetests"


class ServiceManager(ManagedObject):
    @property
    def service(self) -> List[ServiceManager.ServiceInfo]: ...
    def QueryServiceList(self, serviceName: str, location: List[str]) -> List[ServiceManager.ServiceInfo]: ...


    class ServiceInfo(vmodl.DynamicData):
        @property
        def serviceName(self) -> str: ...
        @property
        def location(self) -> List[str]: ...
        @property
        def service(self) -> ManagedObject: ...
        @property
        def description(self) -> str: ...


class SessionManager(ManagedObject):
    @property
    def sessionList(self) -> List[UserSession]: ...
    @property
    def currentSession(self) -> UserSession: ...
    @property
    def message(self) -> str: ...
    @property
    def messageLocaleList(self) -> List[str]: ...
    @property
    def supportedLocaleList(self) -> List[str]: ...
    @property
    def defaultLocale(self) -> str: ...
    def UpdateMessage(self, message: str) -> NoneType: ...
    def LoginByToken(self, locale: str) -> UserSession: ...
    def Login(self, userName: str, password: str, locale: str) -> UserSession: ...
    def LoginBySSPI(self, base64Token: str, locale: str) -> UserSession: ...
    def Logout(self) -> NoneType: ...
    def AcquireLocalTicket(self, userName: str) -> SessionManager.LocalTicket: ...
    def AcquireGenericServiceTicket(self, spec: SessionManager.ServiceRequestSpec) -> SessionManager.GenericServiceTicket: ...
    def Terminate(self, sessionId: List[str]) -> NoneType: ...
    def SetLocale(self, locale: str) -> NoneType: ...
    def LoginExtensionBySubjectName(self, extensionKey: str, locale: str) -> UserSession: ...
    def LoginExtensionByCertificate(self, extensionKey: str, locale: str) -> UserSession: ...
    def ImpersonateUser(self, userName: str, locale: str) -> UserSession: ...
    def SessionIsActive(self, sessionID: str, userName: str) -> bool: ...
    def AcquireCloneTicket(self) -> str: ...
    def CloneSession(self, cloneTicket: str) -> UserSession: ...


    class GenericServiceTicket(vmodl.DynamicData):
        @property
        def id(self) -> str: ...
        @property
        def hostName(self) -> str: ...
        @property
        def sslThumbprint(self) -> str: ...
        @property
        def certThumbprintList(self) -> List[vm.CertThumbprint]: ...
        @property
        def ticketType(self) -> str: ...


        class TicketType(Enum):
            HttpNfcServiceTicket = "httpnfcserviceticket"
            HostServiceTicket = "hostserviceticket"
            VcServiceTicket = "vcserviceticket"


    class HttpServiceRequestSpec(SessionManager.ServiceRequestSpec):
        @property
        def method(self) -> str: ...
        @property
        def url(self) -> str: ...


        class Method(Enum):
            httpOptions = "httpoptions"
            httpGet = "httpget"
            httpHead = "httphead"
            httpPost = "httppost"
            httpPut = "httpput"
            httpDelete = "httpdelete"
            httpTrace = "httptrace"
            httpConnect = "httpconnect"


    class LocalTicket(vmodl.DynamicData):
        @property
        def userName(self) -> str: ...
        @property
        def passwordFilePath(self) -> str: ...


    class ServiceRequestSpec(vmodl.DynamicData): ...


    class VmomiServiceRequestSpec(SessionManager.ServiceRequestSpec):
        @property
        def method(self) -> ManagedMethod: ...


class SimpleCommand(ManagedObject):
    @property
    def encodingType(self) -> SimpleCommand.Encoding: ...
    @property
    def entity(self) -> ServiceManager.ServiceInfo: ...
    def Execute(self, arguments: List[str]) -> str: ...


    class Encoding(Enum):
        CSV = "csv"
        HEX = "hex"
        STRING = "string"


class SiteInfoManager(ManagedObject):
    def GetSiteInfo(self) -> SiteInfo: ...


class StoragePod(Folder):
    @property
    def summary(self) -> StoragePod.Summary: ...
    @property
    def podStorageDrsEntry(self) -> StorageResourceManager.PodStorageDrsEntry: ...


class StorageQueryManager(ManagedObject):
    def QueryHostsWithAttachedLun(self, lunUuid: str) -> List[HostSystem]: ...


class StorageResourceManager(ManagedObject):
    def ConfigureDatastoreIORM(self, datastore: Datastore, spec: StorageResourceManager.IORMConfigSpec) -> Task: ...
    def QueryIORMConfigOption(self, host: HostSystem) -> StorageResourceManager.IORMConfigOption: ...
    def QueryDatastorePerformanceSummary(self, datastore: Datastore) -> List[StorageResourceManager.StoragePerformanceSummary]: ...
    def ApplyRecommendationToPod(self, pod: StoragePod, key: str) -> Task: ...
    def ApplyRecommendation(self, key: List[str]) -> Task: ...
    def CancelRecommendation(self, key: List[str]) -> NoneType: ...
    def RefreshRecommendation(self, pod: StoragePod) -> NoneType: ...
    def RefreshRecommendationsForPod(self, pod: StoragePod) -> Task: ...
    def ConfigureStorageDrsForPod(self, pod: StoragePod, spec: storageDrs.ConfigSpec, modify: bool) -> Task: ...
    def ValidateStoragePodConfig(self, pod: StoragePod, spec: storageDrs.ConfigSpec) -> vmodl.MethodFault: ...
    def RecommendDatastores(self, storageSpec: storageDrs.StoragePlacementSpec) -> storageDrs.StoragePlacementResult: ...


    class IOAllocationInfo(vmodl.DynamicData):
        @property
        def limit(self) -> long: ...
        @property
        def shares(self) -> SharesInfo: ...
        @property
        def reservation(self) -> int: ...


    class IOAllocationOption(vmodl.DynamicData):
        @property
        def limitOption(self) -> option.LongOption: ...
        @property
        def sharesOption(self) -> SharesOption: ...


    class IORMConfigInfo(vmodl.DynamicData):
        @property
        def enabled(self) -> bool: ...
        @property
        def congestionThresholdMode(self) -> str: ...
        @property
        def congestionThreshold(self) -> int: ...
        @property
        def percentOfPeakThroughput(self) -> int: ...
        @property
        def statsCollectionEnabled(self) -> bool: ...
        @property
        def reservationEnabled(self) -> bool: ...
        @property
        def statsAggregationDisabled(self) -> bool: ...
        @property
        def reservableIopsThreshold(self) -> int: ...


    class IORMConfigOption(vmodl.DynamicData):
        @property
        def enabledOption(self) -> option.BoolOption: ...
        @property
        def congestionThresholdOption(self) -> option.IntOption: ...
        @property
        def statsCollectionEnabledOption(self) -> option.BoolOption: ...
        @property
        def reservationEnabledOption(self) -> option.BoolOption: ...


    class IORMConfigSpec(vmodl.DynamicData):
        @property
        def enabled(self) -> bool: ...
        @property
        def congestionThresholdMode(self) -> str: ...
        @property
        def congestionThreshold(self) -> int: ...
        @property
        def percentOfPeakThroughput(self) -> int: ...
        @property
        def statsCollectionEnabled(self) -> bool: ...
        @property
        def reservationEnabled(self) -> bool: ...
        @property
        def statsAggregationDisabled(self) -> bool: ...
        @property
        def reservableIopsThreshold(self) -> int: ...


    class PodStorageDrsEntry(vmodl.DynamicData):
        @property
        def storageDrsConfig(self) -> storageDrs.ConfigInfo: ...
        @property
        def recommendation(self) -> List[cluster.Recommendation]: ...
        @property
        def drsFault(self) -> List[cluster.DrsFaults]: ...
        @property
        def actionHistory(self) -> List[cluster.ActionHistory]: ...


    class StoragePerformanceSummary(vmodl.DynamicData):
        @property
        def interval(self) -> int: ...
        @property
        def percentile(self) -> List[int]: ...
        @property
        def datastoreReadLatency(self) -> List[double]: ...
        @property
        def datastoreWriteLatency(self) -> List[double]: ...
        @property
        def datastoreVmLatency(self) -> List[double]: ...
        @property
        def datastoreReadIops(self) -> List[double]: ...
        @property
        def datastoreWriteIops(self) -> List[double]: ...
        @property
        def siocActivityDuration(self) -> int: ...


    class StorageProfileStatistics(vmodl.DynamicData):
        @property
        def profileId(self) -> str: ...
        @property
        def totalSpaceMB(self) -> long: ...
        @property
        def usedSpaceMB(self) -> long: ...


    class CongestionThresholdMode(Enum):
        automatic = "automatic"
        manual = "manual"


class Task(ExtensibleManagedObject):
    @property
    def info(self) -> TaskInfo: ...
    def Cancel(self) -> NoneType: ...
    def UpdateProgress(self, percentDone: int) -> NoneType: ...
    def SetState(self, state: TaskInfo.State, result: object, fault: vmodl.MethodFault) -> NoneType: ...
    def UpdateDescription(self, description: vmodl.LocalizableMessage) -> NoneType: ...


class TaskHistoryCollector(HistoryCollector):
    @property
    def latestPage(self) -> List[TaskInfo]: ...
    def ReadNext(self, maxCount: int) -> List[TaskInfo]: ...
    def ReadPrev(self, maxCount: int) -> List[TaskInfo]: ...


class TaskManager(ManagedObject):
    @property
    def recentTask(self) -> List[Task]: ...
    @property
    def description(self) -> TaskDescription: ...
    @property
    def maxCollector(self) -> int: ...
    def CreateCollector(self, filter: TaskFilterSpec) -> TaskHistoryCollector: ...
    def CreateTask(self, obj: ManagedObject, taskTypeId: str, initiatedBy: str, cancelable: bool, parentTaskKey: str, activationId: str) -> TaskInfo: ...


class UserDirectory(ManagedObject):
    @property
    def domainList(self) -> List[str]: ...
    def RetrieveUserGroups(self, domain: str, searchStr: str, belongsToGroup: str, belongsToUser: str, exactMatch: bool, findUsers: bool, findGroups: bool) -> List[UserSearchResult]: ...


class VirtualApp(ResourcePool):
    @property
    def parentFolder(self) -> Folder: ...
    @property
    def datastore(self) -> List[Datastore]: ...
    @property
    def network(self) -> List[Network]: ...
    @property
    def vAppConfig(self) -> vApp.VAppConfigInfo: ...
    @property
    def parentVApp(self) -> ManagedEntity: ...
    @property
    def childLink(self) -> List[VirtualApp.LinkInfo]: ...
    def UpdateVAppConfig(self, spec: vApp.VAppConfigSpec) -> NoneType: ...
    def UpdateLinkedChildren(self, addChangeSet: List[VirtualApp.LinkInfo], removeSet: List[ManagedEntity]) -> NoneType: ...
    def Clone(self, name: str, target: ResourcePool, spec: vApp.CloneSpec) -> Task: ...
    def ExportVApp(self) -> HttpNfcLease: ...
    def PowerOn(self) -> Task: ...
    def PowerOff(self, force: bool) -> Task: ...
    def Suspend(self) -> Task: ...
    def Unregister(self) -> Task: ...


    class LinkInfo(vmodl.DynamicData):
        @property
        def key(self) -> ManagedEntity: ...
        @property
        def destroyWithParent(self) -> bool: ...


    class VAppState(Enum):
        started = "started"
        stopped = "stopped"
        starting = "starting"
        stopping = "stopping"


class VirtualDiskManager(ManagedObject):
    def CreateVirtualDisk(self, name: str, datacenter: Datacenter, spec: VirtualDiskManager.VirtualDiskSpec) -> Task: ...
    def DeleteVirtualDisk(self, name: str, datacenter: Datacenter) -> Task: ...
    def MoveVirtualDisk(self, sourceName: str, sourceDatacenter: Datacenter, destName: str, destDatacenter: Datacenter, force: bool, profile: List[vm.ProfileSpec]) -> Task: ...
    def CopyVirtualDisk(self, sourceName: str, sourceDatacenter: Datacenter, destName: str, destDatacenter: Datacenter, destSpec: VirtualDiskManager.VirtualDiskSpec, force: bool) -> Task: ...
    def ExtendVirtualDisk(self, name: str, datacenter: Datacenter, newCapacityKb: long, eagerZero: bool) -> Task: ...
    def QueryVirtualDiskFragmentation(self, name: str, datacenter: Datacenter) -> int: ...
    def DefragmentVirtualDisk(self, name: str, datacenter: Datacenter) -> Task: ...
    def ShrinkVirtualDisk(self, name: str, datacenter: Datacenter, copy: bool) -> Task: ...
    def InflateVirtualDisk(self, name: str, datacenter: Datacenter) -> Task: ...
    def EagerZeroVirtualDisk(self, name: str, datacenter: Datacenter) -> Task: ...
    def ZeroFillVirtualDisk(self, name: str, datacenter: Datacenter) -> Task: ...
    def SetVirtualDiskUuid(self, name: str, datacenter: Datacenter, uuid: str) -> NoneType: ...
    def QueryVirtualDiskUuid(self, name: str, datacenter: Datacenter) -> str: ...
    def QueryVirtualDiskGeometry(self, name: str, datacenter: Datacenter) -> host.DiskDimensions.Chs: ...
    def ImportUnmanagedSnapshot(self, vdisk: str, datacenter: Datacenter, vvolId: str) -> NoneType: ...
    def ReleaseManagedSnapshot(self, vdisk: str, datacenter: Datacenter) -> NoneType: ...


    class DeviceBackedVirtualDiskSpec(VirtualDiskManager.VirtualDiskSpec):
        @property
        def device(self) -> str: ...


    class FileBackedVirtualDiskSpec(VirtualDiskManager.VirtualDiskSpec):
        @property
        def capacityKb(self) -> long: ...
        @property
        def profile(self) -> List[vm.ProfileSpec]: ...
        @property
        def crypto(self) -> encryption.CryptoSpec: ...


    class SeSparseVirtualDiskSpec(VirtualDiskManager.FileBackedVirtualDiskSpec):
        @property
        def grainSizeKb(self) -> int: ...


    class VirtualDiskSpec(vmodl.DynamicData):
        @property
        def diskType(self) -> str: ...
        @property
        def adapterType(self) -> str: ...


    class VirtualDiskAdapterType(Enum):
        ide = "ide"
        busLogic = "buslogic"
        lsiLogic = "lsilogic"


    class VirtualDiskType(Enum):
        preallocated = "preallocated"
        thin = "thin"
        seSparse = "sesparse"
        rdm = "rdm"
        rdmp = "rdmp"
        raw = "raw"
        delta = "delta"
        sparse2Gb = "sparse2gb"
        thick2Gb = "thick2gb"
        eagerZeroedThick = "eagerzeroedthick"
        sparseMonolithic = "sparsemonolithic"
        flatMonolithic = "flatmonolithic"
        thick = "thick"


class VirtualMachine(ManagedEntity):
    @property
    def capability(self) -> vm.Capability: ...
    @property
    def config(self) -> vm.ConfigInfo: ...
    @property
    def layout(self) -> vm.FileLayout: ...
    @property
    def layoutEx(self) -> vm.FileLayoutEx: ...
    @property
    def storage(self) -> vm.StorageInfo: ...
    @property
    def environmentBrowser(self) -> EnvironmentBrowser: ...
    @property
    def resourcePool(self) -> ResourcePool: ...
    @property
    def parentVApp(self) -> ManagedEntity: ...
    @property
    def resourceConfig(self) -> ResourceConfigSpec: ...
    @property
    def runtime(self) -> vm.RuntimeInfo: ...
    @property
    def guest(self) -> vm.GuestInfo: ...
    @property
    def summary(self) -> vm.Summary: ...
    @property
    def datastore(self) -> List[Datastore]: ...
    @property
    def network(self) -> List[Network]: ...
    @property
    def snapshot(self) -> vm.SnapshotInfo: ...
    @property
    def rootSnapshot(self) -> List[vm.Snapshot]: ...
    @property
    def guestHeartbeatStatus(self) -> ManagedEntity.Status: ...
    def RefreshStorageInfo(self) -> NoneType: ...
    def CreateSnapshot(self, name: str, description: str, memory: bool, quiesce: bool) -> Task: ...
    def CreateSnapshotEx(self, name: str, description: str, memory: bool, quiesceSpec: vm.GuestQuiesceSpec) -> Task: ...
    def RevertToCurrentSnapshot(self, host: HostSystem, suppressPowerOn: bool) -> Task: ...
    def RemoveAllSnapshots(self, consolidate: bool) -> Task: ...
    def ConsolidateDisks(self) -> Task: ...
    def EstimateStorageRequirementForConsolidate(self) -> Task: ...
    def Reconfigure(self, spec: vm.ConfigSpec) -> Task: ...
    def UpgradeVirtualHardware(self, version: str) -> Task: ...
    def ExtractOvfEnvironment(self) -> str: ...
    def PowerOn(self, host: HostSystem) -> Task: ...
    def PowerOff(self) -> Task: ...
    def Suspend(self) -> Task: ...
    def Reset(self) -> Task: ...
    def ShutdownGuest(self) -> NoneType: ...
    def RebootGuest(self) -> NoneType: ...
    def StandbyGuest(self) -> NoneType: ...
    def Answer(self, questionId: str, answerChoice: str) -> NoneType: ...
    def Customize(self, spec: vm.customization.Specification) -> Task: ...
    def CheckCustomizationSpec(self, spec: vm.customization.Specification) -> NoneType: ...
    def Migrate(self, pool: ResourcePool, host: HostSystem, priority: VirtualMachine.MovePriority, state: VirtualMachine.PowerState) -> Task: ...
    def Relocate(self, spec: vm.RelocateSpec, priority: VirtualMachine.MovePriority) -> Task: ...
    def Clone(self, folder: Folder, name: str, spec: vm.CloneSpec) -> Task: ...
    def InstantClone(self, spec: vm.InstantCloneSpec) -> Task: ...
    def ExportVm(self) -> HttpNfcLease: ...
    def MarkAsTemplate(self) -> NoneType: ...
    def MarkAsVirtualMachine(self, pool: ResourcePool, host: HostSystem) -> NoneType: ...
    def Unregister(self) -> NoneType: ...
    def ResetGuestInformation(self) -> NoneType: ...
    def MountToolsInstaller(self) -> NoneType: ...
    def UnmountToolsInstaller(self) -> NoneType: ...
    def UpgradeTools(self, installerOptions: str) -> Task: ...
    def AcquireMksTicket(self) -> VirtualMachine.MksTicket: ...
    def QueryConnections(self) -> List[VirtualMachine.Connection]: ...
    def DropConnections(self, listOfConnections: List[VirtualMachine.Connection]) -> bool: ...
    def AcquireTicket(self, ticketType: str) -> VirtualMachine.Ticket: ...
    def SetScreenResolution(self, width: int, height: int) -> NoneType: ...
    def DefragmentAllDisks(self) -> NoneType: ...
    def CreateSecondary(self, host: HostSystem) -> Task: ...
    def CreateSecondaryEx(self, host: HostSystem, spec: vm.FaultToleranceConfigSpec) -> Task: ...
    def TurnOffFaultTolerance(self) -> Task: ...
    def MakePrimary(self, vm: VirtualMachine) -> Task: ...
    def TerminateFaultTolerantVM(self, vm: VirtualMachine) -> Task: ...
    def DisableSecondary(self, vm: VirtualMachine) -> Task: ...
    def EnableSecondary(self, vm: VirtualMachine, host: HostSystem) -> Task: ...
    def SetDisplayTopology(self, displays: List[VirtualMachine.DisplayTopology]) -> NoneType: ...
    def StartRecording(self, name: str, description: str) -> Task: ...
    def StopRecording(self) -> Task: ...
    def StartReplaying(self, replaySnapshot: vm.Snapshot) -> Task: ...
    def StopReplaying(self) -> Task: ...
    def PromoteDisks(self, unlink: bool, disks: List[vm.device.VirtualDisk]) -> Task: ...
    def CreateScreenshot(self) -> Task: ...
    def PutUsbScanCodes(self, spec: vm.UsbScanCodeSpec) -> int: ...
    def QueryChangedDiskAreas(self, snapshot: vm.Snapshot, deviceKey: int, startOffset: long, changeId: str) -> VirtualMachine.DiskChangeInfo: ...
    def QueryUnownedFiles(self) -> List[str]: ...
    def ReloadFromPath(self, configurationPath: str) -> Task: ...
    def QueryFaultToleranceCompatibility(self) -> List[vmodl.MethodFault]: ...
    def QueryFaultToleranceCompatibilityEx(self, forLegacyFt: bool) -> List[vmodl.MethodFault]: ...
    def Terminate(self) -> NoneType: ...
    def SendNMI(self) -> NoneType: ...
    def AttachDisk(self, diskId: vslm.ID, datastore: Datastore, controllerKey: int, unitNumber: int) -> Task: ...
    def DetachDisk(self, diskId: vslm.ID) -> Task: ...
    def ApplyEvcMode(self, mask: List[host.FeatureMask], completeMasks: bool) -> Task: ...
    def CryptoUnlock(self) -> Task: ...


    class Connection(vmodl.DynamicData):
        @property
        def label(self) -> str: ...
        @property
        def client(self) -> str: ...
        @property
        def userName(self) -> str: ...


    class DiskChangeInfo(vmodl.DynamicData):
        @property
        def startOffset(self) -> long: ...
        @property
        def length(self) -> long: ...
        @property
        def changedArea(self) -> List[VirtualMachine.DiskChangeInfo.DiskChangeExtent]: ...


        class DiskChangeExtent(vmodl.DynamicData):
            @property
            def start(self) -> long: ...
            @property
            def length(self) -> long: ...


    class DisplayTopology(vmodl.DynamicData):
        @property
        def x(self) -> int: ...
        @property
        def y(self) -> int: ...
        @property
        def width(self) -> int: ...
        @property
        def height(self) -> int: ...


    class MksConnection(VirtualMachine.Connection): ...


    class MksTicket(vmodl.DynamicData):
        @property
        def ticket(self) -> str: ...
        @property
        def cfgFile(self) -> str: ...
        @property
        def host(self) -> str: ...
        @property
        def port(self) -> int: ...
        @property
        def sslThumbprint(self) -> str: ...


    class StorageRequirement(vmodl.DynamicData):
        @property
        def datastore(self) -> Datastore: ...
        @property
        def freeSpaceRequiredInKb(self) -> long: ...


    class Ticket(vmodl.DynamicData):
        @property
        def ticket(self) -> str: ...
        @property
        def cfgFile(self) -> str: ...
        @property
        def host(self) -> str: ...
        @property
        def port(self) -> int: ...
        @property
        def sslThumbprint(self) -> str: ...
        @property
        def certThumbprintList(self) -> List[vm.CertThumbprint]: ...
        @property
        def url(self) -> str: ...


    class WipeResult(vmodl.DynamicData):
        @property
        def diskId(self) -> int: ...
        @property
        def shrinkableDiskSpace(self) -> long: ...


    class AppHeartbeatStatusType(Enum):
        appStatusGray = "appstatusgray"
        appStatusGreen = "appstatusgreen"
        appStatusRed = "appstatusred"


    class FaultToleranceState(Enum):
        notConfigured = "notconfigured"
        disabled = "disabled"
        enabled = "enabled"
        needSecondary = "needsecondary"
        starting = "starting"
        running = "running"


    class FaultToleranceType(Enum):
        unset = "unset"
        recordReplay = "recordreplay"
        checkpointing = "checkpointing"


    class MovePriority(Enum):
        lowPriority = "lowpriority"
        highPriority = "highpriority"
        defaultPriority = "defaultpriority"


    class NeedSecondaryReason(Enum):
        initializing = "initializing"
        divergence = "divergence"
        lostConnection = "lostconnection"
        partialHardwareFailure = "partialhardwarefailure"
        userAction = "useraction"
        checkpointError = "checkpointerror"
        other = "other"


    class RecordReplayState(Enum):
        recording = "recording"
        replaying = "replaying"
        inactive = "inactive"


class VirtualizationManager(ManagedObject): ...


class VsanUpgradeSystem(ManagedObject):
    def PerformUpgradePreflightCheck(self, cluster: ClusterComputeResource, downgradeFormat: bool) -> VsanUpgradeSystem.PreflightCheckResult: ...
    def QueryUpgradeStatus(self, cluster: ClusterComputeResource) -> VsanUpgradeSystem.UpgradeStatus: ...
    def PerformUpgrade(self, cluster: ClusterComputeResource, performObjectUpgrade: bool, downgradeFormat: bool, allowReducedRedundancy: bool, excludeHosts: List[HostSystem]) -> Task: ...


    class APIBrokenIssue(VsanUpgradeSystem.PreflightCheckIssue):
        @property
        def hosts(self) -> List[HostSystem]: ...


    class AutoClaimEnabledOnHostsIssue(VsanUpgradeSystem.PreflightCheckIssue):
        @property
        def hosts(self) -> List[HostSystem]: ...


    class HostsDisconnectedIssue(VsanUpgradeSystem.PreflightCheckIssue):
        @property
        def hosts(self) -> List[HostSystem]: ...


    class MissingHostsInClusterIssue(VsanUpgradeSystem.PreflightCheckIssue):
        @property
        def hosts(self) -> List[HostSystem]: ...


    class NetworkPartitionInfo(vmodl.DynamicData):
        @property
        def hosts(self) -> List[HostSystem]: ...


    class NetworkPartitionIssue(VsanUpgradeSystem.PreflightCheckIssue):
        @property
        def partitions(self) -> List[VsanUpgradeSystem.NetworkPartitionInfo]: ...


    class NotEnoughFreeCapacityIssue(VsanUpgradeSystem.PreflightCheckIssue):
        @property
        def reducedRedundancyUpgradePossible(self) -> bool: ...


    class PreflightCheckIssue(vmodl.DynamicData):
        @property
        def msg(self) -> str: ...


    class PreflightCheckResult(vmodl.DynamicData):
        @property
        def issues(self) -> List[VsanUpgradeSystem.PreflightCheckIssue]: ...
        @property
        def diskMappingToRestore(self) -> vsan.host.DiskMapping: ...


    class RogueHostsInClusterIssue(VsanUpgradeSystem.PreflightCheckIssue):
        @property
        def uuids(self) -> List[str]: ...


    class UpgradeHistoryDiskGroupOp(VsanUpgradeSystem.UpgradeHistoryItem):
        @property
        def operation(self) -> str: ...
        @property
        def diskMapping(self) -> vsan.host.DiskMapping: ...


    class UpgradeHistoryItem(vmodl.DynamicData):
        @property
        def timestamp(self) -> datetime: ...
        @property
        def host(self) -> HostSystem: ...
        @property
        def message(self) -> str: ...
        @property
        def task(self) -> Task: ...


    class UpgradeHistoryPreflightFail(VsanUpgradeSystem.UpgradeHistoryItem):
        @property
        def preflightResult(self) -> VsanUpgradeSystem.PreflightCheckResult: ...


    class UpgradeStatus(vmodl.DynamicData):
        @property
        def inProgress(self) -> bool: ...
        @property
        def history(self) -> List[VsanUpgradeSystem.UpgradeHistoryItem]: ...
        @property
        def aborted(self) -> bool: ...
        @property
        def completed(self) -> bool: ...
        @property
        def progress(self) -> int: ...


    class V2ObjectsPresentDuringDowngradeIssue(VsanUpgradeSystem.PreflightCheckIssue):
        @property
        def uuids(self) -> List[str]: ...


    class WrongEsxVersionIssue(VsanUpgradeSystem.PreflightCheckIssue):
        @property
        def hosts(self) -> List[HostSystem]: ...


    class UpgradeHistoryDiskGroupOpType(Enum):
        add = "add"
        remove = "remove"


class AboutInfo(vmodl.DynamicData):
    @property
    def name(self) -> str: ...
    @property
    def fullName(self) -> str: ...
    @property
    def vendor(self) -> str: ...
    @property
    def version(self) -> str: ...
    @property
    def patchLevel(self) -> str: ...
    @property
    def build(self) -> str: ...
    @property
    def localeVersion(self) -> str: ...
    @property
    def localeBuild(self) -> str: ...
    @property
    def osType(self) -> str: ...
    @property
    def productLineId(self) -> str: ...
    @property
    def apiType(self) -> str: ...
    @property
    def apiVersion(self) -> str: ...
    @property
    def instanceUuid(self) -> str: ...
    @property
    def licenseProductName(self) -> str: ...
    @property
    def licenseProductVersion(self) -> str: ...


class AuthorizationDescription(vmodl.DynamicData):
    @property
    def privilege(self) -> List[ElementDescription]: ...
    @property
    def privilegeGroup(self) -> List[ElementDescription]: ...


class BatchResult(vmodl.DynamicData):
    @property
    def result(self) -> str: ...
    @property
    def hostKey(self) -> str: ...
    @property
    def ds(self) -> Datastore: ...
    @property
    def fault(self) -> vmodl.MethodFault: ...


    class Result(Enum):
        success = "success"
        fail = "fail"


class BoolPolicy(InheritablePolicy):
    @property
    def value(self) -> bool: ...


class Capability(vmodl.DynamicData):
    @property
    def provisioningSupported(self) -> bool: ...
    @property
    def multiHostSupported(self) -> bool: ...
    @property
    def userShellAccessSupported(self) -> bool: ...
    @property
    def supportedEVCMode(self) -> List[EVCMode]: ...
    @property
    def supportedEVCGraphicsMode(self) -> List[FeatureEVCMode]: ...
    @property
    def networkBackupAndRestoreSupported(self) -> bool: ...
    @property
    def ftDrsWithoutEvcSupported(self) -> bool: ...
    @property
    def hciWorkflowSupported(self) -> bool: ...
    @property
    def computePolicyVersion(self) -> int: ...
    @property
    def clusterPlacementSupported(self) -> bool: ...
    @property
    def lifecycleManagementSupported(self) -> bool: ...
    @property
    def hostSeedingSupported(self) -> bool: ...
    @property
    def scalableSharesSupported(self) -> bool: ...
    @property
    def hadcsSupported(self) -> bool: ...
    @property
    def configMgmtSupported(self) -> bool: ...


class CustomizationSpecInfo(vmodl.DynamicData):
    @property
    def name(self) -> str: ...
    @property
    def description(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def changeVersion(self) -> str: ...
    @property
    def lastUpdateTime(self) -> datetime: ...


class CustomizationSpecItem(vmodl.DynamicData):
    @property
    def info(self) -> CustomizationSpecInfo: ...
    @property
    def spec(self) -> vm.customization.Specification: ...


class Description(vmodl.DynamicData):
    @property
    def label(self) -> str: ...
    @property
    def summary(self) -> str: ...


class DesiredSoftwareSpec(vmodl.DynamicData):
    @property
    def baseImageSpec(self) -> DesiredSoftwareSpec.BaseImageSpec: ...
    @property
    def vendorAddOnSpec(self) -> DesiredSoftwareSpec.VendorAddOnSpec: ...
    @property
    def components(self) -> List[DesiredSoftwareSpec.ComponentSpec]: ...


    class BaseImageSpec(vmodl.DynamicData):
        @property
        def version(self) -> str: ...


    class ComponentSpec(vmodl.DynamicData):
        @property
        def name(self) -> str: ...
        @property
        def version(self) -> str: ...


    class VendorAddOnSpec(vmodl.DynamicData):
        @property
        def name(self) -> str: ...
        @property
        def version(self) -> str: ...


class EVCMode(ElementDescription):
    @property
    def guaranteedCPUFeatures(self) -> List[host.CpuIdInfo]: ...
    @property
    def featureCapability(self) -> List[host.FeatureCapability]: ...
    @property
    def featureMask(self) -> List[host.FeatureMask]: ...
    @property
    def featureRequirement(self) -> List[vm.FeatureRequirement]: ...
    @property
    def vendor(self) -> str: ...
    @property
    def track(self) -> List[str]: ...
    @property
    def vendorTier(self) -> int: ...


class ElementDescription(Description):
    @property
    def key(self) -> str: ...


class EnumDescription(vmodl.DynamicData):
    @property
    def key(self) -> type: ...
    @property
    def tags(self) -> List[ElementDescription]: ...


class ExtendedDescription(Description):
    @property
    def messageCatalogKeyPrefix(self) -> str: ...
    @property
    def messageArg(self) -> List[vmodl.KeyAnyValue]: ...


class ExtendedElementDescription(ElementDescription):
    @property
    def messageCatalogKeyPrefix(self) -> str: ...
    @property
    def messageArg(self) -> List[vmodl.KeyAnyValue]: ...


class Extension(vmodl.DynamicData):
    @property
    def description(self) -> Description: ...
    @property
    def key(self) -> str: ...
    @property
    def company(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def version(self) -> str: ...
    @property
    def subjectName(self) -> str: ...
    @property
    def server(self) -> List[Extension.ServerInfo]: ...
    @property
    def client(self) -> List[Extension.ClientInfo]: ...
    @property
    def taskList(self) -> List[Extension.TaskTypeInfo]: ...
    @property
    def eventList(self) -> List[Extension.EventTypeInfo]: ...
    @property
    def faultList(self) -> List[Extension.FaultTypeInfo]: ...
    @property
    def privilegeList(self) -> List[Extension.PrivilegeInfo]: ...
    @property
    def resourceList(self) -> List[Extension.ResourceInfo]: ...
    @property
    def lastHeartbeatTime(self) -> datetime: ...
    @property
    def healthInfo(self) -> Extension.HealthInfo: ...
    @property
    def ovfConsumerInfo(self) -> Extension.OvfConsumerInfo: ...
    @property
    def extendedProductInfo(self) -> ext.ExtendedProductInfo: ...
    @property
    def managedEntityInfo(self) -> List[ext.ManagedEntityInfo]: ...
    @property
    def shownInSolutionManager(self) -> bool: ...
    @property
    def solutionManagerInfo(self) -> ext.SolutionManagerInfo: ...


    class ClientInfo(vmodl.DynamicData):
        @property
        def version(self) -> str: ...
        @property
        def description(self) -> Description: ...
        @property
        def company(self) -> str: ...
        @property
        def type(self) -> str: ...
        @property
        def url(self) -> str: ...


    class EventTypeInfo(vmodl.DynamicData):
        @property
        def eventID(self) -> str: ...
        @property
        def eventTypeSchema(self) -> str: ...


    class FaultTypeInfo(vmodl.DynamicData):
        @property
        def faultID(self) -> str: ...


    class HealthInfo(vmodl.DynamicData):
        @property
        def url(self) -> str: ...


    class OvfConsumerInfo(vmodl.DynamicData):
        @property
        def callbackUrl(self) -> str: ...
        @property
        def sectionType(self) -> List[str]: ...


    class PrivilegeInfo(vmodl.DynamicData):
        @property
        def privID(self) -> str: ...
        @property
        def privGroupName(self) -> str: ...


    class ResourceInfo(vmodl.DynamicData):
        @property
        def locale(self) -> str: ...
        @property
        def module(self) -> str: ...
        @property
        def data(self) -> List[KeyValue]: ...


    class ServerInfo(vmodl.DynamicData):
        @property
        def url(self) -> str: ...
        @property
        def description(self) -> Description: ...
        @property
        def company(self) -> str: ...
        @property
        def type(self) -> str: ...
        @property
        def adminEmail(self) -> List[str]: ...
        @property
        def serverThumbprint(self) -> str: ...


    class TaskTypeInfo(vmodl.DynamicData):
        @property
        def taskID(self) -> str: ...


class FaultsByHost(vmodl.DynamicData):
    @property
    def host(self) -> HostSystem: ...
    @property
    def faults(self) -> List[vmodl.MethodFault]: ...


class FaultsByVM(vmodl.DynamicData):
    @property
    def vm(self) -> VirtualMachine: ...
    @property
    def faults(self) -> List[vmodl.MethodFault]: ...


class FeatureEVCMode(ElementDescription):
    @property
    def mask(self) -> List[host.FeatureMask]: ...
    @property
    def capability(self) -> List[host.FeatureCapability]: ...
    @property
    def requirement(self) -> List[vm.FeatureRequirement]: ...


class ReplicationVmInfo(vmodl.DynamicData):
    @property
    def state(self) -> str: ...
    @property
    def progressInfo(self) -> HbrManager.ReplicationVmInfo.ProgressInfo: ...
    @property
    def imageId(self) -> str: ...
    @property
    def lastError(self) -> vmodl.MethodFault: ...


    class State(Enum):
        none = "none"
        paused = "paused"
        syncing = "syncing"
        idle = "idle"
        active = "active"
        error = "error"


class ProgressInfo(vmodl.DynamicData):
    @property
    def progress(self) -> int: ...
    @property
    def bytesTransferred(self) -> long: ...
    @property
    def bytesToTransfer(self) -> long: ...
    @property
    def checksumTotalBytes(self) -> long: ...
    @property
    def checksumComparedBytes(self) -> long: ...


class VmReplicationCapability(vmodl.DynamicData):
    @property
    def vm(self) -> VirtualMachine: ...
    @property
    def supportedQuiesceMode(self) -> str: ...
    @property
    def compressionSupported(self) -> bool: ...
    @property
    def maxSupportedSourceDiskCapacity(self) -> long: ...
    @property
    def minRpo(self) -> long: ...
    @property
    def fault(self) -> vmodl.MethodFault: ...


    class QuiesceMode(Enum):
        application = "application"
        filesystem = "filesystem"
        none = "none"


class HealthUpdate(vmodl.DynamicData):
    @property
    def entity(self) -> ManagedEntity: ...
    @property
    def healthUpdateInfoId(self) -> str: ...
    @property
    def id(self) -> str: ...
    @property
    def status(self) -> ManagedEntity.Status: ...
    @property
    def remediation(self) -> str: ...


class HealthUpdateInfo(vmodl.DynamicData):
    @property
    def id(self) -> str: ...
    @property
    def componentType(self) -> str: ...
    @property
    def description(self) -> str: ...


    class ComponentType(Enum):
        Memory = "memory"
        Power = "power"
        Fan = "fan"
        Network = "network"
        Storage = "storage"


class HistoricalInterval(vmodl.DynamicData):
    @property
    def key(self) -> int: ...
    @property
    def samplingPeriod(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def length(self) -> int: ...
    @property
    def level(self) -> int: ...
    @property
    def enabled(self) -> bool: ...


class HostServiceTicket(vmodl.DynamicData):
    @property
    def host(self) -> str: ...
    @property
    def port(self) -> int: ...
    @property
    def sslThumbprint(self) -> str: ...
    @property
    def service(self) -> str: ...
    @property
    def serviceVersion(self) -> str: ...
    @property
    def sessionId(self) -> str: ...


class ImportSpec(vmodl.DynamicData):
    @property
    def entityConfig(self) -> vApp.EntityConfigInfo: ...
    @property
    def instantiationOst(self) -> OvfConsumer.OstNode: ...


class InheritablePolicy(vmodl.DynamicData):
    @property
    def inherited(self) -> bool: ...


class IntExpression(NegatableExpression):
    @property
    def value(self) -> int: ...


class IntPolicy(InheritablePolicy):
    @property
    def value(self) -> int: ...


class IpAddress(NegatableExpression): ...


class IpRange(IpAddress):
    @property
    def addressPrefix(self) -> str: ...
    @property
    def prefixLength(self) -> int: ...


class KeyValue(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def value(self) -> str: ...


class LatencySensitivity(vmodl.DynamicData):
    @property
    def level(self) -> LatencySensitivity.SensitivityLevel: ...
    @property
    def sensitivity(self) -> int: ...


    class SensitivityLevel(Enum):
        low = "low"
        normal = "normal"
        medium = "medium"
        high = "high"
        custom = "custom"


class LongPolicy(InheritablePolicy):
    @property
    def value(self) -> long: ...


class MacAddress(NegatableExpression): ...


class MacRange(MacAddress):
    @property
    def address(self) -> str: ...
    @property
    def mask(self) -> str: ...


class MethodDescription(Description):
    @property
    def key(self) -> ManagedMethod: ...


class NegatableExpression(vmodl.DynamicData):
    @property
    def negate(self) -> bool: ...


class NumericRange(vmodl.DynamicData):
    @property
    def start(self) -> int: ...
    @property
    def end(self) -> int: ...


class OstNode(vmodl.DynamicData):
    @property
    def id(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def section(self) -> List[OvfConsumer.OvfSection]: ...
    @property
    def child(self) -> List[OvfConsumer.OstNode]: ...
    @property
    def entity(self) -> ManagedEntity: ...


class OvfSection(vmodl.DynamicData):
    @property
    def lineNumber(self) -> int: ...
    @property
    def xml(self) -> str: ...


class PasswordField(vmodl.DynamicData):
    @property
    def value(self) -> str: ...


class PerformanceDescription(vmodl.DynamicData):
    @property
    def counterType(self) -> List[ElementDescription]: ...
    @property
    def statsType(self) -> List[ElementDescription]: ...


class PosixUserSearchResult(UserSearchResult):
    @property
    def id(self) -> int: ...
    @property
    def shellAccess(self) -> bool: ...


class PrivilegePolicyDef(vmodl.DynamicData):
    @property
    def createPrivilege(self) -> str: ...
    @property
    def readPrivilege(self) -> str: ...
    @property
    def updatePrivilege(self) -> str: ...
    @property
    def deletePrivilege(self) -> str: ...


class ResourceAllocationInfo(vmodl.DynamicData):
    @property
    def reservation(self) -> long: ...
    @property
    def expandableReservation(self) -> bool: ...
    @property
    def limit(self) -> long: ...
    @property
    def shares(self) -> SharesInfo: ...
    @property
    def overheadLimit(self) -> long: ...


class ResourceAllocationOption(vmodl.DynamicData):
    @property
    def sharesOption(self) -> SharesOption: ...


class ResourceConfigOption(vmodl.DynamicData):
    @property
    def cpuAllocationOption(self) -> ResourceAllocationOption: ...
    @property
    def memoryAllocationOption(self) -> ResourceAllocationOption: ...


class ResourceConfigSpec(vmodl.DynamicData):
    @property
    def entity(self) -> ManagedEntity: ...
    @property
    def changeVersion(self) -> str: ...
    @property
    def lastModified(self) -> datetime: ...
    @property
    def cpuAllocation(self) -> ResourceAllocationInfo: ...
    @property
    def memoryAllocation(self) -> ResourceAllocationInfo: ...
    @property
    def scaleDescendantsShares(self) -> str: ...


    class ScaleSharesBehavior(Enum):
        disabled = "disabled"
        scaleCpuAndMemoryShares = "scalecpuandmemoryshares"


class SDDCBase(vmodl.DynamicData): ...


class SelectionSet(vmodl.DynamicData): ...


class ServiceInstanceContent(vmodl.DynamicData):
    @property
    def rootFolder(self) -> Folder: ...
    @property
    def propertyCollector(self) -> vmodl.query.PropertyCollector: ...
    @property
    def viewManager(self) -> view.ViewManager: ...
    @property
    def about(self) -> AboutInfo: ...
    @property
    def setting(self) -> option.OptionManager: ...
    @property
    def userDirectory(self) -> UserDirectory: ...
    @property
    def sessionManager(self) -> SessionManager: ...
    @property
    def authorizationManager(self) -> AuthorizationManager: ...
    @property
    def serviceManager(self) -> ServiceManager: ...
    @property
    def perfManager(self) -> PerformanceManager: ...
    @property
    def scheduledTaskManager(self) -> scheduler.ScheduledTaskManager: ...
    @property
    def alarmManager(self) -> alarm.AlarmManager: ...
    @property
    def eventManager(self) -> event.EventManager: ...
    @property
    def taskManager(self) -> TaskManager: ...
    @property
    def extensionManager(self) -> ExtensionManager: ...
    @property
    def customizationSpecManager(self) -> CustomizationSpecManager: ...
    @property
    def guestCustomizationManager(self) -> vm.GuestCustomizationManager: ...
    @property
    def customFieldsManager(self) -> CustomFieldsManager: ...
    @property
    def accountManager(self) -> host.LocalAccountManager: ...
    @property
    def diagnosticManager(self) -> DiagnosticManager: ...
    @property
    def licenseManager(self) -> LicenseManager: ...
    @property
    def searchIndex(self) -> SearchIndex: ...
    @property
    def fileManager(self) -> FileManager: ...
    @property
    def datastoreNamespaceManager(self) -> DatastoreNamespaceManager: ...
    @property
    def virtualDiskManager(self) -> VirtualDiskManager: ...
    @property
    def virtualizationManager(self) -> VirtualizationManager: ...
    @property
    def snmpSystem(self) -> host.SnmpSystem: ...
    @property
    def vmProvisioningChecker(self) -> vm.check.ProvisioningChecker: ...
    @property
    def vmCompatibilityChecker(self) -> vm.check.CompatibilityChecker: ...
    @property
    def ovfManager(self) -> OvfManager: ...
    @property
    def ipPoolManager(self) -> IpPoolManager: ...
    @property
    def dvSwitchManager(self) -> dvs.DistributedVirtualSwitchManager: ...
    @property
    def hostProfileManager(self) -> profile.host.ProfileManager: ...
    @property
    def clusterProfileManager(self) -> profile.cluster.ProfileManager: ...
    @property
    def complianceManager(self) -> profile.ComplianceManager: ...
    @property
    def localizationManager(self) -> LocalizationManager: ...
    @property
    def storageResourceManager(self) -> StorageResourceManager: ...
    @property
    def guestOperationsManager(self) -> vm.guest.GuestOperationsManager: ...
    @property
    def overheadMemoryManager(self) -> OverheadMemoryManager: ...
    @property
    def certificateManager(self) -> CertificateManager: ...
    @property
    def ioFilterManager(self) -> IoFilterManager: ...
    @property
    def vStorageObjectManager(self) -> vslm.VStorageObjectManagerBase: ...
    @property
    def hostSpecManager(self) -> profile.host.HostSpecificationManager: ...
    @property
    def cryptoManager(self) -> encryption.CryptoManager: ...
    @property
    def healthUpdateManager(self) -> HealthUpdateManager: ...
    @property
    def failoverClusterConfigurator(self) -> vcha.FailoverClusterConfigurator: ...
    @property
    def failoverClusterManager(self) -> vcha.FailoverClusterManager: ...
    @property
    def tenantManager(self) -> tenant.TenantManager: ...
    @property
    def siteInfoManager(self) -> SiteInfoManager: ...
    @property
    def storageQueryManager(self) -> StorageQueryManager: ...


class ServiceLocator(vmodl.DynamicData):
    @property
    def instanceUuid(self) -> str: ...
    @property
    def url(self) -> str: ...
    @property
    def credential(self) -> ServiceLocator.Credential: ...
    @property
    def sslThumbprint(self) -> str: ...


    class Credential(vmodl.DynamicData): ...


    class NamePassword(ServiceLocator.Credential):
        @property
        def username(self) -> str: ...
        @property
        def password(self) -> str: ...


    class SAMLCredential(ServiceLocator.Credential):
        @property
        def token(self) -> str: ...


class SharesInfo(vmodl.DynamicData):
    @property
    def shares(self) -> int: ...
    @property
    def level(self) -> SharesInfo.Level: ...


    class Level(Enum):
        low = "low"
        normal = "normal"
        high = "high"
        custom = "custom"


class SharesOption(vmodl.DynamicData):
    @property
    def sharesOption(self) -> option.IntOption: ...
    @property
    def defaultLevel(self) -> SharesInfo.Level: ...


class SingleIp(IpAddress):
    @property
    def address(self) -> str: ...


class SingleMac(MacAddress):
    @property
    def address(self) -> str: ...


class SiteInfo(vmodl.DynamicData): ...


class StringExpression(NegatableExpression):
    @property
    def value(self) -> str: ...


class StringPolicy(InheritablePolicy):
    @property
    def value(self) -> str: ...


class Tag(vmodl.DynamicData):
    @property
    def key(self) -> str: ...


class TaskDescription(vmodl.DynamicData):
    @property
    def methodInfo(self) -> List[ElementDescription]: ...
    @property
    def state(self) -> List[ElementDescription]: ...
    @property
    def reason(self) -> List[TypeDescription]: ...


class TaskFilterSpec(vmodl.DynamicData):
    @property
    def entity(self) -> TaskFilterSpec.ByEntity: ...
    @property
    def time(self) -> TaskFilterSpec.ByTime: ...
    @property
    def userName(self) -> TaskFilterSpec.ByUsername: ...
    @property
    def activationId(self) -> List[str]: ...
    @property
    def state(self) -> List[TaskInfo.State]: ...
    @property
    def alarm(self) -> alarm.Alarm: ...
    @property
    def scheduledTask(self) -> scheduler.ScheduledTask: ...
    @property
    def eventChainId(self) -> List[int]: ...
    @property
    def tag(self) -> List[str]: ...
    @property
    def parentTaskKey(self) -> List[str]: ...
    @property
    def rootTaskKey(self) -> List[str]: ...


    class ByEntity(vmodl.DynamicData):
        @property
        def entity(self) -> ManagedEntity: ...
        @property
        def recursion(self) -> TaskFilterSpec.RecursionOption: ...


    class ByTime(vmodl.DynamicData):
        @property
        def timeType(self) -> TaskFilterSpec.TimeOption: ...
        @property
        def beginTime(self) -> datetime: ...
        @property
        def endTime(self) -> datetime: ...


    class ByUsername(vmodl.DynamicData):
        @property
        def systemUser(self) -> bool: ...
        @property
        def userList(self) -> List[str]: ...


    class RecursionOption(Enum):
        self = "self"
        children = "children"
        all = "all"


    class TimeOption(Enum):
        queuedTime = "queuedtime"
        startedTime = "startedtime"
        completedTime = "completedtime"


class TaskInfo(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def task(self) -> Task: ...
    @property
    def description(self) -> vmodl.LocalizableMessage: ...
    @property
    def name(self) -> ManagedMethod: ...
    @property
    def descriptionId(self) -> str: ...
    @property
    def entity(self) -> ManagedEntity: ...
    @property
    def entityName(self) -> str: ...
    @property
    def locked(self) -> List[ManagedEntity]: ...
    @property
    def state(self) -> TaskInfo.State: ...
    @property
    def cancelled(self) -> bool: ...
    @property
    def cancelable(self) -> bool: ...
    @property
    def error(self) -> vmodl.MethodFault: ...
    @property
    def result(self) -> object: ...
    @property
    def progress(self) -> int: ...
    @property
    def progressDetails(self) -> List[vmodl.KeyAnyValue]: ...
    @property
    def reason(self) -> TaskReason: ...
    @property
    def queueTime(self) -> datetime: ...
    @property
    def startTime(self) -> datetime: ...
    @property
    def completeTime(self) -> datetime: ...
    @property
    def eventChainId(self) -> int: ...
    @property
    def changeTag(self) -> str: ...
    @property
    def parentTaskKey(self) -> str: ...
    @property
    def rootTaskKey(self) -> str: ...
    @property
    def activationId(self) -> str: ...


class TaskReason(vmodl.DynamicData): ...


class TaskReasonAlarm(TaskReason):
    @property
    def alarmName(self) -> str: ...
    @property
    def alarm(self) -> alarm.Alarm: ...
    @property
    def entityName(self) -> str: ...
    @property
    def entity(self) -> ManagedEntity: ...


class TaskReasonSchedule(TaskReason):
    @property
    def name(self) -> str: ...
    @property
    def scheduledTask(self) -> scheduler.ScheduledTask: ...


class TaskReasonSystem(TaskReason): ...


class TaskReasonUser(TaskReason):
    @property
    def userName(self) -> str: ...


class TypeDescription(Description):
    @property
    def key(self) -> type: ...


class UpdateVirtualMachineFilesResult(vmodl.DynamicData):
    @property
    def failedVmFile(self) -> List[UpdateVirtualMachineFilesResult.FailedVmFileInfo]: ...


    class FailedVmFileInfo(vmodl.DynamicData):
        @property
        def vmFile(self) -> str: ...
        @property
        def fault(self) -> vmodl.MethodFault: ...


class UserSearchResult(vmodl.DynamicData):
    @property
    def principal(self) -> str: ...
    @property
    def fullName(self) -> str: ...
    @property
    def group(self) -> bool: ...


class UserSession(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def userName(self) -> str: ...
    @property
    def fullName(self) -> str: ...
    @property
    def loginTime(self) -> datetime: ...
    @property
    def lastActiveTime(self) -> datetime: ...
    @property
    def locale(self) -> str: ...
    @property
    def messageLocale(self) -> str: ...
    @property
    def extensionSession(self) -> bool: ...
    @property
    def ipAddress(self) -> str: ...
    @property
    def userAgent(self) -> str: ...
    @property
    def callCount(self) -> long: ...


class VVolVmConfigFileUpdateResult(vmodl.DynamicData):
    @property
    def succeededVmConfigFile(self) -> List[KeyValue]: ...
    @property
    def failedVmConfigFile(self) -> List[VVolVmConfigFileUpdateResult.FailedVmConfigFileInfo]: ...


    class FailedVmConfigFileInfo(vmodl.DynamicData):
        @property
        def targetConfigVVolId(self) -> str: ...
        @property
        def dsPath(self) -> str: ...
        @property
        def fault(self) -> vmodl.MethodFault: ...


class VasaStorageArray(vmodl.DynamicData):
    @property
    def name(self) -> str: ...
    @property
    def uuid(self) -> str: ...
    @property
    def vendorId(self) -> str: ...
    @property
    def modelId(self) -> str: ...
    @property
    def discoverySvcInfo(self) -> List[VasaStorageArray.DiscoverySvcInfo]: ...


    class DiscoveryFcTransport(vmodl.DynamicData):
        @property
        def nodeWwn(self) -> str: ...
        @property
        def portWwn(self) -> str: ...


    class DiscoveryIpTransport(vmodl.DynamicData):
        @property
        def ipAddress(self) -> str: ...
        @property
        def portNumber(self) -> str: ...


    class DiscoverySvcInfo(vmodl.DynamicData):
        @property
        def portType(self) -> str: ...
        @property
        def svcNqn(self) -> str: ...
        @property
        def ipInfo(self) -> VasaStorageArray.DiscoveryIpTransport: ...
        @property
        def fcInfo(self) -> VasaStorageArray.DiscoveryFcTransport: ...


class VasaProviderContainerSpec(vmodl.DynamicData):
    @property
    def vasaProviderInfo(self) -> List[VimVasaProviderInfo]: ...
    @property
    def scId(self) -> str: ...
    @property
    def deleted(self) -> bool: ...


class VimVasaProvider(vmodl.DynamicData):
    @property
    def uid(self) -> str: ...
    @property
    def url(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def selfSignedCertificate(self) -> str: ...
    @property
    def vhostConfig(self) -> VimVasaProvider.VirtualHostConfig: ...
    @property
    def versionId(self) -> int: ...


    class StatePerArray(vmodl.DynamicData):
        @property
        def priority(self) -> int: ...
        @property
        def arrayId(self) -> str: ...
        @property
        def active(self) -> bool: ...


    class VirtualHostConfig(vmodl.DynamicData):
        @property
        def vhostName(self) -> str: ...
        @property
        def serviceHost(self) -> str: ...
        @property
        def servicePort(self) -> int: ...


class VimVasaProviderInfo(vmodl.DynamicData):
    @property
    def provider(self) -> VimVasaProvider: ...
    @property
    def arrayState(self) -> List[VimVasaProvider.StatePerArray]: ...


class ApplyRecommendationResult(vmodl.DynamicData):
    @property
    def vm(self) -> VirtualMachine: ...


class AutomationConfig(vmodl.DynamicData):
    @property
    def spaceLoadBalanceAutomationMode(self) -> str: ...
    @property
    def ioLoadBalanceAutomationMode(self) -> str: ...
    @property
    def ruleEnforcementAutomationMode(self) -> str: ...
    @property
    def policyEnforcementAutomationMode(self) -> str: ...
    @property
    def vmEvacuationAutomationMode(self) -> str: ...


class ConfigInfo(vmodl.DynamicData):
    @property
    def podConfig(self) -> storageDrs.PodConfigInfo: ...
    @property
    def vmConfig(self) -> List[storageDrs.VmConfigInfo]: ...


class ConfigSpec(vmodl.DynamicData):
    @property
    def podConfigSpec(self) -> storageDrs.PodConfigSpec: ...
    @property
    def vmConfigSpec(self) -> List[storageDrs.VmConfigSpec]: ...


class HbrDiskMigrationAction(cluster.Action):
    @property
    def collectionId(self) -> str: ...
    @property
    def collectionName(self) -> str: ...
    @property
    def diskIds(self) -> List[str]: ...
    @property
    def source(self) -> Datastore: ...
    @property
    def destination(self) -> Datastore: ...
    @property
    def sizeTransferred(self) -> long: ...
    @property
    def spaceUtilSrcBefore(self) -> float: ...
    @property
    def spaceUtilDstBefore(self) -> float: ...
    @property
    def spaceUtilSrcAfter(self) -> float: ...
    @property
    def spaceUtilDstAfter(self) -> float: ...
    @property
    def ioLatencySrcBefore(self) -> float: ...
    @property
    def ioLatencyDstBefore(self) -> float: ...


class IoLoadBalanceConfig(vmodl.DynamicData):
    @property
    def reservablePercentThreshold(self) -> int: ...
    @property
    def reservableIopsThreshold(self) -> int: ...
    @property
    def reservableThresholdMode(self) -> str: ...
    @property
    def ioLatencyThreshold(self) -> int: ...
    @property
    def ioLoadImbalanceThreshold(self) -> int: ...


class OptionSpec(option.ArrayUpdateSpec):
    @property
    def option(self) -> option.OptionValue: ...


class PlacementAffinityRule(vmodl.DynamicData):
    @property
    def ruleType(self) -> str: ...
    @property
    def ruleScope(self) -> str: ...
    @property
    def vms(self) -> List[VirtualMachine]: ...
    @property
    def keys(self) -> List[str]: ...


    class RuleScope(Enum):
        cluster = "cluster"
        host = "host"
        storagePod = "storagepod"
        datastore = "datastore"


    class RuleType(Enum):
        affinity = "affinity"
        antiAffinity = "antiaffinity"
        softAffinity = "softaffinity"
        softAntiAffinity = "softantiaffinity"


class PlacementRankResult(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def candidate(self) -> ClusterComputeResource: ...
    @property
    def reservedSpaceMB(self) -> long: ...
    @property
    def usedSpaceMB(self) -> long: ...
    @property
    def totalSpaceMB(self) -> long: ...
    @property
    def utilization(self) -> double: ...
    @property
    def faults(self) -> List[vmodl.MethodFault]: ...


class PlacementRankSpec(vmodl.DynamicData):
    @property
    def specs(self) -> List[cluster.PlacementSpec]: ...
    @property
    def clusters(self) -> List[ClusterComputeResource]: ...
    @property
    def rules(self) -> List[storageDrs.PlacementAffinityRule]: ...
    @property
    def placementRankByVm(self) -> List[storageDrs.PlacementRankVmSpec]: ...


class PlacementRankVmSpec(vmodl.DynamicData):
    @property
    def vmPlacementSpec(self) -> cluster.PlacementSpec: ...
    @property
    def vmClusters(self) -> List[ClusterComputeResource]: ...


class PodConfigInfo(vmodl.DynamicData):
    @property
    def enabled(self) -> bool: ...
    @property
    def ioLoadBalanceEnabled(self) -> bool: ...
    @property
    def defaultVmBehavior(self) -> str: ...
    @property
    def loadBalanceInterval(self) -> int: ...
    @property
    def defaultIntraVmAffinity(self) -> bool: ...
    @property
    def spaceLoadBalanceConfig(self) -> storageDrs.SpaceLoadBalanceConfig: ...
    @property
    def ioLoadBalanceConfig(self) -> storageDrs.IoLoadBalanceConfig: ...
    @property
    def automationOverrides(self) -> storageDrs.AutomationConfig: ...
    @property
    def rule(self) -> List[cluster.RuleInfo]: ...
    @property
    def option(self) -> List[option.OptionValue]: ...


    class Behavior(Enum):
        manual = "manual"
        automated = "automated"


class PodConfigSpec(vmodl.DynamicData):
    @property
    def enabled(self) -> bool: ...
    @property
    def ioLoadBalanceEnabled(self) -> bool: ...
    @property
    def defaultVmBehavior(self) -> str: ...
    @property
    def loadBalanceInterval(self) -> int: ...
    @property
    def defaultIntraVmAffinity(self) -> bool: ...
    @property
    def spaceLoadBalanceConfig(self) -> storageDrs.SpaceLoadBalanceConfig: ...
    @property
    def ioLoadBalanceConfig(self) -> storageDrs.IoLoadBalanceConfig: ...
    @property
    def automationOverrides(self) -> storageDrs.AutomationConfig: ...
    @property
    def rule(self) -> List[cluster.RuleSpec]: ...
    @property
    def option(self) -> List[storageDrs.OptionSpec]: ...


class PodSelectionSpec(vmodl.DynamicData):
    @property
    def initialVmConfig(self) -> List[storageDrs.PodSelectionSpec.VmPodConfig]: ...
    @property
    def storagePod(self) -> StoragePod: ...


class DiskLocator(vmodl.DynamicData):
    @property
    def diskId(self) -> int: ...
    @property
    def diskMoveType(self) -> str: ...
    @property
    def diskBackingInfo(self) -> vm.device.VirtualDevice.BackingInfo: ...
    @property
    def profile(self) -> List[vm.ProfileSpec]: ...


class VmPodConfig(vmodl.DynamicData):
    @property
    def storagePod(self) -> StoragePod: ...
    @property
    def disk(self) -> List[storageDrs.PodSelectionSpec.DiskLocator]: ...
    @property
    def vmConfig(self) -> storageDrs.VmConfigInfo: ...
    @property
    def interVmRule(self) -> List[cluster.RuleInfo]: ...


class SpaceLoadBalanceConfig(vmodl.DynamicData):
    @property
    def spaceThresholdMode(self) -> str: ...
    @property
    def spaceUtilizationThreshold(self) -> int: ...
    @property
    def freeSpaceThresholdGB(self) -> int: ...
    @property
    def minSpaceUtilizationDifference(self) -> int: ...


    class SpaceThresholdMode(Enum):
        utilization = "utilization"
        freeSpace = "freespace"


class StorageMigrationAction(cluster.Action):
    @property
    def vm(self) -> VirtualMachine: ...
    @property
    def relocateSpec(self) -> vm.RelocateSpec: ...
    @property
    def source(self) -> Datastore: ...
    @property
    def destination(self) -> Datastore: ...
    @property
    def sizeTransferred(self) -> long: ...
    @property
    def spaceUtilSrcBefore(self) -> float: ...
    @property
    def spaceUtilDstBefore(self) -> float: ...
    @property
    def spaceUtilSrcAfter(self) -> float: ...
    @property
    def spaceUtilDstAfter(self) -> float: ...
    @property
    def ioLatencySrcBefore(self) -> float: ...
    @property
    def ioLatencyDstBefore(self) -> float: ...


class StoragePlacementAction(cluster.Action):
    @property
    def vm(self) -> VirtualMachine: ...
    @property
    def relocateSpec(self) -> vm.RelocateSpec: ...
    @property
    def destination(self) -> Datastore: ...
    @property
    def spaceUtilBefore(self) -> float: ...
    @property
    def spaceDemandBefore(self) -> float: ...
    @property
    def spaceUtilAfter(self) -> float: ...
    @property
    def spaceDemandAfter(self) -> float: ...
    @property
    def ioLatencyBefore(self) -> float: ...


class StoragePlacementResult(vmodl.DynamicData):
    @property
    def recommendations(self) -> List[cluster.Recommendation]: ...
    @property
    def drsFault(self) -> cluster.DrsFaults: ...
    @property
    def task(self) -> Task: ...


class StoragePlacementSpec(vmodl.DynamicData):
    @property
    def type(self) -> str: ...
    @property
    def priority(self) -> VirtualMachine.MovePriority: ...
    @property
    def vm(self) -> VirtualMachine: ...
    @property
    def podSelectionSpec(self) -> storageDrs.PodSelectionSpec: ...
    @property
    def cloneSpec(self) -> vm.CloneSpec: ...
    @property
    def cloneName(self) -> str: ...
    @property
    def configSpec(self) -> vm.ConfigSpec: ...
    @property
    def relocateSpec(self) -> vm.RelocateSpec: ...
    @property
    def resourcePool(self) -> ResourcePool: ...
    @property
    def host(self) -> HostSystem: ...
    @property
    def folder(self) -> Folder: ...
    @property
    def disallowPrerequisiteMoves(self) -> bool: ...
    @property
    def resourceLeaseDurationSec(self) -> int: ...


    class PlacementType(Enum):
        create = "create"
        reconfigure = "reconfigure"
        relocate = "relocate"
        clone = "clone"


class VirtualDiskAntiAffinityRuleSpec(cluster.RuleInfo):
    @property
    def diskId(self) -> List[int]: ...


class VirtualDiskRuleSpec(cluster.RuleInfo):
    @property
    def diskRuleType(self) -> str: ...
    @property
    def diskId(self) -> List[int]: ...


class VmConfigInfo(vmodl.DynamicData):
    @property
    def vm(self) -> VirtualMachine: ...
    @property
    def enabled(self) -> bool: ...
    @property
    def behavior(self) -> str: ...
    @property
    def intraVmAffinity(self) -> bool: ...
    @property
    def intraVmAntiAffinity(self) -> storageDrs.VirtualDiskAntiAffinityRuleSpec: ...
    @property
    def virtualDiskRules(self) -> List[storageDrs.VirtualDiskRuleSpec]: ...


class VmConfigSpec(option.ArrayUpdateSpec):
    @property
    def info(self) -> storageDrs.VmConfigInfo: ...


class CloneSpec(vmodl.DynamicData):
    @property
    def location(self) -> Datastore: ...
    @property
    def host(self) -> HostSystem: ...
    @property
    def resourceSpec(self) -> ResourceConfigSpec: ...
    @property
    def vmFolder(self) -> Folder: ...
    @property
    def networkMapping(self) -> List[vApp.CloneSpec.NetworkMappingPair]: ...
    @property
    def property(self) -> List[KeyValue]: ...
    @property
    def resourceMapping(self) -> List[vApp.CloneSpec.ResourceMap]: ...
    @property
    def provisioning(self) -> str: ...


    class ProvisioningType(Enum):
        sameAsSource = "sameassource"
        thin = "thin"
        thick = "thick"


class NetworkMappingPair(vmodl.DynamicData):
    @property
    def source(self) -> Network: ...
    @property
    def destination(self) -> Network: ...


class ResourceMap(vmodl.DynamicData):
    @property
    def source(self) -> ManagedEntity: ...
    @property
    def parent(self) -> ResourcePool: ...
    @property
    def resourceSpec(self) -> ResourceConfigSpec: ...
    @property
    def location(self) -> Datastore: ...


class EntityConfigInfo(vmodl.DynamicData):
    @property
    def key(self) -> ManagedEntity: ...
    @property
    def tag(self) -> str: ...
    @property
    def startOrder(self) -> int: ...
    @property
    def startDelay(self) -> int: ...
    @property
    def waitingForGuest(self) -> bool: ...
    @property
    def startAction(self) -> str: ...
    @property
    def stopDelay(self) -> int: ...
    @property
    def stopAction(self) -> str: ...
    @property
    def destroyWithParent(self) -> bool: ...


    class Action(Enum):
        none = "none"
        powerOn = "poweron"
        powerOff = "poweroff"
        guestShutdown = "guestshutdown"
        suspend = "suspend"


class IPAssignmentInfo(vmodl.DynamicData):
    @property
    def supportedAllocationScheme(self) -> List[str]: ...
    @property
    def ipAllocationPolicy(self) -> str: ...
    @property
    def supportedIpProtocol(self) -> List[str]: ...
    @property
    def ipProtocol(self) -> str: ...


    class AllocationSchemes(Enum):
        dhcp = "dhcp"
        ovfenv = "ovfenv"


    class IpAllocationPolicy(Enum):
        dhcpPolicy = "dhcppolicy"
        transientPolicy = "transientpolicy"
        fixedPolicy = "fixedpolicy"
        fixedAllocatedPolicy = "fixedallocatedpolicy"


    class Protocols(Enum):
        IPv4 = "ipv4"
        IPv6 = "ipv6"


class IpPool(vmodl.DynamicData):
    @property
    def id(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def ipv4Config(self) -> vApp.IpPool.IpPoolConfigInfo: ...
    @property
    def ipv6Config(self) -> vApp.IpPool.IpPoolConfigInfo: ...
    @property
    def dnsDomain(self) -> str: ...
    @property
    def dnsSearchPath(self) -> str: ...
    @property
    def hostPrefix(self) -> str: ...
    @property
    def httpProxy(self) -> str: ...
    @property
    def networkAssociation(self) -> List[vApp.IpPool.Association]: ...
    @property
    def availableIpv4Addresses(self) -> int: ...
    @property
    def availableIpv6Addresses(self) -> int: ...
    @property
    def allocatedIpv4Addresses(self) -> int: ...
    @property
    def allocatedIpv6Addresses(self) -> int: ...


class Association(vmodl.DynamicData):
    @property
    def network(self) -> Network: ...
    @property
    def networkName(self) -> str: ...


class IpPoolConfigInfo(vmodl.DynamicData):
    @property
    def subnetAddress(self) -> str: ...
    @property
    def netmask(self) -> str: ...
    @property
    def gateway(self) -> str: ...
    @property
    def range(self) -> str: ...
    @property
    def dns(self) -> List[str]: ...
    @property
    def dhcpServerAvailable(self) -> bool: ...
    @property
    def ipPoolEnabled(self) -> bool: ...


class OvfSectionInfo(vmodl.DynamicData):
    @property
    def key(self) -> int: ...
    @property
    def namespace(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def atEnvelopeLevel(self) -> bool: ...
    @property
    def contents(self) -> str: ...


class OvfSectionSpec(option.ArrayUpdateSpec):
    @property
    def info(self) -> vApp.OvfSectionInfo: ...


class ProductInfo(vmodl.DynamicData):
    @property
    def key(self) -> int: ...
    @property
    def classId(self) -> str: ...
    @property
    def instanceId(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def vendor(self) -> str: ...
    @property
    def version(self) -> str: ...
    @property
    def fullVersion(self) -> str: ...
    @property
    def vendorUrl(self) -> str: ...
    @property
    def productUrl(self) -> str: ...
    @property
    def appUrl(self) -> str: ...


class ProductSpec(option.ArrayUpdateSpec):
    @property
    def info(self) -> vApp.ProductInfo: ...


class PropertyInfo(vmodl.DynamicData):
    @property
    def key(self) -> int: ...
    @property
    def classId(self) -> str: ...
    @property
    def instanceId(self) -> str: ...
    @property
    def id(self) -> str: ...
    @property
    def category(self) -> str: ...
    @property
    def label(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def typeReference(self) -> str: ...
    @property
    def userConfigurable(self) -> bool: ...
    @property
    def defaultValue(self) -> str: ...
    @property
    def value(self) -> str: ...
    @property
    def description(self) -> str: ...


class PropertySpec(option.ArrayUpdateSpec):
    @property
    def info(self) -> vApp.PropertyInfo: ...


class VAppConfigInfo(vApp.VmConfigInfo):
    @property
    def entityConfig(self) -> List[vApp.EntityConfigInfo]: ...
    @property
    def annotation(self) -> str: ...
    @property
    def instanceUuid(self) -> str: ...
    @property
    def managedBy(self) -> ext.ManagedByInfo: ...


class VAppConfigSpec(vApp.VmConfigSpec):
    @property
    def entityConfig(self) -> List[vApp.EntityConfigInfo]: ...
    @property
    def annotation(self) -> str: ...
    @property
    def instanceUuid(self) -> str: ...
    @property
    def managedBy(self) -> ext.ManagedByInfo: ...


class VAppImportSpec(ImportSpec):
    @property
    def name(self) -> str: ...
    @property
    def vAppConfigSpec(self) -> vApp.VAppConfigSpec: ...
    @property
    def resourcePoolSpec(self) -> ResourceConfigSpec: ...
    @property
    def child(self) -> List[ImportSpec]: ...


class VmConfigInfo(vmodl.DynamicData):
    @property
    def product(self) -> List[vApp.ProductInfo]: ...
    @property
    def property(self) -> List[vApp.PropertyInfo]: ...
    @property
    def ipAssignment(self) -> vApp.IPAssignmentInfo: ...
    @property
    def eula(self) -> List[str]: ...
    @property
    def ovfSection(self) -> List[vApp.OvfSectionInfo]: ...
    @property
    def ovfEnvironmentTransport(self) -> List[str]: ...
    @property
    def installBootRequired(self) -> bool: ...
    @property
    def installBootStopDelay(self) -> int: ...


class VmConfigSpec(vmodl.DynamicData):
    @property
    def product(self) -> List[vApp.ProductSpec]: ...
    @property
    def property(self) -> List[vApp.PropertySpec]: ...
    @property
    def ipAssignment(self) -> vApp.IPAssignmentInfo: ...
    @property
    def eula(self) -> List[str]: ...
    @property
    def ovfSection(self) -> List[vApp.OvfSectionSpec]: ...
    @property
    def ovfEnvironmentTransport(self) -> List[str]: ...
    @property
    def installBootRequired(self) -> bool: ...
    @property
    def installBootStopDelay(self) -> int: ...


class CorrelationState(version.version8): ...


class CorrelationState(version.version8): ...


class State(version.version7): ...


class QuiesceMode(version.version10): ...


class OstNodeType(version.version7): ...


class RuleScope(version.version10): ...


class RuleType(version.version10): ...


class Behavior(version.version7): ...


class SpaceThresholdMode(version.version10): ...


class PlacementType(version.version7): ...


class RuleType(version.version12): ...


class ProvisioningType(version.version6): ...


class Action(version.version5): ...


class AllocationSchemes(version.version5): ...


class IpAllocationPolicy(version.version5): ...


class Protocols(version.version5): ...