from typing import List
from pyVmomi import pbm, vmodl
from pyVmomi.VmomiSupport import ManagedObject


class CapabilityMetadataManager(ManagedObject): ...


class CapabilityInstance(vmodl.DynamicData):
    @property
    def id(self) -> CapabilityMetadata.UniqueId: ...
    @property
    def constraint(self) -> List[ConstraintInstance]: ...


class CapabilityMetadata(vmodl.DynamicData):
    @property
    def id(self) -> CapabilityMetadata.UniqueId: ...
    @property
    def summary(self) -> pbm.ExtendedElementDescription: ...
    @property
    def mandatory(self) -> bool: ...
    @property
    def hint(self) -> bool: ...
    @property
    def keyId(self) -> str: ...
    @property
    def allowMultipleConstraints(self) -> bool: ...
    @property
    def propertyMetadata(self) -> List[PropertyMetadata]: ...


    class UniqueId(vmodl.DynamicData):
        @property
        def namespace(self) -> str: ...
        @property
        def id(self) -> str: ...


class ConstraintInstance(vmodl.DynamicData):
    @property
    def propertyInstance(self) -> List[PropertyInstance]: ...


class GenericTypeInfo(TypeInfo):
    @property
    def genericTypeName(self) -> str: ...


class PropertyInstance(vmodl.DynamicData):
    @property
    def id(self) -> str: ...
    @property
    def operator(self) -> str: ...
    @property
    def value(self) -> object: ...


class PropertyMetadata(vmodl.DynamicData):
    @property
    def id(self) -> str: ...
    @property
    def summary(self) -> pbm.ExtendedElementDescription: ...
    @property
    def mandatory(self) -> bool: ...
    @property
    def type(self) -> TypeInfo: ...
    @property
    def defaultValue(self) -> object: ...
    @property
    def allowedValue(self) -> object: ...
    @property
    def requirementsTypeHint(self) -> str: ...


class TypeInfo(vmodl.DynamicData):
    @property
    def typeName(self) -> str: ...