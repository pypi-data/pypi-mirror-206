# Generated by Django 4.2 on 2023-04-20 13:55

import datetime

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import sortedm2m.fields
import taggit.managers
from django.db import migrations, models

import literature.utils


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("taggit", "0005_auto_20220424_2025"),
    ]

    operations = [
        migrations.CreateModel(
            name="Author",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("given", models.CharField(blank=True, max_length=255, null=True, verbose_name="given name")),
                ("family", models.CharField(blank=True, max_length=255, verbose_name="family name")),
                (
                    "ORCID",
                    models.CharField(
                        blank=True,
                        max_length=64,
                        null=True,
                        validators=[django.core.validators.RegexValidator("^(?:\\d{4}-){3}\\d{3}[\\d,x]")],
                        verbose_name="ORCID",
                    ),
                ),
            ],
            options={
                "verbose_name": "author",
                "verbose_name_plural": "authors",
                "ordering": ["family"],
            },
        ),
        migrations.CreateModel(
            name="Collection",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                ("description", models.TextField(verbose_name="description")),
            ],
            options={
                "verbose_name": "collection",
                "verbose_name_plural": "collections",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Literature",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("article", "article"),
                            ("article-journal", "journal article"),
                            ("article-magazine", "magazine article"),
                            ("article-newspaper", "newspaper article"),
                            ("bill", "bill"),
                            ("book", "book"),
                            ("broadcast", "broadcast"),
                            ("chapter", "chapter"),
                            ("dataset", "dataset"),
                            ("entry", "entry"),
                            ("entry-dictionary", "entry (dictionary)"),
                            ("entry-encyclopedia", "entry (encyclopedia)"),
                            ("figure", "figure"),
                            ("graphic", "graphic"),
                            ("interview", "interview"),
                            ("legal_case", "legal case"),
                            ("legislation", "legislation"),
                            ("manuscript", "manuscript"),
                            ("map", "map"),
                            ("motion_picture", "motion picture"),
                            ("musical_score", "musical score"),
                            ("pamphlet", "pamphlet"),
                            ("paper-conference", "paper conference"),
                            ("patent", "patent"),
                            ("personal_communication", "personal communication"),
                            ("post", "post"),
                            ("post-weblog", "blog post"),
                            ("report", "report"),
                            ("review", "review"),
                            ("review-book", "review book"),
                            ("song", "song"),
                            ("speech", "speech"),
                            ("thesis", "thesis"),
                            ("treaty", "treaty"),
                            ("webpage", "webpage"),
                        ],
                        max_length=255,
                        verbose_name="type",
                    ),
                ),
                (
                    "DOI",
                    models.CharField(
                        blank=True,
                        help_text="Digital Object Identifier",
                        max_length=255,
                        null=True,
                        unique=True,
                        verbose_name="DOI",
                    ),
                ),
                (
                    "ISSN",
                    models.CharField(
                        blank=True,
                        help_text="International Standard Serial Number",
                        max_length=255,
                        null=True,
                        verbose_name="ISSN",
                    ),
                ),
                (
                    "ISBN",
                    models.CharField(
                        blank=True,
                        help_text='International Standard Book Number (e.g. "978-3-8474-1017-1")',
                        max_length=255,
                        null=True,
                        verbose_name="ISBN",
                    ),
                ),
                (
                    "PMCID",
                    models.CharField(
                        blank=True,
                        help_text="PubMed Central identifier",
                        max_length=255,
                        null=True,
                        verbose_name="PMCID",
                    ),
                ),
                (
                    "PMID",
                    models.CharField(
                        blank=True, help_text="PubMed reference number", max_length=255, null=True, verbose_name="PMID"
                    ),
                ),
                (
                    "URL",
                    models.URLField(blank=True, help_text="A link to the URL resource.", null=True, verbose_name="URL"),
                ),
                ("abstract", models.TextField(blank=True, null=True, verbose_name="abstract")),
                (
                    "container_title",
                    models.CharField(
                        blank=True,
                        help_text=(
                            "Title of the container holding the item (e.g. the book title for a book chapter, the"
                            " journal title for a journal article; the album title for a recording; the session title"
                            " for multi-part presentation at a conference)."
                        ),
                        max_length=512,
                        null=True,
                        verbose_name="container title",
                    ),
                ),
                (
                    "citation_key",
                    models.CharField(
                        blank=True,
                        help_text=(
                            "A human readable identifier of the literature item (analogous to a BibTeX entrykey)."
                        ),
                        max_length=255,
                        null=True,
                        unique=True,
                        verbose_name="citation key",
                    ),
                ),
                ("language", models.CharField(blank=True, max_length=2, null=True, verbose_name="language")),
                (
                    "title",
                    models.TextField(
                        blank=True, help_text="Primary title of the item.", null=True, verbose_name="title"
                    ),
                ),
                (
                    "pdf",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=literature.utils.pdf_file_renamer,
                        validators=[django.core.validators.FileExtensionValidator(["pdf"])],
                        verbose_name="PDF",
                    ),
                ),
                (
                    "published",
                    models.DateField(
                        max_length=255,
                        validators=[django.core.validators.MaxValueValidator(datetime.date.today)],
                        verbose_name="date published",
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True, help_text="General comments regarding the entry.", null=True, verbose_name="comment"
                    ),
                ),
            ],
            options={
                "verbose_name": "literature",
                "verbose_name_plural": "literature",
                "ordering": ["citation_key"],
                "default_related_name": "literature",
            },
        ),
        migrations.CreateModel(
            name="SupplementaryMaterial",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("file", models.FileField(upload_to="", verbose_name="file")),
                (
                    "literature",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="supplementary",
                        to="literature.literature",
                        verbose_name="literature",
                    ),
                ),
            ],
            options={
                "verbose_name": "supplementary material",
                "verbose_name_plural": "supplementary material",
            },
        ),
        migrations.CreateModel(
            name="LiteratureAuthor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("position", models.IntegerField()),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="position", to="literature.author"
                    ),
                ),
                (
                    "literature",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="literature.literature"),
                ),
            ],
        ),
        migrations.AddField(
            model_name="literature",
            name="authors",
            field=sortedm2m.fields.SortedManyToManyField(
                blank=True,
                help_text=None,
                related_name="literature",
                sort_value_field_name="number",
                through="literature.LiteratureAuthor",
                to="literature.author",
                verbose_name="authors",
            ),
        ),
        migrations.AddField(
            model_name="literature",
            name="collections",
            field=models.ManyToManyField(
                blank=True,
                help_text="Add the entry to a collection.",
                to="literature.collection",
                verbose_name="collection",
            ),
        ),
        migrations.AddField(
            model_name="literature",
            name="keyword",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="Keyword(s) or tag(s) attached to the item.",
                through="taggit.TaggedItem",
                to="taggit.Tag",
                verbose_name="key words",
            ),
        ),
    ]
