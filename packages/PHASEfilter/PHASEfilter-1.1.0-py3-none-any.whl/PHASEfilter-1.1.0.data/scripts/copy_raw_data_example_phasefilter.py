#!python
# encoding: utf-8
'''
copy_raw_data.py -- copy raw data to test pasefilter pachage

Copy some data to test the commands available in PHASEfilter package.

@author:	 mmp

@copyright:  2019 iBiMED. All rights reserved.

@license:	license

@contact:	monsanto@ua.pt

@deffield	updated: Updated
'''
from PHASEfilter.lib.utils.util import Utils
from PHASEfilter.lib.constants import version
import os, sys, glob

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# export PYTHONPATH='/home/mmp/git/PHASEfilter'
# python3 copy_raw_data_of_phasefilter.py
#	--out .

from optparse import OptionParser

__all__ = []
__version__ = version.VERSION_synchronize_genomes
__date__ = '2020-05-01'
__updated__ = '2021-09-06'


def main(argv=None):
	'''Command line options.'''
	utils = Utils()
	
	program_name = os.path.basename(sys.argv[0])
	program_version = "{}".format(__version__)
	program_build_date = "%s" % __updated__

	program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
	#program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
	program_longdesc = '''
	Copy some data to test the commands available in PHASEfilter package.
	Files to copy: 
	1) Ca22chr7A_C_albicans_SC5314.fasta
	2) Ca22chr7B_C_albicans_SC5314.fasta
	3) T1_Fluc_7A_snps.vcf.gz
	4) T1_Fluc_7A_snps.vcf.gz.tbi
	5) T1_Fluc_7B_snps.vcf.gz
	6) T1_Fluc_7B_snps.vcf.gz.tbi
	7) T1_Fluc_7A_indels.vcf.gz
	8) T1_Fluc_7A_indels.vcf.gz.tbi
	9) T1_Fluc_7B_indels.vcf.gz
	10) T1_Fluc_7B_indels.vcf.gz.tbi
	11) Assembly22_hapA_To_Assembly22_hapB.over.chain
	12) Assembly22_hapB_To_Assembly22_hapA.over.chain
	''' # optional - give further explanation about what the program does
	program_license = "Copyright 2020 (iBiMED)											\
				Licensed under the MIT\nhttps://spdx.org/licenses/MIT.html"

	if argv is None:
		argv = sys.argv[1:]
	
		# setup option parser
		parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
		parser.add_option("--out", dest="out", help="copy data to this directory", type="string", default=".", metavar="PATH")

		# process options
		(opts, args) = parser.parse_args(argv)
		if opts.out: print("out = %s" % opts.out)

		### test output file
		if (os.path.exists(opts.out) and opts.out != '.'):
			read_input = input("Output directory '{}' already exist, do you want to copy to it? [y|Y] ".format(opts.out))
			if (len(read_input.strip()) > 0 and read_input.upper() != 'Y'): sys.exit("Exit by the user.")

		### Copy data
		utils.make_path(opts.out)
		base_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "tests/files/real_raw_data") 
		cmd = "cp {}/*.fasta {}; cp {}/*.gz {}; cp {}/*.gz.tbi {}; ".format(base_path, opts.out,
									base_path, opts.out, base_path, opts.out)
		exist_status = os.system(cmd)
		if (exist_status != 0):
			raise Exception("Fail to copy file") 
		print("Files copied: \n{}\n".format("\n".join(glob.glob("{}/*".format(base_path)))))

if __name__ == "__main__":
	sys.exit(main())


