from typing import List
from enum import Enum
from pyVmomi import auth, vim, vmodl
from datetime import datetime
from pyVmomi.VmomiSupport import ManagedObject
from . import provider, storage


class ServiceInstance(ManagedObject):
    def QueryStorageManager(self) -> StorageManager: ...
    def QuerySessionManager(self) -> auth.SessionManager: ...
    def QueryAboutInfo(self) -> AboutInfo: ...


class StorageManager(ManagedObject):
    def RegisterProvider(self, providerSpec: provider.ProviderSpec) -> Task: ...
    def UnregisterProvider(self, providerId: str) -> Task: ...
    def QueryProvider(self) -> List[provider.Provider]: ...
    def QueryArray(self, providerId: List[str]) -> List[storage.StorageArray]: ...
    def QueryProcessorAssociatedWithArray(self, arrayId: str) -> List[storage.StorageProcessor]: ...
    def QueryPortAssociatedWithArray(self, arrayId: str) -> List[storage.StoragePort]: ...
    def QueryPortAssociatedWithLun(self, scsi3Id: str, arrayId: str) -> storage.StoragePort: ...
    def QueryLunAssociatedWithPort(self, portId: str, arrayId: str) -> List[storage.StorageLun]: ...
    def QueryArrayAssociatedWithLun(self, canonicalName: str) -> storage.StorageArray: ...
    def QueryPortAssociatedWithProcessor(self, processorId: str, arrayId: str) -> List[storage.StoragePort]: ...
    def QueryLunAssociatedWithArray(self, arrayId: str) -> List[storage.StorageLun]: ...
    def QueryFileSystemAssociatedWithArray(self, arrayId: str) -> List[storage.StorageFileSystem]: ...
    def QueryDatastoreCapability(self, datastore: vim.Datastore) -> storage.StorageCapability: ...
    def QueryHostAssociatedWithLun(self, scsi3Id: str, arrayId: str) -> List[vim.HostSystem]: ...
    def QueryVmfsDatastoreAssociatedWithLun(self, scsi3Id: str, arrayId: str) -> vim.Datastore: ...
    def QueryNfsDatastoreAssociatedWithFileSystem(self, fileSystemId: str, arrayId: str) -> vim.Datastore: ...
    def QueryDrsMigrationCapabilityForPerformance(self, srcDatastore: vim.Datastore, dstDatastore: vim.Datastore) -> bool: ...
    def QueryDrsMigrationCapabilityForPerformanceEx(self, datastore: List[vim.Datastore]) -> storage.DrsMigrationCapabilityResult: ...
    def QueryStorageContainer(self, containerSpec: storage.StorageContainerSpec) -> storage.StorageContainerResult: ...
    def QueryAssociatedBackingStoragePool(self, entityId: str, entityType: str) -> List[storage.BackingStoragePool]: ...
    def QueryDatastoreBackingPoolMapping(self, datastore: List[vim.Datastore]) -> List[storage.DatastoreBackingPoolMapping]: ...
    def RefreshCACertificatesAndCRLs(self, providerId: List[str]) -> Task: ...
    def QueryFaultDomain(self, filter: FaultDomainFilter) -> List[vim.vm.replication.FaultDomainId]: ...
    def QueryReplicationGroupInfo(self, rgFilter: ReplicationGroupFilter) -> List[storage.replication.GroupOperationResult]: ...


class Task(ManagedObject):
    def QueryResult(self) -> object: ...
    def QueryInfo(self) -> TaskInfo: ...


class AboutInfo(vmodl.DynamicData):
    @property
    def name(self) -> str: ...
    @property
    def fullName(self) -> str: ...
    @property
    def vendor(self) -> str: ...
    @property
    def apiVersion(self) -> str: ...
    @property
    def instanceUuid(self) -> str: ...
    @property
    def vasaApiVersion(self) -> str: ...


class EntityReference(vmodl.DynamicData):
    @property
    def id(self) -> str: ...
    @property
    def type(self) -> EntityReference.EntityType: ...


    class EntityType(Enum):
        datacenter = "datacenter"
        resourcePool = "resourcepool"
        storagePod = "storagepod"
        cluster = "cluster"
        vm = "vm"
        datastore = "datastore"
        host = "host"
        vmFile = "vmfile"
        scsiPath = "scsipath"
        scsiTarget = "scsitarget"
        scsiVolume = "scsivolume"
        scsiAdapter = "scsiadapter"
        nasMount = "nasmount"


class FaultDomainFilter(vmodl.DynamicData):
    @property
    def providerId(self) -> str: ...


class ReplicationGroupFilter(vmodl.DynamicData):
    @property
    def groupId(self) -> List[vim.vm.replication.ReplicationGroupId]: ...


class TaskInfo(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def task(self) -> Task: ...
    @property
    def object(self) -> ManagedObject: ...
    @property
    def error(self) -> vmodl.MethodFault: ...
    @property
    def result(self) -> object: ...
    @property
    def startTime(self) -> datetime: ...
    @property
    def completionTime(self) -> datetime: ...
    @property
    def state(self) -> str: ...
    @property
    def progress(self) -> int: ...


    class State(Enum):
        queued = "queued"
        running = "running"
        success = "success"
        error = "error"