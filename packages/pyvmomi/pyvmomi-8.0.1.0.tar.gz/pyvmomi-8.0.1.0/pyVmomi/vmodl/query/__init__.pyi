from typing import List
from enum import Enum
from pyVmomi import vmodl
from pyVmomi.VmomiSupport import ManagedObject, NoneType, PropertyPath


class PropertyCollector(ManagedObject):
    @property
    def filter(self) -> List[PropertyCollector.Filter]: ...
    def CreateFilter(self, spec: PropertyCollector.FilterSpec, partialUpdates: bool) -> PropertyCollector.Filter: ...
    def RetrieveContents(self, specSet: List[PropertyCollector.FilterSpec]) -> List[PropertyCollector.ObjectContent]: ...
    def CheckForUpdates(self, version: str) -> PropertyCollector.UpdateSet: ...
    def WaitForUpdates(self, version: str) -> PropertyCollector.UpdateSet: ...
    def CancelWaitForUpdates(self) -> NoneType: ...
    def WaitForUpdatesEx(self, version: str, options: PropertyCollector.WaitOptions) -> PropertyCollector.UpdateSet: ...
    def RetrievePropertiesEx(self, specSet: List[PropertyCollector.FilterSpec], options: PropertyCollector.RetrieveOptions) -> PropertyCollector.RetrieveResult: ...
    def ContinueRetrievePropertiesEx(self, token: str) -> PropertyCollector.RetrieveResult: ...
    def CancelRetrievePropertiesEx(self, token: str) -> NoneType: ...
    def CreatePropertyCollector(self) -> PropertyCollector: ...
    def Destroy(self) -> NoneType: ...


    class Filter(ManagedObject):
        @property
        def spec(self) -> PropertyCollector.FilterSpec: ...
        @property
        def partialUpdates(self) -> bool: ...
        def Destroy(self) -> NoneType: ...


    class Change(vmodl.DynamicData):
        @property
        def name(self) -> PropertyPath: ...
        @property
        def op(self) -> PropertyCollector.Change.Op: ...
        @property
        def val(self) -> object: ...


        class Op(Enum):
            add = "add"
            remove = "remove"
            assign = "assign"
            indirectRemove = "indirectremove"


    class FilterSpec(vmodl.DynamicData):
        @property
        def propSet(self) -> List[PropertyCollector.PropertySpec]: ...
        @property
        def objectSet(self) -> List[PropertyCollector.ObjectSpec]: ...
        @property
        def reportMissingObjectsInResults(self) -> bool: ...


    class FilterUpdate(vmodl.DynamicData):
        @property
        def filter(self) -> PropertyCollector.Filter: ...
        @property
        def objectSet(self) -> List[PropertyCollector.ObjectUpdate]: ...
        @property
        def missingSet(self) -> List[PropertyCollector.MissingObject]: ...


    class MissingObject(vmodl.DynamicData):
        @property
        def obj(self) -> ManagedObject: ...
        @property
        def fault(self) -> vmodl.MethodFault: ...


    class MissingProperty(vmodl.DynamicData):
        @property
        def path(self) -> PropertyPath: ...
        @property
        def fault(self) -> vmodl.MethodFault: ...


    class ObjectContent(vmodl.DynamicData):
        @property
        def obj(self) -> ManagedObject: ...
        @property
        def propSet(self) -> List[vmodl.DynamicProperty]: ...
        @property
        def missingSet(self) -> List[PropertyCollector.MissingProperty]: ...


    class ObjectSpec(vmodl.DynamicData):
        @property
        def obj(self) -> ManagedObject: ...
        @property
        def skip(self) -> bool: ...
        @property
        def selectSet(self) -> List[PropertyCollector.SelectionSpec]: ...


    class ObjectUpdate(vmodl.DynamicData):
        @property
        def kind(self) -> PropertyCollector.ObjectUpdate.Kind: ...
        @property
        def obj(self) -> ManagedObject: ...
        @property
        def changeSet(self) -> List[PropertyCollector.Change]: ...
        @property
        def missingSet(self) -> List[PropertyCollector.MissingProperty]: ...


        class Kind(Enum):
            modify = "modify"
            enter = "enter"
            leave = "leave"


    class PropertySpec(vmodl.DynamicData):
        @property
        def type(self) -> type: ...
        @property
        def all(self) -> bool: ...
        @property
        def pathSet(self) -> List[PropertyPath]: ...


    class RetrieveOptions(vmodl.DynamicData):
        @property
        def maxObjects(self) -> int: ...


    class RetrieveResult(vmodl.DynamicData):
        @property
        def token(self) -> str: ...
        @property
        def objects(self) -> List[PropertyCollector.ObjectContent]: ...


    class SelectionSpec(vmodl.DynamicData):
        @property
        def name(self) -> str: ...


    class TraversalSpec(PropertyCollector.SelectionSpec):
        @property
        def type(self) -> type: ...
        @property
        def path(self) -> PropertyPath: ...
        @property
        def skip(self) -> bool: ...
        @property
        def selectSet(self) -> List[PropertyCollector.SelectionSpec]: ...


    class UpdateSet(vmodl.DynamicData):
        @property
        def version(self) -> str: ...
        @property
        def filterSet(self) -> List[PropertyCollector.FilterUpdate]: ...
        @property
        def truncated(self) -> bool: ...


    class WaitOptions(vmodl.DynamicData):
        @property
        def maxWaitSeconds(self) -> int: ...
        @property
        def maxObjectUpdates(self) -> int: ...


class InvalidCollectorVersion(vmodl.MethodFault): ...


class InvalidProperty(vmodl.MethodFault):
    @property
    def name(self) -> PropertyPath: ...