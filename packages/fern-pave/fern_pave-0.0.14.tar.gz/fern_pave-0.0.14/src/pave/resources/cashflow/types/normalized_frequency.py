# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class NormalizedFrequency(str, enum.Enum):
    DAILY = "daily"
    WEEKLY = "weekly"
    BIWEEKLY = "biweekly"
    SEMIMONTHLY = "semimonthly"
    MONTHLY = "monthly"
    BIMONTHLY = "bimonthly"
    QUARTERLY = "quarterly"
    SEMI_ANNUAL = "semi_annual"
    ANNUAL = "annual"

    def visit(
        self,
        daily: typing.Callable[[], T_Result],
        weekly: typing.Callable[[], T_Result],
        biweekly: typing.Callable[[], T_Result],
        semimonthly: typing.Callable[[], T_Result],
        monthly: typing.Callable[[], T_Result],
        bimonthly: typing.Callable[[], T_Result],
        quarterly: typing.Callable[[], T_Result],
        semi_annual: typing.Callable[[], T_Result],
        annual: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is NormalizedFrequency.DAILY:
            return daily()
        if self is NormalizedFrequency.WEEKLY:
            return weekly()
        if self is NormalizedFrequency.BIWEEKLY:
            return biweekly()
        if self is NormalizedFrequency.SEMIMONTHLY:
            return semimonthly()
        if self is NormalizedFrequency.MONTHLY:
            return monthly()
        if self is NormalizedFrequency.BIMONTHLY:
            return bimonthly()
        if self is NormalizedFrequency.QUARTERLY:
            return quarterly()
        if self is NormalizedFrequency.SEMI_ANNUAL:
            return semi_annual()
        if self is NormalizedFrequency.ANNUAL:
            return annual()
