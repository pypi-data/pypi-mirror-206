from typing import List
from enum import Enum
from pyVmomi import ClusterStatus, DecommissionMode, DiskMapping, DiskResult, LowLevelProvisioningManager, VsanDiskInfo, VsanRuntimeInfo, vim, vmodl
from datetime import datetime
from pyVmomi.VmomiSupport import Link, ManagedObject, NoneType, binary, byte, long, short


class ActiveDirectoryAuthentication(DirectoryStore):
    def JoinDomain(self, domainName: str, userName: str, password: str) -> vim.Task: ...
    def JoinDomainWithCAM(self, domainName: str, camServer: str) -> vim.Task: ...
    def ImportCertificateForCAM(self, certPath: str, camServer: str) -> vim.Task: ...
    def LeaveCurrentDomain(self, force: bool) -> vim.Task: ...
    def EnableSmartCardAuthentication(self) -> NoneType: ...
    def InstallSmartCardTrustAnchor(self, cert: str) -> NoneType: ...
    def ReplaceSmartCardTrustAnchors(self, certs: List[str]) -> NoneType: ...
    def RemoveSmartCardTrustAnchor(self, issuer: str, serial: str) -> NoneType: ...
    def RemoveSmartCardTrustAnchorByFingerprint(self, fingerprint: str, digest: str) -> NoneType: ...
    def ListSmartCardTrustAnchors(self) -> List[str]: ...
    def DisableSmartCardAuthentication(self) -> NoneType: ...


    class CertificateDigest(Enum):
        SHA1 = "sha1"


class AssignableHardwareManager(ManagedObject):
    @property
    def binding(self) -> List[AssignableHardwareBinding]: ...
    @property
    def config(self) -> AssignableHardwareConfig: ...
    def DownloadDescriptionTree(self) -> binary: ...
    def RetrieveDynamicPassthroughInfo(self) -> List[vim.vm.DynamicPassthroughInfo]: ...
    def RetrieveVendorDeviceGroupInfo(self) -> List[vim.vm.VendorDeviceGroupInfo]: ...
    def UpdateConfig(self, config: AssignableHardwareConfig) -> NoneType: ...


class AuthenticationManager(ManagedObject):
    @property
    def info(self) -> AuthenticationManagerInfo: ...
    @property
    def supportedStore(self) -> List[AuthenticationStore]: ...


class AuthenticationStore(ManagedObject):
    @property
    def info(self) -> AuthenticationStoreInfo: ...


class AutoStartManager(ManagedObject):
    @property
    def config(self) -> AutoStartManager.Config: ...
    def Reconfigure(self, spec: AutoStartManager.Config) -> NoneType: ...
    def AutoPowerOn(self) -> NoneType: ...
    def AutoPowerOff(self) -> NoneType: ...


    class AutoPowerInfo(vmodl.DynamicData):
        @property
        def key(self) -> vim.VirtualMachine: ...
        @property
        def startOrder(self) -> int: ...
        @property
        def startDelay(self) -> int: ...
        @property
        def waitForHeartbeat(self) -> AutoStartManager.AutoPowerInfo.WaitHeartbeatSetting: ...
        @property
        def startAction(self) -> str: ...
        @property
        def stopDelay(self) -> int: ...
        @property
        def stopAction(self) -> str: ...


        class WaitHeartbeatSetting(Enum):
            yes = "yes"
            no = "no"
            systemDefault = "systemdefault"


    class Config(vmodl.DynamicData):
        @property
        def defaults(self) -> AutoStartManager.SystemDefaults: ...
        @property
        def powerInfo(self) -> List[AutoStartManager.AutoPowerInfo]: ...


    class SystemDefaults(vmodl.DynamicData):
        @property
        def enabled(self) -> bool: ...
        @property
        def startDelay(self) -> int: ...
        @property
        def stopDelay(self) -> int: ...
        @property
        def waitForHeartbeat(self) -> bool: ...
        @property
        def stopAction(self) -> str: ...


    class Action(Enum):
        none = "none"
        systemDefault = "systemdefault"
        powerOn = "poweron"
        powerOff = "poweroff"
        guestShutdown = "guestshutdown"
        suspend = "suspend"


class BootDeviceSystem(ManagedObject):
    def QueryBootDevices(self) -> BootDeviceInfo: ...
    def UpdateBootDevice(self, key: str) -> NoneType: ...


    class BootDevice(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def description(self) -> str: ...


class CacheConfigurationManager(ManagedObject):
    @property
    def cacheConfigurationInfo(self) -> List[CacheConfigurationManager.CacheConfigurationInfo]: ...
    def ConfigureCache(self, spec: CacheConfigurationManager.CacheConfigurationSpec) -> vim.Task: ...


    class CacheConfigurationInfo(vmodl.DynamicData):
        @property
        def key(self) -> vim.Datastore: ...
        @property
        def swapSize(self) -> long: ...


    class CacheConfigurationSpec(vmodl.DynamicData):
        @property
        def datastore(self) -> vim.Datastore: ...
        @property
        def swapSize(self) -> long: ...


class CertificateManager(ManagedObject):
    @property
    def certificateInfo(self) -> CertificateManager.CertificateInfo: ...
    def RetrieveCertificateInfoList(self) -> List[CertificateManager.CertificateInfo]: ...
    def GenerateCertificateSigningRequest(self, useIpAddressAsCommonName: bool, spec: CertificateManager.CertificateSpec) -> str: ...
    def GenerateCertificateSigningRequestByDn(self, distinguishedName: str, spec: CertificateManager.CertificateSpec) -> str: ...
    def InstallServerCertificate(self, cert: str) -> NoneType: ...
    def ReplaceCACertificatesAndCRLs(self, caCert: List[str], caCrl: List[str]) -> NoneType: ...
    def ListCACertificates(self) -> List[str]: ...
    def ListCACertificateRevocationLists(self) -> List[str]: ...


    class CertificateInfo(vmodl.DynamicData):
        @property
        def kind(self) -> str: ...
        @property
        def issuer(self) -> str: ...
        @property
        def notBefore(self) -> datetime: ...
        @property
        def notAfter(self) -> datetime: ...
        @property
        def subject(self) -> str: ...
        @property
        def status(self) -> str: ...


        class CertificateStatus(Enum):
            unknown = "unknown"
            expired = "expired"
            expiring = "expiring"
            expiringShortly = "expiringshortly"
            expirationImminent = "expirationimminent"
            good = "good"
            revoked = "revoked"


    class CertificateSpec(vmodl.DynamicData):
        @property
        def kind(self) -> str: ...


    class CertificateKind(Enum):
        Machine = "machine"
        VASAClient = "vasaclient"


class CpuSchedulerSystem(vim.ExtensibleManagedObject):
    @property
    def hyperthreadInfo(self) -> CpuSchedulerSystem.HyperThreadScheduleInfo: ...
    def EnableHyperThreading(self) -> NoneType: ...
    def DisableHyperThreading(self) -> NoneType: ...


    class HyperThreadScheduleInfo(vmodl.DynamicData):
        @property
        def available(self) -> bool: ...
        @property
        def active(self) -> bool: ...
        @property
        def config(self) -> bool: ...


class DatastoreBrowser(ManagedObject):
    @property
    def datastore(self) -> List[vim.Datastore]: ...
    @property
    def supportedType(self) -> List[DatastoreBrowser.Query]: ...
    def Search(self, datastorePath: str, searchSpec: DatastoreBrowser.SearchSpec) -> vim.Task: ...
    def SearchSubFolders(self, datastorePath: str, searchSpec: DatastoreBrowser.SearchSpec) -> vim.Task: ...
    def DeleteFile(self, datastorePath: str) -> NoneType: ...


    class FileInfo(vmodl.DynamicData):
        @property
        def path(self) -> str: ...
        @property
        def friendlyName(self) -> str: ...
        @property
        def fileSize(self) -> long: ...
        @property
        def modification(self) -> datetime: ...
        @property
        def owner(self) -> str: ...


        class Details(vmodl.DynamicData):
            @property
            def fileType(self) -> bool: ...
            @property
            def fileSize(self) -> bool: ...
            @property
            def modification(self) -> bool: ...
            @property
            def fileOwner(self) -> bool: ...


    class FloppyImageInfo(DatastoreBrowser.FileInfo): ...


    class FloppyImageQuery(DatastoreBrowser.Query): ...


    class FolderInfo(DatastoreBrowser.FileInfo): ...


    class FolderQuery(DatastoreBrowser.Query): ...


    class IsoImageInfo(DatastoreBrowser.FileInfo): ...


    class IsoImageQuery(DatastoreBrowser.Query): ...


    class Query(vmodl.DynamicData): ...


    class SearchResults(vmodl.DynamicData):
        @property
        def datastore(self) -> vim.Datastore: ...
        @property
        def folderPath(self) -> str: ...
        @property
        def file(self) -> List[DatastoreBrowser.FileInfo]: ...


    class SearchSpec(vmodl.DynamicData):
        @property
        def query(self) -> List[DatastoreBrowser.Query]: ...
        @property
        def details(self) -> DatastoreBrowser.FileInfo.Details: ...
        @property
        def searchCaseInsensitive(self) -> bool: ...
        @property
        def matchPattern(self) -> List[str]: ...
        @property
        def sortFoldersFirst(self) -> bool: ...


    class TemplateVmConfigInfo(DatastoreBrowser.VmConfigInfo): ...


    class TemplateVmConfigQuery(DatastoreBrowser.VmConfigQuery): ...


    class VmConfigInfo(DatastoreBrowser.FileInfo):
        @property
        def configVersion(self) -> int: ...
        @property
        def encryption(self) -> DatastoreBrowser.VmConfigInfo.VmConfigEncryptionInfo: ...


        class VmConfigEncryptionInfo(vmodl.DynamicData):
            @property
            def keyId(self) -> vim.encryption.CryptoKeyId: ...


    class VmConfigQuery(DatastoreBrowser.Query):
        @property
        def filter(self) -> DatastoreBrowser.VmConfigQuery.Filter: ...
        @property
        def details(self) -> DatastoreBrowser.VmConfigQuery.Details: ...


        class Filter(vmodl.DynamicData):
            @property
            def matchConfigVersion(self) -> List[int]: ...
            @property
            def encrypted(self) -> bool: ...


    class VmDiskInfo(DatastoreBrowser.FileInfo):
        @property
        def diskType(self) -> type: ...
        @property
        def capacityKb(self) -> long: ...
        @property
        def hardwareVersion(self) -> int: ...
        @property
        def controllerType(self) -> type: ...
        @property
        def diskExtents(self) -> List[str]: ...
        @property
        def thin(self) -> bool: ...
        @property
        def encryption(self) -> DatastoreBrowser.VmDiskInfo.VmDiskEncryptionInfo: ...


        class VmDiskEncryptionInfo(vmodl.DynamicData):
            @property
            def keyId(self) -> vim.encryption.CryptoKeyId: ...


    class VmDiskQuery(DatastoreBrowser.Query):
        @property
        def filter(self) -> DatastoreBrowser.VmDiskQuery.Filter: ...
        @property
        def details(self) -> DatastoreBrowser.VmDiskQuery.Details: ...


    class VmLogInfo(DatastoreBrowser.FileInfo): ...


    class VmLogQuery(DatastoreBrowser.Query): ...


    class VmNvramInfo(DatastoreBrowser.FileInfo): ...


    class VmNvramQuery(DatastoreBrowser.Query): ...


    class VmSnapshotInfo(DatastoreBrowser.FileInfo): ...


    class VmSnapshotQuery(DatastoreBrowser.Query): ...


class DatastoreSystem(ManagedObject):
    @property
    def datastore(self) -> List[vim.Datastore]: ...
    @property
    def capabilities(self) -> DatastoreSystem.Capabilities: ...
    def UpdateLocalSwapDatastore(self, datastore: vim.Datastore) -> NoneType: ...
    def QueryAvailableDisksForVmfs(self, datastore: vim.Datastore) -> List[ScsiDisk]: ...
    def QueryVmfsDatastoreCreateOptions(self, devicePath: str, vmfsMajorVersion: int) -> List[VmfsDatastoreOption]: ...
    def CreateVmfsDatastore(self, spec: VmfsDatastoreCreateSpec) -> vim.Datastore: ...
    def QueryVmfsDatastoreExtendOptions(self, datastore: vim.Datastore, devicePath: str, suppressExpandCandidates: bool) -> List[VmfsDatastoreOption]: ...
    def QueryVmfsDatastoreExpandOptions(self, datastore: vim.Datastore) -> List[VmfsDatastoreOption]: ...
    def ExtendVmfsDatastore(self, datastore: vim.Datastore, spec: VmfsDatastoreExtendSpec) -> vim.Datastore: ...
    def EnableClusteredVmdkSupport(self, datastore: vim.Datastore) -> NoneType: ...
    def DisableClusteredVmdkSupport(self, datastore: vim.Datastore) -> NoneType: ...
    def ExpandVmfsDatastore(self, datastore: vim.Datastore, spec: VmfsDatastoreExpandSpec) -> vim.Datastore: ...
    def CreateNasDatastore(self, spec: NasVolume.Specification) -> vim.Datastore: ...
    def CreateLocalDatastore(self, name: str, path: str) -> vim.Datastore: ...
    def CreateVvolDatastore(self, spec: DatastoreSystem.VvolDatastoreSpec) -> vim.Datastore: ...
    def RemoveDatastore(self, datastore: vim.Datastore) -> NoneType: ...
    def SetMaxQueueDepth(self, datastore: vim.Datastore, maxQdepth: long) -> NoneType: ...
    def QueryMaxQueueDepth(self, datastore: vim.Datastore) -> long: ...
    def RemoveDatastoreEx(self, datastore: List[vim.Datastore]) -> vim.Task: ...
    def ConfigureDatastorePrincipal(self, userName: str, password: str) -> NoneType: ...
    def QueryUnresolvedVmfsVolumes(self) -> List[UnresolvedVmfsVolume]: ...
    def ResignatureUnresolvedVmfsVolume(self, resolutionSpec: UnresolvedVmfsResignatureSpec) -> vim.Task: ...


    class Capabilities(vmodl.DynamicData):
        @property
        def nfsMountCreationRequired(self) -> bool: ...
        @property
        def nfsMountCreationSupported(self) -> bool: ...
        @property
        def localDatastoreSupported(self) -> bool: ...
        @property
        def vmfsExtentExpansionSupported(self) -> bool: ...


    class DatastoreResult(vmodl.DynamicData):
        @property
        def key(self) -> vim.Datastore: ...
        @property
        def fault(self) -> vmodl.MethodFault: ...


    class VvolDatastoreSpec(vmodl.DynamicData):
        @property
        def name(self) -> str: ...
        @property
        def scId(self) -> str: ...


class DateTimeSystem(ManagedObject):
    @property
    def dateTimeInfo(self) -> DateTimeInfo: ...
    def UpdateConfig(self, config: DateTimeConfig) -> NoneType: ...
    def QueryAvailableTimeZones(self) -> List[DateTimeSystem.TimeZone]: ...
    def QueryDateTime(self) -> datetime: ...
    def UpdateDateTime(self, dateTime: datetime) -> NoneType: ...
    def Refresh(self) -> NoneType: ...
    def TestTimeService(self) -> DateTimeSystem.ServiceTestResult: ...


    class ServiceTestResult(vmodl.DynamicData):
        @property
        def workingNormally(self) -> bool: ...
        @property
        def report(self) -> List[str]: ...


    class TimeZone(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def name(self) -> str: ...
        @property
        def description(self) -> str: ...
        @property
        def gmtOffset(self) -> int: ...


class DiagnosticSystem(ManagedObject):
    @property
    def activePartition(self) -> DiagnosticPartition: ...
    def QueryAvailablePartition(self) -> List[DiagnosticPartition]: ...
    def SelectActivePartition(self, partition: ScsiDisk.Partition) -> NoneType: ...
    def QueryPartitionCreateOptions(self, storageType: str, diagnosticType: str) -> List[DiagnosticPartition.CreateOption]: ...
    def QueryPartitionCreateDesc(self, diskUuid: str, diagnosticType: str) -> DiagnosticPartition.CreateDescription: ...
    def CreateDiagnosticPartition(self, spec: DiagnosticPartition.CreateSpec) -> NoneType: ...


class DirectoryStore(AuthenticationStore): ...


class EsxAgentHostManager(ManagedObject):
    @property
    def configInfo(self) -> EsxAgentHostManager.ConfigInfo: ...
    def UpdateConfig(self, configInfo: EsxAgentHostManager.ConfigInfo) -> NoneType: ...


class FirewallSystem(vim.ExtensibleManagedObject):
    @property
    def firewallInfo(self) -> FirewallInfo: ...
    def UpdateDefaultPolicy(self, defaultPolicy: FirewallInfo.DefaultPolicy) -> NoneType: ...
    def EnableRuleset(self, id: str) -> NoneType: ...
    def DisableRuleset(self, id: str) -> NoneType: ...
    def UpdateRuleset(self, id: str, spec: Ruleset.RulesetSpec) -> NoneType: ...
    def Refresh(self) -> NoneType: ...


class FirmwareSystem(ManagedObject):
    def ResetToFactoryDefaults(self) -> NoneType: ...
    def BackupConfiguration(self) -> str: ...
    def QueryConfigUploadURL(self) -> str: ...
    def RestoreConfiguration(self, force: bool) -> NoneType: ...


class GraphicsManager(vim.ExtensibleManagedObject):
    @property
    def graphicsInfo(self) -> List[GraphicsInfo]: ...
    @property
    def graphicsConfig(self) -> GraphicsConfig: ...
    @property
    def sharedPassthruGpuTypes(self) -> List[str]: ...
    @property
    def sharedGpuCapabilities(self) -> List[SharedGpuCapabilities]: ...
    def RetrieveVgpuDeviceInfo(self) -> List[vim.vm.VgpuDeviceInfo]: ...
    def RetrieveVgpuProfileInfo(self) -> List[vim.vm.VgpuProfileInfo]: ...
    def Refresh(self) -> NoneType: ...
    def IsSharedGraphicsActive(self) -> bool: ...
    def UpdateGraphicsConfig(self, config: GraphicsConfig) -> NoneType: ...


class HealthStatusSystem(ManagedObject):
    @property
    def runtime(self) -> HealthStatusSystem.Runtime: ...
    def Refresh(self) -> NoneType: ...
    def ResetSystemHealthInfo(self) -> NoneType: ...
    def ClearSystemEventLog(self) -> NoneType: ...
    def FetchSystemEventLog(self) -> List[SystemEventInfo]: ...


    class Runtime(vmodl.DynamicData):
        @property
        def systemHealthInfo(self) -> SystemHealthInfo: ...
        @property
        def hardwareStatusInfo(self) -> HardwareStatusInfo: ...


class HostAccessManager(ManagedObject):
    @property
    def lockdownMode(self) -> HostAccessManager.LockdownMode: ...
    def RetrieveAccessEntries(self) -> List[HostAccessManager.AccessEntry]: ...
    def ChangeAccessMode(self, principal: str, isGroup: bool, accessMode: HostAccessManager.AccessMode) -> NoneType: ...
    def QuerySystemUsers(self) -> List[str]: ...
    def UpdateSystemUsers(self, users: List[str]) -> NoneType: ...
    def QueryLockdownExceptions(self) -> List[str]: ...
    def UpdateLockdownExceptions(self, users: List[str]) -> NoneType: ...
    def ChangeLockdownMode(self, mode: HostAccessManager.LockdownMode) -> NoneType: ...


    class AccessEntry(vmodl.DynamicData):
        @property
        def principal(self) -> str: ...
        @property
        def group(self) -> bool: ...
        @property
        def accessMode(self) -> HostAccessManager.AccessMode: ...


    class AccessMode(Enum):
        accessNone = "accessnone"
        accessAdmin = "accessadmin"
        accessNoAccess = "accessnoaccess"
        accessReadOnly = "accessreadonly"
        accessOther = "accessother"


    class LockdownMode(Enum):
        lockdownDisabled = "lockdowndisabled"
        lockdownNormal = "lockdownnormal"
        lockdownStrict = "lockdownstrict"


class ImageConfigManager(ManagedObject):
    def QueryHostAcceptanceLevel(self) -> str: ...
    def QueryHostImageProfile(self) -> ImageConfigManager.ImageProfileSummary: ...
    def UpdateAcceptanceLevel(self, newAcceptanceLevel: str) -> NoneType: ...
    def FetchSoftwarePackages(self) -> List[SoftwarePackage]: ...
    def InstallDate(self) -> datetime: ...


    class ImageProfileSummary(vmodl.DynamicData):
        @property
        def name(self) -> str: ...
        @property
        def vendor(self) -> str: ...


    class AcceptanceLevel(Enum):
        vmware_certified = "vmware_certified"
        vmware_accepted = "vmware_accepted"
        partner = "partner"
        community = "community"


class IscsiManager(ManagedObject):
    def QueryVnicStatus(self, vnicDevice: str) -> IscsiManager.IscsiStatus: ...
    def QueryPnicStatus(self, pnicDevice: str) -> IscsiManager.IscsiStatus: ...
    def QueryBoundVnics(self, iScsiHbaName: str) -> List[IscsiManager.IscsiPortInfo]: ...
    def QueryCandidateNics(self, iScsiHbaName: str) -> List[IscsiManager.IscsiPortInfo]: ...
    def BindVnic(self, iScsiHbaName: str, vnicDevice: str) -> NoneType: ...
    def UnbindVnic(self, iScsiHbaName: str, vnicDevice: str, force: bool) -> NoneType: ...
    def QueryMigrationDependencies(self, pnicDevice: List[str]) -> IscsiManager.IscsiMigrationDependency: ...


    class IscsiDependencyEntity(vmodl.DynamicData):
        @property
        def pnicDevice(self) -> str: ...
        @property
        def vnicDevice(self) -> str: ...
        @property
        def vmhbaName(self) -> str: ...


    class IscsiMigrationDependency(vmodl.DynamicData):
        @property
        def migrationAllowed(self) -> bool: ...
        @property
        def disallowReason(self) -> IscsiManager.IscsiStatus: ...
        @property
        def dependency(self) -> List[IscsiManager.IscsiDependencyEntity]: ...


    class IscsiPortInfo(vmodl.DynamicData):
        @property
        def vnicDevice(self) -> str: ...
        @property
        def vnic(self) -> VirtualNic: ...
        @property
        def pnicDevice(self) -> str: ...
        @property
        def pnic(self) -> PhysicalNic: ...
        @property
        def switchName(self) -> str: ...
        @property
        def switchUuid(self) -> str: ...
        @property
        def portgroupName(self) -> str: ...
        @property
        def portgroupKey(self) -> str: ...
        @property
        def portKey(self) -> str: ...
        @property
        def opaqueNetworkId(self) -> str: ...
        @property
        def opaqueNetworkType(self) -> str: ...
        @property
        def opaqueNetworkName(self) -> str: ...
        @property
        def externalId(self) -> str: ...
        @property
        def complianceStatus(self) -> IscsiManager.IscsiStatus: ...
        @property
        def pathStatus(self) -> str: ...


        class PathStatus(Enum):
            notUsed = "notused"
            active = "active"
            standBy = "standby"
            lastActive = "lastactive"


    class IscsiStatus(vmodl.DynamicData):
        @property
        def reason(self) -> List[vmodl.MethodFault]: ...


class KernelModuleSystem(ManagedObject):
    def QueryModules(self) -> List[KernelModuleSystem.ModuleInfo]: ...
    def UpdateModuleOptionString(self, name: str, options: str) -> NoneType: ...
    def QueryConfiguredModuleOptionString(self, name: str) -> str: ...


    class ModuleInfo(vmodl.DynamicData):
        @property
        def id(self) -> int: ...
        @property
        def name(self) -> str: ...
        @property
        def version(self) -> str: ...
        @property
        def filename(self) -> str: ...
        @property
        def optionString(self) -> str: ...
        @property
        def loaded(self) -> bool: ...
        @property
        def enabled(self) -> bool: ...
        @property
        def useCount(self) -> int: ...
        @property
        def readOnlySection(self) -> KernelModuleSystem.ModuleInfo.SectionInfo: ...
        @property
        def writableSection(self) -> KernelModuleSystem.ModuleInfo.SectionInfo: ...
        @property
        def textSection(self) -> KernelModuleSystem.ModuleInfo.SectionInfo: ...
        @property
        def dataSection(self) -> KernelModuleSystem.ModuleInfo.SectionInfo: ...
        @property
        def bssSection(self) -> KernelModuleSystem.ModuleInfo.SectionInfo: ...


        class SectionInfo(vmodl.DynamicData):
            @property
            def address(self) -> long: ...
            @property
            def length(self) -> int: ...


class LocalAccountManager(ManagedObject):
    def CreateUser(self, user: LocalAccountManager.AccountSpecification) -> NoneType: ...
    def UpdateUser(self, user: LocalAccountManager.AccountSpecification) -> NoneType: ...
    def CreateGroup(self, group: LocalAccountManager.AccountSpecification) -> NoneType: ...
    def RemoveUser(self, userName: str) -> NoneType: ...
    def RemoveGroup(self, groupName: str) -> NoneType: ...
    def AssignUserToGroup(self, user: str, group: str) -> NoneType: ...
    def UnassignUserFromGroup(self, user: str, group: str) -> NoneType: ...
    def ChangePassword(self, user: str, oldPassword: str, newPassword: str) -> NoneType: ...


    class AccountSpecification(vmodl.DynamicData):
        @property
        def id(self) -> str: ...
        @property
        def password(self) -> str: ...
        @property
        def description(self) -> str: ...


    class PosixAccountSpecification(LocalAccountManager.AccountSpecification):
        @property
        def posixId(self) -> int: ...
        @property
        def shellAccess(self) -> bool: ...


class LocalAuthentication(AuthenticationStore): ...


class MemoryManagerSystem(vim.ExtensibleManagedObject):
    @property
    def consoleReservationInfo(self) -> MemoryManagerSystem.ServiceConsoleReservationInfo: ...
    @property
    def virtualMachineReservationInfo(self) -> MemoryManagerSystem.VirtualMachineReservationInfo: ...
    def ReconfigureServiceConsoleReservation(self, cfgBytes: long) -> NoneType: ...
    def ReconfigureVirtualMachineReservation(self, spec: MemoryManagerSystem.VirtualMachineReservationSpec) -> NoneType: ...


    class ServiceConsoleReservationInfo(vmodl.DynamicData):
        @property
        def serviceConsoleReservedCfg(self) -> long: ...
        @property
        def serviceConsoleReserved(self) -> long: ...
        @property
        def unreserved(self) -> long: ...


    class VirtualMachineReservationInfo(vmodl.DynamicData):
        @property
        def virtualMachineMin(self) -> long: ...
        @property
        def virtualMachineMax(self) -> long: ...
        @property
        def virtualMachineReserved(self) -> long: ...
        @property
        def allocationPolicy(self) -> str: ...


        class AllocationPolicy(Enum):
            swapNone = "swapnone"
            swapSome = "swapsome"
            swapMost = "swapmost"


    class VirtualMachineReservationSpec(vmodl.DynamicData):
        @property
        def virtualMachineReserved(self) -> long: ...
        @property
        def allocationPolicy(self) -> str: ...


class MessageBusProxy(ManagedObject): ...


class NetworkSystem(vim.ExtensibleManagedObject):
    @property
    def capabilities(self) -> NetCapabilities: ...
    @property
    def networkInfo(self) -> NetworkInfo: ...
    @property
    def offloadCapabilities(self) -> NetOffloadCapabilities: ...
    @property
    def networkConfig(self) -> NetworkConfig: ...
    @property
    def dnsConfig(self) -> DnsConfig: ...
    @property
    def ipRouteConfig(self) -> IpRouteConfig: ...
    @property
    def consoleIpRouteConfig(self) -> IpRouteConfig: ...
    def UpdateNetworkConfig(self, config: NetworkConfig, changeMode: str) -> NetworkConfig.Result: ...
    def UpdateDnsConfig(self, config: DnsConfig) -> NoneType: ...
    def UpdateIpRouteConfig(self, config: IpRouteConfig) -> NoneType: ...
    def UpdateConsoleIpRouteConfig(self, config: IpRouteConfig) -> NoneType: ...
    def UpdateIpRouteTableConfig(self, config: IpRouteTableConfig) -> NoneType: ...
    def AddVirtualSwitch(self, vswitchName: str, spec: VirtualSwitch.Specification) -> NoneType: ...
    def RemoveVirtualSwitch(self, vswitchName: str) -> NoneType: ...
    def UpdateVirtualSwitch(self, vswitchName: str, spec: VirtualSwitch.Specification) -> NoneType: ...
    def AddPortGroup(self, portgrp: PortGroup.Specification) -> NoneType: ...
    def RemovePortGroup(self, pgName: str) -> NoneType: ...
    def UpdatePortGroup(self, pgName: str, portgrp: PortGroup.Specification) -> NoneType: ...
    def UpdatePhysicalNicLinkSpeed(self, device: str, linkSpeed: PhysicalNic.LinkSpeedDuplex) -> NoneType: ...
    def QueryNetworkHint(self, device: List[str]) -> List[PhysicalNic.NetworkHint]: ...
    def AddVirtualNic(self, portgroup: str, nic: VirtualNic.Specification) -> str: ...
    def RemoveVirtualNic(self, device: str) -> NoneType: ...
    def UpdateVirtualNic(self, device: str, nic: VirtualNic.Specification) -> NoneType: ...
    def AddServiceConsoleVirtualNic(self, portgroup: str, nic: VirtualNic.Specification) -> str: ...
    def RemoveServiceConsoleVirtualNic(self, device: str) -> NoneType: ...
    def UpdateServiceConsoleVirtualNic(self, device: str, nic: VirtualNic.Specification) -> NoneType: ...
    def RestartServiceConsoleVirtualNic(self, device: str) -> NoneType: ...
    def Refresh(self) -> NoneType: ...


class NvdimmSystem(ManagedObject):
    @property
    def nvdimmSystemInfo(self) -> NvdimmSystem.NvdimmSystemInfo: ...
    def CreateNamespace(self, createSpec: NvdimmSystem.NamespaceCreateSpec) -> vim.Task: ...
    def CreatePMemNamespace(self, createSpec: NvdimmSystem.PMemNamespaceCreateSpec) -> vim.Task: ...
    def DeleteNamespace(self, deleteSpec: NvdimmSystem.NamespaceDeleteSpec) -> vim.Task: ...
    def DeleteBlockNamespaces(self) -> vim.Task: ...


    class DimmInfo(vmodl.DynamicData):
        @property
        def dimmHandle(self) -> int: ...
        @property
        def healthInfo(self) -> NvdimmSystem.HealthInfo: ...
        @property
        def totalCapacity(self) -> long: ...
        @property
        def persistentCapacity(self) -> long: ...
        @property
        def availablePersistentCapacity(self) -> long: ...
        @property
        def volatileCapacity(self) -> long: ...
        @property
        def availableVolatileCapacity(self) -> long: ...
        @property
        def blockCapacity(self) -> long: ...
        @property
        def regionInfo(self) -> List[NvdimmSystem.RegionInfo]: ...
        @property
        def representationString(self) -> str: ...


    class Guid(vmodl.DynamicData):
        @property
        def uuid(self) -> str: ...


    class HealthInfo(vmodl.DynamicData):
        @property
        def healthStatus(self) -> str: ...
        @property
        def healthInformation(self) -> str: ...
        @property
        def stateFlagInfo(self) -> List[str]: ...
        @property
        def dimmTemperature(self) -> int: ...
        @property
        def dimmTemperatureThreshold(self) -> int: ...
        @property
        def spareBlocksPercentage(self) -> int: ...
        @property
        def spareBlockThreshold(self) -> int: ...
        @property
        def dimmLifespanPercentage(self) -> int: ...
        @property
        def esTemperature(self) -> int: ...
        @property
        def esTemperatureThreshold(self) -> int: ...
        @property
        def esLifespanPercentage(self) -> int: ...


        class StateFlag(Enum):
            normal = "normal"
            error = "error"


    class InterleaveSetInfo(vmodl.DynamicData):
        @property
        def setId(self) -> int: ...
        @property
        def rangeType(self) -> str: ...
        @property
        def baseAddress(self) -> long: ...
        @property
        def size(self) -> long: ...
        @property
        def availableSize(self) -> long: ...
        @property
        def deviceList(self) -> List[int]: ...
        @property
        def state(self) -> str: ...


        class InterleaveSetState(Enum):
            invalid = "invalid"
            active = "active"


    class NamespaceCreateSpec(vmodl.DynamicData):
        @property
        def friendlyName(self) -> str: ...
        @property
        def blockSize(self) -> long: ...
        @property
        def blockCount(self) -> long: ...
        @property
        def type(self) -> str: ...
        @property
        def locationID(self) -> int: ...


    class NamespaceDeleteSpec(vmodl.DynamicData):
        @property
        def uuid(self) -> str: ...


    class NamespaceDetails(vmodl.DynamicData):
        @property
        def uuid(self) -> str: ...
        @property
        def friendlyName(self) -> str: ...
        @property
        def size(self) -> long: ...
        @property
        def type(self) -> str: ...
        @property
        def namespaceHealthStatus(self) -> str: ...
        @property
        def interleavesetID(self) -> int: ...
        @property
        def state(self) -> str: ...


        class NamespaceHealthStatus(Enum):
            normal = "normal"
            missing = "missing"
            labelMissing = "labelmissing"
            interleaveBroken = "interleavebroken"
            labelInconsistent = "labelinconsistent"


        class NamespaceState(Enum):
            invalid = "invalid"
            notInUse = "notinuse"
            inUse = "inuse"


    class NamespaceInfo(vmodl.DynamicData):
        @property
        def uuid(self) -> str: ...
        @property
        def friendlyName(self) -> str: ...
        @property
        def blockSize(self) -> long: ...
        @property
        def blockCount(self) -> long: ...
        @property
        def type(self) -> str: ...
        @property
        def namespaceHealthStatus(self) -> str: ...
        @property
        def locationID(self) -> int: ...
        @property
        def state(self) -> str: ...


    class NvdimmSystemInfo(vmodl.DynamicData):
        @property
        def summary(self) -> NvdimmSystem.Summary: ...
        @property
        def dimms(self) -> List[int]: ...
        @property
        def dimmInfo(self) -> List[NvdimmSystem.DimmInfo]: ...
        @property
        def interleaveSet(self) -> List[int]: ...
        @property
        def iSetInfo(self) -> List[NvdimmSystem.InterleaveSetInfo]: ...
        @property
        def namespace(self) -> List[NvdimmSystem.Guid]: ...
        @property
        def nsInfo(self) -> List[NvdimmSystem.NamespaceInfo]: ...
        @property
        def nsDetails(self) -> List[NvdimmSystem.NamespaceDetails]: ...


    class PMemNamespaceCreateSpec(vmodl.DynamicData):
        @property
        def friendlyName(self) -> str: ...
        @property
        def size(self) -> long: ...
        @property
        def interleavesetID(self) -> int: ...


    class RegionInfo(vmodl.DynamicData):
        @property
        def regionId(self) -> int: ...
        @property
        def setId(self) -> int: ...
        @property
        def rangeType(self) -> str: ...
        @property
        def startAddr(self) -> long: ...
        @property
        def size(self) -> long: ...
        @property
        def offset(self) -> long: ...


    class Summary(vmodl.DynamicData):
        @property
        def numDimms(self) -> int: ...
        @property
        def healthStatus(self) -> str: ...
        @property
        def totalCapacity(self) -> long: ...
        @property
        def persistentCapacity(self) -> long: ...
        @property
        def blockCapacity(self) -> long: ...
        @property
        def availableCapacity(self) -> long: ...
        @property
        def numInterleavesets(self) -> int: ...
        @property
        def numNamespaces(self) -> int: ...


        class ConfigSummary(vmodl.DynamicData):
            @property
            def name(self) -> str: ...
            @property
            def port(self) -> int: ...
            @property
            def sslThumbprint(self) -> str: ...
            @property
            def product(self) -> vim.AboutInfo: ...
            @property
            def vmotionEnabled(self) -> bool: ...
            @property
            def faultToleranceEnabled(self) -> bool: ...
            @property
            def featureVersion(self) -> List[FeatureVersionInfo]: ...
            @property
            def agentVmDatastore(self) -> vim.Datastore: ...
            @property
            def agentVmNetwork(self) -> vim.Network: ...


        class GatewaySummary(vmodl.DynamicData):
            @property
            def gatewayType(self) -> str: ...
            @property
            def gatewayId(self) -> str: ...


        class HardwareSummary(vmodl.DynamicData):
            @property
            def vendor(self) -> str: ...
            @property
            def model(self) -> str: ...
            @property
            def uuid(self) -> str: ...
            @property
            def otherIdentifyingInfo(self) -> List[SystemIdentificationInfo]: ...
            @property
            def memorySize(self) -> long: ...
            @property
            def cpuModel(self) -> str: ...
            @property
            def cpuMhz(self) -> int: ...
            @property
            def numCpuPkgs(self) -> short: ...
            @property
            def numCpuCores(self) -> short: ...
            @property
            def numCpuThreads(self) -> short: ...
            @property
            def numNics(self) -> int: ...
            @property
            def numHBAs(self) -> int: ...


        class QuickStats(vmodl.DynamicData):
            @property
            def overallCpuUsage(self) -> int: ...
            @property
            def overallMemoryUsage(self) -> int: ...
            @property
            def distributedCpuFairness(self) -> int: ...
            @property
            def distributedMemoryFairness(self) -> int: ...
            @property
            def availablePMemCapacity(self) -> int: ...
            @property
            def uptime(self) -> int: ...


    class NamespaceType(Enum):
        blockNamespace = "blocknamespace"
        persistentNamespace = "persistentnamespace"


    class RangeType(Enum):
        volatileRange = "volatilerange"
        persistentRange = "persistentrange"
        controlRange = "controlrange"
        blockRange = "blockrange"
        volatileVirtualDiskRange = "volatilevirtualdiskrange"
        volatileVirtualCDRange = "volatilevirtualcdrange"
        persistentVirtualDiskRange = "persistentvirtualdiskrange"
        persistentVirtualCDRange = "persistentvirtualcdrange"


class PatchManager(ManagedObject):
    def Check(self, metaUrls: List[str], bundleUrls: List[str], spec: PatchManager.PatchManagerOperationSpec) -> vim.Task: ...
    def Scan(self, repository: PatchManager.Locator, updateID: List[str]) -> vim.Task: ...
    def ScanV2(self, metaUrls: List[str], bundleUrls: List[str], spec: PatchManager.PatchManagerOperationSpec) -> vim.Task: ...
    def Stage(self, metaUrls: List[str], bundleUrls: List[str], vibUrls: List[str], spec: PatchManager.PatchManagerOperationSpec) -> vim.Task: ...
    def Install(self, repository: PatchManager.Locator, updateID: str, force: bool) -> vim.Task: ...
    def InstallV2(self, metaUrls: List[str], bundleUrls: List[str], vibUrls: List[str], spec: PatchManager.PatchManagerOperationSpec) -> vim.Task: ...
    def Uninstall(self, bulletinIds: List[str], spec: PatchManager.PatchManagerOperationSpec) -> vim.Task: ...
    def Query(self, spec: PatchManager.PatchManagerOperationSpec) -> vim.Task: ...


    class Locator(vmodl.DynamicData):
        @property
        def url(self) -> str: ...
        @property
        def proxy(self) -> str: ...


    class PatchManagerOperationSpec(vmodl.DynamicData):
        @property
        def proxy(self) -> str: ...
        @property
        def port(self) -> int: ...
        @property
        def userName(self) -> str: ...
        @property
        def password(self) -> str: ...
        @property
        def cmdOption(self) -> str: ...


    class Status(vmodl.DynamicData):
        @property
        def id(self) -> str: ...
        @property
        def applicable(self) -> bool: ...
        @property
        def reason(self) -> List[str]: ...
        @property
        def integrity(self) -> str: ...
        @property
        def installed(self) -> bool: ...
        @property
        def installState(self) -> List[str]: ...
        @property
        def prerequisitePatch(self) -> List[PatchManager.Status.PrerequisitePatch]: ...
        @property
        def restartRequired(self) -> bool: ...
        @property
        def reconnectRequired(self) -> bool: ...
        @property
        def vmOffRequired(self) -> bool: ...
        @property
        def supersededPatchIds(self) -> List[str]: ...


        class PrerequisitePatch(vmodl.DynamicData):
            @property
            def id(self) -> str: ...
            @property
            def installState(self) -> List[str]: ...


        class InstallState(Enum):
            hostRestarted = "hostrestarted"
            imageActive = "imageactive"


        class Integrity(Enum):
            validated = "validated"
            keyNotFound = "keynotfound"
            keyRevoked = "keyrevoked"
            keyExpired = "keyexpired"
            digestMismatch = "digestmismatch"
            notEnoughSignatures = "notenoughsignatures"
            validationError = "validationerror"


        class Reason(Enum):
            obsoleted = "obsoleted"
            missingPatch = "missingpatch"
            missingLib = "missinglib"
            hasDependentPatch = "hasdependentpatch"
            conflictPatch = "conflictpatch"
            conflictLib = "conflictlib"


class PciPassthruSystem(vim.ExtensibleManagedObject):
    @property
    def pciPassthruInfo(self) -> List[PciPassthruInfo]: ...
    @property
    def sriovDevicePoolInfo(self) -> List[SriovDevicePoolInfo]: ...
    def Refresh(self) -> NoneType: ...
    def UpdatePassthruConfig(self, config: List[PciPassthruConfig]) -> NoneType: ...


class PowerSystem(ManagedObject):
    @property
    def capability(self) -> PowerSystem.Capability: ...
    @property
    def info(self) -> PowerSystem.Info: ...
    def ConfigurePolicy(self, key: int) -> NoneType: ...


    class Info(vmodl.DynamicData):
        @property
        def currentPolicy(self) -> PowerSystem.PowerPolicy: ...


    class PowerPolicy(vmodl.DynamicData):
        @property
        def key(self) -> int: ...
        @property
        def name(self) -> str: ...
        @property
        def shortName(self) -> str: ...
        @property
        def description(self) -> str: ...


class ServiceSystem(vim.ExtensibleManagedObject):
    @property
    def serviceInfo(self) -> ServiceInfo: ...
    def UpdatePolicy(self, id: str, policy: str) -> NoneType: ...
    def Start(self, id: str) -> NoneType: ...
    def Stop(self, id: str) -> NoneType: ...
    def Restart(self, id: str) -> NoneType: ...
    def Uninstall(self, id: str) -> NoneType: ...
    def Refresh(self) -> NoneType: ...


class SnmpSystem(ManagedObject):
    @property
    def configuration(self) -> SnmpSystem.SnmpConfigSpec: ...
    @property
    def limits(self) -> SnmpSystem.AgentLimits: ...
    def ReconfigureSnmpAgent(self, spec: SnmpSystem.SnmpConfigSpec) -> NoneType: ...
    def SendTestNotification(self) -> NoneType: ...


    class AgentLimits(vmodl.DynamicData):
        @property
        def maxReadOnlyCommunities(self) -> int: ...
        @property
        def maxTrapDestinations(self) -> int: ...
        @property
        def maxCommunityLength(self) -> int: ...
        @property
        def maxBufferSize(self) -> int: ...
        @property
        def capability(self) -> SnmpSystem.AgentLimits.Capability: ...


        class Capability(Enum):
            COMPLETE = "complete"
            DIAGNOSTICS = "diagnostics"
            CONFIGURATION = "configuration"


    class SnmpConfigSpec(vmodl.DynamicData):
        @property
        def enabled(self) -> bool: ...
        @property
        def port(self) -> int: ...
        @property
        def readOnlyCommunities(self) -> List[str]: ...
        @property
        def trapTargets(self) -> List[SnmpSystem.SnmpConfigSpec.Destination]: ...
        @property
        def option(self) -> List[vim.KeyValue]: ...


        class Destination(vmodl.DynamicData):
            @property
            def hostName(self) -> str: ...
            @property
            def port(self) -> int: ...
            @property
            def community(self) -> str: ...


class StorageSystem(vim.ExtensibleManagedObject):
    @property
    def storageDeviceInfo(self) -> StorageDeviceInfo: ...
    @property
    def fileSystemVolumeInfo(self) -> FileSystemVolumeInfo: ...
    @property
    def systemFile(self) -> List[str]: ...
    @property
    def multipathStateInfo(self) -> MultipathStateInfo: ...
    def RetrieveDiskPartitionInfo(self, devicePath: List[str]) -> List[DiskPartitionInfo]: ...
    def ComputeDiskPartitionInfo(self, devicePath: str, layout: DiskPartitionInfo.Layout, partitionFormat: str) -> DiskPartitionInfo: ...
    def ComputeDiskPartitionInfoForResize(self, partition: ScsiDisk.Partition, blockRange: DiskPartitionInfo.BlockRange, partitionFormat: str) -> DiskPartitionInfo: ...
    def UpdateDiskPartitions(self, devicePath: str, spec: DiskPartitionInfo.Specification) -> NoneType: ...
    def FormatVmfs(self, createSpec: VmfsVolume.Specification) -> VmfsVolume: ...
    def MountVmfsVolume(self, vmfsUuid: str) -> NoneType: ...
    def UnmountVmfsVolume(self, vmfsUuid: str) -> NoneType: ...
    def UnmountVmfsVolumeEx(self, vmfsUuid: List[str]) -> vim.Task: ...
    def MountVmfsVolumeEx(self, vmfsUuid: List[str]) -> vim.Task: ...
    def UnmapVmfsVolumeEx(self, vmfsUuid: List[str]) -> vim.Task: ...
    def DeleteVmfsVolumeState(self, vmfsUuid: str) -> NoneType: ...
    def RescanVmfs(self) -> NoneType: ...
    def AttachVmfsExtent(self, vmfsPath: str, extent: ScsiDisk.Partition) -> NoneType: ...
    def ExpandVmfsExtent(self, vmfsPath: str, extent: ScsiDisk.Partition) -> NoneType: ...
    def UpgradeVmfs(self, vmfsPath: str) -> NoneType: ...
    def UpgradeVmLayout(self) -> NoneType: ...
    def QueryUnresolvedVmfsVolume(self) -> List[UnresolvedVmfsVolume]: ...
    def ResolveMultipleUnresolvedVmfsVolumes(self, resolutionSpec: List[UnresolvedVmfsResolutionSpec]) -> List[UnresolvedVmfsResolutionResult]: ...
    def ResolveMultipleUnresolvedVmfsVolumesEx(self, resolutionSpec: List[UnresolvedVmfsResolutionSpec]) -> vim.Task: ...
    def UnmountForceMountedVmfsVolume(self, vmfsUuid: str) -> NoneType: ...
    def RescanHba(self, hbaDevice: str) -> NoneType: ...
    def RescanAllHba(self) -> NoneType: ...
    def UpdateSoftwareInternetScsiEnabled(self, enabled: bool) -> NoneType: ...
    def UpdateInternetScsiDiscoveryProperties(self, iScsiHbaDevice: str, discoveryProperties: InternetScsiHba.DiscoveryProperties) -> NoneType: ...
    def UpdateInternetScsiAuthenticationProperties(self, iScsiHbaDevice: str, authenticationProperties: InternetScsiHba.AuthenticationProperties, targetSet: InternetScsiHba.TargetSet) -> NoneType: ...
    def UpdateInternetScsiDigestProperties(self, iScsiHbaDevice: str, targetSet: InternetScsiHba.TargetSet, digestProperties: InternetScsiHba.DigestProperties) -> NoneType: ...
    def UpdateInternetScsiAdvancedOptions(self, iScsiHbaDevice: str, targetSet: InternetScsiHba.TargetSet, options: List[InternetScsiHba.ParamValue]) -> NoneType: ...
    def UpdateInternetScsiIPProperties(self, iScsiHbaDevice: str, ipProperties: InternetScsiHba.IPProperties) -> NoneType: ...
    def UpdateInternetScsiName(self, iScsiHbaDevice: str, iScsiName: str) -> NoneType: ...
    def UpdateInternetScsiAlias(self, iScsiHbaDevice: str, iScsiAlias: str) -> NoneType: ...
    def AddInternetScsiSendTargets(self, iScsiHbaDevice: str, targets: List[InternetScsiHba.SendTarget]) -> NoneType: ...
    def RemoveInternetScsiSendTargets(self, iScsiHbaDevice: str, targets: List[InternetScsiHba.SendTarget], force: bool) -> NoneType: ...
    def AddInternetScsiStaticTargets(self, iScsiHbaDevice: str, targets: List[InternetScsiHba.StaticTarget]) -> NoneType: ...
    def RemoveInternetScsiStaticTargets(self, iScsiHbaDevice: str, targets: List[InternetScsiHba.StaticTarget]) -> NoneType: ...
    def EnableMultipathPath(self, pathName: str) -> NoneType: ...
    def DisableMultipathPath(self, pathName: str) -> NoneType: ...
    def SetMultipathLunPolicy(self, lunId: str, policy: MultipathInfo.LogicalUnitPolicy) -> NoneType: ...
    def UpdateHppMultipathLunPolicy(self, lunId: str, policy: MultipathInfo.HppLogicalUnitPolicy) -> NoneType: ...
    def QueryPathSelectionPolicyOptions(self) -> List[PathSelectionPolicyOption]: ...
    def QueryStorageArrayTypePolicyOptions(self) -> List[StorageArrayTypePolicyOption]: ...
    def UpdateScsiLunDisplayName(self, lunUuid: str, displayName: str) -> NoneType: ...
    def DetachScsiLun(self, lunUuid: str) -> NoneType: ...
    def DetachScsiLunEx(self, lunUuid: List[str]) -> vim.Task: ...
    def DeleteScsiLunState(self, lunCanonicalName: str) -> NoneType: ...
    def AttachScsiLun(self, lunUuid: str) -> NoneType: ...
    def AttachScsiLunEx(self, lunUuid: List[str]) -> vim.Task: ...
    def Refresh(self) -> NoneType: ...
    def DiscoverFcoeHbas(self, fcoeSpec: FcoeConfig.FcoeSpecification) -> NoneType: ...
    def MarkForRemoval(self, hbaName: str, remove: bool) -> NoneType: ...
    def FormatVffs(self, createSpec: VffsVolume.Specification) -> VffsVolume: ...
    def ExtendVffs(self, vffsPath: str, devicePath: str, spec: DiskPartitionInfo.Specification) -> NoneType: ...
    def DestroyVffs(self, vffsPath: str) -> NoneType: ...
    def MountVffsVolume(self, vffsUuid: str) -> NoneType: ...
    def UnmountVffsVolume(self, vffsUuid: str) -> NoneType: ...
    def DeleteVffsVolumeState(self, vffsUuid: str) -> NoneType: ...
    def RescanVffs(self) -> NoneType: ...
    def QueryAvailableSsds(self, vffsPath: str) -> List[ScsiDisk]: ...
    def SetNFSUser(self, user: str, password: str) -> NoneType: ...
    def ChangeNFSUserPassword(self, password: str) -> NoneType: ...
    def QueryNFSUser(self) -> NasVolume.UserInfo: ...
    def ClearNFSUser(self) -> NoneType: ...
    def TurnDiskLocatorLedOn(self, scsiDiskUuids: List[str]) -> vim.Task: ...
    def TurnDiskLocatorLedOff(self, scsiDiskUuids: List[str]) -> vim.Task: ...
    def MarkAsSsd(self, scsiDiskUuid: str) -> vim.Task: ...
    def MarkAsNonSsd(self, scsiDiskUuid: str) -> vim.Task: ...
    def MarkAsLocal(self, scsiDiskUuid: str) -> vim.Task: ...
    def MarkAsNonLocal(self, scsiDiskUuid: str) -> vim.Task: ...
    def UpdateVmfsUnmapPriority(self, vmfsUuid: str, unmapPriority: str) -> NoneType: ...
    def UpdateVmfsUnmapBandwidth(self, vmfsUuid: str, unmapBandwidthSpec: VmfsVolume.UnmapBandwidthSpec) -> NoneType: ...
    def QueryVmfsConfigOption(self) -> List[VmfsVolume.ConfigOption]: ...
    def MarkPerenniallyReserved(self, lunUuid: str, state: bool) -> NoneType: ...
    def MarkPerenniallyReservedEx(self, lunUuid: List[str], state: bool) -> vim.Task: ...
    def CreateNvmeOverRdmaAdapter(self, rdmaDeviceName: str) -> NoneType: ...
    def RemoveNvmeOverRdmaAdapter(self, hbaDeviceName: str) -> NoneType: ...
    def CreateSoftwareAdapter(self, spec: HbaCreateSpec) -> NoneType: ...
    def RemoveSoftwareAdapter(self, hbaDeviceName: str) -> NoneType: ...
    def DiscoverNvmeControllers(self, discoverSpec: NvmeDiscoverSpec) -> NvmeDiscoveryLog: ...
    def ConnectNvmeController(self, connectSpec: NvmeConnectSpec) -> NoneType: ...
    def DisconnectNvmeController(self, disconnectSpec: NvmeDisconnectSpec) -> NoneType: ...
    def ConnectNvmeControllerEx(self, connectSpec: List[NvmeConnectSpec]) -> vim.Task: ...
    def DisconnectNvmeControllerEx(self, disconnectSpec: List[NvmeDisconnectSpec]) -> vim.Task: ...


    class DiskLocatorLedResult(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def fault(self) -> vmodl.MethodFault: ...


    class ScsiLunResult(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def fault(self) -> vmodl.MethodFault: ...


    class VmfsVolumeResult(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def fault(self) -> vmodl.MethodFault: ...


class VFlashManager(ManagedObject):
    @property
    def vFlashConfigInfo(self) -> VFlashManager.VFlashConfigInfo: ...
    def ConfigureVFlashResourceEx(self, devicePath: List[str]) -> vim.Task: ...
    def ConfigureVFlashResource(self, spec: VFlashManager.VFlashResourceConfigSpec) -> NoneType: ...
    def RemoveVFlashResource(self) -> NoneType: ...
    def ConfigureHostVFlashCache(self, spec: VFlashManager.VFlashCacheConfigSpec) -> NoneType: ...
    def GetVFlashModuleDefaultConfig(self, vFlashModule: str) -> vim.vm.device.VirtualDisk.VFlashCacheConfigInfo: ...


    class VFlashCacheConfigInfo(vmodl.DynamicData):
        @property
        def vFlashModuleConfigOption(self) -> List[VFlashManager.VFlashCacheConfigInfo.VFlashModuleConfigOption]: ...
        @property
        def defaultVFlashModule(self) -> str: ...
        @property
        def swapCacheReservationInGB(self) -> long: ...


        class VFlashModuleConfigOption(vmodl.DynamicData):
            @property
            def vFlashModule(self) -> str: ...
            @property
            def vFlashModuleVersion(self) -> str: ...
            @property
            def minSupportedModuleVersion(self) -> str: ...
            @property
            def cacheConsistencyType(self) -> vim.option.ChoiceOption: ...
            @property
            def cacheMode(self) -> vim.option.ChoiceOption: ...
            @property
            def blockSizeInKBOption(self) -> vim.option.LongOption: ...
            @property
            def reservationInMBOption(self) -> vim.option.LongOption: ...
            @property
            def maxDiskSizeInKB(self) -> long: ...


    class VFlashCacheConfigSpec(vmodl.DynamicData):
        @property
        def defaultVFlashModule(self) -> str: ...
        @property
        def swapCacheReservationInGB(self) -> long: ...


    class VFlashConfigInfo(vmodl.DynamicData):
        @property
        def vFlashResourceConfigInfo(self) -> VFlashManager.VFlashResourceConfigInfo: ...
        @property
        def vFlashCacheConfigInfo(self) -> VFlashManager.VFlashCacheConfigInfo: ...


    class VFlashResourceConfigInfo(vmodl.DynamicData):
        @property
        def vffs(self) -> VffsVolume: ...
        @property
        def capacity(self) -> long: ...


    class VFlashResourceConfigSpec(vmodl.DynamicData):
        @property
        def vffsUuid(self) -> str: ...


    class VFlashResourceRunTimeInfo(vmodl.DynamicData):
        @property
        def usage(self) -> long: ...
        @property
        def capacity(self) -> long: ...
        @property
        def accessible(self) -> bool: ...
        @property
        def capacityForVmCache(self) -> long: ...
        @property
        def freeForVmCache(self) -> long: ...


class VMotionSystem(vim.ExtensibleManagedObject):
    @property
    def netConfig(self) -> VMotionSystem.NetConfig: ...
    @property
    def ipConfig(self) -> IpConfig: ...
    def UpdateIpConfig(self, ipConfig: IpConfig) -> NoneType: ...
    def SelectVnic(self, device: str) -> NoneType: ...
    def DeselectVnic(self) -> NoneType: ...


    class NetConfig(vmodl.DynamicData):
        @property
        def candidateVnic(self) -> List[VirtualNic]: ...
        @property
        def selectedVnic(self) -> Link: ...


class VirtualNicManager(vim.ExtensibleManagedObject):
    @property
    def info(self) -> VirtualNicManagerInfo: ...
    def QueryNetConfig(self, nicType: str) -> VirtualNicManager.NetConfig: ...
    def SelectVnic(self, nicType: str, device: str) -> NoneType: ...
    def DeselectVnic(self, nicType: str, device: str) -> NoneType: ...


    class NicTypeSelection(vmodl.DynamicData):
        @property
        def vnic(self) -> VirtualNicConnection: ...
        @property
        def nicType(self) -> List[str]: ...


    class NicType(Enum):
        vmotion = "vmotion"
        faultToleranceLogging = "faulttolerancelogging"
        vSphereReplication = "vspherereplication"
        vSphereReplicationNFC = "vspherereplicationnfc"
        management = "management"
        vsan = "vsan"
        vSphereProvisioning = "vsphereprovisioning"
        vsanWitness = "vsanwitness"
        vSphereBackupNFC = "vspherebackupnfc"
        ptp = "ptp"
        vsanReplication = "vsanreplication"
        nvmeTcp = "nvmetcp"
        nvmeRdma = "nvmerdma"


class VsanInternalSystem(ManagedObject):
    def QueryCmmds(self, queries: List[VsanInternalSystem.CmmdsQuery]) -> str: ...
    def QueryPhysicalVsanDisks(self, props: List[str]) -> str: ...
    def QueryVsanObjects(self, uuids: List[str]) -> str: ...
    def QueryObjectsOnPhysicalVsanDisk(self, disks: List[str]) -> str: ...
    def AbdicateDomOwnership(self, uuids: List[str]) -> List[str]: ...
    def QueryVsanStatistics(self, labels: List[str]) -> str: ...
    def ReconfigureDomObject(self, uuid: str, policy: str) -> NoneType: ...
    def QuerySyncingVsanObjects(self, uuids: List[str]) -> str: ...
    def RunVsanPhysicalDiskDiagnostics(self, disks: List[str]) -> List[VsanInternalSystem.VsanPhysicalDiskDiagnosticsResult]: ...
    def GetVsanObjExtAttrs(self, uuids: List[str]) -> str: ...
    def ReconfigurationSatisfiable(self, pcbs: List[VsanInternalSystem.PolicyChangeBatch], ignoreSatisfiability: bool) -> List[VsanInternalSystem.PolicySatisfiability]: ...
    def CanProvisionObjects(self, npbs: List[VsanInternalSystem.NewPolicyBatch], ignoreSatisfiability: bool) -> List[VsanInternalSystem.PolicySatisfiability]: ...
    def DeleteVsanObjects(self, uuids: List[str], force: bool) -> List[VsanInternalSystem.DeleteVsanObjectsResult]: ...
    def UpgradeVsanObjects(self, uuids: List[str], newVersion: int) -> List[VsanInternalSystem.VsanObjectOperationResult]: ...
    def QueryVsanObjectUuidsByFilter(self, uuids: List[str], limit: int, version: int) -> List[str]: ...


    class CmmdsQuery(vmodl.DynamicData):
        @property
        def type(self) -> str: ...
        @property
        def uuid(self) -> str: ...
        @property
        def owner(self) -> str: ...


    class DeleteVsanObjectsResult(vmodl.DynamicData):
        @property
        def uuid(self) -> str: ...
        @property
        def success(self) -> bool: ...
        @property
        def failureReason(self) -> List[vmodl.LocalizableMessage]: ...


    class NewPolicyBatch(vmodl.DynamicData):
        @property
        def size(self) -> List[long]: ...
        @property
        def policy(self) -> str: ...


    class PolicyChangeBatch(vmodl.DynamicData):
        @property
        def uuid(self) -> List[str]: ...
        @property
        def policy(self) -> str: ...


    class PolicyCost(vmodl.DynamicData):
        @property
        def changeDataSize(self) -> long: ...
        @property
        def currentDataSize(self) -> long: ...
        @property
        def tempDataSize(self) -> long: ...
        @property
        def copyDataSize(self) -> long: ...
        @property
        def changeFlashReadCacheSize(self) -> long: ...
        @property
        def currentFlashReadCacheSize(self) -> long: ...
        @property
        def currentDiskSpaceToAddressSpaceRatio(self) -> float: ...
        @property
        def diskSpaceToAddressSpaceRatio(self) -> float: ...


    class PolicySatisfiability(vmodl.DynamicData):
        @property
        def uuid(self) -> str: ...
        @property
        def isSatisfiable(self) -> bool: ...
        @property
        def reason(self) -> vmodl.LocalizableMessage: ...
        @property
        def cost(self) -> VsanInternalSystem.PolicyCost: ...


    class VsanObjectOperationResult(vmodl.DynamicData):
        @property
        def uuid(self) -> str: ...
        @property
        def failureReason(self) -> List[vmodl.LocalizableMessage]: ...


    class VsanPhysicalDiskDiagnosticsResult(vmodl.DynamicData):
        @property
        def diskUuid(self) -> str: ...
        @property
        def success(self) -> bool: ...
        @property
        def failureReason(self) -> str: ...


class VsanSystem(ManagedObject):
    @property
    def config(self) -> ConfigInfo: ...
    def QueryDisksForVsan(self, canonicalName: List[str]) -> List[DiskResult]: ...
    def AddDisks(self, disk: List[ScsiDisk]) -> vim.Task: ...
    def InitializeDisks(self, mapping: List[DiskMapping]) -> vim.Task: ...
    def RemoveDisk(self, disk: List[ScsiDisk], maintenanceSpec: MaintenanceSpec, timeout: int) -> vim.Task: ...
    def RemoveDiskMapping(self, mapping: List[DiskMapping], maintenanceSpec: MaintenanceSpec, timeout: int) -> vim.Task: ...
    def UnmountDiskMapping(self, mapping: List[DiskMapping]) -> vim.Task: ...
    def Update(self, config: ConfigInfo) -> vim.Task: ...
    def QueryHostStatus(self) -> ClusterStatus: ...
    def EvacuateNode(self, maintenanceSpec: MaintenanceSpec, timeout: int) -> vim.Task: ...
    def RecommissionNode(self) -> vim.Task: ...


class ActiveDirectoryInfo(DirectoryStoreInfo):
    @property
    def joinedDomain(self) -> str: ...
    @property
    def trustedDomain(self) -> List[str]: ...
    @property
    def domainMembershipStatus(self) -> str: ...
    @property
    def smartCardAuthenticationEnabled(self) -> bool: ...


    class DomainMembershipStatus(Enum):
        unknown = "unknown"
        ok = "ok"
        noServers = "noservers"
        clientTrustBroken = "clienttrustbroken"
        serverTrustBroken = "servertrustbroken"
        inconsistentTrust = "inconsistenttrust"
        otherProblem = "otherproblem"


class ActiveDirectorySpec(vmodl.DynamicData):
    @property
    def changeOperation(self) -> str: ...
    @property
    def spec(self) -> ActiveDirectorySpec.Specification: ...


    class Specification(vmodl.DynamicData):
        @property
        def domainName(self) -> str: ...
        @property
        def userName(self) -> str: ...
        @property
        def password(self) -> str: ...
        @property
        def camServer(self) -> str: ...
        @property
        def thumbprint(self) -> str: ...
        @property
        def smartCardAuthenticationEnabled(self) -> bool: ...
        @property
        def smartCardTrustAnchors(self) -> List[str]: ...


class AssignableHardwareBinding(vmodl.DynamicData):
    @property
    def instanceId(self) -> str: ...
    @property
    def vm(self) -> vim.VirtualMachine: ...


class AssignableHardwareConfig(vmodl.DynamicData):
    @property
    def attributeOverride(self) -> List[AssignableHardwareConfig.AttributeOverride]: ...


    class AttributeOverride(vmodl.DynamicData):
        @property
        def instanceId(self) -> str: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> object: ...


class AuthenticationManagerInfo(vmodl.DynamicData):
    @property
    def authConfig(self) -> List[AuthenticationStoreInfo]: ...


class AuthenticationStoreInfo(vmodl.DynamicData):
    @property
    def enabled(self) -> bool: ...


class BIOSInfo(vmodl.DynamicData):
    @property
    def biosVersion(self) -> str: ...
    @property
    def releaseDate(self) -> datetime: ...
    @property
    def vendor(self) -> str: ...
    @property
    def majorRelease(self) -> int: ...
    @property
    def minorRelease(self) -> int: ...
    @property
    def firmwareMajorRelease(self) -> int: ...
    @property
    def firmwareMinorRelease(self) -> int: ...


class BlockAdapterTargetTransport(TargetTransport): ...


class BlockHba(HostBusAdapter): ...


class BootDeviceInfo(vmodl.DynamicData):
    @property
    def bootDevices(self) -> List[BootDeviceSystem.BootDevice]: ...
    @property
    def currentBootDeviceKey(self) -> str: ...


class Capability(vmodl.DynamicData):
    @property
    def recursiveResourcePoolsSupported(self) -> bool: ...
    @property
    def cpuMemoryResourceConfigurationSupported(self) -> bool: ...
    @property
    def rebootSupported(self) -> bool: ...
    @property
    def shutdownSupported(self) -> bool: ...
    @property
    def vmotionSupported(self) -> bool: ...
    @property
    def standbySupported(self) -> bool: ...
    @property
    def ipmiSupported(self) -> bool: ...
    @property
    def maxSupportedVMs(self) -> int: ...
    @property
    def maxRunningVMs(self) -> int: ...
    @property
    def maxSupportedVcpus(self) -> int: ...
    @property
    def maxRegisteredVMs(self) -> int: ...
    @property
    def datastorePrincipalSupported(self) -> bool: ...
    @property
    def sanSupported(self) -> bool: ...
    @property
    def nfsSupported(self) -> bool: ...
    @property
    def iscsiSupported(self) -> bool: ...
    @property
    def vlanTaggingSupported(self) -> bool: ...
    @property
    def nicTeamingSupported(self) -> bool: ...
    @property
    def highGuestMemSupported(self) -> bool: ...
    @property
    def maintenanceModeSupported(self) -> bool: ...
    @property
    def suspendedRelocateSupported(self) -> bool: ...
    @property
    def restrictedSnapshotRelocateSupported(self) -> bool: ...
    @property
    def perVmSwapFiles(self) -> bool: ...
    @property
    def localSwapDatastoreSupported(self) -> bool: ...
    @property
    def unsharedSwapVMotionSupported(self) -> bool: ...
    @property
    def backgroundSnapshotsSupported(self) -> bool: ...
    @property
    def preAssignedPCIUnitNumbersSupported(self) -> bool: ...
    @property
    def screenshotSupported(self) -> bool: ...
    @property
    def scaledScreenshotSupported(self) -> bool: ...
    @property
    def storageVMotionSupported(self) -> bool: ...
    @property
    def vmotionWithStorageVMotionSupported(self) -> bool: ...
    @property
    def vmotionAcrossNetworkSupported(self) -> bool: ...
    @property
    def maxNumDisksSVMotion(self) -> int: ...
    @property
    def maxVirtualDiskDescVersionSupported(self) -> int: ...
    @property
    def hbrNicSelectionSupported(self) -> bool: ...
    @property
    def vrNfcNicSelectionSupported(self) -> bool: ...
    @property
    def recordReplaySupported(self) -> bool: ...
    @property
    def ftSupported(self) -> bool: ...
    @property
    def replayUnsupportedReason(self) -> str: ...
    @property
    def replayCompatibilityIssues(self) -> List[str]: ...
    @property
    def smpFtSupported(self) -> bool: ...
    @property
    def ftCompatibilityIssues(self) -> List[str]: ...
    @property
    def smpFtCompatibilityIssues(self) -> List[str]: ...
    @property
    def maxVcpusPerFtVm(self) -> int: ...
    @property
    def loginBySSLThumbprintSupported(self) -> bool: ...
    @property
    def cloneFromSnapshotSupported(self) -> bool: ...
    @property
    def deltaDiskBackingsSupported(self) -> bool: ...
    @property
    def perVMNetworkTrafficShapingSupported(self) -> bool: ...
    @property
    def tpmSupported(self) -> bool: ...
    @property
    def tpmVersion(self) -> str: ...
    @property
    def txtEnabled(self) -> bool: ...
    @property
    def supportedCpuFeature(self) -> List[CpuIdInfo]: ...
    @property
    def virtualExecUsageSupported(self) -> bool: ...
    @property
    def storageIORMSupported(self) -> bool: ...
    @property
    def vmDirectPathGen2Supported(self) -> bool: ...
    @property
    def vmDirectPathGen2UnsupportedReason(self) -> List[str]: ...
    @property
    def vmDirectPathGen2UnsupportedReasonExtended(self) -> str: ...
    @property
    def supportedVmfsMajorVersion(self) -> List[int]: ...
    @property
    def vStorageCapable(self) -> bool: ...
    @property
    def snapshotRelayoutSupported(self) -> bool: ...
    @property
    def firewallIpRulesSupported(self) -> bool: ...
    @property
    def servicePackageInfoSupported(self) -> bool: ...
    @property
    def maxHostRunningVms(self) -> int: ...
    @property
    def maxHostSupportedVcpus(self) -> int: ...
    @property
    def vmfsDatastoreMountCapable(self) -> bool: ...
    @property
    def eightPlusHostVmfsSharedAccessSupported(self) -> bool: ...
    @property
    def nestedHVSupported(self) -> bool: ...
    @property
    def vPMCSupported(self) -> bool: ...
    @property
    def interVMCommunicationThroughVMCISupported(self) -> bool: ...
    @property
    def scheduledHardwareUpgradeSupported(self) -> bool: ...
    @property
    def featureCapabilitiesSupported(self) -> bool: ...
    @property
    def latencySensitivitySupported(self) -> bool: ...
    @property
    def storagePolicySupported(self) -> bool: ...
    @property
    def accel3dSupported(self) -> bool: ...
    @property
    def reliableMemoryAware(self) -> bool: ...
    @property
    def multipleNetworkStackInstanceSupported(self) -> bool: ...
    @property
    def messageBusProxySupported(self) -> bool: ...
    @property
    def vsanSupported(self) -> bool: ...
    @property
    def vFlashSupported(self) -> bool: ...
    @property
    def hostAccessManagerSupported(self) -> bool: ...
    @property
    def provisioningNicSelectionSupported(self) -> bool: ...
    @property
    def nfs41Supported(self) -> bool: ...
    @property
    def nfs41Krb5iSupported(self) -> bool: ...
    @property
    def turnDiskLocatorLedSupported(self) -> bool: ...
    @property
    def virtualVolumeDatastoreSupported(self) -> bool: ...
    @property
    def markAsSsdSupported(self) -> bool: ...
    @property
    def markAsLocalSupported(self) -> bool: ...
    @property
    def smartCardAuthenticationSupported(self) -> bool: ...
    @property
    def pMemSupported(self) -> bool: ...
    @property
    def pMemSnapshotSupported(self) -> bool: ...
    @property
    def cryptoSupported(self) -> bool: ...
    @property
    def oneKVolumeAPIsSupported(self) -> bool: ...
    @property
    def gatewayOnNicSupported(self) -> bool: ...
    @property
    def upitSupported(self) -> bool: ...
    @property
    def cpuHwMmuSupported(self) -> bool: ...
    @property
    def encryptedVMotionSupported(self) -> bool: ...
    @property
    def encryptionChangeOnAddRemoveSupported(self) -> bool: ...
    @property
    def encryptionHotOperationSupported(self) -> bool: ...
    @property
    def encryptionWithSnapshotsSupported(self) -> bool: ...
    @property
    def encryptionFaultToleranceSupported(self) -> bool: ...
    @property
    def encryptionMemorySaveSupported(self) -> bool: ...
    @property
    def encryptionRDMSupported(self) -> bool: ...
    @property
    def encryptionVFlashSupported(self) -> bool: ...
    @property
    def encryptionCBRCSupported(self) -> bool: ...
    @property
    def encryptionHBRSupported(self) -> bool: ...
    @property
    def ftEfiSupported(self) -> bool: ...
    @property
    def unmapMethodSupported(self) -> str: ...
    @property
    def maxMemMBPerFtVm(self) -> int: ...
    @property
    def virtualMmuUsageIgnored(self) -> bool: ...
    @property
    def virtualExecUsageIgnored(self) -> bool: ...
    @property
    def vmCreateDateSupported(self) -> bool: ...
    @property
    def vmfs3EOLSupported(self) -> bool: ...
    @property
    def ftVmcpSupported(self) -> bool: ...
    @property
    def quickBootSupported(self) -> bool: ...
    @property
    def encryptedFtSupported(self) -> bool: ...
    @property
    def assignableHardwareSupported(self) -> bool: ...
    @property
    def suspendToMemorySupported(self) -> bool: ...
    @property
    def useFeatureReqsForOldHWv(self) -> bool: ...
    @property
    def markPerenniallyReservedSupported(self) -> bool: ...
    @property
    def hppPspSupported(self) -> bool: ...
    @property
    def deviceRebindWithoutRebootSupported(self) -> bool: ...
    @property
    def storagePolicyChangeSupported(self) -> bool: ...
    @property
    def precisionTimeProtocolSupported(self) -> bool: ...
    @property
    def remoteDeviceVMotionSupported(self) -> bool: ...
    @property
    def maxSupportedVmMemory(self) -> int: ...
    @property
    def ahDeviceHintsSupported(self) -> bool: ...
    @property
    def nvmeOverTcpSupported(self) -> bool: ...
    @property
    def nvmeStorageFabricServicesSupported(self) -> bool: ...
    @property
    def assignHwPciConfigSupported(self) -> bool: ...
    @property
    def timeConfigSupported(self) -> bool: ...
    @property
    def nvmeBatchOperationsSupported(self) -> bool: ...
    @property
    def pMemFailoverSupported(self) -> bool: ...
    @property
    def hostConfigEncryptionSupported(self) -> bool: ...
    @property
    def maxSupportedSimultaneousThreads(self) -> int: ...
    @property
    def ptpConfigSupported(self) -> bool: ...
    @property
    def maxSupportedPtpPorts(self) -> int: ...
    @property
    def sgxRegistrationSupported(self) -> bool: ...
    @property
    def pMemIndependentSnapshotSupported(self) -> bool: ...
    @property
    def iommuSLDirtyCapable(self) -> bool: ...
    @property
    def vmknicBindingSupported(self) -> bool: ...
    @property
    def ultralowFixedUnmapSupported(self) -> bool: ...
    @property
    def nvmeVvolSupported(self) -> bool: ...
    @property
    def fptHotplugSupported(self) -> bool: ...
    @property
    def mconnectSupported(self) -> bool: ...


    class FtUnsupportedReason(Enum):
        vMotionNotLicensed = "vmotionnotlicensed"
        missingVMotionNic = "missingvmotionnic"
        missingFTLoggingNic = "missingftloggingnic"
        ftNotLicensed = "ftnotlicensed"
        haAgentIssue = "haagentissue"
        unsupportedProduct = "unsupportedproduct"
        cpuHvUnsupported = "cpuhvunsupported"
        cpuHwmmuUnsupported = "cpuhwmmuunsupported"
        cpuHvDisabled = "cpuhvdisabled"


    class ReplayUnsupportedReason(Enum):
        incompatibleProduct = "incompatibleproduct"
        incompatibleCpu = "incompatiblecpu"
        hvDisabled = "hvdisabled"
        cpuidLimitSet = "cpuidlimitset"
        oldBIOS = "oldbios"
        unknown = "unknown"


    class UnmapMethodSupported(Enum):
        priority = "priority"
        fixed = "fixed"
        dynamic = "dynamic"


    class VmDirectPathGen2UnsupportedReason(Enum):
        hostNptIncompatibleProduct = "hostnptincompatibleproduct"
        hostNptIncompatibleHardware = "hostnptincompatiblehardware"
        hostNptDisabled = "hostnptdisabled"


class ConfigChange(vmodl.DynamicData):


    class Mode(Enum):
        modify = "modify"
        replace = "replace"


    class Operation(Enum):
        add = "add"
        remove = "remove"
        edit = "edit"
        ignore = "ignore"


class ConfigInfo(vmodl.DynamicData):
    @property
    def host(self) -> vim.HostSystem: ...
    @property
    def product(self) -> vim.AboutInfo: ...
    @property
    def deploymentInfo(self) -> DeploymentInfo: ...
    @property
    def hyperThread(self) -> CpuSchedulerSystem.HyperThreadScheduleInfo: ...
    @property
    def consoleReservation(self) -> MemoryManagerSystem.ServiceConsoleReservationInfo: ...
    @property
    def virtualMachineReservation(self) -> MemoryManagerSystem.VirtualMachineReservationInfo: ...
    @property
    def storageDevice(self) -> StorageDeviceInfo: ...
    @property
    def multipathState(self) -> MultipathStateInfo: ...
    @property
    def fileSystemVolume(self) -> FileSystemVolumeInfo: ...
    @property
    def systemFile(self) -> List[str]: ...
    @property
    def network(self) -> NetworkInfo: ...
    @property
    def vmotion(self) -> VMotionInfo: ...
    @property
    def virtualNicManagerInfo(self) -> VirtualNicManagerInfo: ...
    @property
    def capabilities(self) -> NetCapabilities: ...
    @property
    def datastoreCapabilities(self) -> DatastoreSystem.Capabilities: ...
    @property
    def offloadCapabilities(self) -> NetOffloadCapabilities: ...
    @property
    def service(self) -> ServiceInfo: ...
    @property
    def firewall(self) -> FirewallInfo: ...
    @property
    def autoStart(self) -> AutoStartManager.Config: ...
    @property
    def activeDiagnosticPartition(self) -> DiagnosticPartition: ...
    @property
    def option(self) -> List[vim.option.OptionValue]: ...
    @property
    def optionDef(self) -> List[vim.option.OptionDef]: ...
    @property
    def datastorePrincipal(self) -> str: ...
    @property
    def localSwapDatastore(self) -> vim.Datastore: ...
    @property
    def systemSwapConfiguration(self) -> SystemSwapConfiguration: ...
    @property
    def systemResources(self) -> SystemResourceInfo: ...
    @property
    def dateTimeInfo(self) -> DateTimeInfo: ...
    @property
    def flags(self) -> FlagInfo: ...
    @property
    def adminDisabled(self) -> bool: ...
    @property
    def lockdownMode(self) -> HostAccessManager.LockdownMode: ...
    @property
    def ipmi(self) -> IpmiInfo: ...
    @property
    def sslThumbprintInfo(self) -> SslThumbprintInfo: ...
    @property
    def sslThumbprintData(self) -> List[SslThumbprintInfo]: ...
    @property
    def certificate(self) -> List[byte]: ...
    @property
    def pciPassthruInfo(self) -> List[PciPassthruInfo]: ...
    @property
    def authenticationManagerInfo(self) -> AuthenticationManagerInfo: ...
    @property
    def featureVersion(self) -> List[FeatureVersionInfo]: ...
    @property
    def powerSystemCapability(self) -> PowerSystem.Capability: ...
    @property
    def powerSystemInfo(self) -> PowerSystem.Info: ...
    @property
    def cacheConfigurationInfo(self) -> List[CacheConfigurationManager.CacheConfigurationInfo]: ...
    @property
    def wakeOnLanCapable(self) -> bool: ...
    @property
    def featureCapability(self) -> List[FeatureCapability]: ...
    @property
    def maskedFeatureCapability(self) -> List[FeatureCapability]: ...
    @property
    def vFlashConfigInfo(self) -> VFlashManager.VFlashConfigInfo: ...
    @property
    def vsanHostConfig(self) -> ConfigInfo: ...
    @property
    def domainList(self) -> List[str]: ...
    @property
    def scriptCheckSum(self) -> binary: ...
    @property
    def hostConfigCheckSum(self) -> binary: ...
    @property
    def descriptionTreeCheckSum(self) -> binary: ...
    @property
    def graphicsInfo(self) -> List[GraphicsInfo]: ...
    @property
    def sharedPassthruGpuTypes(self) -> List[str]: ...
    @property
    def graphicsConfig(self) -> GraphicsConfig: ...
    @property
    def sharedGpuCapabilities(self) -> List[SharedGpuCapabilities]: ...
    @property
    def ioFilterInfo(self) -> List[vim.IoFilterManager.HostIoFilterInfo]: ...
    @property
    def sriovDevicePool(self) -> List[SriovDevicePoolInfo]: ...
    @property
    def assignableHardwareBinding(self) -> List[AssignableHardwareBinding]: ...
    @property
    def assignableHardwareConfig(self) -> AssignableHardwareConfig: ...


class ConfigManager(vmodl.DynamicData):
    @property
    def cpuScheduler(self) -> CpuSchedulerSystem: ...
    @property
    def datastoreSystem(self) -> DatastoreSystem: ...
    @property
    def memoryManager(self) -> MemoryManagerSystem: ...
    @property
    def storageSystem(self) -> StorageSystem: ...
    @property
    def networkSystem(self) -> NetworkSystem: ...
    @property
    def vmotionSystem(self) -> VMotionSystem: ...
    @property
    def virtualNicManager(self) -> VirtualNicManager: ...
    @property
    def serviceSystem(self) -> ServiceSystem: ...
    @property
    def firewallSystem(self) -> FirewallSystem: ...
    @property
    def advancedOption(self) -> vim.option.OptionManager: ...
    @property
    def diagnosticSystem(self) -> DiagnosticSystem: ...
    @property
    def autoStartManager(self) -> AutoStartManager: ...
    @property
    def snmpSystem(self) -> SnmpSystem: ...
    @property
    def dateTimeSystem(self) -> DateTimeSystem: ...
    @property
    def patchManager(self) -> PatchManager: ...
    @property
    def imageConfigManager(self) -> ImageConfigManager: ...
    @property
    def bootDeviceSystem(self) -> BootDeviceSystem: ...
    @property
    def firmwareSystem(self) -> FirmwareSystem: ...
    @property
    def healthStatusSystem(self) -> HealthStatusSystem: ...
    @property
    def pciPassthruSystem(self) -> PciPassthruSystem: ...
    @property
    def licenseManager(self) -> vim.LicenseManager: ...
    @property
    def kernelModuleSystem(self) -> KernelModuleSystem: ...
    @property
    def authenticationManager(self) -> AuthenticationManager: ...
    @property
    def powerSystem(self) -> PowerSystem: ...
    @property
    def cacheConfigurationManager(self) -> CacheConfigurationManager: ...
    @property
    def esxAgentHostManager(self) -> EsxAgentHostManager: ...
    @property
    def iscsiManager(self) -> IscsiManager: ...
    @property
    def vFlashManager(self) -> VFlashManager: ...
    @property
    def vsanSystem(self) -> VsanSystem: ...
    @property
    def messageBusProxy(self) -> MessageBusProxy: ...
    @property
    def userDirectory(self) -> vim.UserDirectory: ...
    @property
    def accountManager(self) -> LocalAccountManager: ...
    @property
    def hostAccessManager(self) -> HostAccessManager: ...
    @property
    def graphicsManager(self) -> GraphicsManager: ...
    @property
    def vsanInternalSystem(self) -> VsanInternalSystem: ...
    @property
    def certificateManager(self) -> CertificateManager: ...
    @property
    def cryptoManager(self) -> vim.encryption.CryptoManager: ...
    @property
    def nvdimmSystem(self) -> NvdimmSystem: ...
    @property
    def assignableHardwareManager(self) -> AssignableHardwareManager: ...


class ConfigSpec(vmodl.DynamicData):
    @property
    def nasDatastore(self) -> List[NasVolume.Config]: ...
    @property
    def network(self) -> NetworkConfig: ...
    @property
    def nicTypeSelection(self) -> List[VirtualNicManager.NicTypeSelection]: ...
    @property
    def service(self) -> List[ServiceConfig]: ...
    @property
    def firewall(self) -> FirewallConfig: ...
    @property
    def option(self) -> List[vim.option.OptionValue]: ...
    @property
    def datastorePrincipal(self) -> str: ...
    @property
    def datastorePrincipalPasswd(self) -> str: ...
    @property
    def datetime(self) -> DateTimeConfig: ...
    @property
    def storageDevice(self) -> StorageDeviceInfo: ...
    @property
    def license(self) -> LicenseSpec: ...
    @property
    def security(self) -> SecuritySpec: ...
    @property
    def userAccount(self) -> List[LocalAccountManager.AccountSpecification]: ...
    @property
    def usergroupAccount(self) -> List[LocalAccountManager.AccountSpecification]: ...
    @property
    def memory(self) -> MemorySpec: ...
    @property
    def activeDirectory(self) -> List[ActiveDirectorySpec]: ...
    @property
    def genericConfig(self) -> List[vmodl.KeyAnyValue]: ...
    @property
    def graphicsConfig(self) -> GraphicsConfig: ...
    @property
    def assignableHardwareConfig(self) -> AssignableHardwareConfig: ...


class ConnectInfo(vmodl.DynamicData):
    @property
    def serverIp(self) -> str: ...
    @property
    def inDasCluster(self) -> bool: ...
    @property
    def host(self) -> Summary: ...
    @property
    def vm(self) -> List[vim.vm.Summary]: ...
    @property
    def vimAccountNameRequired(self) -> bool: ...
    @property
    def clusterSupported(self) -> bool: ...
    @property
    def network(self) -> List[ConnectInfo.NetworkInfo]: ...
    @property
    def datastore(self) -> List[ConnectInfo.DatastoreInfo]: ...
    @property
    def license(self) -> ConnectInfo.LicenseInfo: ...
    @property
    def capability(self) -> Capability: ...


    class DatastoreExistsInfo(ConnectInfo.DatastoreInfo):
        @property
        def newDatastoreName(self) -> str: ...


    class DatastoreInfo(vmodl.DynamicData):
        @property
        def summary(self) -> vim.Datastore.Summary: ...


    class DatastoreNameConflictInfo(ConnectInfo.DatastoreInfo):
        @property
        def newDatastoreName(self) -> str: ...


    class LicenseInfo(vmodl.DynamicData):
        @property
        def license(self) -> vim.LicenseManager.LicenseInfo: ...
        @property
        def evaluation(self) -> vim.LicenseManager.EvaluationInfo: ...
        @property
        def resource(self) -> vim.LicenseManager.LicensableResourceInfo: ...


    class NetworkInfo(vmodl.DynamicData):
        @property
        def summary(self) -> vim.Network.Summary: ...


    class NewNetworkInfo(ConnectInfo.NetworkInfo): ...


class ConnectSpec(vmodl.DynamicData):
    @property
    def hostName(self) -> str: ...
    @property
    def port(self) -> int: ...
    @property
    def sslThumbprint(self) -> str: ...
    @property
    def userName(self) -> str: ...
    @property
    def password(self) -> str: ...
    @property
    def vmFolder(self) -> vim.Folder: ...
    @property
    def force(self) -> bool: ...
    @property
    def vimAccountName(self) -> str: ...
    @property
    def vimAccountPassword(self) -> str: ...
    @property
    def managementIp(self) -> str: ...
    @property
    def lockdownMode(self) -> HostAccessManager.LockdownMode: ...
    @property
    def hostGateway(self) -> GatewaySpec: ...


class CpuIdInfo(vmodl.DynamicData):
    @property
    def level(self) -> int: ...
    @property
    def vendor(self) -> str: ...
    @property
    def eax(self) -> str: ...
    @property
    def ebx(self) -> str: ...
    @property
    def ecx(self) -> str: ...
    @property
    def edx(self) -> str: ...


class CpuInfo(vmodl.DynamicData):
    @property
    def numCpuPackages(self) -> short: ...
    @property
    def numCpuCores(self) -> short: ...
    @property
    def numCpuThreads(self) -> short: ...
    @property
    def hz(self) -> long: ...


class CpuPackage(vmodl.DynamicData):
    @property
    def index(self) -> short: ...
    @property
    def vendor(self) -> str: ...
    @property
    def hz(self) -> long: ...
    @property
    def busHz(self) -> long: ...
    @property
    def description(self) -> str: ...
    @property
    def threadId(self) -> List[short]: ...
    @property
    def cpuFeature(self) -> List[CpuIdInfo]: ...


    class Vendor(Enum):
        unknown = "unknown"
        intel = "intel"
        amd = "amd"
        hygon = "hygon"
        arm = "arm"


class CpuPowerManagementInfo(vmodl.DynamicData):
    @property
    def currentPolicy(self) -> str: ...
    @property
    def hardwareSupport(self) -> str: ...


    class PolicyType(Enum):
        off = "off"
        staticPolicy = "staticpolicy"
        dynamicPolicy = "dynamicpolicy"


class DataTransportConnectionInfo(vmodl.DynamicData):
    @property
    def staticMemoryConsumed(self) -> long: ...


class DateTimeConfig(vmodl.DynamicData):
    @property
    def timeZone(self) -> str: ...
    @property
    def ntpConfig(self) -> NtpConfig: ...
    @property
    def ptpConfig(self) -> PtpConfig: ...
    @property
    def protocol(self) -> str: ...
    @property
    def enabled(self) -> bool: ...
    @property
    def disableEvents(self) -> bool: ...
    @property
    def disableFallback(self) -> bool: ...
    @property
    def resetToFactoryDefaults(self) -> bool: ...


class DateTimeInfo(vmodl.DynamicData):
    @property
    def timeZone(self) -> DateTimeSystem.TimeZone: ...
    @property
    def systemClockProtocol(self) -> str: ...
    @property
    def ntpConfig(self) -> NtpConfig: ...
    @property
    def ptpConfig(self) -> PtpConfig: ...
    @property
    def enabled(self) -> bool: ...
    @property
    def disableEvents(self) -> bool: ...
    @property
    def disableFallback(self) -> bool: ...
    @property
    def inFallbackState(self) -> bool: ...
    @property
    def serviceSync(self) -> bool: ...
    @property
    def lastSyncTime(self) -> datetime: ...
    @property
    def remoteNtpServer(self) -> str: ...
    @property
    def ntpRunTime(self) -> long: ...
    @property
    def ptpRunTime(self) -> long: ...
    @property
    def ntpDuration(self) -> str: ...
    @property
    def ptpDuration(self) -> str: ...


    class Protocol(Enum):
        ntp = "ntp"
        ptp = "ptp"


class DeploymentInfo(vmodl.DynamicData):
    @property
    def bootedFromStatelessCache(self) -> bool: ...


class Device(vmodl.DynamicData):
    @property
    def deviceName(self) -> str: ...
    @property
    def deviceType(self) -> str: ...


class DhcpService(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def spec(self) -> DhcpService.Specification: ...


class DiagnosticPartition(vmodl.DynamicData):
    @property
    def storageType(self) -> str: ...
    @property
    def diagnosticType(self) -> str: ...
    @property
    def slots(self) -> int: ...
    @property
    def id(self) -> ScsiDisk.Partition: ...


    class CreateDescription(vmodl.DynamicData):
        @property
        def layout(self) -> DiskPartitionInfo.Layout: ...
        @property
        def diskUuid(self) -> str: ...
        @property
        def spec(self) -> DiagnosticPartition.CreateSpec: ...


    class CreateOption(vmodl.DynamicData):
        @property
        def storageType(self) -> str: ...
        @property
        def diagnosticType(self) -> str: ...
        @property
        def disk(self) -> ScsiDisk: ...


    class CreateSpec(vmodl.DynamicData):
        @property
        def storageType(self) -> str: ...
        @property
        def diagnosticType(self) -> str: ...
        @property
        def id(self) -> ScsiDisk.Partition: ...
        @property
        def partition(self) -> DiskPartitionInfo.Specification: ...
        @property
        def active(self) -> bool: ...


    class DiagnosticType(Enum):
        singleHost = "singlehost"
        multiHost = "multihost"


    class StorageType(Enum):
        directAttached = "directattached"
        networkAttached = "networkattached"


class DigestInfo(vmodl.DynamicData):
    @property
    def digestMethod(self) -> str: ...
    @property
    def digestValue(self) -> List[byte]: ...
    @property
    def objectName(self) -> str: ...


    class DigestMethodType(Enum):
        SHA1 = "sha1"
        MD5 = "md5"
        SHA256 = "sha256"
        SHA384 = "sha384"
        SHA512 = "sha512"
        SM3_256 = "sm3_256"


class DirectoryStoreInfo(AuthenticationStoreInfo): ...


class DiskConfigurationResult(vmodl.DynamicData):
    @property
    def devicePath(self) -> str: ...
    @property
    def success(self) -> bool: ...
    @property
    def fault(self) -> vmodl.MethodFault: ...


class DiskDimensions(vmodl.DynamicData):


    class Chs(vmodl.DynamicData):
        @property
        def cylinder(self) -> long: ...
        @property
        def head(self) -> int: ...
        @property
        def sector(self) -> int: ...


    class Lba(vmodl.DynamicData):
        @property
        def blockSize(self) -> int: ...
        @property
        def block(self) -> long: ...


class DiskPartitionInfo(vmodl.DynamicData):
    @property
    def deviceName(self) -> str: ...
    @property
    def spec(self) -> DiskPartitionInfo.Specification: ...
    @property
    def layout(self) -> DiskPartitionInfo.Layout: ...


    class BlockRange(vmodl.DynamicData):
        @property
        def partition(self) -> int: ...
        @property
        def type(self) -> str: ...
        @property
        def start(self) -> DiskDimensions.Lba: ...
        @property
        def end(self) -> DiskDimensions.Lba: ...


    class Layout(vmodl.DynamicData):
        @property
        def total(self) -> DiskDimensions.Lba: ...
        @property
        def partition(self) -> List[DiskPartitionInfo.BlockRange]: ...


    class Partition(vmodl.DynamicData):
        @property
        def partition(self) -> int: ...
        @property
        def startSector(self) -> long: ...
        @property
        def endSector(self) -> long: ...
        @property
        def type(self) -> str: ...
        @property
        def guid(self) -> str: ...
        @property
        def logical(self) -> bool: ...
        @property
        def attributes(self) -> byte: ...
        @property
        def partitionAlignment(self) -> long: ...


    class PartitionFormat(Enum):
        gpt = "gpt"
        mbr = "mbr"
        unknown = "unknown"


    class Type(Enum):
        none = "none"
        vmfs = "vmfs"
        linuxNative = "linuxnative"
        linuxSwap = "linuxswap"
        extended = "extended"
        ntfs = "ntfs"
        vmkDiagnostic = "vmkdiagnostic"
        vffs = "vffs"


class DnsConfig(vmodl.DynamicData):
    @property
    def dhcp(self) -> bool: ...
    @property
    def virtualNicDevice(self) -> str: ...
    @property
    def ipv6VirtualNicDevice(self) -> str: ...
    @property
    def hostName(self) -> str: ...
    @property
    def domainName(self) -> str: ...
    @property
    def address(self) -> List[str]: ...
    @property
    def searchDomain(self) -> List[str]: ...


class DnsConfigSpec(DnsConfig):
    @property
    def virtualNicConnection(self) -> VirtualNicConnection: ...
    @property
    def virtualNicConnectionV6(self) -> VirtualNicConnection: ...


class DvxClass(vmodl.DynamicData):
    @property
    def deviceClass(self) -> str: ...
    @property
    def checkpointSupported(self) -> bool: ...
    @property
    def swDMATracingSupported(self) -> bool: ...
    @property
    def sriovNic(self) -> bool: ...


class EnterMaintenanceResult(vmodl.DynamicData):
    @property
    def vmFaults(self) -> List[vim.FaultsByVM]: ...
    @property
    def hostFaults(self) -> List[vim.FaultsByHost]: ...


class ComponentHealthInfo(vmodl.DynamicData):
    @property
    def isStorageHealthy(self) -> bool: ...
    @property
    def isNetworkHealthy(self) -> bool: ...


class FcoeConfig(vmodl.DynamicData):
    @property
    def priorityClass(self) -> int: ...
    @property
    def sourceMac(self) -> str: ...
    @property
    def vlanRange(self) -> List[FcoeConfig.VlanRange]: ...
    @property
    def capabilities(self) -> FcoeConfig.FcoeCapabilities: ...
    @property
    def fcoeActive(self) -> bool: ...


    class FcoeCapabilities(vmodl.DynamicData):
        @property
        def priorityClass(self) -> bool: ...
        @property
        def sourceMacAddress(self) -> bool: ...
        @property
        def vlanRange(self) -> bool: ...


    class FcoeSpecification(vmodl.DynamicData):
        @property
        def underlyingPnic(self) -> str: ...
        @property
        def priorityClass(self) -> int: ...
        @property
        def sourceMac(self) -> str: ...
        @property
        def vlanRange(self) -> List[FcoeConfig.VlanRange]: ...


    class VlanRange(vmodl.DynamicData):
        @property
        def vlanLow(self) -> int: ...
        @property
        def vlanHigh(self) -> int: ...


class FeatureCapability(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def featureName(self) -> str: ...
    @property
    def value(self) -> str: ...


class FeatureMask(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def featureName(self) -> str: ...
    @property
    def value(self) -> str: ...


class FeatureVersionInfo(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def value(self) -> str: ...


    class FeatureVersionKey(Enum):
        faultTolerance = "faulttolerance"


class FibreChannelHba(HostBusAdapter):
    @property
    def portWorldWideName(self) -> long: ...
    @property
    def nodeWorldWideName(self) -> long: ...
    @property
    def portType(self) -> FibreChannelHba.PortType: ...
    @property
    def speed(self) -> long: ...


    class PortType(Enum):
        fabric = "fabric"
        loop = "loop"
        pointToPoint = "pointtopoint"
        unknown = "unknown"


class FibreChannelOverEthernetHba(FibreChannelHba):
    @property
    def underlyingNic(self) -> str: ...
    @property
    def linkInfo(self) -> FibreChannelOverEthernetHba.LinkInfo: ...
    @property
    def isSoftwareFcoe(self) -> bool: ...
    @property
    def markedForRemoval(self) -> bool: ...


    class LinkInfo(vmodl.DynamicData):
        @property
        def vnportMac(self) -> str: ...
        @property
        def fcfMac(self) -> str: ...
        @property
        def vlanId(self) -> int: ...


class FibreChannelOverEthernetTargetTransport(FibreChannelTargetTransport):
    @property
    def vnportMac(self) -> str: ...
    @property
    def fcfMac(self) -> str: ...
    @property
    def vlanId(self) -> int: ...


class FibreChannelTargetTransport(TargetTransport):
    @property
    def portWorldWideName(self) -> long: ...
    @property
    def nodeWorldWideName(self) -> long: ...


class FileAccess(vmodl.DynamicData):
    @property
    def who(self) -> str: ...
    @property
    def what(self) -> str: ...


    class Modes(vmodl.DynamicData):
        @property
        def browse(self) -> str: ...
        @property
        def read(self) -> str: ...
        @property
        def modify(self) -> str: ...
        @property
        def use(self) -> str: ...
        @property
        def admin(self) -> str: ...
        @property
        def full(self) -> str: ...


class FileSystemMountInfo(vmodl.DynamicData):
    @property
    def mountInfo(self) -> MountInfo: ...
    @property
    def volume(self) -> FileSystemVolume: ...
    @property
    def vStorageSupport(self) -> str: ...


    class VStorageSupportStatus(Enum):
        vStorageSupported = "vstoragesupported"
        vStorageUnsupported = "vstorageunsupported"
        vStorageUnknown = "vstorageunknown"


class FileSystemVolume(vmodl.DynamicData):
    @property
    def type(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def capacity(self) -> long: ...


    class FileSystemType(Enum):
        VMFS = "vmfs"
        NFS = "nfs"
        NFS41 = "nfs41"
        CIFS = "cifs"
        vsan = "vsan"
        VFFS = "vffs"
        VVOL = "vvol"
        PMEM = "pmem"
        vsanD = "vsand"
        OTHER = "other"


class FileSystemVolumeInfo(vmodl.DynamicData):
    @property
    def volumeTypeList(self) -> List[str]: ...
    @property
    def mountInfo(self) -> List[FileSystemMountInfo]: ...


class FirewallConfig(vmodl.DynamicData):
    @property
    def rule(self) -> List[FirewallConfig.RuleSetConfig]: ...
    @property
    def defaultBlockingPolicy(self) -> FirewallInfo.DefaultPolicy: ...


    class RuleSetConfig(vmodl.DynamicData):
        @property
        def rulesetId(self) -> str: ...
        @property
        def enabled(self) -> bool: ...
        @property
        def allowedHosts(self) -> Ruleset.IpList: ...


class FirewallInfo(vmodl.DynamicData):
    @property
    def defaultPolicy(self) -> FirewallInfo.DefaultPolicy: ...
    @property
    def ruleset(self) -> List[Ruleset]: ...


    class DefaultPolicy(vmodl.DynamicData):
        @property
        def incomingBlocked(self) -> bool: ...
        @property
        def outgoingBlocked(self) -> bool: ...


class FlagInfo(vmodl.DynamicData):
    @property
    def backgroundSnapshotsEnabled(self) -> bool: ...


class ForceMountedInfo(vmodl.DynamicData):
    @property
    def persist(self) -> bool: ...
    @property
    def mounted(self) -> bool: ...


class Fru(vmodl.DynamicData):
    @property
    def type(self) -> str: ...
    @property
    def partName(self) -> str: ...
    @property
    def partNumber(self) -> str: ...
    @property
    def manufacturer(self) -> str: ...
    @property
    def serialNumber(self) -> str: ...
    @property
    def mfgTimeStamp(self) -> datetime: ...


    class FruType(Enum):
        undefined = "undefined"
        board = "board"
        product = "product"


class GatewaySpec(vmodl.DynamicData):
    @property
    def gatewayType(self) -> str: ...
    @property
    def gatewayId(self) -> str: ...
    @property
    def trustVerificationToken(self) -> str: ...
    @property
    def hostAuthParams(self) -> List[vim.KeyValue]: ...


class GraphicsConfig(vmodl.DynamicData):
    @property
    def hostDefaultGraphicsType(self) -> str: ...
    @property
    def sharedPassthruAssignmentPolicy(self) -> str: ...
    @property
    def deviceType(self) -> List[GraphicsConfig.DeviceType]: ...


    class DeviceType(vmodl.DynamicData):
        @property
        def deviceId(self) -> str: ...
        @property
        def graphicsType(self) -> str: ...


    class GraphicsType(Enum):
        shared = "shared"
        sharedDirect = "shareddirect"


    class SharedPassthruAssignmentPolicy(Enum):
        performance = "performance"
        consolidation = "consolidation"


class GraphicsInfo(vmodl.DynamicData):
    @property
    def deviceName(self) -> str: ...
    @property
    def vendorName(self) -> str: ...
    @property
    def pciId(self) -> str: ...
    @property
    def graphicsType(self) -> str: ...
    @property
    def memorySizeInKB(self) -> long: ...
    @property
    def vm(self) -> List[vim.VirtualMachine]: ...


class HardwareInfo(vmodl.DynamicData):
    @property
    def systemInfo(self) -> SystemInfo: ...
    @property
    def cpuPowerManagementInfo(self) -> CpuPowerManagementInfo: ...
    @property
    def cpuInfo(self) -> CpuInfo: ...
    @property
    def cpuPkg(self) -> List[CpuPackage]: ...
    @property
    def memorySize(self) -> long: ...
    @property
    def numaInfo(self) -> NumaInfo: ...
    @property
    def smcPresent(self) -> bool: ...
    @property
    def pciDevice(self) -> List[PciDevice]: ...
    @property
    def dvxClasses(self) -> List[DvxClass]: ...
    @property
    def cpuFeature(self) -> List[CpuIdInfo]: ...
    @property
    def biosInfo(self) -> BIOSInfo: ...
    @property
    def reliableMemoryInfo(self) -> ReliableMemoryInfo: ...
    @property
    def persistentMemoryInfo(self) -> PersistentMemoryInfo: ...
    @property
    def sgxInfo(self) -> SgxInfo: ...
    @property
    def sevInfo(self) -> SevInfo: ...
    @property
    def memoryTieringType(self) -> str: ...
    @property
    def memoryTierInfo(self) -> List[MemoryTierInfo]: ...


class HardwareStatusInfo(vmodl.DynamicData):
    @property
    def memoryStatusInfo(self) -> List[HardwareStatusInfo.HardwareElementInfo]: ...
    @property
    def cpuStatusInfo(self) -> List[HardwareStatusInfo.HardwareElementInfo]: ...
    @property
    def storageStatusInfo(self) -> List[HardwareStatusInfo.StorageStatusInfo]: ...
    @property
    def dpuStatusInfo(self) -> List[HardwareStatusInfo.DpuStatusInfo]: ...


    class DpuStatusInfo(HardwareStatusInfo.HardwareElementInfo):
        @property
        def dpuId(self) -> str: ...
        @property
        def fru(self) -> Fru: ...
        @property
        def sensors(self) -> List[HardwareStatusInfo.DpuStatusInfo.OperationalInfo]: ...


        class OperationalInfo(vmodl.DynamicData):
            @property
            def sensorId(self) -> str: ...
            @property
            def healthState(self) -> vim.ElementDescription: ...
            @property
            def reading(self) -> str: ...
            @property
            def units(self) -> str: ...
            @property
            def timeStamp(self) -> datetime: ...


    class HardwareElementInfo(vmodl.DynamicData):
        @property
        def name(self) -> str: ...
        @property
        def status(self) -> vim.ElementDescription: ...


    class StorageStatusInfo(HardwareStatusInfo.HardwareElementInfo):
        @property
        def operationalInfo(self) -> List[HardwareStatusInfo.StorageStatusInfo.OperationalInfo]: ...


    class Status(Enum):
        Unknown = "unknown"
        Green = "green"
        Yellow = "yellow"
        Red = "red"


class HbaCreateSpec(vmodl.DynamicData): ...


class HostBusAdapter(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def device(self) -> str: ...
    @property
    def bus(self) -> int: ...
    @property
    def status(self) -> str: ...
    @property
    def model(self) -> str: ...
    @property
    def driver(self) -> str: ...
    @property
    def pci(self) -> str: ...
    @property
    def storageProtocol(self) -> str: ...


class HostProxySwitch(vmodl.DynamicData):
    @property
    def dvsUuid(self) -> str: ...
    @property
    def dvsName(self) -> str: ...
    @property
    def key(self) -> str: ...
    @property
    def numPorts(self) -> int: ...
    @property
    def configNumPorts(self) -> int: ...
    @property
    def numPortsAvailable(self) -> int: ...
    @property
    def uplinkPort(self) -> List[vim.KeyValue]: ...
    @property
    def mtu(self) -> int: ...
    @property
    def pnic(self) -> List[Link]: ...
    @property
    def spec(self) -> HostProxySwitch.Specification: ...
    @property
    def hostLag(self) -> List[HostProxySwitch.HostLagConfig]: ...
    @property
    def networkReservationSupported(self) -> bool: ...
    @property
    def nsxtEnabled(self) -> bool: ...
    @property
    def ensEnabled(self) -> bool: ...
    @property
    def ensInterruptEnabled(self) -> bool: ...
    @property
    def transportZones(self) -> List[vim.dvs.HostMember.TransportZoneInfo]: ...
    @property
    def nsxUsedUplinkPort(self) -> List[str]: ...
    @property
    def nsxtStatus(self) -> str: ...
    @property
    def nsxtStatusDetail(self) -> str: ...
    @property
    def ensInfo(self) -> HostProxySwitch.EnsInfo: ...
    @property
    def networkOffloadingEnabled(self) -> bool: ...


    class EnsInfo(vmodl.DynamicData):
        @property
        def opsVersion(self) -> long: ...
        @property
        def numPSOps(self) -> long: ...
        @property
        def numLcoreOps(self) -> long: ...
        @property
        def errorStatus(self) -> long: ...
        @property
        def lcoreStatus(self) -> long: ...


    class HostLagConfig(vmodl.DynamicData):
        @property
        def lagKey(self) -> str: ...
        @property
        def lagName(self) -> str: ...
        @property
        def uplinkPort(self) -> List[vim.KeyValue]: ...


class InternetScsiHba(HostBusAdapter):
    @property
    def isSoftwareBased(self) -> bool: ...
    @property
    def canBeDisabled(self) -> bool: ...
    @property
    def networkBindingSupport(self) -> InternetScsiHba.NetworkBindingSupportType: ...
    @property
    def discoveryCapabilities(self) -> InternetScsiHba.DiscoveryCapabilities: ...
    @property
    def discoveryProperties(self) -> InternetScsiHba.DiscoveryProperties: ...
    @property
    def authenticationCapabilities(self) -> InternetScsiHba.AuthenticationCapabilities: ...
    @property
    def authenticationProperties(self) -> InternetScsiHba.AuthenticationProperties: ...
    @property
    def digestCapabilities(self) -> InternetScsiHba.DigestCapabilities: ...
    @property
    def digestProperties(self) -> InternetScsiHba.DigestProperties: ...
    @property
    def ipCapabilities(self) -> InternetScsiHba.IPCapabilities: ...
    @property
    def ipProperties(self) -> InternetScsiHba.IPProperties: ...
    @property
    def supportedAdvancedOptions(self) -> List[vim.option.OptionDef]: ...
    @property
    def advancedOptions(self) -> List[InternetScsiHba.ParamValue]: ...
    @property
    def iScsiName(self) -> str: ...
    @property
    def iScsiAlias(self) -> str: ...
    @property
    def configuredSendTarget(self) -> List[InternetScsiHba.SendTarget]: ...
    @property
    def configuredStaticTarget(self) -> List[InternetScsiHba.StaticTarget]: ...
    @property
    def maxSpeedMb(self) -> int: ...
    @property
    def currentSpeedMb(self) -> int: ...


    class AuthenticationCapabilities(vmodl.DynamicData):
        @property
        def chapAuthSettable(self) -> bool: ...
        @property
        def krb5AuthSettable(self) -> bool: ...
        @property
        def srpAuthSettable(self) -> bool: ...
        @property
        def spkmAuthSettable(self) -> bool: ...
        @property
        def mutualChapSettable(self) -> bool: ...
        @property
        def targetChapSettable(self) -> bool: ...
        @property
        def targetMutualChapSettable(self) -> bool: ...


    class AuthenticationProperties(vmodl.DynamicData):
        @property
        def chapAuthEnabled(self) -> bool: ...
        @property
        def chapName(self) -> str: ...
        @property
        def chapSecret(self) -> str: ...
        @property
        def chapAuthenticationType(self) -> str: ...
        @property
        def chapInherited(self) -> bool: ...
        @property
        def mutualChapName(self) -> str: ...
        @property
        def mutualChapSecret(self) -> str: ...
        @property
        def mutualChapAuthenticationType(self) -> str: ...
        @property
        def mutualChapInherited(self) -> bool: ...


    class DigestCapabilities(vmodl.DynamicData):
        @property
        def headerDigestSettable(self) -> bool: ...
        @property
        def dataDigestSettable(self) -> bool: ...
        @property
        def targetHeaderDigestSettable(self) -> bool: ...
        @property
        def targetDataDigestSettable(self) -> bool: ...


    class DigestProperties(vmodl.DynamicData):
        @property
        def headerDigestType(self) -> str: ...
        @property
        def headerDigestInherited(self) -> bool: ...
        @property
        def dataDigestType(self) -> str: ...
        @property
        def dataDigestInherited(self) -> bool: ...


    class DiscoveryCapabilities(vmodl.DynamicData):
        @property
        def iSnsDiscoverySettable(self) -> bool: ...
        @property
        def slpDiscoverySettable(self) -> bool: ...
        @property
        def staticTargetDiscoverySettable(self) -> bool: ...
        @property
        def sendTargetsDiscoverySettable(self) -> bool: ...


    class DiscoveryProperties(vmodl.DynamicData):
        @property
        def iSnsDiscoveryEnabled(self) -> bool: ...
        @property
        def iSnsDiscoveryMethod(self) -> str: ...
        @property
        def iSnsHost(self) -> str: ...
        @property
        def slpDiscoveryEnabled(self) -> bool: ...
        @property
        def slpDiscoveryMethod(self) -> str: ...
        @property
        def slpHost(self) -> str: ...
        @property
        def staticTargetDiscoveryEnabled(self) -> bool: ...
        @property
        def sendTargetsDiscoveryEnabled(self) -> bool: ...


        class ISnsDiscoveryMethod(Enum):
            isnsStatic = "isnsstatic"
            isnsDhcp = "isnsdhcp"
            isnsSlp = "isnsslp"


        class SlpDiscoveryMethod(Enum):
            slpDhcp = "slpdhcp"
            slpAutoUnicast = "slpautounicast"
            slpAutoMulticast = "slpautomulticast"
            slpManual = "slpmanual"


    class IPCapabilities(vmodl.DynamicData):
        @property
        def addressSettable(self) -> bool: ...
        @property
        def ipConfigurationMethodSettable(self) -> bool: ...
        @property
        def subnetMaskSettable(self) -> bool: ...
        @property
        def defaultGatewaySettable(self) -> bool: ...
        @property
        def primaryDnsServerAddressSettable(self) -> bool: ...
        @property
        def alternateDnsServerAddressSettable(self) -> bool: ...
        @property
        def ipv6Supported(self) -> bool: ...
        @property
        def arpRedirectSettable(self) -> bool: ...
        @property
        def mtuSettable(self) -> bool: ...
        @property
        def hostNameAsTargetAddress(self) -> bool: ...
        @property
        def nameAliasSettable(self) -> bool: ...
        @property
        def ipv4EnableSettable(self) -> bool: ...
        @property
        def ipv6EnableSettable(self) -> bool: ...
        @property
        def ipv6PrefixLengthSettable(self) -> bool: ...
        @property
        def ipv6PrefixLength(self) -> int: ...
        @property
        def ipv6DhcpConfigurationSettable(self) -> bool: ...
        @property
        def ipv6LinkLocalAutoConfigurationSettable(self) -> bool: ...
        @property
        def ipv6RouterAdvertisementConfigurationSettable(self) -> bool: ...
        @property
        def ipv6DefaultGatewaySettable(self) -> bool: ...
        @property
        def ipv6MaxStaticAddressesSupported(self) -> int: ...


    class IPProperties(vmodl.DynamicData):
        @property
        def mac(self) -> str: ...
        @property
        def address(self) -> str: ...
        @property
        def dhcpConfigurationEnabled(self) -> bool: ...
        @property
        def subnetMask(self) -> str: ...
        @property
        def defaultGateway(self) -> str: ...
        @property
        def primaryDnsServerAddress(self) -> str: ...
        @property
        def alternateDnsServerAddress(self) -> str: ...
        @property
        def ipv6Address(self) -> str: ...
        @property
        def ipv6SubnetMask(self) -> str: ...
        @property
        def ipv6DefaultGateway(self) -> str: ...
        @property
        def arpRedirectEnabled(self) -> bool: ...
        @property
        def mtu(self) -> int: ...
        @property
        def jumboFramesEnabled(self) -> bool: ...
        @property
        def ipv4Enabled(self) -> bool: ...
        @property
        def ipv6Enabled(self) -> bool: ...
        @property
        def ipv6properties(self) -> InternetScsiHba.IPv6Properties: ...


    class IPv6Properties(vmodl.DynamicData):
        @property
        def iscsiIpv6Address(self) -> List[InternetScsiHba.IscsiIpv6Address]: ...
        @property
        def ipv6DhcpConfigurationEnabled(self) -> bool: ...
        @property
        def ipv6LinkLocalAutoConfigurationEnabled(self) -> bool: ...
        @property
        def ipv6RouterAdvertisementConfigurationEnabled(self) -> bool: ...
        @property
        def ipv6DefaultGateway(self) -> str: ...


    class IscsiIpv6Address(vmodl.DynamicData):
        @property
        def address(self) -> str: ...
        @property
        def prefixLength(self) -> int: ...
        @property
        def origin(self) -> str: ...
        @property
        def operation(self) -> str: ...


        class AddressConfigurationType(Enum):
            DHCP = "dhcp"
            AutoConfigured = "autoconfigured"
            Static = "static"
            Other = "other"


        class IPv6AddressOperation(Enum):
            add = "add"
            remove = "remove"


    class ParamValue(vim.option.OptionValue):
        @property
        def isInherited(self) -> bool: ...


    class SendTarget(vmodl.DynamicData):
        @property
        def address(self) -> str: ...
        @property
        def port(self) -> int: ...
        @property
        def authenticationProperties(self) -> InternetScsiHba.AuthenticationProperties: ...
        @property
        def digestProperties(self) -> InternetScsiHba.DigestProperties: ...
        @property
        def supportedAdvancedOptions(self) -> List[vim.option.OptionDef]: ...
        @property
        def advancedOptions(self) -> List[InternetScsiHba.ParamValue]: ...
        @property
        def parent(self) -> str: ...


    class StaticTarget(vmodl.DynamicData):
        @property
        def address(self) -> str: ...
        @property
        def port(self) -> int: ...
        @property
        def iScsiName(self) -> str: ...
        @property
        def discoveryMethod(self) -> str: ...
        @property
        def authenticationProperties(self) -> InternetScsiHba.AuthenticationProperties: ...
        @property
        def digestProperties(self) -> InternetScsiHba.DigestProperties: ...
        @property
        def supportedAdvancedOptions(self) -> List[vim.option.OptionDef]: ...
        @property
        def advancedOptions(self) -> List[InternetScsiHba.ParamValue]: ...
        @property
        def parent(self) -> str: ...


        class TargetDiscoveryMethod(Enum):
            staticMethod = "staticmethod"
            sendTargetMethod = "sendtargetmethod"
            slpMethod = "slpmethod"
            isnsMethod = "isnsmethod"
            unknownMethod = "unknownmethod"


    class TargetSet(vmodl.DynamicData):
        @property
        def staticTargets(self) -> List[InternetScsiHba.StaticTarget]: ...
        @property
        def sendTargets(self) -> List[InternetScsiHba.SendTarget]: ...


    class ChapAuthenticationType(Enum):
        chapProhibited = "chapprohibited"
        chapDiscouraged = "chapdiscouraged"
        chapPreferred = "chappreferred"
        chapRequired = "chaprequired"


    class DigestType(Enum):
        digestProhibited = "digestprohibited"
        digestDiscouraged = "digestdiscouraged"
        digestPreferred = "digestpreferred"
        digestRequired = "digestrequired"


    class NetworkBindingSupportType(Enum):
        notsupported = "notsupported"
        optional = "optional"
        required = "required"


class InternetScsiTargetTransport(TargetTransport):
    @property
    def iScsiName(self) -> str: ...
    @property
    def iScsiAlias(self) -> str: ...
    @property
    def address(self) -> List[str]: ...


class IpConfig(vmodl.DynamicData):
    @property
    def dhcp(self) -> bool: ...
    @property
    def ipAddress(self) -> str: ...
    @property
    def subnetMask(self) -> str: ...
    @property
    def ipV6Config(self) -> IpConfig.IpV6AddressConfiguration: ...


    class IpV6Address(vmodl.DynamicData):
        @property
        def ipAddress(self) -> str: ...
        @property
        def prefixLength(self) -> int: ...
        @property
        def origin(self) -> str: ...
        @property
        def dadState(self) -> str: ...
        @property
        def lifetime(self) -> datetime: ...
        @property
        def operation(self) -> str: ...


    class IpV6AddressConfiguration(vmodl.DynamicData):
        @property
        def ipV6Address(self) -> List[IpConfig.IpV6Address]: ...
        @property
        def autoConfigurationEnabled(self) -> bool: ...
        @property
        def dhcpV6Enabled(self) -> bool: ...


    class IpV6AddressConfigType(Enum):
        other = "other"
        manual = "manual"
        dhcp = "dhcp"
        linklayer = "linklayer"
        random = "random"


    class IpV6AddressStatus(Enum):
        preferred = "preferred"
        deprecated = "deprecated"
        invalid = "invalid"
        inaccessible = "inaccessible"
        unknown = "unknown"
        tentative = "tentative"
        duplicate = "duplicate"


class IpRouteConfig(vmodl.DynamicData):
    @property
    def defaultGateway(self) -> str: ...
    @property
    def gatewayDevice(self) -> str: ...
    @property
    def ipV6DefaultGateway(self) -> str: ...
    @property
    def ipV6GatewayDevice(self) -> str: ...


class IpRouteConfigSpec(IpRouteConfig):
    @property
    def gatewayDeviceConnection(self) -> VirtualNicConnection: ...
    @property
    def ipV6GatewayDeviceConnection(self) -> VirtualNicConnection: ...


class IpRouteEntry(vmodl.DynamicData):
    @property
    def network(self) -> str: ...
    @property
    def prefixLength(self) -> int: ...
    @property
    def gateway(self) -> str: ...
    @property
    def deviceName(self) -> str: ...


class IpRouteOp(vmodl.DynamicData):
    @property
    def changeOperation(self) -> str: ...
    @property
    def route(self) -> IpRouteEntry: ...


class IpRouteTableConfig(vmodl.DynamicData):
    @property
    def ipRoute(self) -> List[IpRouteOp]: ...
    @property
    def ipv6Route(self) -> List[IpRouteOp]: ...


class IpRouteTableInfo(vmodl.DynamicData):
    @property
    def ipRoute(self) -> List[IpRouteEntry]: ...
    @property
    def ipv6Route(self) -> List[IpRouteEntry]: ...


class IpmiInfo(vmodl.DynamicData):
    @property
    def bmcIpAddress(self) -> str: ...
    @property
    def bmcMacAddress(self) -> str: ...
    @property
    def login(self) -> str: ...
    @property
    def password(self) -> str: ...


class LicenseSpec(vmodl.DynamicData):
    @property
    def source(self) -> vim.LicenseManager.LicenseSource: ...
    @property
    def editionKey(self) -> str: ...
    @property
    def disabledFeatureKey(self) -> List[str]: ...
    @property
    def enabledFeatureKey(self) -> List[str]: ...


class LinkDiscoveryProtocolConfig(vmodl.DynamicData):
    @property
    def protocol(self) -> str: ...
    @property
    def operation(self) -> str: ...


    class OperationType(Enum):
        none = "none"
        listen = "listen"
        advertise = "advertise"
        both = "both"


    class ProtocolType(Enum):
        cdp = "cdp"
        lldp = "lldp"


class LocalAuthenticationInfo(AuthenticationStoreInfo): ...


class LocalDatastoreInfo(vim.Datastore.Info):
    @property
    def path(self) -> str: ...


class LocalFileSystemVolume(FileSystemVolume):
    @property
    def device(self) -> str: ...


class DiskLayoutSpec(vmodl.DynamicData):
    @property
    def controllerType(self) -> type: ...
    @property
    def busNumber(self) -> int: ...
    @property
    def unitNumber(self) -> int: ...
    @property
    def srcFilename(self) -> str: ...
    @property
    def dstFilename(self) -> str: ...


class FileDeleteResult(vmodl.DynamicData):
    @property
    def fileName(self) -> str: ...
    @property
    def fault(self) -> vmodl.MethodFault: ...


class FileDeleteSpec(vmodl.DynamicData):
    @property
    def fileName(self) -> str: ...
    @property
    def fileType(self) -> str: ...


class FileReserveResult(vmodl.DynamicData):
    @property
    def baseName(self) -> str: ...
    @property
    def parentDir(self) -> str: ...
    @property
    def reservedName(self) -> str: ...


class FileReserveSpec(vmodl.DynamicData):
    @property
    def baseName(self) -> str: ...
    @property
    def parentDir(self) -> str: ...
    @property
    def fileType(self) -> str: ...
    @property
    def storageProfile(self) -> str: ...


class SnapshotLayoutSpec(vmodl.DynamicData):
    @property
    def id(self) -> int: ...
    @property
    def srcFilename(self) -> str: ...
    @property
    def dstFilename(self) -> str: ...
    @property
    def disk(self) -> List[LowLevelProvisioningManager.DiskLayoutSpec]: ...


class VmMigrationStatus(vmodl.DynamicData):
    @property
    def migrationId(self) -> long: ...
    @property
    def type(self) -> str: ...
    @property
    def source(self) -> bool: ...
    @property
    def consideredSuccessful(self) -> bool: ...


class VmRecoveryInfo(vmodl.DynamicData):
    @property
    def version(self) -> str: ...
    @property
    def biosUUID(self) -> str: ...
    @property
    def instanceUUID(self) -> str: ...
    @property
    def ftInfo(self) -> vim.vm.FaultToleranceConfigInfo: ...


class MaintenanceSpec(vmodl.DynamicData):
    @property
    def vsanMode(self) -> DecommissionMode: ...
    @property
    def purpose(self) -> str: ...


    class Purpose(Enum):
        hostUpgrade = "hostupgrade"


class MemorySpec(vmodl.DynamicData):
    @property
    def serviceConsoleReservation(self) -> long: ...


class MemoryTierInfo(vmodl.DynamicData):
    @property
    def name(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def flags(self) -> List[str]: ...
    @property
    def size(self) -> long: ...


class MountInfo(vmodl.DynamicData):
    @property
    def path(self) -> str: ...
    @property
    def accessMode(self) -> str: ...
    @property
    def mounted(self) -> bool: ...
    @property
    def accessible(self) -> bool: ...
    @property
    def inaccessibleReason(self) -> str: ...
    @property
    def vmknicName(self) -> str: ...
    @property
    def vmknicActive(self) -> bool: ...
    @property
    def mountFailedReason(self) -> str: ...
    @property
    def numTcpConnections(self) -> int: ...


    class InaccessibleReason(Enum):
        AllPathsDown_Start = "allpathsdown_start"
        AllPathsDown_Timeout = "allpathsdown_timeout"
        PermanentDeviceLoss = "permanentdeviceloss"


    class MountFailedReason(Enum):
        CONNECT_FAILURE = "connect_failure"
        MOUNT_NOT_SUPPORTED = "mount_not_supported"
        NFS_NOT_SUPPORTED = "nfs_not_supported"
        MOUNT_DENIED = "mount_denied"
        MOUNT_NOT_DIR = "mount_not_dir"
        VOLUME_LIMIT_EXCEEDED = "volume_limit_exceeded"
        CONN_LIMIT_EXCEEDED = "conn_limit_exceeded"
        MOUNT_EXISTS = "mount_exists"
        OTHERS = "others"


class MultipathInfo(vmodl.DynamicData):
    @property
    def lun(self) -> List[MultipathInfo.LogicalUnit]: ...


    class FixedLogicalUnitPolicy(MultipathInfo.LogicalUnitPolicy):
        @property
        def prefer(self) -> str: ...


    class HppLogicalUnitPolicy(MultipathInfo.LogicalUnitPolicy):
        @property
        def bytes(self) -> long: ...
        @property
        def iops(self) -> long: ...
        @property
        def path(self) -> str: ...
        @property
        def latencyEvalTime(self) -> long: ...
        @property
        def samplingIosPerPath(self) -> long: ...


    class LogicalUnit(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def id(self) -> str: ...
        @property
        def lun(self) -> Link: ...
        @property
        def path(self) -> List[MultipathInfo.Path]: ...
        @property
        def policy(self) -> MultipathInfo.LogicalUnitPolicy: ...
        @property
        def storageArrayTypePolicy(self) -> MultipathInfo.LogicalUnitStorageArrayTypePolicy: ...


    class LogicalUnitPolicy(vmodl.DynamicData):
        @property
        def policy(self) -> str: ...


    class LogicalUnitStorageArrayTypePolicy(vmodl.DynamicData):
        @property
        def policy(self) -> str: ...


    class Path(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def name(self) -> str: ...
        @property
        def pathState(self) -> str: ...
        @property
        def state(self) -> str: ...
        @property
        def isWorkingPath(self) -> bool: ...
        @property
        def adapter(self) -> Link: ...
        @property
        def lun(self) -> Link: ...
        @property
        def transport(self) -> TargetTransport: ...


    class PathState(Enum):
        standby = "standby"
        active = "active"
        disabled = "disabled"
        dead = "dead"
        unknown = "unknown"


class MultipathStateInfo(vmodl.DynamicData):
    @property
    def path(self) -> List[MultipathStateInfo.Path]: ...


class NasDatastoreInfo(vim.Datastore.Info):
    @property
    def nas(self) -> NasVolume: ...


class NasVolume(FileSystemVolume):
    @property
    def remoteHost(self) -> str: ...
    @property
    def remotePath(self) -> str: ...
    @property
    def userName(self) -> str: ...
    @property
    def remoteHostNames(self) -> List[str]: ...
    @property
    def securityType(self) -> str: ...
    @property
    def protocolEndpoint(self) -> bool: ...


    class UserInfo(vmodl.DynamicData):
        @property
        def user(self) -> str: ...


    class SecurityType(Enum):
        AUTH_SYS = "auth_sys"
        SEC_KRB5 = "sec_krb5"
        SEC_KRB5I = "sec_krb5i"


class NatService(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def spec(self) -> NatService.Specification: ...


    class NameServiceSpec(vmodl.DynamicData):
        @property
        def dnsAutoDetect(self) -> bool: ...
        @property
        def dnsPolicy(self) -> str: ...
        @property
        def dnsRetries(self) -> int: ...
        @property
        def dnsTimeout(self) -> int: ...
        @property
        def dnsNameServer(self) -> List[str]: ...
        @property
        def nbdsTimeout(self) -> int: ...
        @property
        def nbnsRetries(self) -> int: ...
        @property
        def nbnsTimeout(self) -> int: ...


    class PortForwardSpecification(vmodl.DynamicData):
        @property
        def type(self) -> str: ...
        @property
        def name(self) -> str: ...
        @property
        def hostPort(self) -> int: ...
        @property
        def guestPort(self) -> int: ...
        @property
        def guestIpAddress(self) -> str: ...


class NetCapabilities(vmodl.DynamicData):
    @property
    def canSetPhysicalNicLinkSpeed(self) -> bool: ...
    @property
    def supportsNicTeaming(self) -> bool: ...
    @property
    def nicTeamingPolicy(self) -> List[str]: ...
    @property
    def supportsVlan(self) -> bool: ...
    @property
    def usesServiceConsoleNic(self) -> bool: ...
    @property
    def supportsNetworkHints(self) -> bool: ...
    @property
    def maxPortGroupsPerVswitch(self) -> int: ...
    @property
    def vswitchConfigSupported(self) -> bool: ...
    @property
    def vnicConfigSupported(self) -> bool: ...
    @property
    def ipRouteConfigSupported(self) -> bool: ...
    @property
    def dnsConfigSupported(self) -> bool: ...
    @property
    def dhcpOnVnicSupported(self) -> bool: ...
    @property
    def ipV6Supported(self) -> bool: ...
    @property
    def backupNfcNiocSupported(self) -> bool: ...


class NetOffloadCapabilities(vmodl.DynamicData):
    @property
    def csumOffload(self) -> bool: ...
    @property
    def tcpSegmentation(self) -> bool: ...
    @property
    def zeroCopyXmit(self) -> bool: ...


class NetStackInstance(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def dnsConfig(self) -> DnsConfig: ...
    @property
    def ipRouteConfig(self) -> IpRouteConfig: ...
    @property
    def requestedMaxNumberOfConnections(self) -> int: ...
    @property
    def congestionControlAlgorithm(self) -> str: ...
    @property
    def ipV6Enabled(self) -> bool: ...
    @property
    def routeTableConfig(self) -> IpRouteTableConfig: ...


    class CongestionControlAlgorithmType(Enum):
        newreno = "newreno"
        cubic = "cubic"


    class SystemStackKey(Enum):
        defaultTcpipStack = "defaulttcpipstack"
        vmotion = "vmotion"
        vSphereProvisioning = "vsphereprovisioning"
        mirror = "mirror"
        ops = "ops"


class NetworkConfig(vmodl.DynamicData):
    @property
    def vswitch(self) -> List[VirtualSwitch.Config]: ...
    @property
    def proxySwitch(self) -> List[HostProxySwitch.Config]: ...
    @property
    def portgroup(self) -> List[PortGroup.Config]: ...
    @property
    def pnic(self) -> List[PhysicalNic.Config]: ...
    @property
    def vnic(self) -> List[VirtualNic.Config]: ...
    @property
    def consoleVnic(self) -> List[VirtualNic.Config]: ...
    @property
    def dnsConfig(self) -> DnsConfig: ...
    @property
    def ipRouteConfig(self) -> IpRouteConfig: ...
    @property
    def consoleIpRouteConfig(self) -> IpRouteConfig: ...
    @property
    def routeTableConfig(self) -> IpRouteTableConfig: ...
    @property
    def dhcp(self) -> List[DhcpService.Config]: ...
    @property
    def nat(self) -> List[NatService.Config]: ...
    @property
    def ipV6Enabled(self) -> bool: ...
    @property
    def netStackSpec(self) -> List[NetworkConfig.NetStackSpec]: ...
    @property
    def migrationStatus(self) -> str: ...


    class NetStackSpec(vmodl.DynamicData):
        @property
        def netStackInstance(self) -> NetStackInstance: ...
        @property
        def operation(self) -> str: ...


    class Result(vmodl.DynamicData):
        @property
        def vnicDevice(self) -> List[str]: ...
        @property
        def consoleVnicDevice(self) -> List[str]: ...


class NetworkPolicy(vmodl.DynamicData):
    @property
    def security(self) -> NetworkPolicy.SecurityPolicy: ...
    @property
    def nicTeaming(self) -> NetworkPolicy.NicTeamingPolicy: ...
    @property
    def offloadPolicy(self) -> NetOffloadCapabilities: ...
    @property
    def shapingPolicy(self) -> NetworkPolicy.TrafficShapingPolicy: ...


    class NicFailureCriteria(vmodl.DynamicData):
        @property
        def checkSpeed(self) -> str: ...
        @property
        def speed(self) -> int: ...
        @property
        def checkDuplex(self) -> bool: ...
        @property
        def fullDuplex(self) -> bool: ...
        @property
        def checkErrorPercent(self) -> bool: ...
        @property
        def percentage(self) -> int: ...
        @property
        def checkBeacon(self) -> bool: ...


    class NicOrderPolicy(vmodl.DynamicData):
        @property
        def activeNic(self) -> List[str]: ...
        @property
        def standbyNic(self) -> List[str]: ...


    class NicTeamingPolicy(vmodl.DynamicData):
        @property
        def policy(self) -> str: ...
        @property
        def reversePolicy(self) -> bool: ...
        @property
        def notifySwitches(self) -> bool: ...
        @property
        def rollingOrder(self) -> bool: ...
        @property
        def failureCriteria(self) -> NetworkPolicy.NicFailureCriteria: ...
        @property
        def nicOrder(self) -> NetworkPolicy.NicOrderPolicy: ...


    class SecurityPolicy(vmodl.DynamicData):
        @property
        def allowPromiscuous(self) -> bool: ...
        @property
        def macChanges(self) -> bool: ...
        @property
        def forgedTransmits(self) -> bool: ...


    class TrafficShapingPolicy(vmodl.DynamicData):
        @property
        def enabled(self) -> bool: ...
        @property
        def averageBandwidth(self) -> long: ...
        @property
        def peakBandwidth(self) -> long: ...
        @property
        def burstSize(self) -> long: ...


class NfcConnectionInfo(DataTransportConnectionInfo):
    @property
    def streamingMemoryConsumed(self) -> long: ...


class NtpConfig(vmodl.DynamicData):
    @property
    def server(self) -> List[str]: ...
    @property
    def configFile(self) -> List[str]: ...


class NumaInfo(vmodl.DynamicData):
    @property
    def type(self) -> str: ...
    @property
    def numNodes(self) -> int: ...
    @property
    def numaNode(self) -> List[NumaNode]: ...


class NumaNode(vmodl.DynamicData):
    @property
    def typeId(self) -> byte: ...
    @property
    def cpuID(self) -> List[short]: ...
    @property
    def memorySize(self) -> long: ...
    @property
    def memoryRangeBegin(self) -> long: ...
    @property
    def memoryRangeLength(self) -> long: ...
    @property
    def pciId(self) -> List[str]: ...


class NumericSensorInfo(vmodl.DynamicData):
    @property
    def name(self) -> str: ...
    @property
    def healthState(self) -> vim.ElementDescription: ...
    @property
    def currentReading(self) -> long: ...
    @property
    def unitModifier(self) -> int: ...
    @property
    def baseUnits(self) -> str: ...
    @property
    def rateUnits(self) -> str: ...
    @property
    def sensorType(self) -> str: ...
    @property
    def id(self) -> str: ...
    @property
    def sensorNumber(self) -> long: ...
    @property
    def timeStamp(self) -> str: ...
    @property
    def fru(self) -> Fru: ...


    class HealthState(Enum):
        unknown = "unknown"
        green = "green"
        yellow = "yellow"
        red = "red"


    class SensorType(Enum):
        fan = "fan"
        power = "power"
        temperature = "temperature"
        voltage = "voltage"
        other = "other"
        processor = "processor"
        memory = "memory"
        storage = "storage"
        systemBoard = "systemboard"
        battery = "battery"
        bios = "bios"
        cable = "cable"
        watchdog = "watchdog"


class NvmeConnectSpec(NvmeSpec):
    @property
    def subnqn(self) -> str: ...
    @property
    def controllerId(self) -> int: ...
    @property
    def adminQueueSize(self) -> int: ...
    @property
    def keepAliveTimeout(self) -> int: ...


class NvmeController(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def controllerNumber(self) -> int: ...
    @property
    def subnqn(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def associatedAdapter(self) -> Link: ...
    @property
    def transportType(self) -> str: ...
    @property
    def fusedOperationSupported(self) -> bool: ...
    @property
    def numberOfQueues(self) -> int: ...
    @property
    def queueSize(self) -> int: ...
    @property
    def attachedNamespace(self) -> List[NvmeNamespace]: ...
    @property
    def vendorId(self) -> str: ...
    @property
    def model(self) -> str: ...
    @property
    def serialNumber(self) -> str: ...
    @property
    def firmwareVersion(self) -> str: ...


class NvmeDisconnectSpec(vmodl.DynamicData):
    @property
    def hbaName(self) -> str: ...
    @property
    def subnqn(self) -> str: ...
    @property
    def controllerNumber(self) -> int: ...


class NvmeDiscoverSpec(NvmeSpec):
    @property
    def autoConnect(self) -> bool: ...
    @property
    def rootDiscoveryController(self) -> bool: ...


class NvmeDiscoveryLog(vmodl.DynamicData):
    @property
    def entry(self) -> List[NvmeDiscoveryLog.Entry]: ...
    @property
    def complete(self) -> bool: ...


    class Entry(vmodl.DynamicData):
        @property
        def subnqn(self) -> str: ...
        @property
        def subsystemType(self) -> str: ...
        @property
        def subsystemPortId(self) -> int: ...
        @property
        def controllerId(self) -> int: ...
        @property
        def adminQueueMaxSize(self) -> int: ...
        @property
        def transportParameters(self) -> NvmeTransportParameters: ...
        @property
        def transportRequirements(self) -> str: ...
        @property
        def connected(self) -> bool: ...


    class SubsystemType(Enum):
        discovery = "discovery"
        nvm = "nvm"


    class TransportRequirements(Enum):
        secureChannelRequired = "securechannelrequired"
        secureChannelNotRequired = "securechannelnotrequired"
        requirementsNotSpecified = "requirementsnotspecified"


class NvmeNamespace(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def id(self) -> int: ...
    @property
    def blockSize(self) -> int: ...
    @property
    def capacityInBlocks(self) -> long: ...


class NvmeOpaqueTransportParameters(NvmeTransportParameters):
    @property
    def trtype(self) -> str: ...
    @property
    def traddr(self) -> str: ...
    @property
    def adrfam(self) -> str: ...
    @property
    def trsvcid(self) -> str: ...
    @property
    def tsas(self) -> binary: ...


class NvmeOverFibreChannelParameters(NvmeTransportParameters):
    @property
    def nodeWorldWideName(self) -> long: ...
    @property
    def portWorldWideName(self) -> long: ...


class NvmeOverRdmaParameters(NvmeTransportParameters):
    @property
    def address(self) -> str: ...
    @property
    def addressFamily(self) -> str: ...
    @property
    def portNumber(self) -> int: ...


class NvmeOverTcpParameters(NvmeTransportParameters):
    @property
    def address(self) -> str: ...
    @property
    def portNumber(self) -> int: ...
    @property
    def digestVerification(self) -> str: ...


class NvmeSpec(vmodl.DynamicData):
    @property
    def hbaName(self) -> str: ...
    @property
    def transportParameters(self) -> NvmeTransportParameters: ...


class NvmeTopology(vmodl.DynamicData):
    @property
    def adapter(self) -> List[NvmeTopology.Interface]: ...


    class Interface(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def adapter(self) -> Link: ...
        @property
        def connectedController(self) -> List[NvmeController]: ...


class NvmeTransportParameters(vmodl.DynamicData):


    class NvmeAddressFamily(Enum):
        ipv4 = "ipv4"
        ipv6 = "ipv6"
        infiniBand = "infiniband"
        fc = "fc"
        loopback = "loopback"
        unknown = "unknown"


class OpaqueNetworkInfo(vmodl.DynamicData):
    @property
    def opaqueNetworkId(self) -> str: ...
    @property
    def opaqueNetworkName(self) -> str: ...
    @property
    def opaqueNetworkType(self) -> str: ...
    @property
    def pnicZone(self) -> List[str]: ...
    @property
    def capability(self) -> vim.OpaqueNetwork.Capability: ...
    @property
    def extraConfig(self) -> List[vim.option.OptionValue]: ...


class OpaqueSwitch(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def pnic(self) -> List[Link]: ...
    @property
    def pnicZone(self) -> List[OpaqueSwitch.PhysicalNicZone]: ...
    @property
    def status(self) -> str: ...
    @property
    def vtep(self) -> List[VirtualNic]: ...
    @property
    def extraConfig(self) -> List[vim.option.OptionValue]: ...
    @property
    def featureCapability(self) -> List[FeatureCapability]: ...


    class PhysicalNicZone(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def pnicDevice(self) -> List[str]: ...


    class OpaqueSwitchState(Enum):
        up = "up"
        warning = "warning"
        down = "down"
        maintenance = "maintenance"


class PMemDatastoreInfo(vim.Datastore.Info):
    @property
    def pmem(self) -> PMemVolume: ...


class PMemVolume(FileSystemVolume):
    @property
    def uuid(self) -> str: ...
    @property
    def version(self) -> str: ...


class ParallelScsiHba(HostBusAdapter): ...


class ParallelScsiTargetTransport(TargetTransport): ...


class PathSelectionPolicyOption(vmodl.DynamicData):
    @property
    def policy(self) -> vim.ElementDescription: ...


class PciDevice(vmodl.DynamicData):
    @property
    def id(self) -> str: ...
    @property
    def classId(self) -> short: ...
    @property
    def bus(self) -> byte: ...
    @property
    def slot(self) -> byte: ...
    @property
    def function(self) -> byte: ...
    @property
    def vendorId(self) -> short: ...
    @property
    def subVendorId(self) -> short: ...
    @property
    def vendorName(self) -> str: ...
    @property
    def deviceId(self) -> short: ...
    @property
    def subDeviceId(self) -> short: ...
    @property
    def parentBridge(self) -> str: ...
    @property
    def deviceName(self) -> str: ...


class PciPassthruConfig(vmodl.DynamicData):
    @property
    def id(self) -> str: ...
    @property
    def passthruEnabled(self) -> bool: ...
    @property
    def applyNow(self) -> bool: ...
    @property
    def hardwareLabel(self) -> str: ...


class PciPassthruInfo(vmodl.DynamicData):
    @property
    def id(self) -> str: ...
    @property
    def dependentDevice(self) -> str: ...
    @property
    def passthruEnabled(self) -> bool: ...
    @property
    def passthruCapable(self) -> bool: ...
    @property
    def passthruActive(self) -> bool: ...
    @property
    def hardwareLabel(self) -> str: ...


class PcieHba(HostBusAdapter): ...


class PcieTargetTransport(TargetTransport): ...


class PersistentMemoryInfo(vmodl.DynamicData):
    @property
    def capacityInMB(self) -> long: ...
    @property
    def volumeUUID(self) -> str: ...


class PhysicalNic(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def device(self) -> str: ...
    @property
    def pci(self) -> str: ...
    @property
    def driver(self) -> str: ...
    @property
    def driverVersion(self) -> str: ...
    @property
    def firmwareVersion(self) -> str: ...
    @property
    def linkSpeed(self) -> PhysicalNic.LinkSpeedDuplex: ...
    @property
    def validLinkSpecification(self) -> List[PhysicalNic.LinkSpeedDuplex]: ...
    @property
    def spec(self) -> PhysicalNic.Specification: ...
    @property
    def wakeOnLanSupported(self) -> bool: ...
    @property
    def mac(self) -> str: ...
    @property
    def fcoeConfiguration(self) -> FcoeConfig: ...
    @property
    def vmDirectPathGen2Supported(self) -> bool: ...
    @property
    def vmDirectPathGen2SupportedMode(self) -> str: ...
    @property
    def resourcePoolSchedulerAllowed(self) -> bool: ...
    @property
    def resourcePoolSchedulerDisallowedReason(self) -> List[str]: ...
    @property
    def autoNegotiateSupported(self) -> bool: ...
    @property
    def enhancedNetworkingStackSupported(self) -> bool: ...
    @property
    def ensInterruptSupported(self) -> bool: ...
    @property
    def rdmaDevice(self) -> Link: ...
    @property
    def dpuId(self) -> str: ...


    class CdpDeviceCapability(vmodl.DynamicData):
        @property
        def router(self) -> bool: ...
        @property
        def transparentBridge(self) -> bool: ...
        @property
        def sourceRouteBridge(self) -> bool: ...
        @property
        def networkSwitch(self) -> bool: ...
        @property
        def host(self) -> bool: ...
        @property
        def igmpEnabled(self) -> bool: ...
        @property
        def repeater(self) -> bool: ...


    class CdpInfo(vmodl.DynamicData):
        @property
        def cdpVersion(self) -> int: ...
        @property
        def timeout(self) -> int: ...
        @property
        def ttl(self) -> int: ...
        @property
        def samples(self) -> int: ...
        @property
        def devId(self) -> str: ...
        @property
        def address(self) -> str: ...
        @property
        def portId(self) -> str: ...
        @property
        def deviceCapability(self) -> PhysicalNic.CdpDeviceCapability: ...
        @property
        def softwareVersion(self) -> str: ...
        @property
        def hardwarePlatform(self) -> str: ...
        @property
        def ipPrefix(self) -> str: ...
        @property
        def ipPrefixLen(self) -> int: ...
        @property
        def vlan(self) -> int: ...
        @property
        def fullDuplex(self) -> bool: ...
        @property
        def mtu(self) -> int: ...
        @property
        def systemName(self) -> str: ...
        @property
        def systemOID(self) -> str: ...
        @property
        def mgmtAddr(self) -> str: ...
        @property
        def location(self) -> str: ...


    class LinkSpeedDuplex(vmodl.DynamicData):
        @property
        def speedMb(self) -> int: ...
        @property
        def duplex(self) -> bool: ...


    class LldpInfo(vmodl.DynamicData):
        @property
        def chassisId(self) -> str: ...
        @property
        def portId(self) -> str: ...
        @property
        def timeToLive(self) -> int: ...
        @property
        def parameter(self) -> List[vmodl.KeyAnyValue]: ...


    class NetworkHint(vmodl.DynamicData):
        @property
        def device(self) -> str: ...
        @property
        def subnet(self) -> List[PhysicalNic.NetworkHint.IpNetwork]: ...
        @property
        def network(self) -> List[PhysicalNic.NetworkHint.NamedNetwork]: ...
        @property
        def connectedSwitchPort(self) -> PhysicalNic.CdpInfo: ...
        @property
        def lldpInfo(self) -> PhysicalNic.LldpInfo: ...


        class HintElement(vmodl.DynamicData):
            @property
            def vlanId(self) -> int: ...


        class IpNetwork(PhysicalNic.NetworkHint.HintElement):
            @property
            def ipSubnet(self) -> str: ...


        class NamedNetwork(PhysicalNic.NetworkHint.HintElement):
            @property
            def network(self) -> str: ...


    class ResourcePoolSchedulerDisallowedReason(Enum):
        userOptOut = "useroptout"
        hardwareUnsupported = "hardwareunsupported"


    class VmDirectPathGen2SupportedMode(Enum):
        upt = "upt"


class PlugStoreTopology(vmodl.DynamicData):
    @property
    def adapter(self) -> List[PlugStoreTopology.Adapter]: ...
    @property
    def path(self) -> List[PlugStoreTopology.Path]: ...
    @property
    def target(self) -> List[PlugStoreTopology.Target]: ...
    @property
    def device(self) -> List[PlugStoreTopology.Device]: ...
    @property
    def plugin(self) -> List[PlugStoreTopology.Plugin]: ...


    class Adapter(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def adapter(self) -> Link: ...
        @property
        def path(self) -> List[Link]: ...


    class Plugin(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def name(self) -> str: ...
        @property
        def device(self) -> List[Link]: ...
        @property
        def claimedPath(self) -> List[Link]: ...


    class Target(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def transport(self) -> TargetTransport: ...


class PortGroup(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def port(self) -> List[PortGroup.Port]: ...
    @property
    def vswitch(self) -> Link: ...
    @property
    def computedPolicy(self) -> NetworkPolicy: ...
    @property
    def spec(self) -> PortGroup.Specification: ...


    class Port(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def mac(self) -> List[str]: ...
        @property
        def type(self) -> str: ...


    class PortConnecteeType(Enum):
        virtualMachine = "virtualmachine"
        systemManagement = "systemmanagement"
        host = "host"
        unknown = "unknown"


class ProtocolEndpoint(vmodl.DynamicData):
    @property
    def peType(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def uuid(self) -> str: ...
    @property
    def hostKey(self) -> List[vim.HostSystem]: ...
    @property
    def storageArray(self) -> str: ...
    @property
    def nfsServer(self) -> str: ...
    @property
    def nfsDir(self) -> str: ...
    @property
    def nfsServerScope(self) -> str: ...
    @property
    def nfsServerMajor(self) -> str: ...
    @property
    def nfsServerAuthType(self) -> str: ...
    @property
    def nfsServerUser(self) -> str: ...
    @property
    def deviceId(self) -> str: ...


    class PEType(Enum):
        block = "block"
        nas = "nas"


    class ProtocolEndpointType(Enum):
        scsi = "scsi"
        nfs = "nfs"
        nfs4x = "nfs4x"


class PtpConfig(vmodl.DynamicData):
    @property
    def domain(self) -> int: ...
    @property
    def port(self) -> List[PtpConfig.PtpPort]: ...


    class PtpPort(vmodl.DynamicData):
        @property
        def index(self) -> int: ...
        @property
        def deviceType(self) -> str: ...
        @property
        def device(self) -> str: ...
        @property
        def ipConfig(self) -> IpConfig: ...


    class DeviceType(Enum):
        none = "none"
        virtualNic = "virtualnic"
        pciPassthruNic = "pcipassthrunic"


class QualifiedName(vmodl.DynamicData):
    @property
    def value(self) -> str: ...
    @property
    def type(self) -> str: ...


class RdmaDevice(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def device(self) -> str: ...
    @property
    def driver(self) -> str: ...
    @property
    def description(self) -> str: ...
    @property
    def backing(self) -> RdmaDevice.Backing: ...
    @property
    def connectionInfo(self) -> RdmaDevice.ConnectionInfo: ...
    @property
    def capability(self) -> RdmaDevice.Capability: ...


    class Backing(vmodl.DynamicData): ...


    class ConnectionInfo(vmodl.DynamicData):
        @property
        def state(self) -> str: ...
        @property
        def mtu(self) -> int: ...
        @property
        def speedInMbps(self) -> int: ...


    class PnicBacking(RdmaDevice.Backing):
        @property
        def pairedUplink(self) -> Link: ...


    class ConnectionState(Enum):
        unknown = "unknown"
        down = "down"
        init = "init"
        armed = "armed"
        active = "active"
        activeDefer = "activedefer"


class RdmaHba(HostBusAdapter):
    @property
    def associatedRdmaDevice(self) -> str: ...


class RdmaTargetTransport(TargetTransport): ...


class ReliableMemoryInfo(vmodl.DynamicData):
    @property
    def memorySize(self) -> long: ...


class ResignatureRescanResult(vmodl.DynamicData):
    @property
    def rescan(self) -> List[VmfsRescanResult]: ...
    @property
    def result(self) -> vim.Datastore: ...


class Ruleset(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def label(self) -> str: ...
    @property
    def required(self) -> bool: ...
    @property
    def rule(self) -> List[Ruleset.Rule]: ...
    @property
    def service(self) -> str: ...
    @property
    def enabled(self) -> bool: ...
    @property
    def allowedHosts(self) -> Ruleset.IpList: ...


    class IpList(vmodl.DynamicData):
        @property
        def ipAddress(self) -> List[str]: ...
        @property
        def ipNetwork(self) -> List[Ruleset.IpNetwork]: ...
        @property
        def allIp(self) -> bool: ...


    class Rule(vmodl.DynamicData):
        @property
        def port(self) -> int: ...
        @property
        def endPort(self) -> int: ...
        @property
        def direction(self) -> Ruleset.Rule.Direction: ...
        @property
        def portType(self) -> Ruleset.Rule.PortType: ...
        @property
        def protocol(self) -> str: ...


        class Direction(Enum):
            inbound = "inbound"
            outbound = "outbound"


    class RulesetSpec(vmodl.DynamicData):
        @property
        def allowedHosts(self) -> Ruleset.IpList: ...


class RuntimeInfo(vmodl.DynamicData):
    @property
    def connectionState(self) -> vim.HostSystem.ConnectionState: ...
    @property
    def powerState(self) -> vim.HostSystem.PowerState: ...
    @property
    def standbyMode(self) -> str: ...
    @property
    def inMaintenanceMode(self) -> bool: ...
    @property
    def inQuarantineMode(self) -> bool: ...
    @property
    def bootTime(self) -> datetime: ...
    @property
    def healthSystemRuntime(self) -> HealthStatusSystem.Runtime: ...
    @property
    def dasHostState(self) -> vim.cluster.DasFdmHostState: ...
    @property
    def tpmPcrValues(self) -> List[TpmDigestInfo]: ...
    @property
    def vsanRuntimeInfo(self) -> VsanRuntimeInfo: ...
    @property
    def networkRuntimeInfo(self) -> RuntimeInfo.NetworkRuntimeInfo: ...
    @property
    def vFlashResourceRuntimeInfo(self) -> VFlashManager.VFlashResourceRunTimeInfo: ...
    @property
    def hostMaxVirtualDiskCapacity(self) -> long: ...
    @property
    def cryptoState(self) -> str: ...
    @property
    def cryptoKeyId(self) -> vim.encryption.CryptoKeyId: ...
    @property
    def statelessNvdsMigrationReady(self) -> str: ...
    @property
    def stateEncryption(self) -> RuntimeInfo.StateEncryptionInfo: ...


    class NetStackInstanceRuntimeInfo(vmodl.DynamicData):
        @property
        def netStackInstanceKey(self) -> str: ...
        @property
        def state(self) -> str: ...
        @property
        def vmknicKeys(self) -> List[str]: ...
        @property
        def maxNumberOfConnections(self) -> int: ...
        @property
        def currentIpV6Enabled(self) -> bool: ...


        class State(Enum):
            inactive = "inactive"
            active = "active"
            deactivating = "deactivating"
            activating = "activating"


    class NetworkResourceRuntimeInfo(vmodl.DynamicData):
        @property
        def pnicResourceInfo(self) -> List[RuntimeInfo.PnicNetworkResourceInfo]: ...


    class NetworkRuntimeInfo(vmodl.DynamicData):
        @property
        def netStackInstanceRuntimeInfo(self) -> List[RuntimeInfo.NetStackInstanceRuntimeInfo]: ...
        @property
        def networkResourceRuntime(self) -> RuntimeInfo.NetworkResourceRuntimeInfo: ...


    class PlacedVirtualNicIdentifier(vmodl.DynamicData):
        @property
        def vm(self) -> vim.VirtualMachine: ...
        @property
        def vnicKey(self) -> str: ...
        @property
        def reservation(self) -> int: ...


    class PnicNetworkResourceInfo(vmodl.DynamicData):
        @property
        def pnicDevice(self) -> str: ...
        @property
        def availableBandwidthForVMTraffic(self) -> long: ...
        @property
        def unusedBandwidthForVMTraffic(self) -> long: ...
        @property
        def placedVirtualNics(self) -> List[RuntimeInfo.PlacedVirtualNicIdentifier]: ...


    class StateEncryptionInfo(vmodl.DynamicData):
        @property
        def protectionMode(self) -> str: ...
        @property
        def requireSecureBoot(self) -> bool: ...
        @property
        def requireExecInstalledOnly(self) -> bool: ...


        class ProtectionMode(Enum):
            none = "none"
            tpm = "tpm"


    class StatelessNvdsMigrationState(Enum):
        ready = "ready"
        notNeeded = "notneeded"
        unknown = "unknown"


class ScsiDisk(ScsiLun):
    @property
    def capacity(self) -> DiskDimensions.Lba: ...
    @property
    def devicePath(self) -> str: ...
    @property
    def ssd(self) -> bool: ...
    @property
    def localDisk(self) -> bool: ...
    @property
    def physicalLocation(self) -> List[str]: ...
    @property
    def emulatedDIXDIFEnabled(self) -> bool: ...
    @property
    def vsanDiskInfo(self) -> VsanDiskInfo: ...
    @property
    def scsiDiskType(self) -> str: ...


    class ScsiDiskType(Enum):
        native512 = "native512"
        emulated512 = "emulated512"
        native4k = "native4k"
        SoftwareEmulated4k = "softwareemulated4k"
        unknown = "unknown"


class ScsiLun(Device):
    @property
    def key(self) -> str: ...
    @property
    def uuid(self) -> str: ...
    @property
    def descriptor(self) -> List[ScsiLun.Descriptor]: ...
    @property
    def canonicalName(self) -> str: ...
    @property
    def displayName(self) -> str: ...
    @property
    def lunType(self) -> str: ...
    @property
    def vendor(self) -> str: ...
    @property
    def model(self) -> str: ...
    @property
    def revision(self) -> str: ...
    @property
    def scsiLevel(self) -> int: ...
    @property
    def serialNumber(self) -> str: ...
    @property
    def durableName(self) -> ScsiLun.DurableName: ...
    @property
    def alternateName(self) -> List[ScsiLun.DurableName]: ...
    @property
    def standardInquiry(self) -> List[byte]: ...
    @property
    def queueDepth(self) -> int: ...
    @property
    def operationalState(self) -> List[str]: ...
    @property
    def capabilities(self) -> ScsiLun.Capabilities: ...
    @property
    def vStorageSupport(self) -> str: ...
    @property
    def protocolEndpoint(self) -> bool: ...
    @property
    def perenniallyReserved(self) -> bool: ...
    @property
    def clusteredVmdkSupported(self) -> bool: ...
    @property
    def applicationProtocol(self) -> str: ...
    @property
    def dispersedNs(self) -> bool: ...


    class Descriptor(vmodl.DynamicData):
        @property
        def quality(self) -> str: ...
        @property
        def id(self) -> str: ...


    class DurableName(vmodl.DynamicData):
        @property
        def namespace(self) -> str: ...
        @property
        def namespaceId(self) -> byte: ...
        @property
        def data(self) -> List[byte]: ...


    class DescriptorQuality(Enum):
        highQuality = "highquality"
        mediumQuality = "mediumquality"
        lowQuality = "lowquality"
        unknownQuality = "unknownquality"


    class DeviceProtocol(Enum):
        NVMe = "nvme"
        SCSI = "scsi"


    class ScsiLunType(Enum):
        disk = "disk"
        tape = "tape"
        printer = "printer"
        processor = "processor"
        worm = "worm"
        cdrom = "cdrom"
        scanner = "scanner"
        opticalDevice = "opticaldevice"
        mediaChanger = "mediachanger"
        communications = "communications"
        storageArrayController = "storagearraycontroller"
        enclosure = "enclosure"
        unknown = "unknown"


class ScsiTopology(vmodl.DynamicData):
    @property
    def adapter(self) -> List[ScsiTopology.Interface]: ...


    class Lun(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def lun(self) -> int: ...
        @property
        def scsiLun(self) -> Link: ...


class SecuritySpec(vmodl.DynamicData):
    @property
    def adminPassword(self) -> str: ...
    @property
    def removePermission(self) -> List[vim.AuthorizationManager.Permission]: ...
    @property
    def addPermission(self) -> List[vim.AuthorizationManager.Permission]: ...


class SerialAttachedHba(HostBusAdapter):
    @property
    def nodeWorldWideName(self) -> str: ...


class SerialAttachedTargetTransport(TargetTransport): ...


class Service(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def label(self) -> str: ...
    @property
    def required(self) -> bool: ...
    @property
    def uninstallable(self) -> bool: ...
    @property
    def running(self) -> bool: ...
    @property
    def ruleset(self) -> List[str]: ...
    @property
    def policy(self) -> str: ...
    @property
    def sourcePackage(self) -> Service.SourcePackage: ...


    class SourcePackage(vmodl.DynamicData):
        @property
        def sourcePackageName(self) -> str: ...
        @property
        def description(self) -> str: ...


    class Policy(Enum):
        on = "on"
        automatic = "automatic"
        off = "off"


class ServiceConfig(vmodl.DynamicData):
    @property
    def serviceId(self) -> str: ...
    @property
    def startupPolicy(self) -> str: ...


class ServiceInfo(vmodl.DynamicData):
    @property
    def service(self) -> List[Service]: ...


class SevInfo(vmodl.DynamicData):
    @property
    def sevState(self) -> str: ...
    @property
    def maxSevEsGuests(self) -> long: ...


    class SevState(Enum):
        uninitialized = "uninitialized"
        initialized = "initialized"
        working = "working"


class SgxInfo(vmodl.DynamicData):
    @property
    def sgxState(self) -> str: ...
    @property
    def totalEpcMemory(self) -> long: ...
    @property
    def flcMode(self) -> str: ...
    @property
    def lePubKeyHash(self) -> str: ...
    @property
    def registrationInfo(self) -> SgxRegistrationInfo: ...


    class FlcModes(Enum):
        off = "off"
        locked = "locked"
        unlocked = "unlocked"


    class SgxStates(Enum):
        notPresent = "notpresent"
        disabledBIOS = "disabledbios"
        disabledCFW101 = "disabledcfw101"
        disabledCPUMismatch = "disabledcpumismatch"
        disabledNoFLC = "disablednoflc"
        disabledNUMAUnsup = "disablednumaunsup"
        disabledMaxEPCRegs = "disabledmaxepcregs"
        enabled = "enabled"


class SgxRegistrationInfo(vmodl.DynamicData):
    @property
    def status(self) -> str: ...
    @property
    def biosError(self) -> int: ...
    @property
    def registrationUrl(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def ppid(self) -> str: ...
    @property
    def lastRegisteredTime(self) -> datetime: ...


    class RegistrationStatus(Enum):
        notApplicable = "notapplicable"
        incomplete = "incomplete"
        complete = "complete"


    class RegistrationType(Enum):
        manifest = "manifest"
        addPackage = "addpackage"


class SharedGpuCapabilities(vmodl.DynamicData):
    @property
    def vgpu(self) -> str: ...
    @property
    def diskSnapshotSupported(self) -> bool: ...
    @property
    def memorySnapshotSupported(self) -> bool: ...
    @property
    def suspendSupported(self) -> bool: ...
    @property
    def migrateSupported(self) -> bool: ...


class SoftwarePackage(vmodl.DynamicData):
    @property
    def name(self) -> str: ...
    @property
    def version(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def vendor(self) -> str: ...
    @property
    def acceptanceLevel(self) -> str: ...
    @property
    def summary(self) -> str: ...
    @property
    def description(self) -> str: ...
    @property
    def referenceURL(self) -> List[str]: ...
    @property
    def creationDate(self) -> datetime: ...
    @property
    def depends(self) -> List[SoftwarePackage.Relation]: ...
    @property
    def conflicts(self) -> List[SoftwarePackage.Relation]: ...
    @property
    def replaces(self) -> List[SoftwarePackage.Relation]: ...
    @property
    def provides(self) -> List[str]: ...
    @property
    def maintenanceModeRequired(self) -> bool: ...
    @property
    def hardwarePlatformsRequired(self) -> List[str]: ...
    @property
    def capability(self) -> SoftwarePackage.Capability: ...
    @property
    def tag(self) -> List[str]: ...
    @property
    def payload(self) -> List[str]: ...


    class Relation(vmodl.DynamicData):
        @property
        def constraint(self) -> str: ...
        @property
        def name(self) -> str: ...
        @property
        def version(self) -> str: ...


    class Constraint(Enum):
        equals = "equals"
        lessThan = "lessthan"
        lessThanEqual = "lessthanequal"
        greaterThanEqual = "greaterthanequal"
        greaterThan = "greaterthan"


    class VibType(Enum):
        bootbank = "bootbank"
        tools = "tools"
        meta = "meta"


class SriovConfig(PciPassthruConfig):
    @property
    def sriovEnabled(self) -> bool: ...
    @property
    def numVirtualFunction(self) -> int: ...


class SriovDevicePoolInfo(vmodl.DynamicData):
    @property
    def key(self) -> str: ...


class SriovInfo(PciPassthruInfo):
    @property
    def sriovEnabled(self) -> bool: ...
    @property
    def sriovCapable(self) -> bool: ...
    @property
    def sriovActive(self) -> bool: ...
    @property
    def numVirtualFunctionRequested(self) -> int: ...
    @property
    def numVirtualFunction(self) -> int: ...
    @property
    def maxVirtualFunctionSupported(self) -> int: ...


class SriovNetworkDevicePoolInfo(SriovDevicePoolInfo):
    @property
    def switchKey(self) -> str: ...
    @property
    def switchUuid(self) -> str: ...
    @property
    def pnic(self) -> List[PhysicalNic]: ...


class SslThumbprintInfo(vmodl.DynamicData):
    @property
    def principal(self) -> str: ...
    @property
    def ownerTag(self) -> str: ...
    @property
    def sslThumbprints(self) -> List[str]: ...


class StorageArrayTypePolicyOption(vmodl.DynamicData):
    @property
    def policy(self) -> vim.ElementDescription: ...


class StorageDeviceInfo(vmodl.DynamicData):
    @property
    def hostBusAdapter(self) -> List[HostBusAdapter]: ...
    @property
    def scsiLun(self) -> List[ScsiLun]: ...
    @property
    def scsiTopology(self) -> ScsiTopology: ...
    @property
    def nvmeTopology(self) -> NvmeTopology: ...
    @property
    def multipathInfo(self) -> MultipathInfo: ...
    @property
    def plugStoreTopology(self) -> PlugStoreTopology: ...
    @property
    def softwareInternetScsiEnabled(self) -> bool: ...


class SystemEventInfo(vmodl.DynamicData):
    @property
    def recordId(self) -> long: ...
    @property
    def when(self) -> str: ...
    @property
    def selType(self) -> long: ...
    @property
    def message(self) -> str: ...
    @property
    def sensorNumber(self) -> long: ...


class SystemHealthInfo(vmodl.DynamicData):
    @property
    def numericSensorInfo(self) -> List[NumericSensorInfo]: ...


class SystemIdentificationInfo(vmodl.DynamicData):
    @property
    def identifierValue(self) -> str: ...
    @property
    def identifierType(self) -> vim.ElementDescription: ...


    class Identifier(Enum):
        AssetTag = "assettag"
        ServiceTag = "servicetag"
        OemSpecificString = "oemspecificstring"
        EnclosureSerialNumberTag = "enclosureserialnumbertag"
        SerialNumberTag = "serialnumbertag"


class SystemInfo(vmodl.DynamicData):
    @property
    def vendor(self) -> str: ...
    @property
    def model(self) -> str: ...
    @property
    def uuid(self) -> str: ...
    @property
    def otherIdentifyingInfo(self) -> List[SystemIdentificationInfo]: ...
    @property
    def serialNumber(self) -> str: ...
    @property
    def qualifiedName(self) -> List[QualifiedName]: ...
    @property
    def vvolHostNQN(self) -> QualifiedName: ...
    @property
    def vvolHostId(self) -> str: ...


class SystemResourceInfo(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def config(self) -> vim.ResourceConfigSpec: ...
    @property
    def child(self) -> List[SystemResourceInfo]: ...


class SystemSwapConfiguration(vmodl.DynamicData):
    @property
    def option(self) -> List[SystemSwapConfiguration.SystemSwapOption]: ...


    class DatastoreOption(SystemSwapConfiguration.SystemSwapOption):
        @property
        def datastore(self) -> str: ...


    class DisabledOption(SystemSwapConfiguration.SystemSwapOption): ...


    class HostCacheOption(SystemSwapConfiguration.SystemSwapOption): ...


    class HostLocalSwapOption(SystemSwapConfiguration.SystemSwapOption): ...


    class SystemSwapOption(vmodl.DynamicData):
        @property
        def key(self) -> int: ...


class TargetTransport(vmodl.DynamicData): ...


class TcpHba(HostBusAdapter):
    @property
    def associatedPnic(self) -> str: ...


class TcpHbaCreateSpec(HbaCreateSpec):
    @property
    def pnic(self) -> str: ...


class TcpTargetTransport(TargetTransport): ...


class TpmAttestationInfo(vmodl.DynamicData):
    @property
    def time(self) -> datetime: ...
    @property
    def status(self) -> TpmAttestationInfo.AcceptanceStatus: ...
    @property
    def message(self) -> vmodl.LocalizableMessage: ...


    class AcceptanceStatus(Enum):
        notAccepted = "notaccepted"
        accepted = "accepted"


class TpmAttestationReport(vmodl.DynamicData):
    @property
    def tpmPcrValues(self) -> List[TpmDigestInfo]: ...
    @property
    def tpmEvents(self) -> List[TpmEventLogEntry]: ...
    @property
    def tpmLogReliable(self) -> bool: ...


class TpmBootCompleteEventDetails(TpmEventDetails): ...


class TpmBootSecurityOptionEventDetails(TpmEventDetails):
    @property
    def bootSecurityOption(self) -> str: ...


class TpmCommandEventDetails(TpmEventDetails):
    @property
    def commandLine(self) -> str: ...


class TpmDigestInfo(DigestInfo):
    @property
    def pcrNumber(self) -> int: ...


class TpmEventDetails(vmodl.DynamicData):
    @property
    def dataHash(self) -> List[byte]: ...
    @property
    def dataHashMethod(self) -> str: ...


class TpmEventLogEntry(vmodl.DynamicData):
    @property
    def pcrIndex(self) -> int: ...
    @property
    def eventDetails(self) -> TpmEventDetails: ...


class TpmNvTagEventDetails(TpmBootSecurityOptionEventDetails): ...


class TpmOptionEventDetails(TpmEventDetails):
    @property
    def optionsFileName(self) -> str: ...
    @property
    def bootOptions(self) -> List[byte]: ...


class TpmSignerEventDetails(TpmBootSecurityOptionEventDetails): ...


class TpmSoftwareComponentEventDetails(TpmEventDetails):
    @property
    def componentName(self) -> str: ...
    @property
    def vibName(self) -> str: ...
    @property
    def vibVersion(self) -> str: ...
    @property
    def vibVendor(self) -> str: ...


class TpmVersionEventDetails(TpmEventDetails):
    @property
    def version(self) -> binary: ...


class TrustAuthorityAttestationInfo(vmodl.DynamicData):
    @property
    def attestationStatus(self) -> str: ...
    @property
    def serviceId(self) -> str: ...
    @property
    def attestedAt(self) -> datetime: ...
    @property
    def attestedUntil(self) -> datetime: ...
    @property
    def messages(self) -> List[vmodl.LocalizableMessage]: ...


    class AttestationStatus(Enum):
        attested = "attested"
        notAttested = "notattested"
        unknown = "unknown"


class UnresolvedVmfsExtent(vmodl.DynamicData):
    @property
    def device(self) -> ScsiDisk.Partition: ...
    @property
    def devicePath(self) -> str: ...
    @property
    def vmfsUuid(self) -> str: ...
    @property
    def isHeadExtent(self) -> bool: ...
    @property
    def ordinal(self) -> int: ...
    @property
    def startBlock(self) -> int: ...
    @property
    def endBlock(self) -> int: ...
    @property
    def reason(self) -> str: ...


    class UnresolvedReason(Enum):
        diskIdMismatch = "diskidmismatch"
        uuidConflict = "uuidconflict"


class UnresolvedVmfsResignatureSpec(vmodl.DynamicData):
    @property
    def extentDevicePath(self) -> List[str]: ...


class UnresolvedVmfsResolutionResult(vmodl.DynamicData):
    @property
    def spec(self) -> UnresolvedVmfsResolutionSpec: ...
    @property
    def vmfs(self) -> VmfsVolume: ...
    @property
    def fault(self) -> vmodl.MethodFault: ...


class UnresolvedVmfsResolutionSpec(vmodl.DynamicData):
    @property
    def extentDevicePath(self) -> List[str]: ...
    @property
    def uuidResolution(self) -> str: ...


    class VmfsUuidResolution(Enum):
        resignature = "resignature"
        forceMount = "forcemount"


class UnresolvedVmfsVolume(vmodl.DynamicData):
    @property
    def extent(self) -> List[UnresolvedVmfsExtent]: ...
    @property
    def vmfsLabel(self) -> str: ...
    @property
    def vmfsUuid(self) -> str: ...
    @property
    def totalBlocks(self) -> int: ...
    @property
    def resolveStatus(self) -> UnresolvedVmfsVolume.ResolveStatus: ...


    class ResolveStatus(vmodl.DynamicData):
        @property
        def resolvable(self) -> bool: ...
        @property
        def incompleteExtents(self) -> bool: ...
        @property
        def multipleCopies(self) -> bool: ...


class VFlashResourceConfigurationResult(vmodl.DynamicData):
    @property
    def devicePath(self) -> List[str]: ...
    @property
    def vffs(self) -> VffsVolume: ...
    @property
    def diskConfigurationResult(self) -> List[DiskConfigurationResult]: ...


class VMotionConfig(vmodl.DynamicData):
    @property
    def vmotionNicKey(self) -> str: ...
    @property
    def enabled(self) -> bool: ...


class VMotionInfo(vmodl.DynamicData):
    @property
    def netConfig(self) -> VMotionSystem.NetConfig: ...
    @property
    def ipConfig(self) -> IpConfig: ...


class DstInstantCloneResult(vmodl.DynamicData):
    @property
    def dstVmId(self) -> int: ...
    @property
    def startTime(self) -> long: ...
    @property
    def cptLoadTime(self) -> long: ...
    @property
    def cptLoadDoneTime(self) -> long: ...
    @property
    def replicateMemDoneTime(self) -> long: ...
    @property
    def endTime(self) -> long: ...
    @property
    def cptXferTime(self) -> long: ...
    @property
    def cptCacheUsed(self) -> long: ...
    @property
    def devCptStreamSize(self) -> long: ...
    @property
    def devCptStreamTime(self) -> long: ...


class SrcInstantCloneResult(vmodl.DynamicData):
    @property
    def startTime(self) -> long: ...
    @property
    def quiesceTime(self) -> long: ...
    @property
    def quiesceDoneTime(self) -> long: ...
    @property
    def resumeDoneTime(self) -> long: ...
    @property
    def endTime(self) -> long: ...


class VfatVolume(FileSystemVolume): ...


class VffsVolume(FileSystemVolume):
    @property
    def majorVersion(self) -> int: ...
    @property
    def version(self) -> str: ...
    @property
    def uuid(self) -> str: ...
    @property
    def extent(self) -> List[ScsiDisk.Partition]: ...


class VirtualNic(vmodl.DynamicData):
    @property
    def device(self) -> str: ...
    @property
    def key(self) -> str: ...
    @property
    def portgroup(self) -> str: ...
    @property
    def spec(self) -> VirtualNic.Specification: ...
    @property
    def port(self) -> Link: ...


    class IpRouteSpec(vmodl.DynamicData):
        @property
        def ipRouteConfig(self) -> IpRouteConfig: ...


    class OpaqueNetworkSpec(vmodl.DynamicData):
        @property
        def opaqueNetworkId(self) -> str: ...
        @property
        def opaqueNetworkType(self) -> str: ...


class VirtualNicConnection(vmodl.DynamicData):
    @property
    def portgroup(self) -> str: ...
    @property
    def dvPort(self) -> vim.dvs.PortConnection: ...
    @property
    def opNetwork(self) -> VirtualNic.OpaqueNetworkSpec: ...


class VirtualNicManagerInfo(vmodl.DynamicData):
    @property
    def netConfig(self) -> List[VirtualNicManager.NetConfig]: ...


class VirtualSwitch(vmodl.DynamicData):
    @property
    def name(self) -> str: ...
    @property
    def key(self) -> str: ...
    @property
    def numPorts(self) -> int: ...
    @property
    def numPortsAvailable(self) -> int: ...
    @property
    def mtu(self) -> int: ...
    @property
    def portgroup(self) -> List[Link]: ...
    @property
    def pnic(self) -> List[Link]: ...
    @property
    def spec(self) -> VirtualSwitch.Specification: ...


    class AutoBridge(VirtualSwitch.Bridge):
        @property
        def excludedNicDevice(self) -> List[str]: ...


    class BeaconConfig(vmodl.DynamicData):
        @property
        def interval(self) -> int: ...


    class BondBridge(VirtualSwitch.Bridge):
        @property
        def nicDevice(self) -> List[str]: ...
        @property
        def beacon(self) -> VirtualSwitch.BeaconConfig: ...
        @property
        def linkDiscoveryProtocolConfig(self) -> LinkDiscoveryProtocolConfig: ...


    class Bridge(vmodl.DynamicData): ...


    class SimpleBridge(VirtualSwitch.Bridge):
        @property
        def nicDevice(self) -> str: ...


class AccessSpec(vmodl.DynamicData):
    @property
    def vm(self) -> vim.VirtualMachine: ...
    @property
    def services(self) -> List[str]: ...
    @property
    def mode(self) -> str: ...


class VmfsDatastoreCreateSpec(VmfsDatastoreSpec):
    @property
    def partition(self) -> DiskPartitionInfo.Specification: ...
    @property
    def vmfs(self) -> VmfsVolume.Specification: ...
    @property
    def extent(self) -> List[ScsiDisk.Partition]: ...


class VmfsDatastoreExpandSpec(VmfsDatastoreSpec):
    @property
    def partition(self) -> DiskPartitionInfo.Specification: ...
    @property
    def extent(self) -> ScsiDisk.Partition: ...


class VmfsDatastoreExtendSpec(VmfsDatastoreSpec):
    @property
    def partition(self) -> DiskPartitionInfo.Specification: ...
    @property
    def extent(self) -> List[ScsiDisk.Partition]: ...


class VmfsDatastoreInfo(vim.Datastore.Info):
    @property
    def maxPhysicalRDMFileSize(self) -> long: ...
    @property
    def maxVirtualRDMFileSize(self) -> long: ...
    @property
    def vmfs(self) -> VmfsVolume: ...


class VmfsDatastoreOption(vmodl.DynamicData):
    @property
    def info(self) -> VmfsDatastoreOption.Info: ...
    @property
    def spec(self) -> VmfsDatastoreSpec: ...


    class AllExtentInfo(VmfsDatastoreOption.SingleExtentInfo): ...


    class MultipleExtentInfo(VmfsDatastoreOption.Info):
        @property
        def vmfsExtent(self) -> List[DiskPartitionInfo.BlockRange]: ...


    class SingleExtentInfo(VmfsDatastoreOption.Info):
        @property
        def vmfsExtent(self) -> DiskPartitionInfo.BlockRange: ...


class VmfsDatastoreSpec(vmodl.DynamicData):
    @property
    def diskUuid(self) -> str: ...


class VmfsRescanResult(vmodl.DynamicData):
    @property
    def host(self) -> vim.HostSystem: ...
    @property
    def fault(self) -> vmodl.MethodFault: ...


class VmfsVolume(FileSystemVolume):
    @property
    def blockSizeMb(self) -> int: ...
    @property
    def blockSize(self) -> int: ...
    @property
    def unmapGranularity(self) -> int: ...
    @property
    def unmapPriority(self) -> str: ...
    @property
    def unmapBandwidthSpec(self) -> VmfsVolume.UnmapBandwidthSpec: ...
    @property
    def maxBlocks(self) -> int: ...
    @property
    def majorVersion(self) -> int: ...
    @property
    def version(self) -> str: ...
    @property
    def uuid(self) -> str: ...
    @property
    def extent(self) -> List[ScsiDisk.Partition]: ...
    @property
    def vmfsUpgradable(self) -> bool: ...
    @property
    def forceMountedInfo(self) -> ForceMountedInfo: ...
    @property
    def ssd(self) -> bool: ...
    @property
    def local(self) -> bool: ...
    @property
    def scsiDiskType(self) -> str: ...


    class ConfigOption(vmodl.DynamicData):
        @property
        def blockSizeOption(self) -> int: ...
        @property
        def unmapGranularityOption(self) -> List[int]: ...
        @property
        def unmapBandwidthFixedValue(self) -> vim.option.LongOption: ...
        @property
        def unmapBandwidthDynamicMin(self) -> vim.option.LongOption: ...
        @property
        def unmapBandwidthDynamicMax(self) -> vim.option.LongOption: ...
        @property
        def unmapBandwidthIncrement(self) -> long: ...
        @property
        def unmapBandwidthUltraLow(self) -> long: ...


    class UnmapBandwidthSpec(vmodl.DynamicData):
        @property
        def policy(self) -> str: ...
        @property
        def fixedValue(self) -> long: ...
        @property
        def dynamicMin(self) -> long: ...
        @property
        def dynamicMax(self) -> long: ...


    class UnmapBandwidthPolicy(Enum):
        fixed = "fixed"
        dynamic = "dynamic"


    class UnmapPriority(Enum):
        none = "none"
        low = "low"


class VsanDatastoreInfo(vim.Datastore.Info):
    @property
    def membershipUuid(self) -> str: ...
    @property
    def accessGenNo(self) -> int: ...


class VvolDatastoreInfo(vim.Datastore.Info):
    @property
    def vvolDS(self) -> VvolVolume: ...


class VvolVolume(FileSystemVolume):
    @property
    def scId(self) -> str: ...
    @property
    def hostPE(self) -> List[VvolVolume.HostProtocolEndpoint]: ...
    @property
    def vasaProviderInfo(self) -> List[vim.VimVasaProviderInfo]: ...
    @property
    def storageArray(self) -> List[vim.VasaStorageArray]: ...
    @property
    def protocolEndpointType(self) -> str: ...


    class HostProtocolEndpoint(vmodl.DynamicData):
        @property
        def key(self) -> vim.HostSystem: ...
        @property
        def protocolEndpoint(self) -> List[ProtocolEndpoint]: ...


class FileType(vim.version.version10): ...


class ReloadTarget(vim.version.version5): ...


class Mode(vim.version.version7): ...