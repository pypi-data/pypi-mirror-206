from typing import List
from enum import Enum
from pyVmomi import vim, vmodl
from datetime import datetime
from pyVmomi.VmomiSupport import ManagedObject, NoneType, PropertyPath


class ComplianceManager(ManagedObject):
    def CheckCompliance(self, profile: List[Profile], entity: List[vim.ManagedEntity]) -> vim.Task: ...
    def QueryComplianceStatus(self, profile: List[Profile], entity: List[vim.ManagedEntity]) -> List[ComplianceResult]: ...
    def ClearComplianceStatus(self, profile: List[Profile], entity: List[vim.ManagedEntity]) -> NoneType: ...
    def QueryExpressionMetadata(self, expressionName: List[str], profile: Profile) -> List[ExpressionMetadata]: ...


class Profile(ManagedObject):
    @property
    def config(self) -> Profile.ConfigInfo: ...
    @property
    def description(self) -> Profile.Description: ...
    @property
    def name(self) -> str: ...
    @property
    def createdTime(self) -> datetime: ...
    @property
    def modifiedTime(self) -> datetime: ...
    @property
    def entity(self) -> List[vim.ManagedEntity]: ...
    @property
    def complianceStatus(self) -> str: ...
    def RetrieveDescription(self) -> Profile.Description: ...
    def Destroy(self) -> NoneType: ...
    def AssociateEntities(self, entity: List[vim.ManagedEntity]) -> NoneType: ...
    def DissociateEntities(self, entity: List[vim.ManagedEntity]) -> NoneType: ...
    def CheckCompliance(self, entity: List[vim.ManagedEntity]) -> vim.Task: ...
    def ExportProfile(self) -> str: ...


    class ConfigInfo(vmodl.DynamicData):
        @property
        def name(self) -> str: ...
        @property
        def annotation(self) -> str: ...
        @property
        def enabled(self) -> bool: ...


    class CreateSpec(vmodl.DynamicData):
        @property
        def name(self) -> str: ...
        @property
        def annotation(self) -> str: ...
        @property
        def enabled(self) -> bool: ...


    class Description(vmodl.DynamicData):
        @property
        def section(self) -> List[Profile.Description.Section]: ...


        class Section(vmodl.DynamicData):
            @property
            def description(self) -> vim.ExtendedElementDescription: ...
            @property
            def message(self) -> List[vmodl.LocalizableMessage]: ...


    class SerializedCreateSpec(Profile.CreateSpec):
        @property
        def profileConfigString(self) -> str: ...


class ProfileManager(ManagedObject):
    @property
    def profile(self) -> List[Profile]: ...
    def CreateProfile(self, createSpec: Profile.CreateSpec) -> Profile: ...
    def QueryPolicyMetadata(self, policyName: List[str], profile: Profile) -> List[PolicyMetadata]: ...
    def FindAssociatedProfile(self, entity: vim.ManagedEntity) -> List[Profile]: ...


class ApplyProfile(vmodl.DynamicData):
    @property
    def enabled(self) -> bool: ...
    @property
    def policy(self) -> List[Policy]: ...
    @property
    def profileTypeName(self) -> str: ...
    @property
    def profileVersion(self) -> str: ...
    @property
    def property(self) -> List[ApplyProfileProperty]: ...
    @property
    def favorite(self) -> bool: ...
    @property
    def toBeMerged(self) -> bool: ...
    @property
    def toReplaceWith(self) -> bool: ...
    @property
    def toBeDeleted(self) -> bool: ...
    @property
    def copyEnableStatus(self) -> bool: ...
    @property
    def hidden(self) -> bool: ...


class ApplyProfileElement(ApplyProfile):
    @property
    def key(self) -> str: ...


class ApplyProfileProperty(vmodl.DynamicData):
    @property
    def propertyName(self) -> str: ...
    @property
    def array(self) -> bool: ...
    @property
    def profile(self) -> List[ApplyProfile]: ...


class ComplianceLocator(vmodl.DynamicData):
    @property
    def expressionName(self) -> str: ...
    @property
    def applyPath(self) -> ProfilePropertyPath: ...


class ComplianceProfile(vmodl.DynamicData):
    @property
    def expression(self) -> List[Expression]: ...
    @property
    def rootExpression(self) -> str: ...


class ComplianceResult(vmodl.DynamicData):
    @property
    def profile(self) -> Profile: ...
    @property
    def complianceStatus(self) -> str: ...
    @property
    def entity(self) -> vim.ManagedEntity: ...
    @property
    def checkTime(self) -> datetime: ...
    @property
    def failure(self) -> List[ComplianceResult.ComplianceFailure]: ...


    class ComplianceFailure(vmodl.DynamicData):
        @property
        def failureType(self) -> str: ...
        @property
        def message(self) -> vmodl.LocalizableMessage: ...
        @property
        def expressionName(self) -> str: ...
        @property
        def failureValues(self) -> List[ComplianceResult.ComplianceFailure.ComplianceFailureValues]: ...


        class ComplianceFailureValues(vmodl.DynamicData):
            @property
            def comparisonIdentifier(self) -> str: ...
            @property
            def profileInstance(self) -> str: ...
            @property
            def hostValue(self) -> object: ...
            @property
            def profileValue(self) -> object: ...


    class Status(Enum):
        compliant = "compliant"
        nonCompliant = "noncompliant"
        unknown = "unknown"
        running = "running"


class CompositeExpression(Expression):
    @property
    def operator(self) -> str: ...
    @property
    def expressionName(self) -> List[str]: ...


class CompositePolicyOption(PolicyOption):
    @property
    def option(self) -> List[PolicyOption]: ...


class CompositePolicyOptionMetadata(PolicyOptionMetadata):
    @property
    def option(self) -> List[str]: ...


class DeferredPolicyOptionParameter(vmodl.DynamicData):
    @property
    def inputPath(self) -> ProfilePropertyPath: ...
    @property
    def parameter(self) -> List[vmodl.KeyAnyValue]: ...


class Expression(vmodl.DynamicData):
    @property
    def id(self) -> str: ...
    @property
    def displayName(self) -> str: ...
    @property
    def negated(self) -> bool: ...


class ExpressionMetadata(vmodl.DynamicData):
    @property
    def expressionId(self) -> vim.ExtendedElementDescription: ...
    @property
    def parameter(self) -> List[ParameterMetadata]: ...


class ParameterMetadata(vmodl.DynamicData):
    @property
    def id(self) -> vim.ExtendedElementDescription: ...
    @property
    def type(self) -> type: ...
    @property
    def optional(self) -> bool: ...
    @property
    def defaultValue(self) -> object: ...
    @property
    def hidden(self) -> bool: ...
    @property
    def securitySensitive(self) -> bool: ...
    @property
    def readOnly(self) -> bool: ...
    @property
    def parameterRelations(self) -> List[ParameterMetadata.ParameterRelationMetadata]: ...


    class ParameterRelationMetadata(vmodl.DynamicData):
        @property
        def relationTypes(self) -> List[str]: ...
        @property
        def values(self) -> List[object]: ...
        @property
        def path(self) -> ProfilePropertyPath: ...
        @property
        def minCount(self) -> int: ...
        @property
        def maxCount(self) -> int: ...


    class RelationType(Enum):
        dynamic_relation = "dynamic_relation"
        extensible_relation = "extensible_relation"
        localizable_relation = "localizable_relation"
        static_relation = "static_relation"
        validation_relation = "validation_relation"


class Policy(vmodl.DynamicData):
    @property
    def id(self) -> str: ...
    @property
    def policyOption(self) -> PolicyOption: ...


class PolicyMetadata(vmodl.DynamicData):
    @property
    def id(self) -> vim.ExtendedElementDescription: ...
    @property
    def possibleOption(self) -> List[PolicyOptionMetadata]: ...


class PolicyOption(vmodl.DynamicData):
    @property
    def id(self) -> str: ...
    @property
    def parameter(self) -> List[vmodl.KeyAnyValue]: ...


class PolicyOptionMetadata(vmodl.DynamicData):
    @property
    def id(self) -> vim.ExtendedElementDescription: ...
    @property
    def parameter(self) -> List[ParameterMetadata]: ...


class ProfileMetadata(vmodl.DynamicData):
    @property
    def key(self) -> type: ...
    @property
    def profileTypeName(self) -> str: ...
    @property
    def description(self) -> vim.ExtendedDescription: ...
    @property
    def sortSpec(self) -> List[ProfileMetadata.ProfileSortSpec]: ...
    @property
    def profileCategory(self) -> str: ...
    @property
    def profileComponent(self) -> str: ...
    @property
    def operationMessages(self) -> List[ProfileMetadata.ProfileOperationMessage]: ...


    class ProfileOperationMessage(vmodl.DynamicData):
        @property
        def operationName(self) -> str: ...
        @property
        def message(self) -> vmodl.LocalizableMessage: ...


    class ProfileSortSpec(vmodl.DynamicData):
        @property
        def policyId(self) -> str: ...
        @property
        def parameter(self) -> str: ...


class ProfilePropertyPath(vmodl.DynamicData):
    @property
    def profilePath(self) -> PropertyPath: ...
    @property
    def policyId(self) -> str: ...
    @property
    def parameterId(self) -> str: ...
    @property
    def policyOptionId(self) -> str: ...


class ProfileStructure(vmodl.DynamicData):
    @property
    def profileTypeName(self) -> str: ...
    @property
    def child(self) -> List[ProfileStructureProperty]: ...


class ProfileStructureProperty(vmodl.DynamicData):
    @property
    def propertyName(self) -> str: ...
    @property
    def array(self) -> bool: ...
    @property
    def element(self) -> ProfileStructure: ...


class SimpleExpression(Expression):
    @property
    def expressionType(self) -> str: ...
    @property
    def parameter(self) -> List[vmodl.KeyAnyValue]: ...


class UserInputRequiredParameterMetadata(PolicyOptionMetadata):
    @property
    def userInputParameter(self) -> List[ParameterMetadata]: ...