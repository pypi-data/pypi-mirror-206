# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2023-04-28T14:45:34+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, Iterator, List, Mapping, Optional, Sequence, Union
from uuid import UUID

from pydantic import Extra, Field
from typing_extensions import Literal

from kelvin.sdk.client.data_model import DataModelBase, PaginatorDataModel
from kelvin.sdk.client.utils import instance_classmethod

from . import errors, pagination, paginator, parameterschema, requests


class ACPAllocation(DataModelBase):
    """
    ACPAllocation object.

    Parameters
    ----------
    cpu_capacity: Optional[float]
    cpu_requests: Optional[float]
    memory_capacity: Optional[float]
    memory_requests: Optional[float]

    """

    cpu_capacity: Optional[float] = None
    cpu_requests: Optional[float] = None
    memory_capacity: Optional[float] = None
    memory_requests: Optional[float] = None


class ACPCPUUtilization(DataModelBase):
    """
    ACPCPUUtilization object.

    Parameters
    ----------
    timestamp: Optional[int]
    value: Optional[float]

    """

    timestamp: Optional[int] = None
    value: Optional[float] = None


class ACPDisk(DataModelBase):
    """
    ACPDisk object.

    Parameters
    ----------
    total_bytes: Optional[float]
    used_bytes: Optional[float]

    """

    total_bytes: Optional[float] = None
    used_bytes: Optional[float] = None


class ACPEdgeAppVersion(DataModelBase):
    """
    ACPEdgeAppVersion object.

    Parameters
    ----------
    edge_app_version: Optional[str]
    has_updates: Optional[bool]
    platform_version: Optional[str]

    """

    edge_app_version: Optional[str] = None
    has_updates: Optional[bool] = None
    platform_version: Optional[str] = None

    @classmethod
    def force_update_acp_edge_app_version(
        cls, acp_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Force Update ACP Edge App Version

        **Permission Required:** `kelvin.permission.acp.read`.

        ``forceUpdateACPEdgeAppVersion``: ``POST`` ``/api/v4/acps/{acp_name}/edge-apps/version/force-update``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/edge-apps/version/force-update",
            {"acp_name": acp_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_acp_edge_app_version(
        cls, acp_name: str, _dry_run: bool = False, _client: Any = None
    ) -> ACPEdgeAppVersion:
        """
        Get ACP Edge App Version

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getACPEdgeAppVersion``: ``GET`` ``/api/v4/acps/{acp_name}/edge-apps/version/get``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/edge-apps/version/get",
            {"acp_name": acp_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": ACPEdgeAppVersion,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result


class ACPLocationItem(DataModelBase):
    """
    ACPLocationItem object.

    Parameters
    ----------
    lat: Optional[float]
    lon: Optional[float]

    """

    lat: Optional[float] = None
    lon: Optional[float] = None


class ACPMemoryUsage(DataModelBase):
    """
    ACPMemoryUsage object.

    Parameters
    ----------
    timestamp: Optional[int]
    value: Optional[float]

    """

    timestamp: Optional[int] = None
    value: Optional[float] = None


class ACPMetaDataItem(DataModelBase):
    """
    ACPMetaDataItem object.

    Parameters
    ----------
    acp_name: Optional[str]
    created: Optional[datetime]
    name: Optional[str]
    payload: Optional[Dict[str, Any]]
    updated: Optional[datetime]

    """

    acp_name: Optional[str] = None
    created: Optional[datetime] = None
    name: Optional[str] = Field(None, max_length=64)
    payload: Optional[Dict[str, Any]] = None
    updated: Optional[datetime] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_acp_metadata(
        self_or_cls,
        acp_name: str,
        data: Optional[Union[requests.ACPMetadataCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> ACPMetadata:
        """
        Create ACP Metadata

        **Permission Required:** `kelvin.permission.acp.create`.

        ``createACPMetadata``: ``POST`` ``/api/v4/acps/{acp_name}/metadata/create``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        data: requests.ACPMetadataCreate, optional
        **kwargs:
            Extra parameters for requests.ACPMetadataCreate
              - name: str
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/metadata/create",
            {"acp_name": acp_name},
            {},
            {},
            {},
            data,
            requests.ACPMetadataCreate,
            False,
            {"201": ACPMetadata, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_acp_metadata(
        cls,
        acp_name: str,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[ACPMetaDataItem], ACPMetadataListPaginated]:
        """
        List ACP Metadata

        **Pagination Sortable Columns:** `acp_metadata.name`, `acp_metadata.acp_name`

        **Permission Required:** `kelvin.permission.acp.read`.

        ``listACPMetadata``: ``GET`` ``/api/v4/acps/{acp_name}/metadata/list``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        search : :obj:`Sequence[str]`
            Search ACP Metadata by name
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/metadata/list",
            {"acp_name": acp_name},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": ACPMetadataListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/acps/{acp_name}/metadata/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate()
    def delete_acp_metadata(
        self_or_cls,
        acp_name: str,
        acp_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> None:
        """
        Delete ACP Metadata

        **Permission Required:** `kelvin.permission.acp.delete`.

        ``deleteACPMetadata``: ``POST`` ``/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/delete``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        acp_metadata_name : :obj:`str`, optional
            ACP Metadata name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/delete",
            {"acp_name": acp_name, "acp_metadata_name": acp_metadata_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_acp_metadata(
        self_or_cls,
        acp_name: str,
        acp_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> ACPMetadata:
        """
        Get ACP Metadata

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getACPMetadata``: ``GET`` ``/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/get``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        acp_metadata_name : :obj:`str`, optional
            ACP Metadata name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/get",
            {"acp_name": acp_name, "acp_metadata_name": acp_metadata_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": ACPMetadata, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_acp_metadata(
        self_or_cls,
        acp_name: str,
        acp_metadata_name: str,
        data: Optional[Union[requests.ACPMetadataUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> ACPMetadata:
        """
        Update ACP Metadata

        **Permission Required:** `kelvin.permission.acp.update`.

        ``updateACPMetadata``: ``POST`` ``/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/update``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        acp_metadata_name : :obj:`str`, optional
            ACP Metadata name
        data: requests.ACPMetadataUpdate, optional
        **kwargs:
            Extra parameters for requests.ACPMetadataUpdate
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/update",
            {"acp_name": acp_name, "acp_metadata_name": acp_metadata_name},
            {},
            {},
            {},
            data,
            requests.ACPMetadataUpdate,
            False,
            {
                "200": ACPMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class ACPMetadata(DataModelBase):
    """
    ACPMetadata object.

    Parameters
    ----------
    acp_name: Optional[str]
    created: Optional[datetime]
    name: Optional[str]
    payload: Optional[Dict[str, Any]]
    updated: Optional[datetime]

    """

    acp_name: Optional[str] = None
    created: Optional[datetime] = None
    name: Optional[str] = Field(None, max_length=64)
    payload: Optional[Dict[str, Any]] = None
    updated: Optional[datetime] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_acp_metadata(
        self_or_cls,
        acp_name: str,
        data: Optional[Union[requests.ACPMetadataCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> ACPMetadata:
        """
        Create ACP Metadata

        **Permission Required:** `kelvin.permission.acp.create`.

        ``createACPMetadata``: ``POST`` ``/api/v4/acps/{acp_name}/metadata/create``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        data: requests.ACPMetadataCreate, optional
        **kwargs:
            Extra parameters for requests.ACPMetadataCreate
              - name: str
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/metadata/create",
            {"acp_name": acp_name},
            {},
            {},
            {},
            data,
            requests.ACPMetadataCreate,
            False,
            {"201": ACPMetadata, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_acp_metadata(
        cls,
        acp_name: str,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[ACPMetaDataItem], ACPMetadataListPaginated]:
        """
        List ACP Metadata

        **Pagination Sortable Columns:** `acp_metadata.name`, `acp_metadata.acp_name`

        **Permission Required:** `kelvin.permission.acp.read`.

        ``listACPMetadata``: ``GET`` ``/api/v4/acps/{acp_name}/metadata/list``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        search : :obj:`Sequence[str]`
            Search ACP Metadata by name
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/metadata/list",
            {"acp_name": acp_name},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": ACPMetadataListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/acps/{acp_name}/metadata/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"acp_metadata_name": "name"})
    def delete_acp_metadata(
        self_or_cls,
        acp_name: str,
        acp_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> None:
        """
        Delete ACP Metadata

        **Permission Required:** `kelvin.permission.acp.delete`.

        ``deleteACPMetadata``: ``POST`` ``/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/delete``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        acp_metadata_name : :obj:`str`, optional
            ACP Metadata name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/delete",
            {"acp_name": acp_name, "acp_metadata_name": acp_metadata_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_metadata_name": "name"})
    def get_acp_metadata(
        self_or_cls,
        acp_name: str,
        acp_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> ACPMetadata:
        """
        Get ACP Metadata

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getACPMetadata``: ``GET`` ``/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/get``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        acp_metadata_name : :obj:`str`, optional
            ACP Metadata name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/get",
            {"acp_name": acp_name, "acp_metadata_name": acp_metadata_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": ACPMetadata, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_metadata_name": "name"})
    def update_acp_metadata(
        self_or_cls,
        acp_name: str,
        acp_metadata_name: str,
        data: Optional[Union[requests.ACPMetadataUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> ACPMetadata:
        """
        Update ACP Metadata

        **Permission Required:** `kelvin.permission.acp.update`.

        ``updateACPMetadata``: ``POST`` ``/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/update``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        acp_metadata_name : :obj:`str`, optional
            ACP Metadata name
        data: requests.ACPMetadataUpdate, optional
        **kwargs:
            Extra parameters for requests.ACPMetadataUpdate
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/update",
            {"acp_name": acp_name, "acp_metadata_name": acp_metadata_name},
            {},
            {},
            {},
            data,
            requests.ACPMetadataUpdate,
            False,
            {
                "200": ACPMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class ACPMetadataListPaginated(PaginatorDataModel[ACPMetaDataItem]):
    """
    ACPMetadataListPaginated object.

    Parameters
    ----------
    data: Optional[List[ACPMetaDataItem]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[ACPMetaDataItem]] = None
    pagination: Optional[pagination.Pagination] = None


class ACPNetwork(DataModelBase):
    """
    ACPNetwork object.

    Parameters
    ----------
    total_rx: Optional[float]
    total_tx: Optional[float]

    """

    total_rx: Optional[float] = None
    total_tx: Optional[float] = None


class ACPStatusCount(DataModelBase):
    """
    ACPStatusCount object.

    Parameters
    ----------
    offline: Optional[int]
    online: Optional[int]
    total: Optional[int]

    """

    offline: Optional[int] = None
    online: Optional[int] = None
    total: Optional[int] = None

    @classmethod
    def get_acp_status_count(cls, _dry_run: bool = False, _client: Any = None) -> ACPStatusCount:
        """
        Get ACP Status Count

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getACPStatusCount``: ``GET`` ``/api/v4/acps/status/count/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/acps/status/count/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": ACPStatusCount,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result


class ACPStatusValues(DataModelBase):
    """
    ACPStatusValues object.

    Parameters
    ----------
    last_seen: Optional[datetime]
    message: Optional[str]
    state: Optional[str]
    warnings: Optional[List[str]]

    """

    last_seen: Optional[datetime] = None
    message: Optional[str] = None
    state: Optional[str] = None
    warnings: Optional[List[str]] = None


class ACPTelemetry(DataModelBase):
    """
    ACPTelemetry object.

    Parameters
    ----------
    allocation: Optional[ACPAllocation]
    cpu_utilization: Optional[List[ACPCPUUtilization]]
    disk: Optional[ACPDisk]
    memory_usage: Optional[List[ACPMemoryUsage]]
    network: Optional[ACPNetwork]

    """

    allocation: Optional[ACPAllocation] = None
    cpu_utilization: Optional[List[ACPCPUUtilization]] = None
    disk: Optional[ACPDisk] = None
    memory_usage: Optional[List[ACPMemoryUsage]] = None
    network: Optional[ACPNetwork] = None

    @classmethod
    def get_acp_telemetry(
        cls, acp_name: str, _dry_run: bool = False, _client: Any = None
    ) -> ACPTelemetry:
        """
        Get ACP Telemetry

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getACPTelemetry``: ``GET`` ``/api/v4/acps/{acp_name}/telemetry/get``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/telemetry/get",
            {"acp_name": acp_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": ACPTelemetry, "400": ErrorMessages, "401": ErrorMessages, "500": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class ACPWorkloadManifestConfigItem(DataModelBase):
    """
    ACPWorkloadManifestConfigItem object.

    Parameters
    ----------
    name: Optional[str]
    payload: Optional[Dict[str, Any]]

    """

    name: Optional[str] = None
    payload: Optional[Dict[str, Any]] = None


class ACPWorkloadManifestItem(DataModelBase):
    """
    ACPWorkloadManifestItem object.

    Parameters
    ----------
    action: Optional[str]
    name: Optional[str]
    payload: Optional[Dict[str, Any]]

    """

    action: Optional[str] = None
    name: Optional[str] = None
    payload: Optional[Dict[str, Any]] = None


class ACPWorkloadManifests(DataModelBase):
    """
    ACPWorkloadManifests object.

    Parameters
    ----------
    config: Optional[List[ACPWorkloadManifestConfigItem]]
    data: Optional[List[ACPWorkloadManifestItem]]
    names: Optional[List[str]]

    """

    config: Optional[List[ACPWorkloadManifestConfigItem]] = None
    data: Optional[List[ACPWorkloadManifestItem]] = None
    names: Optional[List[str]] = None

    @classmethod
    def get_workloads_manifests(
        cls, acp_name: str, _dry_run: bool = False, _client: Any = None
    ) -> ACPWorkloadManifests:
        """
        Get Workloads Manifests assigned to an ACP

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getWorkloadsManifests``: ``GET`` ``/api/v4/acps/{acp_name}/workloads/manifests/get``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/workloads/manifests/get",
            {"acp_name": acp_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": ACPWorkloadManifests,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result


class AlarmClass(DataModelBase):
    """
    AlarmClass object.

    Parameters
    ----------
    created: Optional[datetime]
    name: Optional[str]
    owner: Optional[str]
    title: Optional[str]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = None
    name: Optional[str] = Field(None, max_length=64)
    owner: Optional[str] = Field(None, max_length=64)
    title: Optional[str] = Field(None, max_length=64)
    updated: Optional[datetime] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_alarm_class(
        self_or_cls,
        data: Optional[Union[requests.AlarmClassCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmClass:
        """
        Create Alarm Class

        **Permission Required:** `kelvin.permission.alarm_class.create`.

        ``createAlarmClass``: ``POST`` ``/api/v4/alarms/class/create``

        Parameters
        ----------
        data: requests.AlarmClassCreate, optional
        **kwargs:
            Extra parameters for requests.AlarmClassCreate
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/class/create",
            {},
            {},
            {},
            {},
            data,
            requests.AlarmClassCreate,
            False,
            {"201": AlarmClass, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_alarm_class(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        owner: Optional[str] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AlarmClass], AlarmClassListPaginated]:
        """
        List Alarm Class

        **Pagination Sortable Columns:** `alarm_class.name`, `alarm_class.title`, `alarm_class.created`, `alarm_class.updated`, `alarm_class.owner`

        **Permission Required:** `kelvin.permission.alarm_class.read`.

        ``listAlarmClass``: ``GET`` ``/api/v4/alarms/class/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search Alarm Class by name or title
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true
        owner : :obj:`str`
            Filter Alarm Class by owner. Possible Values: kelvin/custom

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/class/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "owner": owner,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmClassListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/alarms/class/list", "GET") if fetch and not _dry_run else result
        )

    @instance_classmethod
    @DataModelBase.translate({"alarm_class_name": "name"})
    def delete_alarm_class(
        self_or_cls, alarm_class_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Alarm Class

        **Permission Required:** `kelvin.permission.alarm_class.delete`.

        ``deleteAlarmClass``: ``POST`` ``/api/v4/alarms/class/{alarm_class_name}/delete``

        Parameters
        ----------
        alarm_class_name : :obj:`str`, optional
            Alarm Class Name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/class/{alarm_class_name}/delete",
            {"alarm_class_name": alarm_class_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"alarm_class_name": "name"})
    def get_alarm_class(
        self_or_cls, alarm_class_name: str, _dry_run: bool = False, _client: Any = None
    ) -> AlarmClass:
        """
        Get Alarm Class

        **Permission Required:** `kelvin.permission.alarm_class.read`.

        ``getAlarmClass``: ``GET`` ``/api/v4/alarms/class/{alarm_class_name}/get``

        Parameters
        ----------
        alarm_class_name : :obj:`str`, optional
            Alarm Class Name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/class/{alarm_class_name}/get",
            {"alarm_class_name": alarm_class_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmClass, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"alarm_class_name": "name"})
    def update_alarm_class(
        self_or_cls,
        alarm_class_name: str,
        data: Optional[Union[requests.AlarmClassUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmClass:
        """
        Update Alarm Class

        **Permission Required:** `kelvin.permission.alarm_class.update`.

        ``updateAlarmClass``: ``POST`` ``/api/v4/alarms/class/{alarm_class_name}/update``

        Parameters
        ----------
        alarm_class_name : :obj:`str`, optional
            Alarm Class Name
        data: requests.AlarmClassUpdate, optional
        **kwargs:
            Extra parameters for requests.AlarmClassUpdate
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/class/{alarm_class_name}/update",
            {"alarm_class_name": alarm_class_name},
            {},
            {},
            {},
            data,
            requests.AlarmClassUpdate,
            False,
            {
                "200": AlarmClass,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class AlarmClassListPaginated(PaginatorDataModel[AlarmClass]):
    """
    AlarmClassListPaginated object.

    Parameters
    ----------
    data: Optional[List[AlarmClass]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[AlarmClass]] = None
    pagination: Optional[pagination.Pagination] = None


class AlarmClustering(DataModelBase):
    """
    AlarmClustering object.

    Parameters
    ----------
    alarm_ids: Optional[List[str]]
    count: Optional[int]
    time_bucket_start: Optional[datetime]

    """

    alarm_ids: Optional[List[str]] = None
    count: Optional[int] = None
    time_bucket_start: Optional[datetime] = None

    @classmethod
    def get_alarm_clustering(
        cls,
        data: Optional[Union[requests.AlarmClustering, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[AlarmClustering]:
        """
        Get Alarm Clustering

        **Permission Required:** `kelvin.permission.alarm.read`.

        ``getAlarmClustering``: ``POST`` ``/api/v4/alarms/clustering/get``

        Parameters
        ----------
        data: requests.AlarmClustering, optional
        **kwargs:
            Extra parameters for requests.AlarmClustering
              - alarm_severities: list
              - asset_include_children: bool
              - end_date: datetime
              - start_date: datetime
              - target_asset_names: list
              - time_bucket: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/clustering/get",
            {},
            {},
            {},
            {},
            data,
            requests.AlarmClustering,
            False,
            {
                "200": List[AlarmClustering],
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class AlarmFilter(DataModelBase):
    """
    AlarmFilter object.

    Parameters
    ----------
    created: Optional[datetime]
    id: Optional[str]
    payload: Optional[Dict[str, Any]]
    title: Optional[str]
    updated: Optional[datetime]
    username: Optional[str]
    version: Optional[str]

    """

    created: Optional[datetime] = None
    id: Optional[str] = None
    payload: Optional[Dict[str, Any]] = None
    title: Optional[str] = None
    updated: Optional[datetime] = None
    username: Optional[str] = None
    version: Optional[str] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_alarm_filter(
        self_or_cls,
        data: Optional[Union[requests.AlarmFilterCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmFilter:
        """
        Create Alarm Filter

        **Permission Required:** `kelvin.permission.alarm_filter.create`.

        ``createAlarmFilter``: ``POST`` ``/api/v4/alarms/filters/create``

        Parameters
        ----------
        data: requests.AlarmFilterCreate, optional
        **kwargs:
            Extra parameters for requests.AlarmFilterCreate
              - payload: dict
              - title: str
              - username: str
              - version: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/filters/create",
            {},
            {},
            {},
            {},
            data,
            requests.AlarmFilterCreate,
            False,
            {"201": AlarmFilter, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_alarm_filter(
        cls,
        search: Optional[Sequence[str]] = None,
        alarm_class_name: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AlarmFilter], AlarmFilterListPaginated]:
        """
        List Alarm Filter

        **Pagination Sortable Columns:** `alarm_filter.title`, `alarm_filter.username`, `alarm_filter.version`, `alarm_filter.created`, `alarm_filter.updated`

        **Permission Required:** `kelvin.permission.alarm_filter.read`.

        ``listAlarmFilter``: ``GET`` ``/api/v4/alarms/filters/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search alarm filter by title or version
        alarm_class_name : :obj:`Sequence[str]`
            Filter alarm filter by alarm class
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/filters/list",
            {},
            {
                "search": search,
                "alarm_class_name": alarm_class_name,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmFilterListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/alarms/filters/list", "GET") if fetch and not _dry_run else result
        )

    @instance_classmethod
    @DataModelBase.translate({"alarm_filter_id": "id"})
    def delete_alarm_filter(
        self_or_cls, alarm_filter_id: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Alarm Filter

        **Permission Required:** `kelvin.permission.alarm_filter.delete`.

        ``deleteAlarmFilter``: ``POST`` ``/api/v4/alarms/filters/{alarm_filter_id}/delete``

        Parameters
        ----------
        alarm_filter_id : :obj:`str`, optional
            Alarm Filter id

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/filters/{alarm_filter_id}/delete",
            {"alarm_filter_id": alarm_filter_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"alarm_filter_id": "id"})
    def get_alarm_filter(
        self_or_cls,
        alarm_filter_id: str,
        metadata: Optional[Sequence[str]] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> AlarmFilter:
        """
        Get Alarm Filter

        **Permission Required:** `kelvin.permission.alarm_filter.read`.

        ``getAlarmFilter``: ``GET`` ``/api/v4/alarms/filters/{alarm_filter_id}/get``

        Parameters
        ----------
        alarm_filter_id : :obj:`str`, optional
            Alarm Filter ID
        metadata : :obj:`Sequence[str]`
            Inject metadata into the response

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/filters/{alarm_filter_id}/get",
            {"alarm_filter_id": alarm_filter_id},
            {"metadata": metadata},
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmFilter, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"alarm_filter_id": "id"})
    def update_alarm_filter(
        self_or_cls,
        alarm_filter_id: str,
        data: Optional[Union[requests.AlarmFilterUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmFilter:
        """
        Update Alarm Filter

        **Permission Required:** `kelvin.permission.alarm_filter.update`.

        ``updateAlarmFilter``: ``POST`` ``/api/v4/alarms/filters/{alarm_filter_id}/update``

        Parameters
        ----------
        alarm_filter_id : :obj:`str`, optional
            Alarm Filter ID
        data: requests.AlarmFilterUpdate, optional
        **kwargs:
            Extra parameters for requests.AlarmFilterUpdate
              - payload: dict
              - title: str
              - version: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/filters/{alarm_filter_id}/update",
            {"alarm_filter_id": alarm_filter_id},
            {},
            {},
            {},
            data,
            requests.AlarmFilterUpdate,
            False,
            {"200": AlarmFilter, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class AlarmFilterListPaginated(PaginatorDataModel[AlarmFilter]):
    """
    AlarmFilterListPaginated object.

    Parameters
    ----------
    data: Optional[List[AlarmFilter]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[AlarmFilter]] = None
    pagination: Optional[pagination.Pagination] = None


class AlarmSeverity(DataModelBase):
    """
    AlarmSeverity object.

    Parameters
    ----------
    created: Optional[datetime]
    name: Optional[str]
    severity: Optional[int]
    title: Optional[str]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = None
    name: Optional[str] = None
    severity: Optional[int] = None
    title: Optional[str] = None
    updated: Optional[datetime] = None


class AlarmSeverityList(DataModelBase):
    """
    AlarmSeverityList object.

    Parameters
    ----------
    data: Optional[List[AlarmSeverity]]

    """

    data: Optional[List[AlarmSeverity]] = None

    @classmethod
    def get_alarm_severities(cls, _dry_run: bool = False, _client: Any = None) -> AlarmSeverityList:
        """
        Get Alarm Severities

        **Permission Required:** `kelvin.permission.alarm_severity.read`.

        ``getAlarmSeverities``: ``GET`` ``/api/v4/alarms/severities/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/severities/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmSeverityList, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_alarm_severities(
        self_or_cls,
        data: Optional[Union[requests.AlarmSeverityUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmSeverityList:
        """
        Update Alarm Severities

        **Permission Required:** `kelvin.permission.alarm_severity.update`.

        ``updateAlarmSeverities``: ``POST`` ``/api/v4/alarms/severities/update``

        Parameters
        ----------
        data: requests.AlarmSeverityUpdate, optional
        **kwargs:
            Extra parameters for requests.AlarmSeverityUpdate
              - data: list

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/severities/update",
            {},
            {},
            {},
            {},
            data,
            requests.AlarmSeverityUpdate,
            False,
            {
                "200": AlarmSeverityList,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class AlarmTag(DataModelBase):
    """
    AlarmTag object.

    Parameters
    ----------
    created: Optional[datetime]
    name: Optional[str]
    title: Optional[str]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = None
    name: Optional[str] = None
    title: Optional[str] = None
    updated: Optional[datetime] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_tag(
        self_or_cls,
        data: Optional[Union[requests.AlarmTagCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmTag:
        """
        Create Tag

        **Permission Required:** `kelvin.permission.alarm.create`.

        ``createTag``: ``POST`` ``/api/v4/alarms/tags/create``

        Parameters
        ----------
        data: requests.AlarmTagCreate, optional
        **kwargs:
            Extra parameters for requests.AlarmTagCreate
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/tags/create",
            {},
            {},
            {},
            {},
            data,
            requests.AlarmTagCreate,
            False,
            {"201": AlarmTag, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_tags(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AlarmTag], AlarmTagListPaginated]:
        """
        List Tags

        **Pagination Sortable Columns:** `tag.name`, `tag.title`

        **Permission Required:** `kelvin.permission.alarm.read`.

        ``listTags``: ``GET`` ``/api/v4/alarms/tags/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search tags by name or title
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/tags/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmTagListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/alarms/tags/list", "GET") if fetch and not _dry_run else result

    @classmethod
    def delete_tag(cls, tag_name: str, _dry_run: bool = False, _client: Any = None) -> None:
        """
        Delete Tag

        **Permission Required:** `kelvin.permission.alarm.delete`.

        ``deleteTag``: ``POST`` ``/api/v4/alarms/tags/{tag_name}/delete``

        Parameters
        ----------
        tag_name : :obj:`str`, optional
            Tag name

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/tags/{tag_name}/delete",
            {"tag_name": tag_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_tag(cls, tag_name: str, _dry_run: bool = False, _client: Any = None) -> AlarmTag:
        """
        Get Tag

        **Permission Required:** `kelvin.permission.alarm.read`.

        ``getTag``: ``GET`` ``/api/v4/alarms/tags/{tag_name}/get``

        Parameters
        ----------
        tag_name : :obj:`str`, optional
            Tag name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/tags/{tag_name}/get",
            {"tag_name": tag_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmTag, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_tag(
        self_or_cls,
        tag_name: str,
        data: Optional[Union[requests.AlarmTagUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmTag:
        """
        Update Tag

        **Permission Required:** `kelvin.permission.alarm.update`.

        ``updateTag``: ``POST`` ``/api/v4/alarms/tags/{tag_name}/update``

        Parameters
        ----------
        tag_name : :obj:`str`, optional
            Tag name
        data: requests.AlarmTagUpdate, optional
        **kwargs:
            Extra parameters for requests.AlarmTagUpdate
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/tags/{tag_name}/update",
            {"tag_name": tag_name},
            {},
            {},
            {},
            data,
            requests.AlarmTagUpdate,
            False,
            {
                "200": AlarmTag,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class AlarmTagListPaginated(PaginatorDataModel[AlarmTag]):
    """
    AlarmTagListPaginated object.

    Parameters
    ----------
    data: Optional[List[AlarmTag]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[AlarmTag]] = None
    pagination: Optional[pagination.Pagination] = None


class AlarmType(DataModelBase):
    """
    AlarmType object.

    Parameters
    ----------
    alarm_class_name: Optional[str]
    created: Optional[datetime]
    name: Optional[str]
    owner: Optional[str]
    title: Optional[str]
    updated: Optional[datetime]

    """

    alarm_class_name: Optional[str] = Field(None, max_length=64)
    created: Optional[datetime] = None
    name: Optional[str] = Field(None, max_length=64)
    owner: Optional[str] = Field(None, max_length=64)
    title: Optional[str] = Field(None, max_length=64)
    updated: Optional[datetime] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_alarm_type(
        self_or_cls,
        data: Optional[Union[requests.AlarmTypeCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmType:
        """
        Create Alarm Type

        **Permission Required:** `kelvin.permission.alarm_type.create`.

        ``createAlarmType``: ``POST`` ``/api/v4/alarms/types/create``

        Parameters
        ----------
        data: requests.AlarmTypeCreate, optional
        **kwargs:
            Extra parameters for requests.AlarmTypeCreate
              - alarm_class_name: str
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/types/create",
            {},
            {},
            {},
            {},
            data,
            requests.AlarmTypeCreate,
            False,
            {"201": AlarmType, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_alarm_type(
        cls,
        search: Optional[Sequence[str]] = None,
        alarm_class_name: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        owner: Optional[str] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AlarmType], AlarmTypeListPaginated]:
        """
        List Alarm Type

        **Pagination Sortable Columns:** `alarm_type.name`, `alarm_type.title`, `alarm_type.created`, `alarm_type.updated`, `alarm_class.name`, `alarm_class.title`, `alarm_type.owner`

        **Permission Required:** `kelvin.permission.alarm_type.read`.

        ``listAlarmType``: ``GET`` ``/api/v4/alarms/types/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search alarm type by name or title
        alarm_class_name : :obj:`Sequence[str]`
            Filter alarm type by alarm class
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true
        owner : :obj:`str`
            Filter Alarm Type by owner. Possible Values: kelvin/custom

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/types/list",
            {},
            {
                "search": search,
                "alarm_class_name": alarm_class_name,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "owner": owner,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmTypeListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/alarms/types/list", "GET") if fetch and not _dry_run else result
        )

    @instance_classmethod
    @DataModelBase.translate({"alarm_type_name": "name"})
    def delete_alarm_type(
        self_or_cls, alarm_type_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Alarm Type

        **Permission Required:** `kelvin.permission.alarm_type.delete`.

        ``deleteAlarmType``: ``POST`` ``/api/v4/alarms/types/{alarm_type_name}/delete``

        Parameters
        ----------
        alarm_type_name : :obj:`str`, optional
            Alarm Type name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/types/{alarm_type_name}/delete",
            {"alarm_type_name": alarm_type_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"alarm_type_name": "name"})
    def get_alarm_type(
        self_or_cls, alarm_type_name: str, _dry_run: bool = False, _client: Any = None
    ) -> AlarmType:
        """
        Get Alarm Type

        **Permission Required:** `kelvin.permission.alarm_type.read`.

        ``getAlarmType``: ``GET`` ``/api/v4/alarms/types/{alarm_type_name}/get``

        Parameters
        ----------
        alarm_type_name : :obj:`str`, optional
            Alarm Type name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/types/{alarm_type_name}/get",
            {"alarm_type_name": alarm_type_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmType, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"alarm_type_name": "name"})
    def update_alarm_type(
        self_or_cls,
        alarm_type_name: str,
        data: Optional[Union[requests.AlarmTypeUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmType:
        """
        Update Alarm Type

        **Permission Required:** `kelvin.permission.alarm_type.update`.

        ``updateAlarmType``: ``POST`` ``/api/v4/alarms/types/{alarm_type_name}/update``

        Parameters
        ----------
        alarm_type_name : :obj:`str`, optional
            Alarm Type name
        data: requests.AlarmTypeUpdate, optional
        **kwargs:
            Extra parameters for requests.AlarmTypeUpdate
              - alarm_class_name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/types/{alarm_type_name}/update",
            {"alarm_type_name": alarm_type_name},
            {},
            {},
            {},
            data,
            requests.AlarmTypeUpdate,
            False,
            {
                "200": AlarmType,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class AlarmTypeListPaginated(PaginatorDataModel[AlarmType]):
    """
    AlarmTypeListPaginated object.

    Parameters
    ----------
    data: Optional[List[AlarmType]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[AlarmType]] = None
    pagination: Optional[pagination.Pagination] = None


class AppVersion(DataModelBase):
    """
    AppVersion object.

    Parameters
    ----------
    created: Optional[datetime]
    id: Optional[str]
    payload: Optional[Dict[str, Any]]
    updated: Optional[datetime]
    version: Optional[str]

    """

    created: Optional[datetime] = None
    id: Optional[str] = None
    payload: Optional[Dict[str, Any]] = None
    updated: Optional[datetime] = None
    version: Optional[str] = None

    @classmethod
    def delete_app_version(
        cls, app_name: str, app_version: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete App Version

        **Note:** This operation also deletes the associated Docker Image

        **Permission Required:** `kelvin.permission.appregistry.delete`.

        ``deleteAppVersion``: ``POST`` ``/api/v4/appregistry/{app_name}/versions/{app_version}/delete``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        app_version : :obj:`str`, optional
            App Version

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/appregistry/{app_name}/versions/{app_version}/delete",
            {"app_name": app_name, "app_version": app_version},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_app_version(
        cls, app_name: str, app_version: str, _dry_run: bool = False, _client: Any = None
    ) -> AppVersion:
        """
        Get App Version

        **Permission Required:** `kelvin.permission.appregistry.read`.

        ``getAppVersion``: ``GET`` ``/api/v4/appregistry/{app_name}/versions/{app_version}/get``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        app_version : :obj:`str`, optional
            App Version

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/appregistry/{app_name}/versions/{app_version}/get",
            {"app_name": app_name, "app_version": app_version},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": AppVersion, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class AssetClass(DataModelBase):
    """
    AssetClass object.

    Parameters
    ----------
    created: Optional[datetime]
    entity_type_name: Optional[str]
    entity_type_title: Optional[str]
    name: Optional[str]
    owner: Optional[str]
    title: Optional[str]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = Field(
        None,
        description='Time of creation of this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )
    entity_type_name: Optional[str] = Field(
        None,
        description="Unique identifier name of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a>. This is the chosen name from a fixed list defined by Kelvin.",
        max_length=64,
    )
    entity_type_title: Optional[str] = Field(
        None,
        description="Display name of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a>. This is the chosen display name (title) from a fixed list defined by Kelvin.",
        max_length=64,
    )
    name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>.',
        max_length=64,
    )
    owner: Optional[str] = Field(
        None,
        description='Who created the Kelvin Class. There are two types of owners; `custom` (any user) or `kelvin` (core <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>).',
        max_length=64,
    )
    title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>.',
        max_length=64,
    )
    updated: Optional[datetime] = Field(
        None,
        description='Time of modifying any variable of this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )

    @instance_classmethod
    @DataModelBase.translate()
    def create_asset_class(
        self_or_cls,
        data: Optional[Union[requests.AssetClassCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetClass:
        """
        Create Asset Class

        To create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> you first need to create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> and <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>. A <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> is linked to an <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> which defines how the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> will be referenced in <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>. For example: <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> that is defined as a Group can only be linked to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> that is saved as <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> **group**.

        There are five <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a>; `group`, `asset`, `component`, `part` and `sensor`. Detailed information about these <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> and how they are used can be found at <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/</a>.

        A <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> is directly linked to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a>. There can be many <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> linked to one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a>.

        **Permission Required:** `kelvin.permission.asset_class.create`.

        ``createAssetClass``: ``POST`` ``/api/v4/assets/class/create``

        Parameters
        ----------
        data: requests.AssetClassCreate, optional
        **kwargs:
            Extra parameters for requests.AssetClassCreate
              - entity_type_name: str
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/class/create",
            {},
            {},
            {},
            {},
            data,
            requests.AssetClassCreate,
            False,
            {"201": AssetClass, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_asset_class(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        owner: Optional[str] = None,
        entity_type_name: Optional[Sequence[str]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetClass], AssetClassListPaginated]:
        """
        List Asset Class

        Returns a filtered dictionary with a data object containing an array of <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Classes</a> objects on the Kelvin Platform that meet the criteria of any parameters passed with the API request.

        If no query parameters are given with the API request, then the defaults will be used to return the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> list.

        The defaults are the first 20 <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Classe</a> objects returned in alphabetical order by the unique identifier name.

        **Pagination Sortable Columns:** `asset_class.name`, `asset_class.title`, `asset_class.created`, `asset_class.updated`, `asset_class.owner`, `asset_class.device_type_name`

        **Permission Required:** `kelvin.permission.asset_class.read`.

        ``listAssetClass``: ``GET`` ``/api/v4/assets/class/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> list. Both the Display Name and the Name will be included in
            the search field criteria. This is given as an array, for example
            `[pump,fan]`.</p> The search is case insensitive and will find partial
            matches as well. For example if a <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> name is `centrifugal_pump`, then a match will be made if the
            search string is `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-class'
            target='_blank'>Kelvin Asset Class</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Classes</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response parameter under pagination -> previous_page
            and pagination -> next_page respectively.</p> The pagination ->
            next_page alphanumeric string should be used here to show a list of
            the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Classes</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response parameter under pagination -> previous_page
            and pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> parameters. Only one parameter can be selected.</p> There
            are six parameter options; `asset_class.name`, `asset_class.title`,
            `asset_class.created`, `asset_class.updated`, `asset_class.owner` and
            `asset_class.device_type_name`.</p> The default is `asset_class.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        owner : :obj:`str`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-class'
            target='_blank'>Kelvin Asset Class</a> by owner.</p> There are two
            types of owners; `custom` (any user) or `kelvin` (core <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a>).</p> The default will select all owner options.
        entity_type_name : :obj:`Sequence[str]`
            Filter and return the results of one or more of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a>
            names. This is given as an array, for example `[group,asset]`. Prefix
            any entity type name with the character `!` for a NOT operation.</p>
            There are five <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets#entity-type'
            target='_blank'>Entity Type</a> names available to choose from;
            `group`, `asset`, `component`, `part`, `sensor`.</p> The default will
            select all available <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a>
            name options.</p>

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/class/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "owner": owner,
                "entity_type_name": entity_type_name,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetClassListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/assets/class/list", "GET") if fetch and not _dry_run else result
        )

    @instance_classmethod
    @DataModelBase.translate({"asset_class_name": "name"})
    def delete_asset_class(
        self_or_cls, asset_class_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Asset Class

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a>. This cannot be undone once the API request has been submitted.

        This command can not delete <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Classes</a> that are currently linked to any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Types</a> and will return an error 403.

        **Permission Required:** `kelvin.permission.asset_class.delete`.

        ``deleteAssetClass``: ``POST`` ``/api/v4/assets/class/{asset_class_name}/delete``

        Parameters
        ----------
        asset_class_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class </a> name to delete.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/class/{asset_class_name}/delete",
            {"asset_class_name": asset_class_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_class_name": "name"})
    def get_asset_class(
        self_or_cls, asset_class_name: str, _dry_run: bool = False, _client: Any = None
    ) -> AssetClass:
        """
        Get Asset Class

        Retrieves the properties of a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>.

        **Permission Required:** `kelvin.permission.asset_class.read`.

        ``getAssetClass``: ``GET`` ``/api/v4/assets/class/{asset_class_name}/get``

        Parameters
        ----------
        asset_class_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> name to retrieve.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/class/{asset_class_name}/get",
            {"asset_class_name": asset_class_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetClass,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_class_name": "name"})
    def update_asset_class(
        self_or_cls,
        asset_class_name: str,
        data: Optional[Union[requests.AssetClassUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetClass:
        """
        Update Asset Class

        Updates an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> with any new values passed through the body parameters.

        Only the Display Name (title) body parameter is required. If this body parameter does not need to be changed, it should still have the original Display Name (title) given. Any other body parameters that are not required and not provided will remain unchanged.

        Only the unique identifier name can not be changed. If you need to change this parameter, then you will need to make a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> and relink all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Types</a> to the new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a>.

        **Permission Required:** `kelvin.permission.asset_class.update`.

        ``updateAssetClass``: ``POST`` ``/api/v4/assets/class/{asset_class_name}/update``

        Parameters
        ----------
        asset_class_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> name to retrieve.</p> This is the unique identifier name and
            not the display name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        data: requests.AssetClassUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetClassUpdate
              - entity_type_name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/class/{asset_class_name}/update",
            {"asset_class_name": asset_class_name},
            {},
            {},
            {},
            data,
            requests.AssetClassUpdate,
            False,
            {
                "200": AssetClass,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class AssetClassListPaginated(PaginatorDataModel[AssetClass]):
    """
    AssetClassListPaginated object.

    Parameters
    ----------
    data: Optional[List[AssetClass]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[AssetClass]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Classes</a>. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class AssetDataStreamItem(DataModelBase):
    """
    AssetDataStreamItem object.

    Parameters
    ----------
    asset_name: Optional[str]
    metric_name: Optional[str]

    """

    asset_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    metric_name: Optional[str] = Field(
        None,
        description="Unique identifier name of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a>.",
    )

    @classmethod
    def list_asset_data_streams(
        cls,
        asset_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        data: Optional[Union[requests.AssetDataStreamsList, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[AssetDataStreamItem], AssetDataStreamsListPaginated]:
        """
        List Asset Data Streams

        Returns an array of dictionary objects with all the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pairs for the requested <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>.

        If the optional `include_asset_children` in the request body is true, then the returned dictionary will also filter for all children <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> below the `asset_name`.


        **Pagination Sortable Columns:** `datastream.asset_name`, `datastream.metric_name`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``listAssetDataStreams``: ``POST`` ``/api/v4/assets/{asset_name}/datastreams/list``

        Parameters
        ----------
        asset_name : :obj:`str`, optional
            Unique identifier name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin
            Metric</a> pair objects to be returned. Page size can be between 1 and
            1000 objects.</p> The default is 20 Kelvin Asset/Kelvin Metric pair
            objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair
            objects in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair
            objects in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair
            objects. Only one parameter can be selected.</p> There are two
            parameter options; `datastream.asset_name` and
            `datastream.metric_name`.</p> The default is `datastream.asset_name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        data: requests.AssetDataStreamsList, optional
        **kwargs:
            Extra parameters for requests.AssetDataStreamsList
              - include_asset_children: bool

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/{asset_name}/datastreams/list",
            {"asset_name": asset_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            data,
            requests.AssetDataStreamsList,
            False,
            {
                "200": AssetDataStreamsListPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/assets/{asset_name}/datastreams/list", "POST")
            if fetch and not _dry_run
            else result
        )


class AssetDataStreamsListPaginated(PaginatorDataModel[AssetDataStreamItem]):
    """
    AssetDataStreamsListPaginated object.

    Parameters
    ----------
    data: Optional[List[AssetDataStreamItem]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[AssetDataStreamItem]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair objects. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class AssetInsightsItem(DataModelBase):
    """
    AssetInsightsItem object.

    Parameters
    ----------
    asset_type_name: Optional[str]
    asset_type_title: Optional[str]
    extra_fields: Optional[Dict[str, Any]]
    name: Optional[str]
    pinned: Optional[bool]
    title: Optional[str]

    """

    asset_type_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    asset_type_title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    extra_fields: Optional[Dict[str, Any]] = Field(
        None,
        description="A dictionary of all requested data from the `extra_fields` key in the request.</p> The key names for each column of data are the same from the request.",
    )
    name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    pinned: Optional[bool] = Field(
        None,
        description="Pinned status of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>.</p> The pinned <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Assets</a> have been defined in an array from the request in the key `PinnedAssets`.",
    )
    title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )

    @classmethod
    def get_assets_insights(
        cls,
        page_size: Optional[int] = 1000,
        page: Optional[int] = None,
        data: Optional[Union[requests.GetAssetsInsights, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[AssetInsightsItem], AssetInsightsPaginated]:
        """
        Advanced <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> search and filter.

        There are not only standard options for searching and filtering <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Assets</a> but also advanced options such as pinning selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Assets</a> to page 1, creating extra fields with date range computational calculations on <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> and retrieving custom fields from <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Assets</a>.

        **Pagination Sortable Columns:** `name`, `title`, `asset_type_name`, `asset_type_title`

        **Permission Required:** `kelvin.permission.asset_insights.read`.

        ``getAssetsInsights``: ``POST`` ``/api/v4/asset-insights/get``

        Parameters
        ----------
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>
            objects.
        page : :obj:`int`
            Return the list of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin
            Asset</a> objects on requested page using the `page_size` as a
            calculation reference.
        data: requests.GetAssetsInsights, optional
        **kwargs:
            Extra parameters for requests.GetAssetsInsights
              - asset_names: list
              - asset_types: list
              - extra_fields: str
              - force_fetch_recommendations: bool
              - map_names: list
              - pinned_assets: list
              - search: list
              - sort_by: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/asset-insights/get",
            {},
            {"page_size": page_size, "page": page},
            {},
            {},
            data,
            requests.GetAssetsInsights,
            False,
            {"200": AssetInsightsPaginated, "400": errors.ErrorMessage, "424": errors.ErrorMessage},
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/asset-insights/get", "POST") if fetch and not _dry_run else result
        )


class AssetInsightsPaginated(PaginatorDataModel[AssetInsightsItem]):
    """
    AssetInsightsPaginated object.

    Parameters
    ----------
    data: Optional[List[AssetInsightsItem]]
    pagination: Optional[paginator.PaginationInfo]

    """

    data: Optional[List[AssetInsightsItem]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> objects. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[paginator.PaginationInfo] = None


class AssetLocationItem(DataModelBase):
    """
    AssetLocationItem object.

    Parameters
    ----------
    lat: Optional[float]
    lon: Optional[float]

    """

    lat: Optional[float] = Field(
        None,
        description='Latitude coordinates of where the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> is geographically located.</p> This is saved in decimal degree format. e.g. `37.774929`.</p> The default is 0.',
    )
    lon: Optional[float] = Field(
        None,
        description='Longitude coordinates of where the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> is geographically located.</p> This is saved in decimal degree format. e.g. `\t-122.419416`.</p> The default is 0.',
    )


class AssetMetricItem(DataModelBase):
    """
    AssetMetricItem object.

    Parameters
    ----------
    name: Optional[str]
    title: Optional[str]

    """

    name: Optional[str] = Field(None, description="Unused. This is reserved as a future feature.")
    title: Optional[str] = Field(None, description="Unused. This is reserved as a future feature.")


class AssetProperty(DataModelBase):
    """
    AssetProperty object.

    Parameters
    ----------
    name: Optional[str]
    title: Optional[str]
    value: Optional[str]

    """

    name: Optional[str] = Field(
        None,
        description='Unique identifier name for this property in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a>.</p> This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.',
        max_length=64,
    )
    title: Optional[str] = Field(
        None,
        description='Display name (title) for this property in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a>. This is a friendly name displayed in lists and in references within asset details.</p> You can use any character, numeric, space and special character in this parameter.',
        max_length=64,
    )
    value: Optional[str] = Field(None, description="Value for this property.")


class AssetStatusCount(DataModelBase):
    """
    AssetStatusCount object.

    Parameters
    ----------
    offline: Optional[int]
    online: Optional[int]
    partially_online: Optional[int]
    total: Optional[int]
    unknown: Optional[int]

    """

    offline: Optional[int] = Field(
        None,
        description="Count of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> that have all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> inactive and not receiving data.",
    )
    online: Optional[int] = Field(
        None,
        description="Count of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> that have all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> receiving active data.",
    )
    partially_online: Optional[int] = Field(
        None,
        description="Count of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> that have at least one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> receiving active data. </p> If the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> only has <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a>, then it will be classed at Online, not partially online.",
    )
    total: Optional[int] = Field(
        None,
        description="Count of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.",
    )
    unknown: Optional[int] = Field(
        None,
        description="Count of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> that has no associated <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metrics</a> or the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> has never received data. i.e. It has not been established if this connection is a valid address.",
    )

    @classmethod
    def get_asset_status_count(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> AssetStatusCount:
        """
        Get Asset Status Count

        Summary total count of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> into four statuses.

        There are four status (state) values that can be returned; `online` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and all assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are all online and receiving information, `offline` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and all assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are all offline, `partially_online` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and some assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are online and receiving information and `unknown` where the status (state) has never received any data to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> and/or is not declared on any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> as a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetStatusCount``: ``GET`` ``/api/v4/assets/status/count/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/status/count/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetStatusCount,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result


class AssetStatusItem(DataModelBase):
    """
    AssetStatusItem object.

    Parameters
    ----------
    last_seen: Optional[datetime]
    state: Optional[str]

    """

    last_seen: Optional[datetime] = Field(
        None,
        description='Time when the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> was last seen in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )
    state: Optional[str] = Field(
        None,
        description="Current status (state) of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>. There are four status options; `online`, `offline`, `partially_online` and `unknown`.",
    )


class AssetTemplateProperties(DataModelBase):
    """
    AssetTemplateProperties object.

    Parameters
    ----------
    name: Optional[str]
    title: Optional[str]
    value: Optional[str]

    """

    name: Optional[str] = Field(
        None,
        description='Default unique identifier name for this property in the new Kelvin Template.</p> This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.</p> This can be changed by the user when adding the Kelvin Template as a new <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    title: Optional[str] = Field(
        None,
        description='Default display name (title) for this property in the new Kelvin Template. This is a friendly name displayed in lists and in references.</p> You can use any character, numeric, space and special character in this parameter.</p> This can be changed by the user when adding the Kelvin Template as a new <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    value: Optional[str] = Field(
        None,
        description='Default value for this property. This can be a string, integer, float or boolean.</p> This can be changed by the user when adding the Kelvin Template as a new <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )


class AssetType(DataModelBase):
    """
    AssetType object.

    Parameters
    ----------
    asset_class_entity_type_name: Optional[str]
    asset_class_entity_type_title: Optional[str]
    asset_class_name: Optional[str]
    asset_class_title: Optional[str]
    created: Optional[datetime]
    metadata: Optional[Dict[str, Any]]
    name: Optional[str]
    owner: Optional[str]
    title: Optional[str]
    updated: Optional[datetime]

    """

    asset_class_entity_type_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the entity type linked to the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>. This is the chosen name from a fixed list defined by Kelvin.',
        max_length=64,
    )
    asset_class_entity_type_title: Optional[str] = Field(
        None,
        description='Display name of the entity type linked to the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>. This is the chosen display name (title) from a fixed list defined by Kelvin.',
        max_length=64,
    )
    asset_class_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> that is linked to this new <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.',
        max_length=64,
    )
    asset_class_title: Optional[str] = Field(
        None,
        description='Display name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> that is linked to this new <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.',
        max_length=64,
    )
    created: Optional[datetime] = Field(
        None,
        description='Time of creation of this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Custom dictionary keys/values returned for use by clients.</p> This <a href=\'https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata\' target=\'_blank\'>Kelvin Asset Type Metadata</a> object is created using the API endpoint `/assets/types/{asset_type_name}/metadata/` and is linked to the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>. So anytime the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> is referenced in responses the metadata will also be included.',
    )
    name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.',
        max_length=64,
    )
    owner: Optional[str] = Field(
        None,
        description='Who created the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>. There are two types of owners; custom (any user) or kelvin (core <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>).',
        max_length=64,
    )
    title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.',
        max_length=64,
    )
    updated: Optional[datetime] = Field(
        None,
        description='Time of modifying any variable of this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )

    @instance_classmethod
    @DataModelBase.translate()
    def create_asset_type(
        self_or_cls,
        data: Optional[Union[requests.AssetTypeCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetType:
        """
        Create Asset Type

        To create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> you first need to create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> and <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>. A <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> is linked to an <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> which defines how the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> will be referenced in <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>. For example: <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> that is defined as a Group can only be linked to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> that is saved as <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> **group**.

        There are five <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a>; `group`, `asset`, `component`, `part` and `sensor`. Detailed information about these <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> and how they are used can be found at <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/</a>.

        A <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> is directly linked to a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>. There can be many <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> linked to one <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.

        **Permission Required:** `kelvin.permission.asset_type.create`.

        ``createAssetType``: ``POST`` ``/api/v4/assets/types/create``

        Parameters
        ----------
        data: requests.AssetTypeCreate, optional
        **kwargs:
            Extra parameters for requests.AssetTypeCreate
              - asset_class_name: str
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/create",
            {},
            {},
            {},
            {},
            data,
            requests.AssetTypeCreate,
            False,
            {"201": AssetType, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_asset_type(
        cls,
        search: Optional[Sequence[str]] = None,
        asset_class_name: Optional[Sequence[str]] = None,
        metadata: Optional[Sequence[str]] = None,
        metadata_filter: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        owner: Optional[str] = None,
        entity_type_name: Optional[Sequence[str]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetType], AssetTypeListPaginated]:
        """
        List Asset Type

        Returns a filtered dictionary with a data object containing an array of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> objects on the Kelvin Platform that meet the criteria of any parameters passed with the API request.

        If no query parameters are given with the API request, then the defaults will be used to return the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> list.

        The defaults are the first 20 <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> objects returned in alphabetical order by the unique identifier name.

        **Pagination Sortable Columns:** `asset_class.name`, `asset_class.title`, `asset_class.created`, `asset_class.updated`, `asset_class.owner`, `asset_class.device_type_name`

        **Pagination Sortable Columns:** `asset_type.name`, `asset_type.title`, `asset_type.created`, `asset_type.updated`, `asset_type.owner`, `asset_class.name`, `asset_class.title`, `asset_class.device_type_name`

        **Permission Required:** `kelvin.permission.asset_type.read`.

        ``listAssetType``: ``GET`` ``/api/v4/assets/types/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> list. Both the Display Name and the Name will be included in
            the search field criteria. This is given as an array, for example
            `[pump,fan]`.</p> The search is case insensitive and will find partial
            matches as well. For example if a Kelvin Asset Type name is
            `centrifugal_pump`, then a match will be made if the search string is
            `pum` or `FUGaL`.
        asset_class_name : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> by its name. This is given as an array, for example
            `[pump,fan]`.</p> The search is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end). For example a search with `[pump,fan]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        metadata : :obj:`Sequence[str]`
            Array of Kelvin Asset Type Metadata names. Kelvin Asset Type Metadata
            payload(s) will be attached to any <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Types</a> that are linked to any of the Kelvin Asset Type Metadata
            name(s) in this list.
        metadata_filter : :obj:`Sequence[str]`
            Array of Kelvin Asset Type Metadata filter options to perform on the
            Kelvin Asset Type Metadata payload.</p> Each filter takes the format
            `<metadata_name>.<payload_key>=<wanted_filtered_value>`. An example of
            two filters is `[metadata-test1.key1=String1,metadata-
            test2.key2=88]`.</p> Any JSON keys with string values are case
            sensitive.</p> Multiple JSON key filters in the array from the same
            Kelvin Asset Type Metadata object will be filtered as `OR`. For
            example; if Kelvin Asset Type Metadata name `metadata-test` has two
            key parameters `'key1': 'String1'` and `'key2': 25`, then a
            metadata_filter `[metadata-test.key1=String1,metadata-test.key2=88]`
            will return results as one of the two values match in the same Kelvin
            Asset Type Metadata object.</p> Multiple JSON key filters in the array
            from different Kelvin Asset Type Metadata objects will be filtered as
            `AND`. For example; if Kelvin Asset Type Metadata name `metadata-
            test1` has a key/value pair `'key1': 'String1'` and Kelvin Asset Type
            Metadata name `metadata-test2` has a key/value pair`'key2': 25`, then
            a metadata_filter `[metadata-test1.key1=String1,metadata-
            test2.key2=88]` will <strong>NOT</strong> return results as one of the
            two key/value pairs from different Kelvin Asset Type Metadata objects
            does not match.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-type'
            target='_blank'>Kelvin Asset Type</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 Kelvin
            Asset Type objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Types</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Types</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Types</a> parameters. Only one parameter can be selected.</p> There
            are eight parameter options; `asset_type.name`, `asset_type.title`,
            `asset_type.created`, `asset_type.updated`, `asset_class.name`,
            `asset_class.title`, `asset_type.owner` and
            `asset_class.device_type_name`.</p> The default is `asset_type.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        owner : :obj:`str`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-type'
            target='_blank'>Kelvin Asset Type</a> by owner.</p> There are two
            types of owners; `custom` (any user) or `kelvin` (core kelvin asset
            type).</p> The default will select all owner options.
        entity_type_name : :obj:`Sequence[str]`
            Filter and return the results of one or more of the entity type names.
            This is given as an array, for example `[group,asset]`. Prefix any
            entity type name with the character `!` for a NOT operation.</p> There
            are five entity type names available to choose from; `group`, `asset`,
            `component`, `part`, `sensor`.</p> The default will select all
            available entity type name options.</p>

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/types/list",
            {},
            {
                "search": search,
                "asset_class_name": asset_class_name,
                "metadata": metadata,
                "metadata_filter": metadata_filter,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "owner": owner,
                "entity_type_name": entity_type_name,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetTypeListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/assets/types/list", "GET") if fetch and not _dry_run else result
        )

    @instance_classmethod
    @DataModelBase.translate({"asset_type_name": "name"})
    def delete_asset_type(
        self_or_cls, asset_type_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Asset Type

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. This cannot be undone once the API request has been submitted.

        This command can not delete <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Types</a> that are currently linked to any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and will return an error 403.

        **Permission Required:** `kelvin.permission.asset_type.delete`.

        ``deleteAssetType``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/delete``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to delete.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/delete",
            {"asset_type_name": asset_type_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_type_name": "name"})
    def get_asset_type(
        self_or_cls,
        asset_type_name: str,
        metadata: Optional[Sequence[str]] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> AssetType:
        """
        Get Asset Type

        Retrieves the properties of a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.

        **Permission Required:** `kelvin.permission.asset_type.read`.

        ``getAssetType``: ``GET`` ``/api/v4/assets/types/{asset_type_name}/get``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to retrieve.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        metadata : :obj:`Sequence[str]`
            Array of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets#asset-type-metadata'
            target='_blank'>Kelvin Asset Type Metadata</a> names. If the metadata
            name exists for the <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-type'
            target='_blank'>Kelvin Asset Type</a>, then the payload for the
            metadata name will be attached in the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> response object.</p> <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects are created using the API endpoint
            `/assets/types/{asset_type_name}/metadata/` and is linked to a <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>. The same name can be used for different <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> for easy filtering across multiple <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/types/{asset_type_name}/get",
            {"asset_type_name": asset_type_name},
            {"metadata": metadata},
            {},
            {},
            None,
            None,
            False,
            {"200": AssetType, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_type_name": "name"})
    def create_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        data: Optional[Union[requests.AssetTypeMetadataCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTypeMetadata:
        """
        Create Asset Type Metadata

        Creates a custom JSON payload that can be attached to a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>. You can create multiple different types of metadata payloads for each <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a>.

        When performing a `get` or `list` API request on <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a> or <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> then you can also add a metadata parameter. The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> payload will then be embedded in the response.

        For listing <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a> you can also perform filters on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> payload to only return <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a> with <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> payload parameters matching the filters.

        This <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> does not affect the operations of <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> on the Kelvin Platform. <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> is not available in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-manager-ui" target="_blank">Kelvin Manager UI</a>.

        **Permission Required:** `kelvin.permission.asset_type.create`.

        ``createAssetTypeMetadata``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/metadata/create``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            Unique identifier name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> to attach the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> to.</p> This must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space BUT can not be at the
            beginning or end of the name.
        data: requests.AssetTypeMetadataCreate, optional
        **kwargs:
            Extra parameters for requests.AssetTypeMetadataCreate
              - name: str
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/metadata/create",
            {"asset_type_name": asset_type_name},
            {},
            {},
            {},
            data,
            requests.AssetTypeMetadataCreate,
            False,
            {
                "201": AssetTypeMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_type_name": "name"})
    def list_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetTypeMetadata], AssetTypeMetadataListPaginated]:
        """
        List Asset Type Metadata

        Returns a filtered list of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> objects linked with a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.

        The path parameter is required but the query parameters are optional. If no query parameters are given with the API request, then the defaults will be used to return the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> list. The defaults are the first 20 <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> returned in alphabetical order by the unique identifier name.

        **Pagination Sortable Columns:** `asset_type_metadata.name`

        **Permission Required:** `kelvin.permission.asset_type.read`.

        ``listAssetTypeMetadata``: ``GET`` ``/api/v4/assets/types/{asset_type_name}/metadata/list``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name where the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> payloads are stored.</p> The search is done on
            the full name only according to unique identifier name rules (Must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space.).
            For example a search with the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name `big-pump` will return all <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> associated with the name `big-pump` but not
            with the names `pump` or `big-pump-machine`.
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects list. Only the Name will be included
            in the search field criteria. This is given as an array, for example
            `[pump,fan]`.</p> The search is case insensitive and will find partial
            matches as well. For example if a Kelvin Asset Type name is
            centrifugal_pump, then a match will be made if the search string is
            `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets#asset-type-metadata'
            target='_blank'>Kelvin Asset Type Metadata</a> objects to be returned.
            Page size can be between 1 and 1000 objects. The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects in the list.</p> The alphanumeric
            string which are the bookmarks for the beginning and end of the
            current list is given in the previous JSON response value under the
            key pagination -> previous_page and pagination -> next_page
            respectively.</p> The pagination -> next_page alphanumeric string
            should be used here to show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects in the list.</p> The alphanumeric
            string which are the bookmarks for the beginning and end of the
            current list is given in the previous JSON response value under the
            key pagination -> previous_page and pagination -> next_page
            respectively.</p> The pagination -> previous_page alphanumeric string
            should be used here to show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> parameters. Only one parameter can be
            selected.</p> There in only one parameter option;
            `asset_type_metadata.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order). The default is `true` (ascending).

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/types/{asset_type_name}/metadata/list",
            {"asset_type_name": asset_type_name},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetTypeMetadataListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/assets/types/{asset_type_name}/metadata/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"asset_type_name": "name"})
    def delete_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        asset_type_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> None:
        """
        Delete Asset Type Metadata

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object associated with a specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. This cannot be undone once the API request has been submitted.

        This will only delete the specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. If there is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object with the same name and payload BUT associated with a different <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>, this will not be deleted.

        **Permission Required:** `kelvin.permission.asset_type.delete`.

        ``deleteAssetTypeMetadata``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/delete``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to delete.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        asset_type_metadata_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> unique identifier name to delete.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/delete",
            {
                "asset_type_name": asset_type_name,
                "asset_type_metadata_name": asset_type_metadata_name,
            },
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_type_name": "name"})
    def get_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        asset_type_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> AssetTypeMetadata:
        """
        Get Asset Type Metadata

        Retrieves the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object associated with a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.

        This will only retrieve the specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. If there is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object with the same name and payload BUT associated with a different <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>, this will not be retrieved.

        **Permission Required:** `kelvin.permission.asset_type.read`.

        ``getAssetTypeMetadata``: ``GET`` ``/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/get``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to retrieve.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        asset_type_metadata_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> unique identifier name to retrieve.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/get",
            {
                "asset_type_name": asset_type_name,
                "asset_type_metadata_name": asset_type_metadata_name,
            },
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetTypeMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_type_name": "name"})
    def update_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        asset_type_metadata_name: str,
        data: Optional[Union[requests.AssetTypeMetadataUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTypeMetadata:
        """
        Update Asset Type Metadata

        Updates the payload of an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object associated with a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>.

        The payload will be completely replaced by the new payload. Any existing key/value pairs that you want to keep must be included in your new payload that is sent with the API request.

        This will only update the payload of the specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. If there is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object with the same name and payload BUT associated with a different <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>, this will not be updated.

        **Permission Required:** `kelvin.permission.asset_type.update`.

        ``updateAssetTypeMetadata``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/update``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            Unique identifier name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> to replace the specified metadata payload.</p> This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.
        asset_type_metadata_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> unique identifier name to retrieve.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        data: requests.AssetTypeMetadataUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetTypeMetadataUpdate
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/update",
            {
                "asset_type_name": asset_type_name,
                "asset_type_metadata_name": asset_type_metadata_name,
            },
            {},
            {},
            {},
            data,
            requests.AssetTypeMetadataUpdate,
            False,
            {
                "200": AssetTypeMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_type_name": "name"})
    def update_asset_type(
        self_or_cls,
        asset_type_name: str,
        data: Optional[Union[requests.AssetTypeUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetType:
        """
        Update Asset Type

        Updates an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> with any new values passed through the body parameters.</p> All body parameters are optional and if not provided will remain unchanged.</p> Only the unique identifier name can not be changed. If you need to change this parameter, then you will need to make a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> and relink all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> to the new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>.

        **Permission Required:** `kelvin.permission.asset_type.update`.

        ``updateAssetType``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/update``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to retrieve.</p> This is the unique identifier name and
            not the display name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        data: requests.AssetTypeUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetTypeUpdate
              - asset_class_name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/update",
            {"asset_type_name": asset_type_name},
            {},
            {},
            {},
            data,
            requests.AssetTypeUpdate,
            False,
            {
                "200": AssetType,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class AssetTypeListPaginated(PaginatorDataModel[AssetType]):
    """
    AssetTypeListPaginated object.

    Parameters
    ----------
    data: Optional[List[AssetType]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[AssetType]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Types</a>. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class AssetTypeMetadata(DataModelBase):
    """
    AssetTypeMetadata object.

    Parameters
    ----------
    asset_type_name: Optional[str]
    created: Optional[datetime]
    name: Optional[str]
    payload: Optional[Dict[str, Any]]
    updated: Optional[datetime]

    """

    asset_type_name: Optional[str] = Field(
        None,
        description="Unique identifier name of the <a href=\"https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type\" target=\"_blank\">Kelvin Asset Type</a> that is linked to this new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a>.",
        max_length=64,
    )
    created: Optional[datetime] = Field(
        None,
        description="Time of creation of this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )
    name: Optional[str] = Field(
        None,
        description="Unique identifier name of the newly created <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a>.",
        max_length=64,
    )
    payload: Optional[Dict[str, Any]] = Field(
        None, description="Custom JSON keys/values defined by you."
    )
    updated: Optional[datetime] = Field(
        None,
        description="Time of modifying any variable of this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )

    @instance_classmethod
    @DataModelBase.translate()
    def create_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        data: Optional[Union[requests.AssetTypeMetadataCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTypeMetadata:
        """
        Create Asset Type Metadata

        Creates a custom JSON payload that can be attached to a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>. You can create multiple different types of metadata payloads for each <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a>.

        When performing a `get` or `list` API request on <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a> or <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> then you can also add a metadata parameter. The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> payload will then be embedded in the response.

        For listing <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a> you can also perform filters on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> payload to only return <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a> with <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> payload parameters matching the filters.

        This <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> does not affect the operations of <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> on the Kelvin Platform. <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> is not available in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-manager-ui" target="_blank">Kelvin Manager UI</a>.

        **Permission Required:** `kelvin.permission.asset_type.create`.

        ``createAssetTypeMetadata``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/metadata/create``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            Unique identifier name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> to attach the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> to.</p> This must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space BUT can not be at the
            beginning or end of the name.
        data: requests.AssetTypeMetadataCreate, optional
        **kwargs:
            Extra parameters for requests.AssetTypeMetadataCreate
              - name: str
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/metadata/create",
            {"asset_type_name": asset_type_name},
            {},
            {},
            {},
            data,
            requests.AssetTypeMetadataCreate,
            False,
            {
                "201": AssetTypeMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_asset_type_metadata(
        cls,
        asset_type_name: str,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetTypeMetadata], AssetTypeMetadataListPaginated]:
        """
        List Asset Type Metadata

        Returns a filtered list of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> objects linked with a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.

        The path parameter is required but the query parameters are optional. If no query parameters are given with the API request, then the defaults will be used to return the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> list. The defaults are the first 20 <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> returned in alphabetical order by the unique identifier name.

        **Pagination Sortable Columns:** `asset_type_metadata.name`

        **Permission Required:** `kelvin.permission.asset_type.read`.

        ``listAssetTypeMetadata``: ``GET`` ``/api/v4/assets/types/{asset_type_name}/metadata/list``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name where the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> payloads are stored.</p> The search is done on
            the full name only according to unique identifier name rules (Must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space.).
            For example a search with the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name `big-pump` will return all <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> associated with the name `big-pump` but not
            with the names `pump` or `big-pump-machine`.
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects list. Only the Name will be included
            in the search field criteria. This is given as an array, for example
            `[pump,fan]`.</p> The search is case insensitive and will find partial
            matches as well. For example if a Kelvin Asset Type name is
            centrifugal_pump, then a match will be made if the search string is
            `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets#asset-type-metadata'
            target='_blank'>Kelvin Asset Type Metadata</a> objects to be returned.
            Page size can be between 1 and 1000 objects. The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects in the list.</p> The alphanumeric
            string which are the bookmarks for the beginning and end of the
            current list is given in the previous JSON response value under the
            key pagination -> previous_page and pagination -> next_page
            respectively.</p> The pagination -> next_page alphanumeric string
            should be used here to show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects in the list.</p> The alphanumeric
            string which are the bookmarks for the beginning and end of the
            current list is given in the previous JSON response value under the
            key pagination -> previous_page and pagination -> next_page
            respectively.</p> The pagination -> previous_page alphanumeric string
            should be used here to show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> parameters. Only one parameter can be
            selected.</p> There in only one parameter option;
            `asset_type_metadata.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order). The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/types/{asset_type_name}/metadata/list",
            {"asset_type_name": asset_type_name},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetTypeMetadataListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/assets/types/{asset_type_name}/metadata/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"asset_type_metadata_name": "name"})
    def delete_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        asset_type_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> None:
        """
        Delete Asset Type Metadata

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object associated with a specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. This cannot be undone once the API request has been submitted.

        This will only delete the specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. If there is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object with the same name and payload BUT associated with a different <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>, this will not be deleted.

        **Permission Required:** `kelvin.permission.asset_type.delete`.

        ``deleteAssetTypeMetadata``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/delete``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to delete.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        asset_type_metadata_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> unique identifier name to delete.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/delete",
            {
                "asset_type_name": asset_type_name,
                "asset_type_metadata_name": asset_type_metadata_name,
            },
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_type_metadata_name": "name"})
    def get_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        asset_type_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> AssetTypeMetadata:
        """
        Get Asset Type Metadata

        Retrieves the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object associated with a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.

        This will only retrieve the specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. If there is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object with the same name and payload BUT associated with a different <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>, this will not be retrieved.

        **Permission Required:** `kelvin.permission.asset_type.read`.

        ``getAssetTypeMetadata``: ``GET`` ``/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/get``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to retrieve.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        asset_type_metadata_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> unique identifier name to retrieve.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/get",
            {
                "asset_type_name": asset_type_name,
                "asset_type_metadata_name": asset_type_metadata_name,
            },
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetTypeMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_type_metadata_name": "name"})
    def update_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        asset_type_metadata_name: str,
        data: Optional[Union[requests.AssetTypeMetadataUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTypeMetadata:
        """
        Update Asset Type Metadata

        Updates the payload of an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object associated with a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>.

        The payload will be completely replaced by the new payload. Any existing key/value pairs that you want to keep must be included in your new payload that is sent with the API request.

        This will only update the payload of the specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. If there is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object with the same name and payload BUT associated with a different <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>, this will not be updated.

        **Permission Required:** `kelvin.permission.asset_type.update`.

        ``updateAssetTypeMetadata``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/update``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            Unique identifier name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> to replace the specified metadata payload.</p> This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.
        asset_type_metadata_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> unique identifier name to retrieve.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        data: requests.AssetTypeMetadataUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetTypeMetadataUpdate
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/update",
            {
                "asset_type_name": asset_type_name,
                "asset_type_metadata_name": asset_type_metadata_name,
            },
            {},
            {},
            {},
            data,
            requests.AssetTypeMetadataUpdate,
            False,
            {
                "200": AssetTypeMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class AssetTypeMetadataListPaginated(PaginatorDataModel[AssetTypeMetadata]):
    """
    AssetTypeMetadataListPaginated object.

    Parameters
    ----------
    data: Optional[List[AssetTypeMetadata]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[AssetTypeMetadata]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> objects. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class AssetWorkloadItem(DataModelBase):
    """
    AssetWorkloadItem object.

    Parameters
    ----------
    app_description: Optional[str]
    app_name: Optional[str]
    app_title: Optional[str]
    app_version: Optional[str]
    asset_name: Optional[str]
    workload_name: Optional[str]

    """

    app_description: Optional[str] = None
    app_name: Optional[str] = None
    app_title: Optional[str] = None
    app_version: Optional[str] = None
    asset_name: Optional[str] = None
    workload_name: Optional[str] = None

    @classmethod
    def list_workloads(
        cls,
        pagination_type: Optional[Literal["limits", "cursor", "stream"]] = None,
        page_size: Optional[int] = 1000,
        page: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        direction: Optional[Literal["asc", "desc"]] = None,
        sort_by: Optional[str] = None,
        data: Optional[Union[requests.AssetWorkloadsList, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[AssetWorkloadItem], AssetWorkloadListPaginated]:
        """
        List Workloads

        **Pagination Sortable Columns:** `asset_name`, `workload_name`, `app_name`, `app_version`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``listWorkloads``: ``POST`` ``/api/v4/assets/workloads/list``

        Parameters
        ----------
        pagination_type : :obj:`Literal['limits', 'cursor', 'stream']`
            Desired pagination type (limits, cursor, stream)
        page_size : :obj:`int`
            Desired page size
        page : :obj:`int`
            Desired page. Only valid for type=limits pagination
        next : :obj:`str`
            Retrieve next page. Only valid for type=cursor pagination
        previous : :obj:`str`
            Retrieve previous page. Only valid for type=cursor pagination
        direction : :obj:`Literal['asc', 'desc']`
            Direction in which to sort the data (asc, desc)
        sort_by : :obj:`str`
            Columns by which to sort the data
        data: requests.AssetWorkloadsList, optional
        **kwargs:
            Extra parameters for requests.AssetWorkloadsList
              - asset_names: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/workloads/list",
            {},
            {
                "pagination_type": pagination_type,
                "page_size": page_size,
                "page": page,
                "next": next,
                "previous": previous,
                "direction": direction,
                "sort_by": sort_by,
            },
            {},
            {},
            data,
            requests.AssetWorkloadsList,
            False,
            {"200": AssetWorkloadListPaginated, "400": errors.ErrorMessage},
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/assets/workloads/list", "POST")
            if fetch and not _dry_run
            else result
        )


class AssetWorkloadListPaginated(PaginatorDataModel[AssetWorkloadItem]):
    """
    AssetWorkloadListPaginated object.

    Parameters
    ----------
    data: Optional[List[AssetWorkloadItem]]
    pagination: Optional[paginator.PaginationInfo]

    """

    data: Optional[List[AssetWorkloadItem]] = None
    pagination: Optional[paginator.PaginationInfo] = None


class Attachment(DataModelBase):
    """
    Attachment object.

    Parameters
    ----------
    extension: Optional[str]
    filename: Optional[str]
    size: Optional[int]
    url: Optional[str]

    """

    extension: Optional[str] = None
    filename: Optional[str] = None
    size: Optional[int] = None
    url: Optional[str] = None


class AuditLogger(DataModelBase):
    """
    AuditLogger object.

    Parameters
    ----------
    action: Optional[str]
    created: Optional[datetime]
    id: Optional[int]
    identifier: Optional[str]
    meta: Optional[Dict[str, Any]]
    namespace: Optional[str]
    request_id: Optional[str]
    user_id: Optional[str]
    username: Optional[str]

    """

    action: Optional[str] = None
    created: Optional[datetime] = None
    id: Optional[int] = None
    identifier: Optional[str] = None
    meta: Optional[Dict[str, Any]] = None
    namespace: Optional[str] = None
    request_id: Optional[str] = None
    user_id: Optional[str] = None
    username: Optional[str] = None

    @classmethod
    def list_audit_log(
        cls,
        action: Optional[Sequence[str]] = None,
        user_id: Optional[Sequence[str]] = None,
        namespace: Optional[Sequence[str]] = None,
        identifier: Optional[Sequence[str]] = None,
        username: Optional[Sequence[str]] = None,
        request_id: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        from_date_time: Optional[datetime] = None,
        to_date_time: Optional[datetime] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AuditLogger], AuditLoggerListPaginated]:
        """
        List Audit Log

        **Pagination Sortable Columns:** `audit_log.id`, `audit_log.action`, `audit_log.username`, `audit_log.created`, `request_uri`

        **Note:** Both `from_date_time` and `to_date_time` support RFC3339 format with microseconds

        **Permission Required:** `kelvin.permission.audit_log.read`.

        ``listAuditLog``: ``GET`` ``/api/v4/instance/auditlog/list``

        Parameters
        ----------
        action : :obj:`Sequence[str]`
            Filter by action
        user_id : :obj:`Sequence[str]`
            Filter by user_id
        namespace : :obj:`Sequence[str]`
            Filter by namespace
        identifier : :obj:`Sequence[str]`
            Filter by identifier
        username : :obj:`Sequence[str]`
            Filter by username
        request_id : :obj:`Sequence[str]`
            Filter by request_id
        search : :obj:`Sequence[str]`
            Search Audit Log by action, username or namespace
        from_date_time : :obj:`datetime`
            Filter actions occurred at or after this date-time
        to_date_time : :obj:`datetime`
            Filter actions occurred until or at this date-time
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            false

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/instance/auditlog/list",
            {},
            {
                "action": action,
                "user_id": user_id,
                "namespace": namespace,
                "identifier": identifier,
                "username": username,
                "request_id": request_id,
                "search": search,
                "from_date_time": from_date_time,
                "to_date_time": to_date_time,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AuditLoggerListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/instance/auditlog/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"audit_logger_id": "id"})
    def get_audit_log(
        self_or_cls, audit_logger_id: str, _dry_run: bool = False, _client: Any = None
    ) -> AuditLogger:
        """
        Get Audit Log

        **Permission Required:** `kelvin.permission.audit_log.read`.

        ``getAuditLog``: ``GET`` ``/api/v4/instance/auditlog/{audit_logger_id}/get``

        Parameters
        ----------
        audit_logger_id : :obj:`str`, optional
            Audit Logger ID

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/instance/auditlog/{audit_logger_id}/get",
            {"audit_logger_id": audit_logger_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": AuditLogger, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class AuditLoggerListPaginated(PaginatorDataModel[AuditLogger]):
    """
    AuditLoggerListPaginated object.

    Parameters
    ----------
    data: Optional[List[AuditLogger]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[AuditLogger]] = None
    pagination: Optional[pagination.Pagination] = None


class Bridge(DataModelBase):
    """
    Bridge object.

    Parameters
    ----------
    acp_name: Optional[str]
    created: Optional[datetime]
    name: Optional[str]
    payload: Optional[Dict[str, Any]]
    protocol: Optional[str]
    title: Optional[str]
    updated: Optional[datetime]
    workload_name: Optional[str]

    """

    acp_name: Optional[str] = Field(
        None,
        description="Unique identifier name of the acp_name ( This is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a> ) linked to this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.",
    )
    created: Optional[datetime] = Field(
        None,
        description="Time of creation of this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )
    name: Optional[str] = Field(
        None,
        description="Unique identifier name for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This contains only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    payload: Optional[Dict[str, Any]] = Field(
        None,
        description="Contains the configuration dictionary, metrics_map dictionary and logging_level parameter of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> The configuration dictionary contains all the information required to connect to the assets. The information supplied will depend on which type of protocol the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> uses. There are four protocols; `modbus`, `opc-ua`, `mqtt`, `roc`.</p> The metrics_map dictionary contains a list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs on this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> and their configuration details.",
    )
    protocol: Optional[str] = Field(
        None,
        description="Type of protocol used by the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> there are 4 types of protocol type options; `opc-ua`, `mqtt`, `modbus`, `roc`.",
    )
    title: Optional[str] = Field(
        None,
        description="Display name (title) for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> . This is the friendly name displayed.</p> It can use any character, numeric, space and special character in this parameter.",
    )
    updated: Optional[datetime] = Field(
        None,
        description="Time of modifying any variable of this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )
    workload_name: Optional[str] = Field(
        None,
        description="Unique identifier name of the workload_name ( This is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-apps/' target='_blank'>Kelvin App</a>, which is in this case is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> ) linked to this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.",
    )

    @instance_classmethod
    @DataModelBase.translate()
    def deploy_bridge(
        self_or_cls,
        data: Optional[Union[requests.BridgeDeploy, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Bridge:
        """
        Deploy Bridge App

        Deploy a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> to a selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a>.

        The Kelvin Bridge will handle all the communications and data transfer between external equipment and the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> using one of four communication protocols; OPC UA, MQTT, Modbus TCP / RTU or Emerson ROC.

        Each protocol will require a different type of payload structure that defines the exact address specifications for each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> // <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs.

        **Permission Required:** `kelvin.permission.bridge.create`.

        ``deployBridge``: ``POST`` ``/api/v4/bridges/deploy``

        Parameters
        ----------
        data: requests.BridgeDeploy, optional
        **kwargs:
            Extra parameters for requests.BridgeDeploy
              - acp_name: str
              - name: str
              - payload: dict
              - protocol: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/bridges/deploy",
            {},
            {},
            {},
            {},
            data,
            requests.BridgeDeploy,
            False,
            {"201": Bridge, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_bridge(
        cls,
        names: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        acp_name: Optional[Sequence[str]] = None,
        protocol: Optional[Sequence[str]] = None,
        workload_name: Optional[Sequence[str]] = None,
        status_state: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[BridgeItem], BridgeListPaginated]:
        """
        List Bridge

        Returns a dictionary with a data property containing a list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridges</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Pagination Sortable Columns:** `bridge.name`, `bridge.title`, `bridge.protocol`, `bridge.acp_name`, `bridge.workload_name`, `bridge.created`, `bridge.updated`, `status_state`, `status_last_seen`

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``listBridge``: ``GET`` ``/api/v4/bridges/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> by its
            name. This is given as an array, for example `[extruder-bridge,tank-
            bridge]`.</p> The filter is done on the full name only according to
            unique identifier name rules (Must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space but not at the beginning or
            end).</p> For example a filter with `[extruder-bridge,tank-bridge]`
            will return <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin
            Bridge</a> with the name `extruder-bridge` but not with the names
            `demo-extruder-bridge` or `tank-bridge-one`.
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> list. Both
            the Display Name and the Name will be included in the search field
            criteria. This is given as an array, for example `[demo,bridge]`.</p>
            The search is case insensitive and will find partial matches as well.
            For example if a <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin
            Bridge</a> name or display name is `extruder-bridge`, then a match
            will be made if the search string is `ext` or `rIDge`.
        acp_name : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>'s acp_name
            (This is a <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin
            Node</a>). This is given as an array, for example `[demo-
            node-1,extruder-node]`.</p> The filter is done on the full name only
            according to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end).</p> For example a filter with `[demo-node-1,extruder-node]`
            will return <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin
            Bridge</a> with the parameter acp_name `extruder-node` but not with
            the names `demo-extruder-node` or `extruder-node-one`.
        protocol : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>
            `protocol`. This is the communication protocol used by the bridge.
            This is given as an array, for example `[modbus,mqtt]`.</p> There are
            four options available; `modbus`, `opc-ua`, `mqtt`, `roc`.
        workload_name : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>
            `workload_name`. This is given as an array, for example
            `[extruder,tank]`.</p> The filter is done on the full workload_name
            only according to unique identifier name rules (Must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space but not at the
            beginning or end).</p> For example a filter with `[extruder,tank]`
            will return <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin
            Bridge</a> with the parameter workload_name `extruder` but not with
            the workload_name `demo-extruder-bridge` or `bridge-tank`.
        status_state : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>
            `status_state`. This is the communication protocol used by the bridge.
            This is given as an array, for example `[failed,stopped]`.</p> There
            are five options available; `running`, `stopped`, `failed`,
            `deploying`, `offline`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin
            Bridge</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>
            parameters. Only one parameter can be selected.</p> There are ten
            parameter options; `bridge.name`, `bridge.title`, `bridge.protocol`,
            `bridge.acp_name`, `bridge.workload_name`, `bridge.created`,
            `bridge.updated`, `status_state` and `status_last_seen`.</p> The
            default is `bridge.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/list",
            {},
            {
                "names": names,
                "search": search,
                "acp_name": acp_name,
                "protocol": protocol,
                "workload_name": workload_name,
                "status_state": status_state,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": BridgeListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/bridges/list", "GET") if fetch and not _dry_run else result

    @classmethod
    def list_mqtt_topics(
        cls,
        names: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> MQTTTopicList:
        """
        List MQTT Topics

        Returns a dictionary with a data property containing a list of the MQTT topic payload options available on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        The MQTT topic payload definitions defines how <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridges</a> which are using the `mqtt` protocol will interpret incoming messages on a topic.

        **Sortable Columns:** `bridge_mqtt_topic.name`, `bridge_mqtt_topic.title`,
        `bridge_mqtt_topic.topic`, `bridge_mqtt_topic.created`, `bridge_mqtt_topic.updated`

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``listMQTTTopics``: ``GET`` ``/api/v4/bridges/protocols/mqtt/configuration/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter on the MQTT Topics by its name.</p> The filter is done on the
            full name only according to unique identifier name rules (Must contain
            only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space but
            not at the beginning or end).</p> For example a filter with `topic-
            one` will return MQTT topics with the name `topic-one` but not with
            the names `topic-one-extended` or `topic`.
        search : :obj:`Sequence[str]`
            Search and filter the MQTT Topic list. The Display Name, the Name and
            the Topic will be included in the search field criteria. This is given
            as an array, for example `[one,two]`.</p> The search is case
            insensitive and will find partial matches as well. For example if a
            MQTT TOpic name, display name or topic is `topic-one`, then a match
            will be made if the search string is `one` or `oPic`.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> parameters.
            Only one parameter can be selected.</p> There are five parameter
            options; `bridge_mqtt_topic.name`, `bridge_mqtt_topic.title`,
            `bridge_mqtt_topic.topic`, `bridge_mqtt_topic.created`,
            `bridge_mqtt_topic.updated`.</p> The default is
            `bridge_mqtt_topic.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/protocols/mqtt/configuration/list",
            {},
            {"names": names, "search": search, "sort_by": sort_by, "sort_asc": sort_asc},
            {},
            {},
            None,
            None,
            False,
            {"200": MQTTTopicList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"bridge_name": "name"})
    def list_bridge_assets(
        self_or_cls,
        bridge_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetItem], AssetListPaginated]:
        """
        List Bridge Assets

        Returns a dictionary with a data property containing a list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.

        **Pagination Sortable Columns:** `asset.name`, `asset.title`, `asset.created`, `asset.updated`, `asset_type.title`

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``listBridgeAssets``: ``GET`` ``/api/v4/bridges/{bridge_name}/assets/list``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> by its
            name.</p> The filter is done on the full name only according to unique
            identifier name rules (Must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space but not at the beginning or
            end).</p> For example a filter with `demo-bridge-one` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> linked to
            the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> with the
            name `demo-bridge-one` but not with the names `demo-bridge` or
            `bridge-one`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> parameters.
            Only one parameter can be selected.</p> There are ten parameter
            options; `asset.name`, `asset.title`, `asset.created`, `asset.updated`
            and `asset_type.title`.</p> The default is `asset.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/assets/list",
            {"bridge_name": bridge_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/bridges/{bridge_name}/assets/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"bridge_name": "name"})
    def list_bridge_data_streams(
        self_or_cls,
        bridge_name: str,
        asset_name: Optional[Sequence[str]] = None,
        metric_name: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[BridgeDataStreamItem], BridgeDataStreamListPaginated]:
        """
        List Bridge Data Streams

        Returns a list of all the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> // <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs that have been deployed with the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>. The specific connection details for each Kelvin Asset / Kelvin Metric pair are also returned in a payload. The payload structure will depend on the type of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>. There are four types; OPC UA, MQTT, Modbus and ROC.

        You can apply a number of filters to the return list.

        **Pagination Sortable Columns:** `bridge_metric_asset.asset_name`, `bridge_metric_asset.metric_name`

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``listBridgeDataStreams``: ``GET`` ``/api/v4/bridges/{bridge_name}/datastreams/list``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> name to
            retrieve the data stream objects.</p> This is the unique identifier
            name and not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        asset_name : :obj:`Sequence[str]`
            Filter the data stream objects of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridges</a> which
            contain specific <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> names.
        metric_name : :obj:`Sequence[str]`
            Filter the data stream objects of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridges</a> which
            contain specific <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin
            Metric</a> names.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin
            Bridge</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response parameter under pagination -> previous_page and pagination ->
            next_page respectively.</p> The pagination -> next_page alphanumeric
            string should be used here to show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response parameter under pagination -> previous_page and pagination ->
            next_page respectively.</p> The pagination -> previous_page
            alphanumeric string should be used here to show a list of the previous
            page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>
            parameters. Only one parameter can be selected.</p> There are two
            parameter options; `bridge_metric_asset.asset_name`,
            `bridge_metric_asset.metric_name`.</p> The default is
            `bridge_metric_asset.asset_name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/datastreams/list",
            {"bridge_name": bridge_name},
            {
                "asset_name": asset_name,
                "metric_name": metric_name,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": BridgeDataStreamListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/bridges/{bridge_name}/datastreams/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"bridge_name": "name"})
    def delete_bridge(
        self_or_cls, bridge_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Bridge application

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>. This cannot be undone once the API request has been submitted.

        <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridges</a> can be deleted even if the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a> is offline. In this case, the information will be immediately deleted on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> and the commands to delete on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a> will be sent when it next comes online.

        **Permission Required:** `kelvin.permission.bridge.delete`.

        ``deleteBridge``: ``POST`` ``/api/v4/bridges/{bridge_name}/delete``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/bridges/{bridge_name}/delete",
            {"bridge_name": bridge_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"bridge_name": "name"})
    def get_bridge(
        self_or_cls, bridge_name: str, _dry_run: bool = False, _client: Any = None
    ) -> Bridge:
        """
        Get Bridge

        Retrieve the properties of a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``getBridge``: ``GET`` ``/api/v4/bridges/{bridge_name}/get``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/get",
            {"bridge_name": bridge_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": Bridge, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"bridge_name": "name"})
    def list_bridge_metrics(
        self_or_cls,
        bridge_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[Metric], MetricListPaginated]:
        """
        List Bridge Metrics

        Returns a dictionary with a data property containing a list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.

        **Pagination Sortable Columns:** `metric.name`, `metric.title`, `metric.created`, `metric.updated`, `metric.data_type_name`

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``listBridgeMetrics``: ``GET`` ``/api/v4/bridges/{bridge_name}/metrics/list``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin
            Metric</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>
            parameters. Only one parameter can be selected.</p> There are ten
            parameter options; `metric.name`, `metric.title`, `metric.created`,
            `metric.updated` and `metric.data_type_name`.</p> The default is
            `metric.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/metrics/list",
            {"bridge_name": bridge_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": MetricListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/bridges/{bridge_name}/metrics/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"bridge_name": "name"})
    def start_bridge(
        self_or_cls, bridge_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Start Bridge application

        Start a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.

        The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> must already be deployed to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a>.

        **Permission Required:** `kelvin.permission.bridge.update`.

        ``startBridge``: ``GET`` ``/api/v4/bridges/{bridge_name}/start``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/start",
            {"bridge_name": bridge_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"bridge_name": "name"})
    def stop_bridge(
        self_or_cls, bridge_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Stop Bridge application

        Stop a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.

        The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> must already be deployed to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a>.

        **Permission Required:** `kelvin.permission.bridge.update`.

        ``stopBridge``: ``GET`` ``/api/v4/bridges/{bridge_name}/stop``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/stop",
            {"bridge_name": bridge_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class BridgeDataStreamItem(DataModelBase):
    """
    BridgeDataStreamItem object.

    Parameters
    ----------
    asset_name: Optional[str]
    metric_name: Optional[str]
    payload: Optional[Dict[str, Any]]

    """

    asset_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    metric_name: Optional[str] = Field(
        None,
        description="Unique identifier name for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>.",
    )
    payload: Optional[Dict[str, Any]] = Field(
        None,
        description="The payload will depend on what type of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> is being used. There are four types of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridges</a>; OPC UA, MQTT, Modbus and ROC.",
    )

    @classmethod
    def list_bridge_data_streams(
        cls,
        bridge_name: str,
        asset_name: Optional[Sequence[str]] = None,
        metric_name: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[BridgeDataStreamItem], BridgeDataStreamListPaginated]:
        """
        List Bridge Data Streams

        Returns a list of all the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> // <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs that have been deployed with the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>. The specific connection details for each Kelvin Asset / Kelvin Metric pair are also returned in a payload. The payload structure will depend on the type of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>. There are four types; OPC UA, MQTT, Modbus and ROC.

        You can apply a number of filters to the return list.

        **Pagination Sortable Columns:** `bridge_metric_asset.asset_name`, `bridge_metric_asset.metric_name`

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``listBridgeDataStreams``: ``GET`` ``/api/v4/bridges/{bridge_name}/datastreams/list``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> name to
            retrieve the data stream objects.</p> This is the unique identifier
            name and not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        asset_name : :obj:`Sequence[str]`
            Filter the data stream objects of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridges</a> which
            contain specific <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> names.
        metric_name : :obj:`Sequence[str]`
            Filter the data stream objects of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridges</a> which
            contain specific <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin
            Metric</a> names.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin
            Bridge</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response parameter under pagination -> previous_page and pagination ->
            next_page respectively.</p> The pagination -> next_page alphanumeric
            string should be used here to show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response parameter under pagination -> previous_page and pagination ->
            next_page respectively.</p> The pagination -> previous_page
            alphanumeric string should be used here to show a list of the previous
            page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>
            parameters. Only one parameter can be selected.</p> There are two
            parameter options; `bridge_metric_asset.asset_name`,
            `bridge_metric_asset.metric_name`.</p> The default is
            `bridge_metric_asset.asset_name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/datastreams/list",
            {"bridge_name": bridge_name},
            {
                "asset_name": asset_name,
                "metric_name": metric_name,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": BridgeDataStreamListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/bridges/{bridge_name}/datastreams/list", "GET")
            if fetch and not _dry_run
            else result
        )


class BridgeDataStreamListPaginated(PaginatorDataModel[BridgeDataStreamItem]):
    """
    BridgeDataStreamListPaginated object.

    Parameters
    ----------
    data: Optional[List[BridgeDataStreamItem]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[BridgeDataStreamItem]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> data streams. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class BridgeItem(DataModelBase):
    """
    BridgeItem object.

    Parameters
    ----------
    acp_name: Optional[str]
    created: Optional[datetime]
    name: Optional[str]
    protocol: Optional[str]
    title: Optional[str]
    updated: Optional[datetime]
    workload_name: Optional[str]

    """

    acp_name: Optional[str] = Field(
        None,
        description="Unique identifier name of the acp_name ( This is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a> ) linked to this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.",
    )
    created: Optional[datetime] = Field(
        None,
        description="Time of creation of this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )
    name: Optional[str] = Field(
        None,
        description="Unique identifier name for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This contains only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    protocol: Optional[str] = Field(
        None,
        description="Type of protocol used by the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> there are 4 types of protocol type options; `modbus`, `opc-ua`, `mqtt`, `roc`.",
    )
    title: Optional[str] = Field(
        None,
        description="Display name (title) for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> . This is the friendly name displayed.</p> It can use any character, numeric, space and special character in this parameter.",
    )
    updated: Optional[datetime] = Field(
        None,
        description="Time of modifying any variable of this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )
    workload_name: Optional[str] = Field(
        None,
        description="Unique identifier name of the workload_name ( This is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-apps/' target='_blank'>Kelvin App</a>, which is in this case is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> ) linked to this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.",
    )

    @instance_classmethod
    @DataModelBase.translate()
    def deploy_bridge(
        self_or_cls,
        data: Optional[Union[requests.BridgeDeploy, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Bridge:
        """
        Deploy Bridge App

        Deploy a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> to a selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a>.

        The Kelvin Bridge will handle all the communications and data transfer between external equipment and the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> using one of four communication protocols; OPC UA, MQTT, Modbus TCP / RTU or Emerson ROC.

        Each protocol will require a different type of payload structure that defines the exact address specifications for each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> // <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs.

        **Permission Required:** `kelvin.permission.bridge.create`.

        ``deployBridge``: ``POST`` ``/api/v4/bridges/deploy``

        Parameters
        ----------
        data: requests.BridgeDeploy, optional
        **kwargs:
            Extra parameters for requests.BridgeDeploy
              - acp_name: str
              - name: str
              - payload: dict
              - protocol: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/bridges/deploy",
            {},
            {},
            {},
            {},
            data,
            requests.BridgeDeploy,
            False,
            {"201": Bridge, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_bridge(
        cls,
        names: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        acp_name: Optional[Sequence[str]] = None,
        protocol: Optional[Sequence[str]] = None,
        workload_name: Optional[Sequence[str]] = None,
        status_state: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[BridgeItem], BridgeListPaginated]:
        """
        List Bridge

        Returns a dictionary with a data property containing a list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridges</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Pagination Sortable Columns:** `bridge.name`, `bridge.title`, `bridge.protocol`, `bridge.acp_name`, `bridge.workload_name`, `bridge.created`, `bridge.updated`, `status_state`, `status_last_seen`

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``listBridge``: ``GET`` ``/api/v4/bridges/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> by its
            name. This is given as an array, for example `[extruder-bridge,tank-
            bridge]`.</p> The filter is done on the full name only according to
            unique identifier name rules (Must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space but not at the beginning or
            end).</p> For example a filter with `[extruder-bridge,tank-bridge]`
            will return <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin
            Bridge</a> with the name `extruder-bridge` but not with the names
            `demo-extruder-bridge` or `tank-bridge-one`.
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> list. Both
            the Display Name and the Name will be included in the search field
            criteria. This is given as an array, for example `[demo,bridge]`.</p>
            The search is case insensitive and will find partial matches as well.
            For example if a <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin
            Bridge</a> name or display name is `extruder-bridge`, then a match
            will be made if the search string is `ext` or `rIDge`.
        acp_name : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>'s acp_name
            (This is a <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin
            Node</a>). This is given as an array, for example `[demo-
            node-1,extruder-node]`.</p> The filter is done on the full name only
            according to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end).</p> For example a filter with `[demo-node-1,extruder-node]`
            will return <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin
            Bridge</a> with the parameter acp_name `extruder-node` but not with
            the names `demo-extruder-node` or `extruder-node-one`.
        protocol : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>
            `protocol`. This is the communication protocol used by the bridge.
            This is given as an array, for example `[modbus,mqtt]`.</p> There are
            four options available; `modbus`, `opc-ua`, `mqtt`, `roc`.
        workload_name : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>
            `workload_name`. This is given as an array, for example
            `[extruder,tank]`.</p> The filter is done on the full workload_name
            only according to unique identifier name rules (Must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space but not at the
            beginning or end).</p> For example a filter with `[extruder,tank]`
            will return <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin
            Bridge</a> with the parameter workload_name `extruder` but not with
            the workload_name `demo-extruder-bridge` or `bridge-tank`.
        status_state : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>
            `status_state`. This is the communication protocol used by the bridge.
            This is given as an array, for example `[failed,stopped]`.</p> There
            are five options available; `running`, `stopped`, `failed`,
            `deploying`, `offline`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin
            Bridge</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>
            parameters. Only one parameter can be selected.</p> There are ten
            parameter options; `bridge.name`, `bridge.title`, `bridge.protocol`,
            `bridge.acp_name`, `bridge.workload_name`, `bridge.created`,
            `bridge.updated`, `status_state` and `status_last_seen`.</p> The
            default is `bridge.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/list",
            {},
            {
                "names": names,
                "search": search,
                "acp_name": acp_name,
                "protocol": protocol,
                "workload_name": workload_name,
                "status_state": status_state,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": BridgeListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/bridges/list", "GET") if fetch and not _dry_run else result

    @classmethod
    def list_mqtt_topics(
        cls,
        names: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> MQTTTopicList:
        """
        List MQTT Topics

        Returns a dictionary with a data property containing a list of the MQTT topic payload options available on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        The MQTT topic payload definitions defines how <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridges</a> which are using the `mqtt` protocol will interpret incoming messages on a topic.

        **Sortable Columns:** `bridge_mqtt_topic.name`, `bridge_mqtt_topic.title`,
        `bridge_mqtt_topic.topic`, `bridge_mqtt_topic.created`, `bridge_mqtt_topic.updated`

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``listMQTTTopics``: ``GET`` ``/api/v4/bridges/protocols/mqtt/configuration/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter on the MQTT Topics by its name.</p> The filter is done on the
            full name only according to unique identifier name rules (Must contain
            only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space but
            not at the beginning or end).</p> For example a filter with `topic-
            one` will return MQTT topics with the name `topic-one` but not with
            the names `topic-one-extended` or `topic`.
        search : :obj:`Sequence[str]`
            Search and filter the MQTT Topic list. The Display Name, the Name and
            the Topic will be included in the search field criteria. This is given
            as an array, for example `[one,two]`.</p> The search is case
            insensitive and will find partial matches as well. For example if a
            MQTT TOpic name, display name or topic is `topic-one`, then a match
            will be made if the search string is `one` or `oPic`.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> parameters.
            Only one parameter can be selected.</p> There are five parameter
            options; `bridge_mqtt_topic.name`, `bridge_mqtt_topic.title`,
            `bridge_mqtt_topic.topic`, `bridge_mqtt_topic.created`,
            `bridge_mqtt_topic.updated`.</p> The default is
            `bridge_mqtt_topic.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/protocols/mqtt/configuration/list",
            {},
            {"names": names, "search": search, "sort_by": sort_by, "sort_asc": sort_asc},
            {},
            {},
            None,
            None,
            False,
            {"200": MQTTTopicList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"bridge_name": "name"})
    def list_bridge_assets(
        self_or_cls,
        bridge_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetItem], AssetListPaginated]:
        """
        List Bridge Assets

        Returns a dictionary with a data property containing a list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.

        **Pagination Sortable Columns:** `asset.name`, `asset.title`, `asset.created`, `asset.updated`, `asset_type.title`

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``listBridgeAssets``: ``GET`` ``/api/v4/bridges/{bridge_name}/assets/list``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> by its
            name.</p> The filter is done on the full name only according to unique
            identifier name rules (Must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space but not at the beginning or
            end).</p> For example a filter with `demo-bridge-one` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> linked to
            the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> with the
            name `demo-bridge-one` but not with the names `demo-bridge` or
            `bridge-one`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> parameters.
            Only one parameter can be selected.</p> There are ten parameter
            options; `asset.name`, `asset.title`, `asset.created`, `asset.updated`
            and `asset_type.title`.</p> The default is `asset.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/assets/list",
            {"bridge_name": bridge_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/bridges/{bridge_name}/assets/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"bridge_name": "name"})
    def list_bridge_data_streams(
        self_or_cls,
        bridge_name: str,
        asset_name: Optional[Sequence[str]] = None,
        metric_name: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[BridgeDataStreamItem], BridgeDataStreamListPaginated]:
        """
        List Bridge Data Streams

        Returns a list of all the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> // <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs that have been deployed with the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>. The specific connection details for each Kelvin Asset / Kelvin Metric pair are also returned in a payload. The payload structure will depend on the type of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>. There are four types; OPC UA, MQTT, Modbus and ROC.

        You can apply a number of filters to the return list.

        **Pagination Sortable Columns:** `bridge_metric_asset.asset_name`, `bridge_metric_asset.metric_name`

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``listBridgeDataStreams``: ``GET`` ``/api/v4/bridges/{bridge_name}/datastreams/list``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> name to
            retrieve the data stream objects.</p> This is the unique identifier
            name and not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        asset_name : :obj:`Sequence[str]`
            Filter the data stream objects of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridges</a> which
            contain specific <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> names.
        metric_name : :obj:`Sequence[str]`
            Filter the data stream objects of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridges</a> which
            contain specific <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin
            Metric</a> names.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin
            Bridge</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response parameter under pagination -> previous_page and pagination ->
            next_page respectively.</p> The pagination -> next_page alphanumeric
            string should be used here to show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response parameter under pagination -> previous_page and pagination ->
            next_page respectively.</p> The pagination -> previous_page
            alphanumeric string should be used here to show a list of the previous
            page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>
            parameters. Only one parameter can be selected.</p> There are two
            parameter options; `bridge_metric_asset.asset_name`,
            `bridge_metric_asset.metric_name`.</p> The default is
            `bridge_metric_asset.asset_name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/datastreams/list",
            {"bridge_name": bridge_name},
            {
                "asset_name": asset_name,
                "metric_name": metric_name,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": BridgeDataStreamListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/bridges/{bridge_name}/datastreams/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"bridge_name": "name"})
    def delete_bridge(
        self_or_cls, bridge_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Bridge application

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>. This cannot be undone once the API request has been submitted.

        <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridges</a> can be deleted even if the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a> is offline. In this case, the information will be immediately deleted on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> and the commands to delete on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a> will be sent when it next comes online.

        **Permission Required:** `kelvin.permission.bridge.delete`.

        ``deleteBridge``: ``POST`` ``/api/v4/bridges/{bridge_name}/delete``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/bridges/{bridge_name}/delete",
            {"bridge_name": bridge_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"bridge_name": "name"})
    def get_bridge(
        self_or_cls, bridge_name: str, _dry_run: bool = False, _client: Any = None
    ) -> Bridge:
        """
        Get Bridge

        Retrieve the properties of a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``getBridge``: ``GET`` ``/api/v4/bridges/{bridge_name}/get``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/get",
            {"bridge_name": bridge_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": Bridge, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"bridge_name": "name"})
    def list_bridge_metrics(
        self_or_cls,
        bridge_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[Metric], MetricListPaginated]:
        """
        List Bridge Metrics

        Returns a dictionary with a data property containing a list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.

        **Pagination Sortable Columns:** `metric.name`, `metric.title`, `metric.created`, `metric.updated`, `metric.data_type_name`

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``listBridgeMetrics``: ``GET`` ``/api/v4/bridges/{bridge_name}/metrics/list``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin
            Metric</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>
            parameters. Only one parameter can be selected.</p> There are ten
            parameter options; `metric.name`, `metric.title`, `metric.created`,
            `metric.updated` and `metric.data_type_name`.</p> The default is
            `metric.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/metrics/list",
            {"bridge_name": bridge_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": MetricListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/bridges/{bridge_name}/metrics/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"bridge_name": "name"})
    def start_bridge(
        self_or_cls, bridge_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Start Bridge application

        Start a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.

        The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> must already be deployed to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a>.

        **Permission Required:** `kelvin.permission.bridge.update`.

        ``startBridge``: ``GET`` ``/api/v4/bridges/{bridge_name}/start``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/start",
            {"bridge_name": bridge_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"bridge_name": "name"})
    def stop_bridge(
        self_or_cls, bridge_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Stop Bridge application

        Stop a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.

        The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> must already be deployed to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a>.

        **Permission Required:** `kelvin.permission.bridge.update`.

        ``stopBridge``: ``GET`` ``/api/v4/bridges/{bridge_name}/stop``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/stop",
            {"bridge_name": bridge_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class BridgeListPaginated(PaginatorDataModel[BridgeItem]):
    """
    BridgeListPaginated object.

    Parameters
    ----------
    data: Optional[List[BridgeItem]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[BridgeItem]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> objects. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class CSVFile(DataModelBase):
    """
    CSVFile object.

    Parameters
    ----------
    data: Optional[List[List[str]]]
    headers: Optional[List[str]]

    """

    data: Optional[List[List[str]]] = None
    headers: Optional[List[str]] = None

    @classmethod
    def get_csv(
        cls,
        data: Optional[Union[requests.RulesEngineCSV, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> CSVFile:
        """
        Get CSV parsed file from remote public source

        **Permission Required:** `kelvin.permission.ui.read`.

        ``getCSV``: ``POST`` ``/api/v4/ui/rules-engine/csv/get``

        Parameters
        ----------
        data: requests.RulesEngineCSV, optional
        **kwargs:
            Extra parameters for requests.RulesEngineCSV
              - url: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/ui/rules-engine/csv/get",
            {},
            {},
            {},
            {},
            data,
            requests.RulesEngineCSV,
            False,
            {
                "200": CSVFile,
                "400": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "406": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class CSVPosition(DataModelBase):
    """
    CSVPosition object.

    Parameters
    ----------
    column: Optional[int]
    field_description: Optional[str]
    field_solution: Optional[str]
    row: Optional[int]

    """

    column: Optional[int] = Field(None, description="The column where the error has been detected.")
    field_description: Optional[str] = Field(
        None, description="A detailed description of what is the error at this location."
    )
    field_solution: Optional[str] = Field(None, description="Possible solutions to fix this error.")
    row: Optional[int] = Field(None, description="The row where the error has been detected.")


class CarbonEmissionsInstanceSettingItem(DataModelBase):
    """
    CarbonEmissionsInstanceSettingItem object.

    Parameters
    ----------
    created: Optional[datetime]
    name: Optional[str]
    original: Optional[Dict[str, Any]]
    payload: Optional[Dict[str, Any]]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = None
    name: Optional[str] = Field(None, max_length=64)
    original: Optional[Dict[str, Any]] = None
    payload: Optional[Dict[str, Any]] = None
    updated: Optional[datetime] = None

    @classmethod
    def get_kelvin_carbon_emissions_instance_setting(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> CarbonEmissionsInstanceSettingItem:
        """
        Get Kelvin Carbon Emissions Instance Setting

        **Permission Required:** `kelvin.permission.instance.read`.

        ``getKelvinCarbonEmissionsInstanceSetting``: ``GET`` ``/api/v4/instance/settings/kelvin-carbon-emissions/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/instance/settings/kelvin-carbon-emissions/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": CarbonEmissionsInstanceSettingItem, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_kelvin_carbon_emissions_instance_setting(
        self_or_cls,
        reset: Optional[bool] = None,
        data: Optional[
            Union[requests.KelvinCarbonEmissionsInstanceSettingUpdate, Mapping[str, Any]]
        ] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> InstanceSettingItem:
        """
        Update Kelvin Carbon Emissions Instance Setting

        **Permission Required:** `kelvin.permission.instance.update`.

        ``updateKelvinCarbonEmissionsInstanceSetting``: ``POST`` ``/api/v4/instance/settings/kelvin-carbon-emissions/update``

        Parameters
        ----------
        reset : :obj:`bool`
            Reset settings to the defaults. Default: false
        data: requests.KelvinCarbonEmissionsInstanceSettingUpdate, optional
        **kwargs:
            Extra parameters for requests.KelvinCarbonEmissionsInstanceSettingUpdate
              - payload: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/instance/settings/kelvin-carbon-emissions/update",
            {},
            {"reset": reset},
            {},
            {},
            data,
            requests.KelvinCarbonEmissionsInstanceSettingUpdate,
            False,
            {
                "200": InstanceSettingItem,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class ClusterCIDR(DataModelBase):
    """
    ClusterCIDR object.

    Parameters
    ----------
    pod_cidr: Optional[str]
    service_cidr: Optional[str]

    """

    pod_cidr: Optional[str] = None
    service_cidr: Optional[str] = None

    @classmethod
    def list_cluster_cidr(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[ClusterCIDRItem], ClusterCIDRListPaginated]:
        """
        List Cluster CIDR

        **Pagination Sortable Columns:** `cidr.kube_pod_cidr`, `cidr.kube_service_cidr`

        **Permission Required:** `kelvin.permission.acp.read`.

        ``listClusterCIDR``: ``GET`` ``/api/v4/orchestration/cidr/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search CIDR by Kubernetes Pod IP, Kubernetes Service IP or Cluster
            Name
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/orchestration/cidr/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": ClusterCIDRListPaginated, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/orchestration/cidr/list", "GET")
            if fetch and not _dry_run
            else result
        )


class ClusterCIDRItem(DataModelBase):
    """
    ClusterCIDRItem object.

    Parameters
    ----------
    cluster_name: Optional[str]
    created: Optional[datetime]
    kube_pod_cidr: Optional[str]
    kube_service_cidr: Optional[str]
    updated: Optional[datetime]

    """

    cluster_name: Optional[str] = None
    created: Optional[datetime] = None
    kube_pod_cidr: Optional[str] = None
    kube_service_cidr: Optional[str] = None
    updated: Optional[datetime] = None

    @classmethod
    def list_cluster_cidr(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[ClusterCIDRItem], ClusterCIDRListPaginated]:
        """
        List Cluster CIDR

        **Pagination Sortable Columns:** `cidr.kube_pod_cidr`, `cidr.kube_service_cidr`

        **Permission Required:** `kelvin.permission.acp.read`.

        ``listClusterCIDR``: ``GET`` ``/api/v4/orchestration/cidr/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search CIDR by Kubernetes Pod IP, Kubernetes Service IP or Cluster
            Name
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/orchestration/cidr/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": ClusterCIDRListPaginated, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/orchestration/cidr/list", "GET")
            if fetch and not _dry_run
            else result
        )


class ClusterCIDRListPaginated(PaginatorDataModel[ClusterCIDRItem]):
    """
    ClusterCIDRListPaginated object.

    Parameters
    ----------
    data: Optional[List[ClusterCIDRItem]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[ClusterCIDRItem]] = None
    pagination: Optional[pagination.Pagination] = None


class ClusterManifestItem(DataModelBase):
    """
    ClusterManifestItem object.

    Parameters
    ----------
    content: Optional[str]
    file_name: Optional[str]

    """

    content: Optional[str] = None
    file_name: Optional[str] = None


class ClusterManifestList(DataModelBase):
    """
    ClusterManifestList object.

    Parameters
    ----------
    manifests: Optional[List[ClusterManifestItem]]
    revision: Optional[str]

    """

    manifests: Optional[List[ClusterManifestItem]] = None
    revision: Optional[str] = None

    @classmethod
    def get_cluster_manifests(
        cls,
        cluster_name: str,
        version: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> ClusterManifestList:
        """
        Get Cluster Manifests

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getClusterManifests``: ``GET`` ``/api/v4/orchestration/clusters/{cluster_name}/manifests/get``

        Parameters
        ----------
        cluster_name : :obj:`str`, optional
            Cluster name
        version : :obj:`str`
            Current Version

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/orchestration/clusters/{cluster_name}/manifests/get",
            {"cluster_name": cluster_name},
            {"version": version},
            {},
            {},
            None,
            None,
            False,
            {
                "200": ClusterManifestList,
                "204": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result


class ComponentStatus(DataModelBase):
    """
    ComponentStatus object.

    Parameters
    ----------
    name: Optional[str]
    status: Optional[bool]

    """

    name: Optional[str] = None
    status: Optional[bool] = None


class ControlChange(DataModelBase):
    """
    ControlChange object.

    Parameters
    ----------
    created_by: Optional[str]
    created_type: Optional[str]
    id: str
    last_state: Optional[str]
    payload: Optional[Dict[str, Any]]
    resource: Optional[str]
    source: Optional[str]
    timestamp: Optional[datetime]
    trace_id: str

    """

    created_by: Optional[str] = Field(
        None,
        description="Who created the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a>.</p> For a `user` this will normally be a user name or user email address and for a `workload` it will be the workload's unique name.",
    )
    created_type: Optional[str] = Field(
        None,
        description="Type of process that created the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a>.</p> There are two types; `user` which is a normal user registered on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> or `workload` which is an automated process like a Kelvin Rule or from a program in a  <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-apps/' target='_blank'>Kelvin App</a>.",
    )
    id: str = Field(
        ...,
        description="Unique identifier id for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> request.",
    )
    last_state: Optional[str] = Field(
        None,
        description="The current payload value of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair before the new payload is delivered.",
    )
    payload: Optional[Dict[str, Any]] = Field(
        None,
        description="The new value payload to send to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair.",
    )
    resource: Optional[str] = Field(None, description="An internal Kelvin parameter")
    source: Optional[str] = Field(None, description="An internal Kelvin parameter")
    timestamp: Optional[datetime] = Field(
        None,
        description="Time when `created_by` sent the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> request to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>. The date-time is in ISO 8601 UTC date/time format. Example; \"2022-08-22T08:41:01.657916Z\".",
    )
    trace_id: str = Field(
        ..., description="This is for internal purposes and is the same as the `id`."
    )

    @instance_classmethod
    @DataModelBase.translate()
    def create_control_change(
        self_or_cls,
        data: Optional[Union[requests.ControlChangeCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> ControlChange:
        """
        Create Control Change

        Send a new value to be written to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair.

        The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> Manager will automatically find which <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a> hosts the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> with the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair.

        **Permission Required:** `kelvin.permission.control_change.create`.

        ``createControlChange``: ``POST`` ``/api/v4/control-changes/create``

        Parameters
        ----------
        data: requests.ControlChangeCreate, optional
        **kwargs:
            Extra parameters for requests.ControlChangeCreate
              - asset_name: str
              - expiration_date: datetime
              - metric_name: str
              - payload: dict
              - retry: int
              - timeout: int

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/control-changes/create",
            {},
            {},
            {},
            {},
            data,
            requests.ControlChangeCreate,
            False,
            {"201": ControlChange, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_last_control_change(
        cls,
        status_limit: Optional[int] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        data: Optional[Union[requests.ControlChangeLast, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[ControlChangeGet], ControlChangeGetPaginated]:
        """
        Get Last Control Change

        Returns a list of the last <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> for each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pairs for each of the body parameters in the array `asset_names`.

        The list will include <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Changes</a> that succeeded, failed or are pending.

        Each object will not only give the `status` and `payload` of the last <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> but also the `status_log` containing the information of when the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> was created, sent to bridge and confirmed with a read.

        **Pagination Sortable Columns:** `control_change.id`, `control_change.asset_name`, `control_change.metric_name`, `control_change.last_state`, `control_change.created`, `control_change.updated`, `control_change.timestamp`

        **Permission Required:** `kelvin.permission.control_change.read`.

        ``getLastControlChange``: ``POST`` ``/api/v4/control-changes/last/get``

        Parameters
        ----------
        status_limit : :obj:`int`
            Number of statuses per <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> objects to be returned. Page size can be between 1 and 300
            objects.</p> Default value is 20.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-control-change/'
            target='_blank'>Kelvin Control Change</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 Kelvin
            Asset Statistic objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> list.</p> The alphanumeric string which are the bookmarks
            for the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> list.</p> The alphanumeric string which are the bookmarks
            for the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> parameters. Only one parameter can be selected.</p> There
            are seven parameter options; `control_change.id`,
            `control_change.asset_name`, `control_change.metric_name`,
            `control_change.last_state`, `control_change.created`,
            `control_change.updated` and `control_change.timestamp`.</p> The
            default is `control_change.id`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        data: requests.ControlChangeLast, optional
        **kwargs:
            Extra parameters for requests.ControlChangeLast
              - asset_include_children: bool
              - asset_names: list
              - metric_names: list
              - states: list
              - status_limit: int

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/control-changes/last/get",
            {},
            {
                "status_limit": status_limit,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            data,
            requests.ControlChangeLast,
            False,
            {"200": ControlChangeGetPaginated, "400": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/control-changes/last/get", "POST")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def list_control_change(
        cls,
        status_limit: Optional[int] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        data: Optional[Union[requests.ControlChangeList, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[ControlChangeGet], ControlChangeGetPaginated]:
        """
        List Control Change lists the Control Changes for each asset metric.

        Returns a list of the history of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> requests for each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pairs for each of the body parameters in the array `asset_names`.

        **Pagination Sortable Columns:** `control_change.id`, `control_change.asset_name`, `control_change.metric_name`, `control_change.last_state`, `control_change.created`, `control_change.updated`, `control_change.timestamp`

        **Permission Required:** `kelvin.permission.control_change.read`.

        ``listControlChange``: ``POST`` ``/api/v4/control-changes/list``

        Parameters
        ----------
        status_limit : :obj:`int`
            Number of statuses per <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> objects to be returned. Page size can be between 1 and 300
            objects.</p> Default value is 20.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-control-change/'
            target='_blank'>Kelvin Control Change</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 Kelvin
            Asset Statistic objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> list.</p> The alphanumeric string which are the bookmarks
            for the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> list.</p> The alphanumeric string which are the bookmarks
            for the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> parameters. Only one parameter can be selected.</p> There
            are seven parameter options; `control_change.id`,
            `control_change.asset_name`, `control_change.metric_name`,
            `control_change.last_state`, `control_change.created`,
            `control_change.updated` and `control_change.timestamp`.</p> The
            default is `control_change.id`.
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        data: requests.ControlChangeList, optional
        **kwargs:
            Extra parameters for requests.ControlChangeList
              - asset_include_children: bool
              - asset_names: list
              - ids: list
              - metric_names: list
              - states: list
              - status_limit: int

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/control-changes/list",
            {},
            {
                "status_limit": status_limit,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            data,
            requests.ControlChangeList,
            False,
            {"200": ControlChangeGetPaginated, "400": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/control-changes/list", "POST")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def get_range_control_change(
        cls,
        status_limit: Optional[int] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        data: Optional[Union[requests.ControlChangeRange, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[ControlChangeGet], ControlChangeGetPaginated]:
        """
        Get Range Control Change.

        Returns a list of the history of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> status changes that have happened within a date range for each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pairs for each of the body parameters in the array `asset_names`.

        **Pagination Sortable Columns:** `control_change.id`, `control_change.asset_name`, `control_change.metric_name`, `control_change.last_state`, `control_change.created`, `control_change.updated`, `control_change.timestamp`

        **Permission Required:** `kelvin.permission.control_change.read`.

        ``getRangeControlChange``: ``POST`` ``/api/v4/control-changes/range/get``

        Parameters
        ----------
        status_limit : :obj:`int`
            Number of statuses per <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> objects to be returned. Page size can be between 1 and 300
            objects.</p> Default value is 20.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-control-change/'
            target='_blank'>Kelvin Control Change</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 Kelvin
            Asset Statistic objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> list.</p> The alphanumeric string which are the bookmarks
            for the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> list.</p> The alphanumeric string which are the bookmarks
            for the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> parameters. Only one parameter can be selected.</p> There
            are seven parameter options; `control_change.id`,
            `control_change.asset_name`, `control_change.metric_name`,
            `control_change.last_state`, `control_change.created`,
            `control_change.updated` and `control_change.timestamp`.</p> The
            default is `control_change.id`.
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        data: requests.ControlChangeRange, optional
        **kwargs:
            Extra parameters for requests.ControlChangeRange
              - asset_include_children: bool
              - asset_names: list
              - end_date: datetime
              - metric_names: list
              - start_date: datetime
              - states: list
              - status_limit: int

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/control-changes/range/get",
            {},
            {
                "status_limit": status_limit,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            data,
            requests.ControlChangeRange,
            False,
            {"200": ControlChangeGetPaginated, "400": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/control-changes/range/get", "POST")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def download_control_change(
        cls,
        node: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[ControlChange], ControlChangePaginated]:
        """
        Download Control Change

        This is required only for internal <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> management. It will download all control changes on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> tagged as `pending` to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a>.

        **Pagination Sortable Columns:** `control_change.id`, `control_change.asset_name`, `control_change.metric_name`, `control_change.last_state`, `control_change.created`, `control_change.updated`, `control_change.timestamp`

        **Permission Required:** `kelvin.permission.control_change.read`.

        ``downloadControlChange``: ``GET`` ``/api/v4/control-changes/sync/{node}/download``

        Parameters
        ----------
        node : :obj:`str`, optional
            Name of an existing <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin
            Node</a> to check for <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> objects tagged as `pending` on the <a
            href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a> and initiate download to this <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-nodes/' target='_blank'>Kelvin Node</a>.</p> This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-control-change/'
            target='_blank'>Kelvin Control Change</a> request objects to be
            returned. Page size can be between 1 and 1000 objects.</p> The default
            is 20 Kelvin Asset Statistic objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> requests in the list.</p> The alphanumeric string which are
            the bookmarks for the beginning and end of the current list is given
            in the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> requests in the list.</p> The alphanumeric string which are
            the bookmarks for the beginning and end of the current list is given
            in the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> parameters.
            Only one parameter can be selected.</p> There are sevens parameter
            options; `control_change.id`, `control_change.asset_name`,
            `control_change.metric_name`, `control_change.last_state`,
            `control_change.created`, `control_change.updated`,
            `control_change.timestamp`.</p> The default is `control_change.id`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/control-changes/sync/{node}/download",
            {"node": node},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": ControlChangePaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/control-changes/sync/{node}/download", "GET")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def upload_control_change(
        cls,
        node: str,
        data: Optional[Union[requests.ControlChangeUpload, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Upload Control Change

        This is required only for internal <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> management. It will update the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> with the current status of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> requests on a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a>.

        **Permission Required:** `kelvin.permission.control_change.create`.

        ``uploadControlChange``: ``POST`` ``/api/v4/control-changes/sync/{node}/upload``

        Parameters
        ----------
        node : :obj:`str`, optional
            Name of an existing <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin
            Node</a> to check <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-control-change/'
            target='_blank'>Kelvin Control Change</a> statuses and initiate upload
            (synchronize) to the <a
            href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        data: requests.ControlChangeUpload, optional
        **kwargs:
            Extra parameters for requests.ControlChangeUpload
              - requests: list
              - statuses: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/control-changes/sync/{node}/upload",
            {"node": node},
            {},
            {},
            {},
            data,
            requests.ControlChangeUpload,
            False,
            {
                "201": None,
                "207": ErrorMessages,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"control_change_id": "id"})
    def get_control_change(
        self_or_cls,
        control_change_id: str,
        status_limit: Optional[int] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> ControlChangeGet:
        """
        Get Control Change

        Returns the properties of a single <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> request via its unique ID.

        Returned object will not only give the `status` and `payload` of the last <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> but also the `status_log` containing the information of when the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> was created, sent to bridge and confirmed with a read.

        **Permission Required:** `kelvin.permission.control_change.read`.

        ``getControlChange``: ``GET`` ``/api/v4/control-changes/{control_change_id}/get``

        Parameters
        ----------
        control_change_id : :obj:`str`, optional
            Unique identifier id for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a>.</p> This must contain only lowercase alphanumeric
            characters and the `-` character only. For example
            `764168a8-0e1e-33aa-adc7-14dfbb78dfad`
        status_limit : :obj:`int`
            Number of statuses per <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> objects to be returned. Page size can be between 1 and 300
            objects.</p> Default value is 20.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/control-changes/{control_change_id}/get",
            {"control_change_id": control_change_id},
            {"status_limit": status_limit},
            {},
            {},
            None,
            None,
            False,
            {"200": ControlChangeGet, "400": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class ControlChangeClustering(DataModelBase):
    """
    ControlChangeClustering object.

    Parameters
    ----------
    control_change_ids: Optional[List[str]]
    count: Optional[int]
    time_bucket_start: Optional[datetime]

    """

    control_change_ids: Optional[List[str]] = Field(
        None,
        description="Array of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> ID's with the time frame of the current time bucket.",
    )
    count: Optional[int] = Field(
        None,
        description="The number of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Changes</a> that occurred within the time frame of the current time bucket.",
    )
    time_bucket_start: Optional[datetime] = Field(
        None,
        description='The start time of the current time bucket. The date-time is in ISO 8601 UTC date/time format. Example; "2022-08-22T08:41:01.657916Z".',
    )

    @classmethod
    def get_control_change_clustering(
        cls,
        data: Optional[Union[requests.ControlChangeClustering, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[ControlChangeClustering]:
        """
        Get Control Change Clustering

        Groups and counts the occurrence of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Changes</a> within a defined time bucket.

        The grouping can also be filtered to only include <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Changes</a> for certain <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> or current <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> statuses.

        **Permission Required:** `kelvin.permission.control_change.read`.

        ``getControlChangeClustering``: ``POST`` ``/api/v4/control-changes/clustering/get``

        Parameters
        ----------
        data: requests.ControlChangeClustering, optional
        **kwargs:
            Extra parameters for requests.ControlChangeClustering
              - asset_include_children: bool
              - asset_names: list
              - end_date: datetime
              - metric_names: list
              - start_date: datetime
              - states: list
              - time_bucket: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/control-changes/clustering/get",
            {},
            {},
            {},
            {},
            data,
            requests.ControlChangeClustering,
            False,
            {
                "200": List[ControlChangeClustering],
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class ControlChangeGetStatus(DataModelBase):
    """
    ControlChangeGetStatus object.

    Parameters
    ----------
    message: Optional[str]
    payload: Optional[Dict[str, Any]]
    state: str
    timestamp: Optional[datetime]

    """

    message: Optional[str] = Field(
        None,
        description="A message about the change in status. This will only appear if there is a message attached.",
    )
    payload: Optional[Dict[str, Any]] = Field(
        None,
        description="`pending` status will show a blank dictionary. `sent`, `applied` and `failed` will show the current value of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair.",
    )
    state: str = Field(
        ...,
        description="<a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> updated state.</p> There are four states available; `pending`, `sent`, `applied` and `failed`.",
    )
    timestamp: Optional[datetime] = Field(
        None,
        description="Time when the new status for <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> request is recorded. The date-time is in ISO 8601 UTC date/time format. Example; \"2022-08-22T08:41:01.657916Z\".",
    )


class ControlChangePaginated(PaginatorDataModel[ControlChange]):
    """
    ControlChangePaginated object.

    Parameters
    ----------
    data: Optional[List[ControlChange]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[ControlChange]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> objects. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class CreatedBy(DataModelBase):
    """
    CreatedBy object.

    Parameters
    ----------
    name: Optional[str]
    title: Optional[str]
    type: Optional[str]

    """

    name: Optional[str] = None
    title: Optional[str] = None
    type: Optional[str] = None


class DataLabelCluster(DataModelBase):
    """
    DataLabelCluster object.

    Parameters
    ----------
    count: Optional[int]
    end_date: Optional[datetime]
    label_names: Optional[List[str]]
    start_date: Optional[datetime]

    """

    count: Optional[int] = Field(
        None, description="Sum of occurrences of the Label name within the specified Time Bucket."
    )
    end_date: Optional[datetime] = Field(
        None,
        description="Timestamp for the end of a time range for which the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Label</a> information is relevant (supports RFC3339 with nanosecond precision, e.g. 2022-11-03T08:15:03.278515Z).</p> If the Data Label is a snapshot in time, the start_time and end_time usually will be the same.",
    )
    label_names: Optional[List[str]] = Field(
        None,
        description="This is the name of the Label variable.</p> This can be created with the Kelvin API `/datalabels/labels/create` or if the Label name does not exist, it will be automatically created.",
    )
    start_date: Optional[datetime] = Field(
        None,
        description="Timestamp for the start of a time range for which the Data Label information is relevant (supports RFC3339 with nanosecond precision, e.g. 2022-11-03T08:15:03.278515Z).",
    )

    @instance_classmethod
    @DataModelBase.translate()
    def get_data_labels_clustering(
        self_or_cls,
        data: Optional[Union[requests.DataLabelCluster, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[DataLabelCluster]:
        """
        Get Data Labels Clustering

        Groups and counts the occurrence of Label Names within a defined time bucket for recorded <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a>.

        The grouping can also be filtered to only include certain parameters of <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a>.

        For example you can filter on Label names, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs, and time range.

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``getDataLabelsClustering``: ``POST`` ``/api/v4/datalabels/clustering/get``

        Parameters
        ----------
        data: requests.DataLabelCluster, optional
        **kwargs:
            Extra parameters for requests.DataLabelCluster
              - end_date: datetime
              - label_names: list
              - metrics: list
              - start_date: datetime
              - time_bucket: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/clustering/get",
            {},
            {},
            {},
            {},
            data,
            requests.DataLabelCluster,
            False,
            {"200": List[DataLabelCluster], "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class DataLabelMetricItem(DataModelBase):
    """
    DataLabelMetricItem object.

    Parameters
    ----------
    asset_name: Optional[str]
    name: Optional[str]

    """

    asset_name: Optional[str] = Field(
        None,
        description="Unique identifier name for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>.</p> This can only contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    name: Optional[str] = Field(
        None,
        description="Unique identifier name for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>.</p> This can only contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )


class Type(Enum):
    user = "user"
    workload = "workload"


class DataLabelSource(DataModelBase):
    """
    DataLabelSource object.

    Parameters
    ----------
    info: Optional[Dict[str, Any]]
    type: Optional[Type]

    """

    info: Optional[Dict[str, Any]] = Field(
        None,
        description="A JSON object of key/value pairs to describe the type source.</p> For `workload` this will normally have the name of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-apps/' target='_blank'>Kelvin App</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> that creates this information or for `user` this will usually be the `username` and `user_id`.",
    )
    type: Optional[Type] = Field(
        None,
        description="The type of source process.</p> There are two options `workload` and `user`.",
    )


class DataTypeSchema(DataModelBase):
    """
    DataTypeSchema object.

    Parameters
    ----------

    """

    class Config(DataModelBase.Config):
        extra = Extra.allow

    @classmethod
    def get_data_type_schema(
        cls,
        data_type_name: str,
        data_type_version: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> DataTypeSchema:
        """
        Get Data Type Schema

        **Permission Required:** `kelvin.permission.data_type.read`.

        ``getDataTypeSchema``: ``GET`` ``/api/v4/datatypes/{data_type_name}/versions/{data_type_version}/schema/get``

        Parameters
        ----------
        data_type_name : :obj:`str`, optional
            Data Type name
        data_type_version : :obj:`str`, optional
            Data Type version

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/datatypes/{data_type_name}/versions/{data_type_version}/schema/get",
            {"data_type_name": data_type_name, "data_type_version": data_type_version},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": DataTypeSchema,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result


class EmissionsAsset(DataModelBase):
    """
    EmissionsAsset object.

    Parameters
    ----------
    name: Optional[str]
    title: Optional[str]

    """

    name: Optional[str] = None
    title: Optional[str] = None


class EmissionsDashboardAnalyticsHistorian(DataModelBase):
    """
    EmissionsDashboardAnalyticsHistorian object.

    Parameters
    ----------
    month: Optional[int]
    month_long_name: Optional[str]
    month_short_name: Optional[str]
    value: Optional[int]
    year: Optional[int]

    """

    month: Optional[int] = None
    month_long_name: Optional[str] = None
    month_short_name: Optional[str] = None
    value: Optional[int] = None
    year: Optional[int] = None


class EmissionsDashboardTotals(DataModelBase):
    """
    EmissionsDashboardTotals object.

    Parameters
    ----------
    assessed_assets: Optional[int]
    assets: Optional[int]
    assets_with_motor: Optional[int]
    efficient_assets: Optional[int]
    inefficient_assets: Optional[int]
    non_assessed_assets: Optional[int]

    """

    assessed_assets: Optional[int] = None
    assets: Optional[int] = None
    assets_with_motor: Optional[int] = None
    efficient_assets: Optional[int] = None
    inefficient_assets: Optional[int] = None
    non_assessed_assets: Optional[int] = None


class EmissionsGreenhouse(DataModelBase):
    """
    EmissionsGreenhouse object.

    Parameters
    ----------
    forest_acres: Optional[float]
    forest_acres_preserved: Optional[float]
    tree_seedlings: Optional[float]

    """

    forest_acres: Optional[float] = None
    forest_acres_preserved: Optional[float] = None
    tree_seedlings: Optional[float] = None


class EmissionsInefficientAssetAlarm(DataModelBase):
    """
    EmissionsInefficientAssetAlarm object.

    Parameters
    ----------
    id: Optional[str]
    title: Optional[str]

    """

    id: Optional[str] = None
    title: Optional[str] = None


class EmissionsInefficientAssetAnalytics(DataModelBase):
    """
    EmissionsInefficientAssetAnalytics object.

    Parameters
    ----------
    inefficient_consumed_energy: Optional[float]
    inefficient_cost: Optional[float]
    scope2_cost: Optional[float]
    scope2_emission: Optional[float]

    """

    inefficient_consumed_energy: Optional[float] = None
    inefficient_cost: Optional[float] = None
    scope2_cost: Optional[float] = None
    scope2_emission: Optional[float] = None


class ErrorMessage(DataModelBase):
    """
    ErrorMessage object.

    Parameters
    ----------
    error_code: Optional[int]
    http_status_code: Optional[int]
    message: Optional[List[str]]

    """

    error_code: Optional[int] = Field(
        None, description="Internal Kelvin error code (used for internal purposes)."
    )
    http_status_code: Optional[int] = Field(
        None, description="HTTP status error code.", example=400
    )
    message: Optional[List[str]] = Field(None, description="Detailed description of the error.")


class ErrorMessages(DataModelBase):
    """
    ErrorMessages object.

    Parameters
    ----------
    errors: Optional[List[ErrorMessage]]

    """

    errors: Optional[List[ErrorMessage]] = Field(
        None,
        description="Array of dictionary objects detailing all errors that were found in the request data.",
    )


class Failure(DataModelBase):
    """
    Failure object.

    Parameters
    ----------
    mode: Optional[str]
    part_name: Optional[str]
    part_title: Optional[str]
    reason: Optional[str]
    recommendation: Optional[str]

    """

    mode: Optional[str] = None
    part_name: Optional[str] = None
    part_title: Optional[str] = None
    reason: Optional[str] = None
    recommendation: Optional[str] = None


class FailureAnalysisSpectralBand(DataModelBase):
    """
    FailureAnalysisSpectralBand object.

    Parameters
    ----------
    aggregation_type: Optional[str]
    band_type: Optional[str]
    high_cut_off: Optional[float]
    low_cut_off: Optional[float]

    """

    aggregation_type: Optional[str] = None
    band_type: Optional[str] = None
    high_cut_off: Optional[float] = None
    low_cut_off: Optional[float] = None


class FailureAnalysisThreshold(DataModelBase):
    """
    FailureAnalysisThreshold object.

    Parameters
    ----------
    analysis_name: Optional[str]
    severity: Optional[int]
    type: Optional[str]
    units: Optional[str]
    value: Optional[float]

    """

    analysis_name: Optional[str] = None
    severity: Optional[int] = None
    type: Optional[str] = None
    units: Optional[str] = None
    value: Optional[float] = None


class FailureAnalysisThresholdsList(DataModelBase):
    """
    FailureAnalysisThresholdsList object.

    Parameters
    ----------
    data: Optional[Dict[str, List[FailureAnalysisThreshold]]]

    """

    data: Optional[Dict[str, List[FailureAnalysisThreshold]]] = None

    @classmethod
    def list_thresholds(
        cls,
        component_class_names: Optional[Sequence[str]] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> FailureAnalysisThresholdsList:
        """
        List Thresholds

        **Permission Required:** `kelvin.permission.failure_detection.read`.

        ``listThresholds``: ``GET`` ``/api/v4/failure-detection/analysis/thresholds/list``

        Parameters
        ----------
        component_class_names : :obj:`Sequence[str]`
            Filter Thresholds by component_class_name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/failure-detection/analysis/thresholds/list",
            {},
            {"component_class_names": component_class_names},
            {},
            {},
            None,
            None,
            False,
            {"200": FailureAnalysisThresholdsList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def create_thresholds(
        cls,
        component_failure_class_name: str,
        data: Optional[Union[requests.FailureAnalysisThresholdsUpsert, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> FailureAnalysisThresholdsUpsert:
        """
        Create Thresholds

        **Permission Required:** `kelvin.permission.failure_detection.create`.

        ``createThresholds``: ``POST`` ``/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/create``

        Parameters
        ----------
        component_failure_class_name : :obj:`str`, optional
            component failure class name for which you are creating thresholds
        data: requests.FailureAnalysisThresholdsUpsert, optional
        **kwargs:
            Extra parameters for requests.FailureAnalysisThresholdsUpsert
              - thresholds: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/create",
            {"component_failure_class_name": component_failure_class_name},
            {},
            {},
            {},
            data,
            requests.FailureAnalysisThresholdsUpsert,
            False,
            {"201": FailureAnalysisThresholdsUpsert, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def delete_thresholds(
        cls,
        component_failure_class_name: str,
        data: Optional[Union[requests.FailureAnalysisThresholdsUpsert, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Delete Thresholds

        **Permission Required:** `kelvin.permission.failure_detection.delete`.

        ``deleteThresholds``: ``POST`` ``/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/delete``

        Parameters
        ----------
        component_failure_class_name : :obj:`str`, optional
            component failure class name for which you are deleting thresholds
        data: requests.FailureAnalysisThresholdsUpsert, optional
        **kwargs:
            Extra parameters for requests.FailureAnalysisThresholdsUpsert
              - thresholds: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/delete",
            {"component_failure_class_name": component_failure_class_name},
            {},
            {},
            {},
            data,
            requests.FailureAnalysisThresholdsUpsert,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def update_thresholds(
        cls,
        component_failure_class_name: str,
        data: Optional[Union[requests.FailureAnalysisThresholdsUpsert, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> FailureAnalysisThresholdsUpsert:
        """
        Update Thresholds

        **Permission Required:** `kelvin.permission.failure_detection.update`.

        ``updateThresholds``: ``POST`` ``/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/update``

        Parameters
        ----------
        component_failure_class_name : :obj:`str`, optional
            component failure class name for which you are updating thresholds
        data: requests.FailureAnalysisThresholdsUpsert, optional
        **kwargs:
            Extra parameters for requests.FailureAnalysisThresholdsUpsert
              - thresholds: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/update",
            {"component_failure_class_name": component_failure_class_name},
            {},
            {},
            {},
            data,
            requests.FailureAnalysisThresholdsUpsert,
            False,
            {"200": FailureAnalysisThresholdsUpsert, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class FailureAnalysisThresholdsUpsert(DataModelBase):
    """
    FailureAnalysisThresholdsUpsert object.

    Parameters
    ----------
    data: Optional[List[FailureAnalysisThresholdsUpsert]]

    """

    data: Optional[List[FailureAnalysisThresholdsUpsert]] = None

    @classmethod
    def create_thresholds(
        cls,
        component_failure_class_name: str,
        data: Optional[Union[requests.FailureAnalysisThresholdsUpsert, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> FailureAnalysisThresholdsUpsert:
        """
        Create Thresholds

        **Permission Required:** `kelvin.permission.failure_detection.create`.

        ``createThresholds``: ``POST`` ``/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/create``

        Parameters
        ----------
        component_failure_class_name : :obj:`str`, optional
            component failure class name for which you are creating thresholds
        data: requests.FailureAnalysisThresholdsUpsert, optional
        **kwargs:
            Extra parameters for requests.FailureAnalysisThresholdsUpsert
              - thresholds: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/create",
            {"component_failure_class_name": component_failure_class_name},
            {},
            {},
            {},
            data,
            requests.FailureAnalysisThresholdsUpsert,
            False,
            {"201": FailureAnalysisThresholdsUpsert, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def delete_thresholds(
        cls,
        component_failure_class_name: str,
        data: Optional[Union[requests.FailureAnalysisThresholdsUpsert, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Delete Thresholds

        **Permission Required:** `kelvin.permission.failure_detection.delete`.

        ``deleteThresholds``: ``POST`` ``/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/delete``

        Parameters
        ----------
        component_failure_class_name : :obj:`str`, optional
            component failure class name for which you are deleting thresholds
        data: requests.FailureAnalysisThresholdsUpsert, optional
        **kwargs:
            Extra parameters for requests.FailureAnalysisThresholdsUpsert
              - thresholds: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/delete",
            {"component_failure_class_name": component_failure_class_name},
            {},
            {},
            {},
            data,
            requests.FailureAnalysisThresholdsUpsert,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def update_thresholds(
        cls,
        component_failure_class_name: str,
        data: Optional[Union[requests.FailureAnalysisThresholdsUpsert, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> FailureAnalysisThresholdsUpsert:
        """
        Update Thresholds

        **Permission Required:** `kelvin.permission.failure_detection.update`.

        ``updateThresholds``: ``POST`` ``/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/update``

        Parameters
        ----------
        component_failure_class_name : :obj:`str`, optional
            component failure class name for which you are updating thresholds
        data: requests.FailureAnalysisThresholdsUpsert, optional
        **kwargs:
            Extra parameters for requests.FailureAnalysisThresholdsUpsert
              - thresholds: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/update",
            {"component_failure_class_name": component_failure_class_name},
            {},
            {},
            {},
            data,
            requests.FailureAnalysisThresholdsUpsert,
            False,
            {"200": FailureAnalysisThresholdsUpsert, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class FailureClass(DataModelBase):
    """
    FailureClass object.

    Parameters
    ----------
    created: Optional[datetime]
    entity_type_name: Optional[str]
    name: Optional[str]
    title: Optional[str]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = None
    entity_type_name: Optional[str] = None
    name: Optional[str] = None
    title: Optional[str] = None
    updated: Optional[datetime] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_failure_class(
        self_or_cls,
        data: Optional[Union[requests.FailureClassCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> FailureClass:
        """
        Create Failure Class

        **Permission Required:** `kelvin.permission.failure_detection.create`.

        ``createFailureClass``: ``POST`` ``/api/v4/failure-detection/classes/create``

        Parameters
        ----------
        data: requests.FailureClassCreate, optional
        **kwargs:
            Extra parameters for requests.FailureClassCreate
              - device_type_name: str
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/classes/create",
            {},
            {},
            {},
            {},
            data,
            requests.FailureClassCreate,
            False,
            {
                "201": FailureClass,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def update_failure_class_hierarchy(
        cls,
        data: Optional[Union[requests.FailureClassHierarchyUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Update Failure Class Hierarchy

        **Permission Required:** `kelvin.permission.failure_detection.update`.

        ``updateFailureClassHierarchy``: ``POST`` ``/api/v4/failure-detection/classes/hierarchy/update``

        Parameters
        ----------
        data: requests.FailureClassHierarchyUpdate, optional
        **kwargs:
            Extra parameters for requests.FailureClassHierarchyUpdate
              - updates: dict

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/classes/hierarchy/update",
            {},
            {},
            {},
            {},
            data,
            requests.FailureClassHierarchyUpdate,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_failure_classes(
        cls,
        search: Optional[Sequence[str]] = None,
        entity_type_name: Optional[str] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[FailureClass], FailureClassPaginated]:
        """
        List Failure Classes

        **Pagination Sortable Columns:** `fd_failure_class.name`, `fd_failure_class.title`, `fd_failure_class.device_type_name`, `fd_failure_class.created`, `fd_failure_class.updated`

        **Permission Required:** `kelvin.permission.failure_detection.read`.

        ``listFailureClasses``: ``GET`` ``/api/v4/failure-detection/classes/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search failure classes by name or title
        entity_type_name : :obj:`str`
            Filter failure classes by entity type name
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/failure-detection/classes/list",
            {},
            {
                "search": search,
                "entity_type_name": entity_type_name,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": FailureClassPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/failure-detection/classes/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"failure_class_name": "name"})
    def delete_failure_class(
        self_or_cls, failure_class_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Failure Class

        **Permission Required:** `kelvin.permission.failure_detection.delete`.

        ``deleteFailureClass``: ``POST`` ``/api/v4/failure-detection/classes/{failure_class_name}/delete``

        Parameters
        ----------
        failure_class_name : :obj:`str`, optional
            Failure Class name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/classes/{failure_class_name}/delete",
            {"failure_class_name": failure_class_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"failure_class_name": "name"})
    def get_failure_class(
        self_or_cls, failure_class_name: str, _dry_run: bool = False, _client: Any = None
    ) -> FailureClassFull:
        """
        Get Failure Class

        **Permission Required:** `kelvin.permission.failure_detection.read`.

        ``getFailureClass``: ``GET`` ``/api/v4/failure-detection/classes/{failure_class_name}/get``

        Parameters
        ----------
        failure_class_name : :obj:`str`, optional
            Failure Class Name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/failure-detection/classes/{failure_class_name}/get",
            {"failure_class_name": failure_class_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": FailureClassFull,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"failure_class_name": "name"})
    def update_failure_class(
        self_or_cls,
        failure_class_name: str,
        data: Optional[Union[requests.FailureClassUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> FailureClass:
        """
        Update Failure Class

        **Permission Required:** `kelvin.permission.failure_detection.update`.

        ``updateFailureClass``: ``POST`` ``/api/v4/failure-detection/classes/{failure_class_name}/update``

        Parameters
        ----------
        failure_class_name : :obj:`str`, optional
            Failure Class name
        data: requests.FailureClassUpdate, optional
        **kwargs:
            Extra parameters for requests.FailureClassUpdate
              - device_type_name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/classes/{failure_class_name}/update",
            {"failure_class_name": failure_class_name},
            {},
            {},
            {},
            data,
            requests.FailureClassUpdate,
            False,
            {"200": FailureClass, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class FailureClassPaginated(PaginatorDataModel[FailureClass]):
    """
    FailureClassPaginated object.

    Parameters
    ----------
    data: Optional[List[FailureClass]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[FailureClass]] = None
    pagination: Optional[pagination.Pagination] = None


class FailureDetectionProperty(DataModelBase):
    """
    FailureDetectionProperty object.

    Parameters
    ----------
    name: Optional[str]
    unit: Optional[str]
    value: Optional[str]

    """

    name: Optional[str] = Field(
        None,
        description='Unique identifier name for the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-ai-failure-detection/" target="_blank">Kelvin Failure Detection AI</a> property.</p> This must match the existing available properties for each type of <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-ai-failure-detection/" target="_blank">Kelvin Failure Detection AI</a> model.</p> This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.',
    )
    unit: Optional[str] = Field(
        None,
        description='The units for the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-ai-failure-detection/" target="_blank">Kelvin Failure Detection AI</a> property.',
    )
    value: Optional[str] = Field(
        None,
        description='The default value for the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-ai-failure-detection/" target="_blank">Kelvin Failure Detection AI</a> property.',
    )


class FailureEventItem(DataModelBase):
    """
    FailureEventItem object.

    Parameters
    ----------
    alarm_custom_identifier: Optional[str]
    alarm_id: Optional[str]
    created: Optional[datetime]
    id: Optional[str]
    payload: Optional[Dict[str, Any]]
    status: Optional[str]
    status_message: Optional[str]
    target_asset_name: Optional[str]
    trace_id: Optional[str]
    updated: Optional[datetime]

    """

    alarm_custom_identifier: Optional[str] = None
    alarm_id: Optional[str] = None
    created: Optional[datetime] = None
    id: Optional[str] = None
    payload: Optional[Dict[str, Any]] = None
    status: Optional[str] = None
    status_message: Optional[str] = None
    target_asset_name: Optional[str] = None
    trace_id: Optional[str] = None
    updated: Optional[datetime] = None

    @classmethod
    def list_failure_events(
        cls,
        id: Optional[Sequence[str]] = None,
        trace_id: Optional[Sequence[str]] = None,
        status: Optional[Sequence[str]] = None,
        target_asset_name: Optional[Sequence[str]] = None,
        alarm_id: Optional[Sequence[str]] = None,
        alarm_custom_identifier: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[FailureEventItem], FailureEventPaginated]:
        """
        List Failure Events

        **Pagination Sortable Columns:** `fd_events.id`, `fd_events.trace_id`, `fd_events.status`, `fd_events.target_asset_name`, `fd_events.alarm_id`, `fd_events.alarm_custom_identifier`, `fd_events.created`, `fd_events.updated`

        **Permission Required:** `kelvin.permission.failure_detection.read`.

        ``listFailureEvents``: ``GET`` ``/api/v4/failure-detection/events/list``

        Parameters
        ----------
        id : :obj:`Sequence[str]`
            Filter failure events by id
        trace_id : :obj:`Sequence[str]`
            Filter failure events by trace id
        status : :obj:`Sequence[str]`
            Filter failure events by status
        target_asset_name : :obj:`Sequence[str]`
            Filter failure events by target asset name
        alarm_id : :obj:`Sequence[str]`
            Filter failure events by target alarm id
        alarm_custom_identifier : :obj:`Sequence[str]`
            Filter failure events by alarm custom identifier
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/failure-detection/events/list",
            {},
            {
                "id": id,
                "trace_id": trace_id,
                "status": status,
                "target_asset_name": target_asset_name,
                "alarm_id": alarm_id,
                "alarm_custom_identifier": alarm_custom_identifier,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": FailureEventPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/failure-detection/events/list", "GET")
            if fetch and not _dry_run
            else result
        )


class FailureEventPaginated(PaginatorDataModel[FailureEventItem]):
    """
    FailureEventPaginated object.

    Parameters
    ----------
    data: Optional[List[FailureEventItem]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[FailureEventItem]] = None
    pagination: Optional[pagination.Pagination] = None


class FailureItem(DataModelBase):
    """
    FailureItem object.

    Parameters
    ----------
    created: Optional[datetime]
    name: Optional[str]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = None
    name: Optional[str] = None
    updated: Optional[datetime] = None


class FailureList(DataModelBase):
    """
    FailureList object.

    Parameters
    ----------
    data: Optional[List[FailureItem]]

    """

    data: Optional[List[FailureItem]] = None

    @classmethod
    def list_failure_modes(
        cls,
        component_failure_class_name: Optional[str] = None,
        part_failure_class_name: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> FailureList:
        """
        List Failure Modes

        **Permission Required:** `kelvin.permission.failure_detection.read`.

        ``listFailureModes``: ``GET`` ``/api/v4/failure-detection/modes/list``

        Parameters
        ----------
        component_failure_class_name : :obj:`str`
            Filter failures by component failure class name
        part_failure_class_name : :obj:`str`
            Filter failures by part failure class name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/failure-detection/modes/list",
            {},
            {
                "component_failure_class_name": component_failure_class_name,
                "part_failure_class_name": part_failure_class_name,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": FailureList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def list_failure_reasons(
        cls,
        component_failure_class_name: Optional[str] = None,
        part_failure_class_name: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> FailureList:
        """
        List Failure Reasons

        **Permission Required:** `kelvin.permission.failure_detection.read`.

        ``listFailureReasons``: ``GET`` ``/api/v4/failure-detection/reasons/list``

        Parameters
        ----------
        component_failure_class_name : :obj:`str`
            Filter failures by component failure class name
        part_failure_class_name : :obj:`str`
            Filter failures by part failure class name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/failure-detection/reasons/list",
            {},
            {
                "component_failure_class_name": component_failure_class_name,
                "part_failure_class_name": part_failure_class_name,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": FailureList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class FailureOverviewItem(DataModelBase):
    """
    FailureOverviewItem object.

    Parameters
    ----------
    asset_type_name: Optional[str]
    asset_type_title: Optional[str]
    entity_type_name: Optional[str]
    entity_type_title: Optional[str]
    failure_quotient: Optional[float]
    map_names: Optional[List[str]]
    name: Optional[str]
    statistics: Optional[Dict[str, int]]
    title: Optional[str]

    """

    asset_type_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.',
    )
    asset_type_title: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.',
    )
    entity_type_name: Optional[str] = Field(
        None,
        description="Unique identifier name of the entity type. This is the chosen name from a fixed list defined by Kelvin.",
    )
    entity_type_title: Optional[str] = Field(
        None,
        description="Display name of the entity type. This is the chosen display name (title) from a fixed list defined by Kelvin.",
    )
    failure_quotient: Optional[float] = Field(
        None,
        description='The current percentage failure time of this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> compared to the total failure time of all <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups" target="_blank">Kelvin Group</a>.',
    )
    map_names: Optional[List[str]] = Field(
        None,
        description="List of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> names where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> is linked.",
    )
    name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    statistics: Optional[Dict[str, int]] = Field(
        None,
        description="Sum of all active alarms per alarm severity of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and all children in its <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.</p> For alarm severity, 1=critial, 2=urgent, 3=advisory, 4=medium and 5=low.",
    )
    title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )

    @classmethod
    def list_failure_overview(
        cls,
        pagination_type: Optional[Literal["limits", "cursor", "stream"]] = None,
        page_size: Optional[int] = 1000,
        page: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        direction: Optional[Literal["asc", "desc"]] = None,
        sort_by: Optional[Sequence[str]] = None,
        data: Optional[Union[requests.FailureOverview, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[FailureOverviewItem], FailureOverviewPaginated]:
        """
        List Failure Overview

        Returns a dictionary with a data property containing an array of failure overview summaries for <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> objects that have failures recorded on the Kelvin Platform based on the filter requirements in the body parameters.

        This will summarize all failures on <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> of each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> and give the failure quotient per <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>.

        **Pagination Sortable Columns:** `name`, `title`, `asset_type_name`, `asset_type_title`, `device_type_name`, `device_type_title`, `failure_quotient`, `severity`, `total_sev1`, `total_sev2`, `total_sev3`, `total_sev4`, `total_sev5`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``listFailureOverview``: ``POST`` ``/api/v4/assets/failure-overview/list``

        Parameters
        ----------
        pagination_type : :obj:`Literal['limits', 'cursor', 'stream']`
            Method of handling pages in the returned data. There are three options
            available;</p> limits: This is used with the query parameters `page“
            to select which page of data to return. The start of the data returned
            will be calculated using the `page_size“ and `page` query parameters
            for the location to start and the query parameters `sort_by` and
            `direction` will determine the order of the data.</p> cursor: This is
            used with the query parameters `next` and `previous` which uses a
            string as the start or end location reference. The string to use is
            returned in the previous query json response in the keys `next_page`
            and `previous_page`.</p> stream: This will return all the data in one
            response. (limits, cursor, stream)
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> failure statistic objects to be returned. Page size can be
            between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistic objects.
        page : :obj:`int`
            Used only with query parameter `pagination_type` set as `limits`.</p>
            An integer for the wanted page of results. The start of the data
            returned will be calculated using the `page_size“ and `page` query
            parameters for the location to start and the query parameters
            `sort_by` and `direction` will determine the order of the data.
        next : :obj:`str`
            Used only with query parameter `pagination_type` set as `cursor`.</p>
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        previous : :obj:`str`
            Used only with query parameter `pagination_type` set as `cursor`.</p>
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        direction : :obj:`Literal['asc', 'desc']`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `asc` (ascending order) and
            `desc` (descending order).</p> The default is `asc` (ascending). (asc,
            desc)
        sort_by : :obj:`Sequence[str]`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics parameters. Only one parameter can be selected.</p> There
            are ten parameter options; `name`, `title`, `asset_type_name`,
            `asset_type_title`, `device_type_name`, `device_type_title`,
            `failure_quotient`, `total_sev1`, `total_sev2`, `total_sev3`,
            `total_sev4` and `total_sev5`.</p> The default is `name`
        data: requests.FailureOverview, optional
        **kwargs:
            Extra parameters for requests.FailureOverview
              - alarm_severities: list
              - asset_names: list
              - asset_type_names: list
              - map_names: list
              - parent_asset_name: str
              - search: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/failure-overview/list",
            {},
            {
                "pagination_type": pagination_type,
                "page_size": page_size,
                "page": page,
                "next": next,
                "previous": previous,
                "direction": direction,
                "sort_by": sort_by,
            },
            {},
            {},
            data,
            requests.FailureOverview,
            False,
            {
                "200": FailureOverviewPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/assets/failure-overview/list", "POST")
            if fetch and not _dry_run
            else result
        )


class FailureOverviewPaginated(PaginatorDataModel[FailureOverviewItem]):
    """
    FailureOverviewPaginated object.

    Parameters
    ----------
    data: Optional[List[FailureOverviewItem]]
    pagination: Optional[paginator.PaginationInfo]

    """

    data: Optional[List[FailureOverviewItem]] = Field(
        None,
        description="A dictionary which contains an array of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure statistic objects. The number of objects returned will depend on the query parameters `pagination_type`, `page` and `page_size`.</p> If a bookmark has been used, then the array will start or end based on the `next` or `previous` parameters.",
    )
    pagination: Optional[paginator.PaginationInfo] = None


class ICDField(DataModelBase):
    """
    ICDField object.

    Parameters
    ----------
    array: Optional[bool]
    description: Optional[str]
    name: Optional[str]
    type: Optional[str]

    """

    array: Optional[bool] = None
    description: Optional[str] = None
    name: Optional[str] = None
    type: Optional[str] = None


class ICDPayload(DataModelBase):
    """
    ICDPayload object.

    Parameters
    ----------
    class_name: Optional[str]
    description: Optional[str]
    fields: Optional[List[ICDField]]
    name: Optional[str]
    version: Optional[str]

    """

    class_name: Optional[str] = None
    description: Optional[str] = None
    fields: Optional[List[ICDField]] = None
    name: Optional[str] = None
    version: Optional[str] = None


class InstanceHealthStatus(DataModelBase):
    """
    InstanceHealthStatus object.

    Parameters
    ----------
    components: Optional[List[ComponentStatus]]
    status: Optional[bool]

    """

    components: Optional[List[ComponentStatus]] = None
    status: Optional[bool] = None

    @classmethod
    def get_instance_health_status(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> InstanceHealthStatus:
        """
        Get Instance Health Status

        **Permission Required:** `n/a`.

        ``getInstanceHealthStatus``: ``GET`` ``/api/v4/instance/status/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/instance/status/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"201": InstanceHealthStatus, "400": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class InstanceSettingItem(DataModelBase):
    """
    InstanceSettingItem object.

    Parameters
    ----------
    created: Optional[datetime]
    name: Optional[str]
    payload: Optional[Dict[str, Any]]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = None
    name: Optional[str] = Field(None, max_length=64)
    payload: Optional[Dict[str, Any]] = None
    updated: Optional[datetime] = None

    @classmethod
    def get_kelvin_acp_instance_setting(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> InstanceSettingItem:
        """
        Get Kelvin ACP Instance Setting

        **Permission Required:** `kelvin.permission.instance.read`.

        ``getKelvinACPInstanceSetting``: ``GET`` ``/api/v4/instance/settings/kelvin-acp/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/instance/settings/kelvin-acp/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": InstanceSettingItem, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_kelvin_acp_instance_setting(
        self_or_cls,
        data: Optional[Union[requests.KelvinACPInstanceSettingUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> InstanceSettingItem:
        """
        Update Kelvin ACP Instance Setting

        **Permission Required:** `kelvin.permission.instance.update`.

        ``updateKelvinACPInstanceSetting``: ``POST`` ``/api/v4/instance/settings/kelvin-acp/update``

        Parameters
        ----------
        data: requests.KelvinACPInstanceSettingUpdate, optional
        **kwargs:
            Extra parameters for requests.KelvinACPInstanceSettingUpdate
              - payload: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/instance/settings/kelvin-acp/update",
            {},
            {},
            {},
            {},
            data,
            requests.KelvinACPInstanceSettingUpdate,
            False,
            {
                "200": InstanceSettingItem,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_kelvin_carbon_emissions_instance_setting(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> CarbonEmissionsInstanceSettingItem:
        """
        Get Kelvin Carbon Emissions Instance Setting

        **Permission Required:** `kelvin.permission.instance.read`.

        ``getKelvinCarbonEmissionsInstanceSetting``: ``GET`` ``/api/v4/instance/settings/kelvin-carbon-emissions/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/instance/settings/kelvin-carbon-emissions/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": CarbonEmissionsInstanceSettingItem, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_kelvin_carbon_emissions_instance_setting(
        self_or_cls,
        reset: Optional[bool] = None,
        data: Optional[
            Union[requests.KelvinCarbonEmissionsInstanceSettingUpdate, Mapping[str, Any]]
        ] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> InstanceSettingItem:
        """
        Update Kelvin Carbon Emissions Instance Setting

        **Permission Required:** `kelvin.permission.instance.update`.

        ``updateKelvinCarbonEmissionsInstanceSetting``: ``POST`` ``/api/v4/instance/settings/kelvin-carbon-emissions/update``

        Parameters
        ----------
        reset : :obj:`bool`
            Reset settings to the defaults. Default: false
        data: requests.KelvinCarbonEmissionsInstanceSettingUpdate, optional
        **kwargs:
            Extra parameters for requests.KelvinCarbonEmissionsInstanceSettingUpdate
              - payload: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/instance/settings/kelvin-carbon-emissions/update",
            {},
            {"reset": reset},
            {},
            {},
            data,
            requests.KelvinCarbonEmissionsInstanceSettingUpdate,
            False,
            {
                "200": InstanceSettingItem,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_instance_settings(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[InstanceSettingItem], InstanceSettingListPaginated]:
        """
        List Instance Settings

        **Pagination Sortable Columns:** `instance_setting.name, instance_setting.created, instance_setting.updated`

        **Permission Required:** `kelvin.permission.instance.read`.

        ``listInstanceSettings``: ``GET`` ``/api/v4/instance/settings/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search Instance Setting by name
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/instance/settings/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": InstanceSettingListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/instance/settings/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def delete_instance_setting(
        cls, setting_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Instance Setting

        **Permission Required:** `kelvin.permission.instance.delete`.

        ``deleteInstanceSetting``: ``POST`` ``/api/v4/instance/settings/{setting_name}/delete``

        Parameters
        ----------
        setting_name : :obj:`str`, optional
            Setting Name

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/instance/settings/{setting_name}/delete",
            {"setting_name": setting_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_instance_setting(
        cls, setting_name: str, _dry_run: bool = False, _client: Any = None
    ) -> InstanceSettingItem:
        """
        Get Instance Setting

        **Permission Required:** `kelvin.permission.instance.read`.

        ``getInstanceSetting``: ``GET`` ``/api/v4/instance/settings/{setting_name}/get``

        Parameters
        ----------
        setting_name : :obj:`str`, optional
            Setting Name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/instance/settings/{setting_name}/get",
            {"setting_name": setting_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": InstanceSettingItem, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_instance_setting(
        self_or_cls,
        setting_name: str,
        data: Optional[Union[requests.InstanceSettingUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> InstanceSettingItem:
        """
        Update Instance Setting

        **Permission Required:** `kelvin.permission.instance.update`.

        ``updateInstanceSetting``: ``POST`` ``/api/v4/instance/settings/{setting_name}/update``

        Parameters
        ----------
        setting_name : :obj:`str`, optional
            Setting Name
        data: requests.InstanceSettingUpdate, optional
        **kwargs:
            Extra parameters for requests.InstanceSettingUpdate
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/instance/settings/{setting_name}/update",
            {"setting_name": setting_name},
            {},
            {},
            {},
            data,
            requests.InstanceSettingUpdate,
            False,
            {
                "200": InstanceSettingItem,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class InstanceSettingListPaginated(PaginatorDataModel[InstanceSettingItem]):
    """
    InstanceSettingListPaginated object.

    Parameters
    ----------
    data: Optional[List[InstanceSettingItem]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[InstanceSettingItem]] = None
    pagination: Optional[pagination.Pagination] = None


class IntegrationAwsRegion(DataModelBase):
    """
    IntegrationAwsRegion object.

    Parameters
    ----------
    created: Optional[datetime]
    name: Optional[str]
    title: Optional[str]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = None
    name: Optional[str] = None
    title: Optional[str] = None
    updated: Optional[datetime] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_aws_region(
        self_or_cls,
        data: Optional[Union[requests.IntegrationAwsRegionCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> IntegrationAwsRegion:
        """
        Create AWS Region

        **Permission Required:** `kelvin.permission.integration.create`.

        ``createAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/create``

        Parameters
        ----------
        data: requests.IntegrationAwsRegionCreate, optional
        **kwargs:
            Extra parameters for requests.IntegrationAwsRegionCreate
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/create",
            {},
            {},
            {},
            {},
            data,
            requests.IntegrationAwsRegionCreate,
            False,
            {"201": IntegrationAwsRegion, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_aws_regions(
        cls,
        names: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> IntegrationAwsRegionList:
        """
        List AWS Regions

        **Pagination Sortable Columns:** `aws_regions.name`, `aws_regions.title`, `aws_regions.created`, `aws_regions.updated`

        **Permission Required:** `kelvin.permission.integration.read`.

        ``listAWSRegions``: ``GET`` ``/api/v4/integrations/aws/regions/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter Regions by name
        search : :obj:`Sequence[str]`
            Search Regions by name or title
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/integrations/aws/regions/list",
            {},
            {
                "names": names,
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": IntegrationAwsRegionList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def delete_aws_region(
        self_or_cls, name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete AWS Region

        **Permission Required:** `kelvin.permission.integration.delete`.

        ``deleteAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/{name}/delete``

        Parameters
        ----------
        name : :obj:`str`, optional
            Region name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/{name}/delete",
            {"name": name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_aws_region(
        self_or_cls, name: str, _dry_run: bool = False, _client: Any = None
    ) -> IntegrationAwsRegion:
        """
        Get AWS Region

        **Permission Required:** `kelvin.permission.integration.read`.

        ``getAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/{name}/get``

        Parameters
        ----------
        name : :obj:`str`, optional
            Region name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/{name}/get",
            {"name": name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": IntegrationAwsRegion, "400": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_aws_region(
        self_or_cls,
        name: str,
        data: Optional[Union[requests.IntegrationAwsRegionUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> IntegrationAwsRegion:
        """
        Update AWS Region

        **Permission Required:** `kelvin.permission.integration.update`.

        ``updateAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/{name}/update``

        Parameters
        ----------
        name : :obj:`str`, optional
            Region name
        data: requests.IntegrationAwsRegionUpdate, optional
        **kwargs:
            Extra parameters for requests.IntegrationAwsRegionUpdate
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/{name}/update",
            {"name": name},
            {},
            {},
            {},
            data,
            requests.IntegrationAwsRegionUpdate,
            False,
            {
                "200": IntegrationAwsRegion,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class IntegrationAwsRegionList(PaginatorDataModel[IntegrationAwsRegion]):
    """
    IntegrationAwsRegionList object.

    Parameters
    ----------
    data: Optional[List[IntegrationAwsRegion]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[IntegrationAwsRegion]] = None
    pagination: Optional[pagination.Pagination] = None

    @classmethod
    def create_aws_region(
        cls,
        data: Optional[Union[requests.IntegrationAwsRegionCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> IntegrationAwsRegion:
        """
        Create AWS Region

        **Permission Required:** `kelvin.permission.integration.create`.

        ``createAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/create``

        Parameters
        ----------
        data: requests.IntegrationAwsRegionCreate, optional
        **kwargs:
            Extra parameters for requests.IntegrationAwsRegionCreate
              - name: str
              - title: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/create",
            {},
            {},
            {},
            {},
            data,
            requests.IntegrationAwsRegionCreate,
            False,
            {"201": IntegrationAwsRegion, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_aws_regions(
        cls,
        names: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> IntegrationAwsRegionList:
        """
        List AWS Regions

        **Pagination Sortable Columns:** `aws_regions.name`, `aws_regions.title`, `aws_regions.created`, `aws_regions.updated`

        **Permission Required:** `kelvin.permission.integration.read`.

        ``listAWSRegions``: ``GET`` ``/api/v4/integrations/aws/regions/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter Regions by name
        search : :obj:`Sequence[str]`
            Search Regions by name or title
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/integrations/aws/regions/list",
            {},
            {
                "names": names,
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": IntegrationAwsRegionList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def delete_aws_region(cls, name: str, _dry_run: bool = False, _client: Any = None) -> None:
        """
        Delete AWS Region

        **Permission Required:** `kelvin.permission.integration.delete`.

        ``deleteAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/{name}/delete``

        Parameters
        ----------
        name : :obj:`str`, optional
            Region name

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/{name}/delete",
            {"name": name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_aws_region(
        cls, name: str, _dry_run: bool = False, _client: Any = None
    ) -> IntegrationAwsRegion:
        """
        Get AWS Region

        **Permission Required:** `kelvin.permission.integration.read`.

        ``getAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/{name}/get``

        Parameters
        ----------
        name : :obj:`str`, optional
            Region name

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/{name}/get",
            {"name": name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": IntegrationAwsRegion, "400": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def update_aws_region(
        cls,
        name: str,
        data: Optional[Union[requests.IntegrationAwsRegionUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> IntegrationAwsRegion:
        """
        Update AWS Region

        **Permission Required:** `kelvin.permission.integration.update`.

        ``updateAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/{name}/update``

        Parameters
        ----------
        name : :obj:`str`, optional
            Region name
        data: requests.IntegrationAwsRegionUpdate, optional
        **kwargs:
            Extra parameters for requests.IntegrationAwsRegionUpdate
              - title: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/{name}/update",
            {"name": name},
            {},
            {},
            {},
            data,
            requests.IntegrationAwsRegionUpdate,
            False,
            {
                "200": IntegrationAwsRegion,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class IntegrationConfiguration(DataModelBase):
    """
    IntegrationConfiguration object.

    Parameters
    ----------
    aws_access_key_id: Optional[str]
    aws_region: Optional[str]
    polling_rate: Optional[int]

    """

    aws_access_key_id: Optional[str] = None
    aws_region: Optional[str] = None
    polling_rate: Optional[int] = None


class IntegrationStatus(DataModelBase):
    """
    IntegrationStatus object.

    Parameters
    ----------
    last_seen: Optional[datetime]
    message: Optional[str]
    state: Optional[str]
    warnings: Optional[List[str]]

    """

    last_seen: Optional[datetime] = None
    message: Optional[str] = None
    state: Optional[str] = None
    warnings: Optional[List[str]] = None


class Label(DataModelBase):
    """
    Label object.

    Parameters
    ----------
    created: Optional[datetime]
    metadata: Optional[Dict[str, Any]]
    name: Optional[str]
    title: Optional[str]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = Field(
        None,
        description='Time of creation of this Label in ISO 8601 UTC date/time format. Example; "2022-11-08T08:41:01.657916Z".',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="Custom dictionary keys/values returned for use by clients.</p> This Label Metadata object is created using the API endpoint `/datalabels/labels/<label name>/metadata/create` and is linked to the Label. So anytime the Label Metadata name is referenced in requests, the responses will also include the Label metadata.",
    )
    name: Optional[str] = Field(
        None,
        description="Unique identifier name for the Label.</p> This can only contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    title: Optional[str] = Field(None, description="Display name (title) of the Label.")
    updated: Optional[datetime] = Field(
        None,
        description='Time of modifying any variable of this Label in ISO 8601 UTC date/time format. Example; "2022-11-08T08:41:01.657916Z".',
    )

    @instance_classmethod
    @DataModelBase.translate()
    def create_label(
        self_or_cls,
        data: Optional[Union[requests.LabelCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Label:
        """
        Create Label

        Creates a label that can be used as a reference and filter in <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a>.

        Tip: When a create/update <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> API request is performed and the Label does not exist, this `Create Label` API request will be automatically performed.

        **Permission Required:** `kelvin.permission.data_label.create`.

        ``createLabel``: ``POST`` ``/api/v4/datalabels/labels/create``

        Parameters
        ----------
        data: requests.LabelCreate, optional
        **kwargs:
            Extra parameters for requests.LabelCreate
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/create",
            {},
            {},
            {},
            {},
            data,
            requests.LabelCreate,
            False,
            {"201": Label, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_label(
        cls,
        names: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        metadata: Optional[Sequence[str]] = None,
        metadata_filter: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[Label], LabelListPaginated]:
        """
        List Label

        Returns a dictionary with a data property containing a list of all Labels on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Pagination Sortable Columns:** `label.name`

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``listLabel``: ``GET`` ``/api/v4/datalabels/labels/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter Label on the parameter by its name. This is given as an array,
            for example `[extruder,tank]`.</p> The filter is done on the full name
            only according to unique identifier name rules (Must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space but not at the
            beginning or end).</p> For example a filter with `[extruder,tank]`
            will return Labels with the name `extruder` but not with the names
            `demo-ch-extruder-gear-setpoint` or `demo-og-gas-tank-level`.
        search : :obj:`Sequence[str]`
            Search and filter the Label list. Both the Display Name (title) and
            the Name will be included in the filter field criteria. This is given
            as an array, for example `[extruder,tank]`.</p> The search is case
            insensitive and will find partial matches as well. For example if a
            Label name or display name is `demo-og-centrifugal-pump-speed`, then a
            match will be made if the filter string is `demo` or `FUGaL`.
        metadata : :obj:`Sequence[str]`
            Inject Label Metadata into the response
        metadata_filter : :obj:`Sequence[str]`
            Array of metadata keys/value filter conditions. For <metadata_name>
            with the same name, the filter conditions will result in OR queries.
            For <metadata_name> with different names will result in AND queries.
            Example: [
            <metadata_name>.<payload_key_to_search>=<payload_value_to_search>,
            <metadata_name2>.<payload_key2_to_search>=<payload_value2_to_search> ]
        page_size : :obj:`int`
            Number of Label objects to be returned. Page size can be between 1 and
            1000 objects.</p> The default is 20 Label objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of Labels in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of Labels in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the Label parameters. Only one parameter
            can be selected.</p> There is only parameter option available which is
            also the default; `label.name`.
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/datalabels/labels/list",
            {},
            {
                "names": names,
                "search": search,
                "metadata": metadata,
                "metadata_filter": metadata_filter,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": LabelListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/datalabels/labels/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def create_label_metadata_bulk(
        cls,
        data: Optional[Union[requests.LabelMetadataBulkCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Create Label Metadata Bulk

        Bulk create option for create Label Metadata API which creates a custom JSON payload that can be attached to a Label. You can create multiple different types of metadata payloads for each Label.

        When performing a `get` or `list` API request on Label or <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> then you can also add a metadata parameter. The Label Metadata payload will then be embedded in the response.

        For listing Labels you can also perform filters on the Label Metadata payload to only return labels with Metadata Label payload parameters matching the filters.

        This Label Metadata does not affect the operations of Labels or <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> on the Kelvin Platform. Label Metadata is not available in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-manager-ui" target="_blank">Kelvin Manager UI</a>.

        **Permission Required:** `kelvin.permission.data_label.create`.

        ``createLabelMetadataBulk``: ``POST`` ``/api/v4/datalabels/labels/metadata/create``

        Parameters
        ----------
        data: requests.LabelMetadataBulkCreate, optional
        **kwargs:
            Extra parameters for requests.LabelMetadataBulkCreate

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/metadata/create",
            {},
            {},
            {},
            {},
            data,
            requests.LabelMetadataBulkCreate,
            False,
            {
                "201": None,
                "207": ErrorMessages,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def delete_label_metadata_bulk(
        cls,
        data: Optional[Union[requests.LabelMetadataBulkDelete, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Delete Label Metadata Bulk

        Bulk delete option for delete Label Metadata API which permanently deletes an existing Label Metadata object associated with a specific Label. This cannot be undone once the API request has been submitted.

        This will only delete the specific Label Metadata object linked to the Label. If there is a Label Metadata object with the same name and payload BUT associated with a different Label, this will not be deleted.

        **Permission Required:** `kelvin.permission.data_label.delete`.

        ``deleteLabelMetadataBulk``: ``POST`` ``/api/v4/datalabels/labels/metadata/delete``

        Parameters
        ----------
        data: requests.LabelMetadataBulkDelete, optional
        **kwargs:
            Extra parameters for requests.LabelMetadataBulkDelete

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/metadata/delete",
            {},
            {},
            {},
            {},
            data,
            requests.LabelMetadataBulkDelete,
            False,
            {
                "200": None,
                "207": ErrorMessages,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"label_name": "name"})
    def delete_label(
        self_or_cls, label_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Label

        Permanently delete an existing Label. This cannot be undone once the API request has been submitted.

        <span style="color: #ff0000;font-weight: bold;">WARNING</span> : If you delete a Label, all related <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> will also be permanently deleted !

        **Permission Required:** `kelvin.permission.data_label.delete`.

        ``deleteLabel``: ``POST`` ``/api/v4/datalabels/labels/{label_name}/delete``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/{label_name}/delete",
            {"label_name": label_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"label_name": "name"})
    def get_label(
        self_or_cls,
        label_name: str,
        metadata: Optional[Sequence[str]] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Label:
        """
        Get Label

        Retrieve the properties of a Label.

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``getLabel``: ``GET`` ``/api/v4/datalabels/labels/{label_name}/get``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        metadata : :obj:`Sequence[str]`
            Inject Label Metadata into the response

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/datalabels/labels/{label_name}/get",
            {"label_name": label_name},
            {"metadata": metadata},
            {},
            {},
            None,
            None,
            False,
            {"200": Label, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"label_name": "name"})
    def create_label_metadata(
        self_or_cls,
        label_name: str,
        data: Optional[Union[requests.LabelMetadataCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> LabelMetadata:
        """
        Create Label Metadata

        Creates a custom JSON payload that can be attached to a Label. You can create multiple different types of metadata payloads for each Label.

        When performing a `get` or `list` API request on Label or <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> then you can also add this metadata name. This Label Metadata payload will then be embedded in the response.

        For listing Labels you can also perform filters on the Label Metadata payload to only return labels with Metadata Label payload parameters matching the filters.

        This Label Metadata does not affect the operations of Labels or <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> on the Kelvin Platform. Label Metadata is not available in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-manager-ui" target="_blank">Kelvin Manager UI</a>.

        **Permission Required:** `kelvin.permission.data_label.create`.

        ``createLabelMetadata``: ``POST`` ``/api/v4/datalabels/labels/{label_name}/metadata/create``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        data: requests.LabelMetadataCreate, optional
        **kwargs:
            Extra parameters for requests.LabelMetadataCreate
              - name: str
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/{label_name}/metadata/create",
            {"label_name": label_name},
            {},
            {},
            {},
            data,
            requests.LabelMetadataCreate,
            False,
            {
                "201": LabelMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"label_name": "name"})
    def list_label_metadata(
        self_or_cls,
        label_name: str,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[LabelMetadata], LabelMetadataListPaginated]:
        """
        List Label Metadata

        Returns a filtered list of Label Metadata objects linked with a Label.

        The path parameter is required but the query parameters are optional. If no query parameters are given with the API request, then the defaults will be used to return the Label Metadata list. The defaults are the first 20 Label Metadata linked to the Label returned in alphabetical order by the unique identifier name.

        **Pagination Sortable Columns:** `label_metadata.name`, `label_metadata.label_name`

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``listLabelMetadata``: ``GET`` ``/api/v4/datalabels/labels/{label_name}/metadata/list``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        search : :obj:`Sequence[str]`
            Search and filter the Label Metadata objects list. Only the Name will
            be included in the search field criteria. This is given as an array,
            for example `[pump,fan]`.</p> The search is case insensitive and will
            find partial matches as well. For example if a Label Metadata name is
            centrifugal_pump, then a match will be made if the search string is
            `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of Label Metadata objects to be returned. Page size can be
            between 1 and 1000 objects. The default is 20 Label Metadata objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of Label Metadata
            objects in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of Label Metadata
            objects in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the Label Metadata parameters. Only one
            parameter can be selected.</p> There are two parameter options;
            `label_metadata.name`, `label_metadata.label_name`. The default is
            `label_metadata.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order). The default is `true` (ascending).

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/datalabels/labels/{label_name}/metadata/list",
            {"label_name": label_name},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": LabelMetadataListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/datalabels/labels/{label_name}/metadata/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"label_name": "name"})
    def delete_label_metadata(
        self_or_cls,
        label_name: str,
        label_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> None:
        """
        Delete Label Metadata

        Permanently delete an existing Label Metadata object associated with a specific Label. This cannot be undone once the API request has been submitted.

        This will only delete the specific Label Metadata object linked to the Label. If there is a Label Metadata object with the same name and payload BUT associated with a different Label, this will not be deleted.

        **Permission Required:** `kelvin.permission.data_label.delete`.

        ``deleteLabelMetadata``: ``POST`` ``/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/delete``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        label_metadata_name : :obj:`str`, optional
            Label Metadata unique identifier name to retrieve.</p> This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/delete",
            {"label_name": label_name, "label_metadata_name": label_metadata_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"label_name": "name"})
    def get_label_metadata(
        self_or_cls,
        label_name: str,
        label_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> LabelMetadata:
        """
        Get Label Metadata

        Retrieves the Label Metadata object associated with a Label.

        This will only retrieve the specific Label Metadata object linked to the Label. If there is a Label Metadata object with the same name and payload BUT associated with a different Label, this will not be retrieved.

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``getLabelMetadata``: ``GET`` ``/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/get``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        label_metadata_name : :obj:`str`, optional
            Label Metadata unique identifier name to retrieve.</p> This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/get",
            {"label_name": label_name, "label_metadata_name": label_metadata_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": LabelMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"label_name": "name"})
    def update_label_metadata(
        self_or_cls,
        label_name: str,
        label_metadata_name: str,
        data: Optional[Union[requests.LabelMetadataUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> LabelMetadata:
        """
        Update Label Metadata

        Updates the payload of an existing Label Metadata object associated with a Label.

        The payload will be completely replaced by the new payload. Any existing key/value pairs that you want to keep must be included in your new payload that is sent with the API request.

        This will only update the payload of the specific Label Metadata object linked to the Label. If there is a Label Metadata object with the same name and payload BUT associated with a different Label, this will not be updated.

        **Permission Required:** `kelvin.permission.data_label.update`.

        ``updateLabelMetadata``: ``POST`` ``/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/update``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        label_metadata_name : :obj:`str`, optional
            Label Metadata unique identifier name to retrieve.</p> This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.
        data: requests.LabelMetadataUpdate, optional
        **kwargs:
            Extra parameters for requests.LabelMetadataUpdate
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/update",
            {"label_name": label_name, "label_metadata_name": label_metadata_name},
            {},
            {},
            {},
            data,
            requests.LabelMetadataUpdate,
            False,
            {
                "200": LabelMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"label_name": "name"})
    def update_label(
        self_or_cls,
        label_name: str,
        data: Optional[Union[requests.LabelUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Label:
        """
        Update Label

        Update an existing Label with any new values passed through the body parameters.

        **Permission Required:** `kelvin.permission.data_label.update`.

        ``updateLabel``: ``POST`` ``/api/v4/datalabels/labels/{label_name}/update``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        data: requests.LabelUpdate, optional
        **kwargs:
            Extra parameters for requests.LabelUpdate
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/{label_name}/update",
            {"label_name": label_name},
            {},
            {},
            {},
            data,
            requests.LabelUpdate,
            False,
            {
                "200": Label,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class LabelListPaginated(PaginatorDataModel[Label]):
    """
    LabelListPaginated object.

    Parameters
    ----------
    data: Optional[List[Label]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[Label]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` Labels. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class LabelMetadata(DataModelBase):
    """
    LabelMetadata object.

    Parameters
    ----------
    created: Optional[datetime]
    label_name: Optional[str]
    name: Optional[str]
    payload: Optional[Dict[str, Any]]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = Field(
        None,
        description="Time of creation of this <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )
    label_name: Optional[str] = Field(
        None,
        description="This is the name from the Label variable which can be created with the Kelvin API `/datalabels/labels/create`.</p> If the Label name does not exist, it will be automatically created.",
    )
    name: Optional[str] = Field(
        None,
        description="Unique identifier name for the Label Metadata.</p> This can only contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
        max_length=64,
    )
    payload: Optional[Dict[str, Any]] = Field(
        None,
        description='Custom JSON object defined by you.</p> This can be any valid JSON structure. For example this is valid</p> <blockquote>{</br>&nbsp;&nbsp;"key1": "A string here",</br>&nbsp;&nbsp;"key2": 88,</br>&nbsp;&nbsp;"key3": {</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"subkey1": "Another String",</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"subkey2": true,</br>&nbsp;&nbsp;&nbsp;&nbsp;}</br>}</blockquote>',
    )
    updated: Optional[datetime] = Field(
        None,
        description="Time of modifying any variable of this <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )

    @instance_classmethod
    @DataModelBase.translate()
    def create_label_metadata(
        self_or_cls,
        label_name: str,
        data: Optional[Union[requests.LabelMetadataCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> LabelMetadata:
        """
        Create Label Metadata

        Creates a custom JSON payload that can be attached to a Label. You can create multiple different types of metadata payloads for each Label.

        When performing a `get` or `list` API request on Label or <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> then you can also add this metadata name. This Label Metadata payload will then be embedded in the response.

        For listing Labels you can also perform filters on the Label Metadata payload to only return labels with Metadata Label payload parameters matching the filters.

        This Label Metadata does not affect the operations of Labels or <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> on the Kelvin Platform. Label Metadata is not available in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-manager-ui" target="_blank">Kelvin Manager UI</a>.

        **Permission Required:** `kelvin.permission.data_label.create`.

        ``createLabelMetadata``: ``POST`` ``/api/v4/datalabels/labels/{label_name}/metadata/create``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        data: requests.LabelMetadataCreate, optional
        **kwargs:
            Extra parameters for requests.LabelMetadataCreate
              - name: str
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/{label_name}/metadata/create",
            {"label_name": label_name},
            {},
            {},
            {},
            data,
            requests.LabelMetadataCreate,
            False,
            {
                "201": LabelMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_label_metadata(
        cls,
        label_name: str,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[LabelMetadata], LabelMetadataListPaginated]:
        """
        List Label Metadata

        Returns a filtered list of Label Metadata objects linked with a Label.

        The path parameter is required but the query parameters are optional. If no query parameters are given with the API request, then the defaults will be used to return the Label Metadata list. The defaults are the first 20 Label Metadata linked to the Label returned in alphabetical order by the unique identifier name.

        **Pagination Sortable Columns:** `label_metadata.name`, `label_metadata.label_name`

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``listLabelMetadata``: ``GET`` ``/api/v4/datalabels/labels/{label_name}/metadata/list``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        search : :obj:`Sequence[str]`
            Search and filter the Label Metadata objects list. Only the Name will
            be included in the search field criteria. This is given as an array,
            for example `[pump,fan]`.</p> The search is case insensitive and will
            find partial matches as well. For example if a Label Metadata name is
            centrifugal_pump, then a match will be made if the search string is
            `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of Label Metadata objects to be returned. Page size can be
            between 1 and 1000 objects. The default is 20 Label Metadata objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of Label Metadata
            objects in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of Label Metadata
            objects in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the Label Metadata parameters. Only one
            parameter can be selected.</p> There are two parameter options;
            `label_metadata.name`, `label_metadata.label_name`. The default is
            `label_metadata.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order). The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/datalabels/labels/{label_name}/metadata/list",
            {"label_name": label_name},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": LabelMetadataListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/datalabels/labels/{label_name}/metadata/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"label_metadata_name": "name"})
    def delete_label_metadata(
        self_or_cls,
        label_name: str,
        label_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> None:
        """
        Delete Label Metadata

        Permanently delete an existing Label Metadata object associated with a specific Label. This cannot be undone once the API request has been submitted.

        This will only delete the specific Label Metadata object linked to the Label. If there is a Label Metadata object with the same name and payload BUT associated with a different Label, this will not be deleted.

        **Permission Required:** `kelvin.permission.data_label.delete`.

        ``deleteLabelMetadata``: ``POST`` ``/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/delete``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        label_metadata_name : :obj:`str`, optional
            Label Metadata unique identifier name to retrieve.</p> This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/delete",
            {"label_name": label_name, "label_metadata_name": label_metadata_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"label_metadata_name": "name"})
    def get_label_metadata(
        self_or_cls,
        label_name: str,
        label_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> LabelMetadata:
        """
        Get Label Metadata

        Retrieves the Label Metadata object associated with a Label.

        This will only retrieve the specific Label Metadata object linked to the Label. If there is a Label Metadata object with the same name and payload BUT associated with a different Label, this will not be retrieved.

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``getLabelMetadata``: ``GET`` ``/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/get``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        label_metadata_name : :obj:`str`, optional
            Label Metadata unique identifier name to retrieve.</p> This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/get",
            {"label_name": label_name, "label_metadata_name": label_metadata_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": LabelMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"label_metadata_name": "name"})
    def update_label_metadata(
        self_or_cls,
        label_name: str,
        label_metadata_name: str,
        data: Optional[Union[requests.LabelMetadataUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> LabelMetadata:
        """
        Update Label Metadata

        Updates the payload of an existing Label Metadata object associated with a Label.

        The payload will be completely replaced by the new payload. Any existing key/value pairs that you want to keep must be included in your new payload that is sent with the API request.

        This will only update the payload of the specific Label Metadata object linked to the Label. If there is a Label Metadata object with the same name and payload BUT associated with a different Label, this will not be updated.

        **Permission Required:** `kelvin.permission.data_label.update`.

        ``updateLabelMetadata``: ``POST`` ``/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/update``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        label_metadata_name : :obj:`str`, optional
            Label Metadata unique identifier name to retrieve.</p> This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.
        data: requests.LabelMetadataUpdate, optional
        **kwargs:
            Extra parameters for requests.LabelMetadataUpdate
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/update",
            {"label_name": label_name, "label_metadata_name": label_metadata_name},
            {},
            {},
            {},
            data,
            requests.LabelMetadataUpdate,
            False,
            {
                "200": LabelMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class LabelMetadataListPaginated(PaginatorDataModel[LabelMetadata]):
    """
    LabelMetadataListPaginated object.

    Parameters
    ----------
    data: Optional[List[LabelMetadata]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[LabelMetadata]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> Metadata. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class LoopConfig(DataModelBase):
    """
    LoopConfig object.

    Parameters
    ----------
    every: Optional[int]

    """

    every: Optional[int] = None


class MQTTTopicItem(DataModelBase):
    """
    MQTTTopicItem object.

    Parameters
    ----------
    created: Optional[datetime]
    name: Optional[str]
    payload: Optional[str]
    title: Optional[str]
    topic: Optional[str]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = Field(
        None,
        description='Time of creation of this MQTT Topic in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )
    name: Optional[str] = Field(
        None,
        description="Unique identifier name for the MQTT Topic.</p> This contains only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    payload: Optional[str] = Field(
        None,
        description='The expected MQTT payload structure coming from the MQTT broker. e.g. "Topic:\\nRaw / <country> / <commodity> / <site> / <area> / <device> / <tagName>\\n\\nPayload:\\n{\\n  \\"v\\": \\"695\\",\\n  \\"t\\": 1628095260089,\\n  \\"q\\": 1\\n}\\n\\nField Description:\\nV is a string but could be a bool or a number.\\nT is timestamp in epoch (ms)\\nQ is quality, 1 is good, 0 is bad"',
    )
    title: Optional[str] = Field(
        None,
        description="Display name (title) for the MQTT Topic. This is the friendly name displayed.</p> It can use any character, numeric, space and special character in this parameter.",
    )
    topic: Optional[str] = Field(
        None,
        description='The expected structure of the MQTT Topics coming from the MQTT broker. e.g. "Raw / <country> / <commodity> / <site> / <area> / <device> / <tagName>"',
    )
    updated: Optional[datetime] = Field(
        None,
        description='Time of modifying any variable of this MQTT Topic in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )


class MQTTTopicList(DataModelBase):
    """
    MQTTTopicList object.

    Parameters
    ----------
    data: Optional[List[MQTTTopicItem]]

    """

    data: Optional[List[MQTTTopicItem]] = Field(
        None, description="A dictionary which contains an array of MQTT Topics."
    )

    @classmethod
    def list_mqtt_topics(
        cls,
        names: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> MQTTTopicList:
        """
        List MQTT Topics

        Returns a dictionary with a data property containing a list of the MQTT topic payload options available on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        The MQTT topic payload definitions defines how <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridges</a> which are using the `mqtt` protocol will interpret incoming messages on a topic.

        **Sortable Columns:** `bridge_mqtt_topic.name`, `bridge_mqtt_topic.title`,
        `bridge_mqtt_topic.topic`, `bridge_mqtt_topic.created`, `bridge_mqtt_topic.updated`

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``listMQTTTopics``: ``GET`` ``/api/v4/bridges/protocols/mqtt/configuration/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter on the MQTT Topics by its name.</p> The filter is done on the
            full name only according to unique identifier name rules (Must contain
            only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space but
            not at the beginning or end).</p> For example a filter with `topic-
            one` will return MQTT topics with the name `topic-one` but not with
            the names `topic-one-extended` or `topic`.
        search : :obj:`Sequence[str]`
            Search and filter the MQTT Topic list. The Display Name, the Name and
            the Topic will be included in the search field criteria. This is given
            as an array, for example `[one,two]`.</p> The search is case
            insensitive and will find partial matches as well. For example if a
            MQTT TOpic name, display name or topic is `topic-one`, then a match
            will be made if the search string is `one` or `oPic`.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> parameters.
            Only one parameter can be selected.</p> There are five parameter
            options; `bridge_mqtt_topic.name`, `bridge_mqtt_topic.title`,
            `bridge_mqtt_topic.topic`, `bridge_mqtt_topic.created`,
            `bridge_mqtt_topic.updated`.</p> The default is
            `bridge_mqtt_topic.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/protocols/mqtt/configuration/list",
            {},
            {"names": names, "search": search, "sort_by": sort_by, "sort_asc": sort_asc},
            {},
            {},
            None,
            None,
            False,
            {"200": MQTTTopicList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class MapFailureDetection(DataModelBase):
    """
    MapFailureDetection object.

    Parameters
    ----------
    failure_quotient: Optional[float]

    """

    failure_quotient: Optional[float] = Field(
        None,
        description="An automatically calculated value of the percentage of failures for this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> compared with all the failures across the organization.",
    )


class MapItem(DataModelBase):
    """
    MapItem object.

    Parameters
    ----------
    asset_name: Optional[str]
    end_date: Optional[datetime]
    failure_detection: Optional[MapFailureDetection]
    id: Optional[str]
    mode: Optional[str]
    name: Optional[str]
    start_date: Optional[datetime]
    title: Optional[str]

    """

    asset_name: Optional[str] = Field(
        None,
        description="Name of the parent <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.</p> This <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> must be a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> with a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> `site`.",
    )
    end_date: Optional[datetime] = Field(
        None,
        description="Date when this version of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> version was superseded with a newer version.</p> This will be shown in ISO 8601 format. e.g \"2023-02-27T10:20:31.194Z\".</p> This will not be return if the requested version is the current (latest) version.",
    )
    failure_detection: Optional[MapFailureDetection] = None
    id: Optional[str] = Field(
        None,
        description="Unique identifier id for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> request.",
    )
    mode: Optional[str] = Field(
        None,
        description="The mode of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.</p> There are two options available; `simulation` and `production`.</p> For production mode, all entities must be linked to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> that exists on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.</p> For simulation mode, entities do not need to be linked to any existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>.",
    )
    name: Optional[str] = Field(
        None,
        description="Unique identifier name for this new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process</a>.</p> This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    start_date: Optional[datetime] = Field(
        None,
        description="Date when this version of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> was created.</p> This will be shown in ISO 8601 format. e.g \"2023-02-27T10:20:31.194Z\".",
    )
    title: Optional[str] = Field(
        None,
        description="Display name (title) for this new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>. This is a friendly name displayed in lists and in any references.</p> You can use any character, numeric, space and special character in this parameter.",
    )

    @instance_classmethod
    @DataModelBase.translate()
    def create_map(
        self_or_cls,
        data: Optional[Union[requests.MapCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> MapModel:
        """
        Create a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> in <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview' target='_blank'>Kelvin Maps</a>.

        **Permission Required:** `kelvin.permission.maps.create`.

        ``createMap``: ``POST`` ``/api/v4/maps/create``

        Parameters
        ----------
        data: requests.MapCreate, optional
        **kwargs:
            Extra parameters for requests.MapCreate
              - asset_name: str
              - entities: list
              - mode: str
              - name: str
              - relationships: list
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/maps/create",
            {},
            {},
            {},
            {},
            data,
            requests.MapCreate,
            False,
            {"201": MapModel, "400": errors.ErrorMessage, "412": errors.ErrorMessage},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_maps(
        cls,
        entity: Optional[str] = None,
        timestamp: Optional[str] = None,
        mode: Optional[str] = None,
        asset_name: Optional[str] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[MapItem], MapListPaginated]:
        """
        Returns a dictionary with a data property containing a filtered array of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Maps</a> objects on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Pagination Sortable Columns:** `map.name`, `map.title`, `start_date`, `mode`, `map.asset_name`

        **Permission Required:** `kelvin.permission.maps.read`.

        ``listMaps``: ``GET`` ``/api/v4/maps/list``

        Parameters
        ----------
        entity : :obj:`str`
            Filter on the entity name in the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a>.
        timestamp : :obj:`str`
            Timestamp to search for a specific <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> version (supports RFC3339 and Unix timestamps with nanosecond
            precision).</p> If no timestamp is given in the query or body
            parameters, then the current time will be selected which will look at
            the most recent version of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a>.
        mode : :obj:`str`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-maps/kelvin-maps-overview/#processes'
            target='_blank'>Kelvin Process Maps</a> based on the mode key.</p>
            There are two parameter options; `production` and `simulation`.
        asset_name : :obj:`str`
            Filter on the name of the parent <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> for
            the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a>.</p> This <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin
            Asset</a> must be a <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-groups'
            target='_blank'>Kelvin Asset Group</a> with a <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> `site`.</p> This filter will not search for <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset' target='_blank'>Kelvin Assets</a> that
            are located in the entities in <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a>.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-maps/kelvin-maps-overview/#processes'
            target='_blank'>Kelvin Process Map</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> parameters. Only one parameter can be selected.</p> There are
            five parameter options; `map.name`, `map.title`, `map.asset_name`,
            `start_date` and `mode`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/maps/list",
            {},
            {
                "entity": entity,
                "timestamp": timestamp,
                "mode": mode,
                "asset_name": asset_name,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {
                "200": MapListPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/maps/list", "GET") if fetch and not _dry_run else result

    @classmethod
    def get_map_oee(
        cls,
        timestamp: Optional[str] = None,
        data: Optional[Union[requests.MapOEEGet, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[MapOEE]:
        """
        Get OEE data for the selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>. The shift information returned will be the data that was active for the requested timestamp.

        **Permission Required:** `kelvin.permission.maps.read`.

        ``getMapOEE``: ``POST`` ``/api/v4/maps/oee/get``

        Parameters
        ----------
        timestamp : :obj:`str`
            Timestamp to search for specific OEE data values (supports RFC3339 and
            Unix timestamps with nanosecond precision).</p> Example;
            '2022-07-08T08:41:01.657916Z'.
        data: requests.MapOEEGet, optional
        **kwargs:
            Extra parameters for requests.MapOEEGet
              - map_names: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/maps/oee/get",
            {},
            {"timestamp": timestamp},
            {},
            {},
            data,
            requests.MapOEEGet,
            False,
            {"200": List[MapOEE], "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_map_shift(
        cls,
        timestamp: Optional[str] = None,
        data: Optional[Union[requests.MapShiftGet, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[MapShift]:
        """
        Get Shift data for the selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>. The shift information returned will be the data that was active for the requested timestamp.

        **Permission Required:** `kelvin.permission.maps.read`.

        ``getMapShift``: ``POST`` ``/api/v4/maps/shift/get``

        Parameters
        ----------
        timestamp : :obj:`str`
            Timestamp to search for a specific shift (supports RFC3339 and Unix
            timestamps with nanosecond precision).</p> Example;
            '2022-07-08T08:41:01.657916Z'.
        data: requests.MapShiftGet, optional
        **kwargs:
            Extra parameters for requests.MapShiftGet
              - map_names: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/maps/shift/get",
            {},
            {"timestamp": timestamp},
            {},
            {},
            data,
            requests.MapShiftGet,
            False,
            {
                "200": List[MapShift],
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_symbol(
        self_or_cls,
        data: Optional[Union[requests.SymbolCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Symbol:
        """
        Create a new Symbol for the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> library.</p> This will be available for use in all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Maps</a>.

        **Permission Required:** `kelvin.permission.maps.create`.

        ``createSymbol``: ``POST`` ``/api/v4/maps/symbols/create``

        Parameters
        ----------
        data: requests.SymbolCreate, optional
        **kwargs:
            Extra parameters for requests.SymbolCreate
              - name: str
              - payload: str
              - symbol_type: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/maps/symbols/create",
            {},
            {},
            {},
            {},
            data,
            requests.SymbolCreate,
            False,
            {"201": Symbol, "400": errors.ErrorMessage, "401": errors.ErrorMessage},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_symbols(
        cls,
        search: Optional[Sequence[str]] = None,
        symbol_types: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[Symbol], SymbolsListPaginated]:
        """
        Returns a dictionary with a data property containing a filtered array of all Symbol objects on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Pagination Sortable Columns:** `symbol.name`, `symbol.title`, `symbol.symbol_type`

        **Permission Required:** `kelvin.permission.maps.read`.

        ``listSymbols``: ``GET`` ``/api/v4/maps/symbols/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> list. Both
            the Display Name (title) and the Name will be included in the search
            field criteria. This is given as an array, for example
            `[pump,fan]`.</p> The search is case insensitive and will find partial
            matches as well. For example if a <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> name or
            display name is `centrifugal_pump`, then a match will be made if the
            search string is `pum` or `FUGaL`.
        symbol_types : :obj:`Sequence[str]`
            Filter on the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> parameter
            `symbol_type`. This is given as an array, for example
            `[pump,fan]`.</p> The filter is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end).</p> For example a search with `[pump,fan]` will return
            Symbols with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        page_size : :obj:`int`
            Number of <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> objects to
            be returned. Page size can be between 1 and 1000 objects.</p> The
            default is 20 <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbols</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbols</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a>
            parameters. Only one parameter can be selected.</p> There are three
            parameter options; `symbol.name`, `symbol.title` and
            `symbol.symbol_type`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/maps/symbols/list",
            {},
            {
                "search": search,
                "symbol_types": symbol_types,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {
                "200": SymbolsListPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/maps/symbols/list", "GET") if fetch and not _dry_run else result
        )

    @classmethod
    def delete_symbol(cls, symbol_name: str, _dry_run: bool = False, _client: Any = None) -> None:
        """
        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a>. This cannot be undone once the API request has been submitted. </p> Be careful as there will be no warnings if the image is in use in any entity. Any deleted <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbols</a> in use will not cause any errors to <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> overviews and the affected entities will have a blank space where the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> should be displayed.

        **Permission Required:** `kelvin.permission.maps.delete`.

        ``deleteSymbol``: ``POST`` ``/api/v4/maps/symbols/{symbol_name}/delete``

        Parameters
        ----------
        symbol_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a>. This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/maps/symbols/{symbol_name}/delete",
            {"symbol_name": symbol_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_symbol(
        self_or_cls,
        symbol_name: str,
        data: Optional[Union[requests.SymbolUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Symbol:
        """
        Update the information or image of an existing Symbol for the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> library.</p> This will be available for use in all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Maps</a>.

        **Permission Required:** `kelvin.permission.maps.update`.

        ``updateSymbol``: ``POST`` ``/api/v4/maps/symbols/{symbol_name}/update``

        Parameters
        ----------
        symbol_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a>. This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.
        data: requests.SymbolUpdate, optional
        **kwargs:
            Extra parameters for requests.SymbolUpdate
              - payload: str
              - symbol_type: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/maps/symbols/{symbol_name}/update",
            {"symbol_name": symbol_name},
            {},
            {},
            {},
            data,
            requests.SymbolUpdate,
            False,
            {
                "200": Symbol,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def delete_map(cls, map_name: str, _dry_run: bool = False, _client: Any = None) -> None:
        """
        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>. This cannot be undone once the API request has been submitted. </p>This will also delete all version of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.

        **Permission Required:** `kelvin.permission.maps.delete`.

        ``deleteMap``: ``POST`` ``/api/v4/maps/{map_name}/delete``

        Parameters
        ----------
        map_name : :obj:`str`, optional
            Unique identifier name of the wanted <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a>.</p> This must contain only lowercase alphanumeric characters.
            The `.`, `_` and `-` characters are also allowed to separate words
            instead of a space BUT can not be at the beginning or end of the name.

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/maps/{map_name}/delete",
            {"map_name": map_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_map(
        cls,
        map_name: str,
        timestamp: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> MapModel:
        """
        Retrieve the properties of a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> and all related entities and relationships associated with the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.

        **Permission Required:** `kelvin.permission.maps.read`.

        ``getMap``: ``GET`` ``/api/v4/maps/{map_name}/get``

        Parameters
        ----------
        map_name : :obj:`str`, optional
            Unique identifier name of the wanted <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a>.</p> This must contain only lowercase alphanumeric characters.
            The `.`, `_` and `-` characters are also allowed to separate words
            instead of a space BUT can not be at the beginning or end of the name.
        timestamp : :obj:`str`
            Timestamp to search for a specific <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> version (supports RFC3339 and Unix timestamps with nanosecond
            precision).</p> If no timestamp is given in the query or body
            parameters, then the current time will be selected which will look at
            the most recent version of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a>.

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/maps/{map_name}/get",
            {"map_name": map_name},
            {"timestamp": timestamp},
            {},
            {},
            None,
            None,
            False,
            {
                "200": MapModel,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def create_map_oee(
        cls,
        map_name: str,
        data: Optional[Union[requests.MapOEECreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> MapOEE:
        """
        Create new OEE data for the selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.

        When new OEE data is created, the current OEE data will be timestamped with an end_date which is the same as the start_date for the new OEE data. This timestamp is automatically generated from the current time when the API request is submitted.

        **Permission Required:** `kelvin.permission.maps.create`.

        ``createMapOEE``: ``POST`` ``/api/v4/maps/{map_name}/oee/create``

        Parameters
        ----------
        map_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a> to save the data to.</p> This must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space BUT can not be at the
            beginning or end of the name.
        data: requests.MapOEECreate, optional
        **kwargs:
            Extra parameters for requests.MapOEECreate
              - assets_oee: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/maps/{map_name}/oee/create",
            {"map_name": map_name},
            {},
            {},
            {},
            data,
            requests.MapOEECreate,
            False,
            {"200": MapOEE, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def create_map_shift(
        cls,
        map_name: str,
        data: Optional[Union[requests.MapShiftCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> MapShift:
        """
        Create a new Shift for the selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.

        When a new Shift is created, the current Shift will be timestamped with an end_date which is the same as the start_date for the new shift. This timestamp is automatically generated from the current time when the API request is submitted.

        **Permission Required:** `kelvin.permission.maps.create`.

        ``createMapShift``: ``POST`` ``/api/v4/maps/{map_name}/shift/create``

        Parameters
        ----------
        map_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a> to save the data to.</p> This must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space BUT can not be at the
            beginning or end of the name.
        data: requests.MapShiftCreate, optional
        **kwargs:
            Extra parameters for requests.MapShiftCreate
              - production_info: str
              - shift_info: str
              - team_info: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/maps/{map_name}/shift/create",
            {"map_name": map_name},
            {},
            {},
            {},
            data,
            requests.MapShiftCreate,
            False,
            {"200": MapShift, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_map(
        self_or_cls,
        map_name: str,
        data: Optional[Union[requests.MapUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> MapModel:
        """
        Update the information and process flows in a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> in <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview' target='_blank'>Kelvin Maps</a>.

        **Permission Required:** `kelvin.permission.maps.update`.

        ``updateMap``: ``POST`` ``/api/v4/maps/{map_name}/update``

        Parameters
        ----------
        map_name : :obj:`str`, optional
            Map name
        data: requests.MapUpdate, optional
        **kwargs:
            Extra parameters for requests.MapUpdate
              - asset_name: str
              - entities: list
              - mode: str
              - relationships: list
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/maps/{map_name}/update",
            {"map_name": map_name},
            {},
            {},
            {},
            data,
            requests.MapUpdate,
            False,
            {
                "200": MapModel,
                "400": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_versions(
        cls,
        map_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[MapVersionItem], MapVersionListPaginated]:
        """
        List all the versions that have been saved for a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.

        This will include some limited data such as the mode and time when the version was active as the latest version.

        The current (latest) <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> version will not have an `end_date` key.

        **Pagination Sortable Columns:** `start_date`

        **Permission Required:** `kelvin.permission.maps.read`.

        ``listVersions``: ``GET`` ``/api/v4/maps/{map_name}/versions/list``

        Parameters
        ----------
        map_name : :obj:`str`, optional
            Unique identifier name of the wanted <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a>.</p> This must contain only lowercase alphanumeric characters.
            The `.`, `_` and `-` characters are also allowed to separate words
            instead of a space BUT can not be at the beginning or end of the name.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-maps/kelvin-maps-overview/#processes'
            target='_blank'>Kelvin Process Map</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> parameters. Only one parameter can be selected.</p> There is
            only one option; `start_date`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/maps/{map_name}/versions/list",
            {"map_name": map_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {
                "200": MapVersionListPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/maps/{map_name}/versions/list", "GET")
            if fetch and not _dry_run
            else result
        )


class MapListPaginated(PaginatorDataModel[MapItem]):
    """
    MapListPaginated object.

    Parameters
    ----------
    data: Optional[List[MapItem]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[MapItem]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Maps</a>. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class MapRelationship(DataModelBase):
    """
    MapRelationship object.

    Parameters
    ----------
    source: Optional[str]
    target: Optional[str]
    type: Optional[str]
    visualization: Optional[Dict[str, Any]]

    """

    source: Optional[str] = Field(
        None,
        description="Name of the source entity which send data.</p> This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    target: Optional[str] = Field(
        None,
        description="Name of the target entity which receives data.</p> This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    type: Optional[str] = Field(
        None,
        description="Type of relationship between the `source` key and the `target` key.</p> There is only one option;  `connection`.",
    )
    visualization: Optional[Dict[str, Any]] = Field(None, description="For internal use only.")


class MapVersionItem(DataModelBase):
    """
    MapVersionItem object.

    Parameters
    ----------
    end_date: Optional[datetime]
    id: Optional[str]
    mode: Optional[str]
    name: Optional[str]
    start_date: Optional[datetime]

    """

    end_date: Optional[datetime] = Field(
        None,
        description="Date when this version of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> version was superseded with a newer version.</p> This will be shown in ISO 8601 format. e.g \"2023-02-27T10:20:31.194Z\".</p> This will not be return for the current (latest) version.",
    )
    id: Optional[str] = Field(
        None,
        description="Unique identifier id for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> request.",
    )
    mode: Optional[str] = Field(
        None,
        description="The mode of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.</p> There are two options available; `simulation` and `production`.</p> For production mode, all entities must be linked to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> that exists on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.</p> For simulation mode, entities do not need to be linked to any existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>.",
    )
    name: Optional[str] = Field(
        None,
        description="Unique identifier name for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process</a>.</p> This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    start_date: Optional[datetime] = Field(
        None,
        description="Date when this version of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> was created.</p> This will be shown in ISO 8601 format. e.g \"2023-02-27T10:20:31.194Z\".",
    )

    @classmethod
    def list_versions(
        cls,
        map_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[MapVersionItem], MapVersionListPaginated]:
        """
        List all the versions that have been saved for a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.

        This will include some limited data such as the mode and time when the version was active as the latest version.

        The current (latest) <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> version will not have an `end_date` key.

        **Pagination Sortable Columns:** `start_date`

        **Permission Required:** `kelvin.permission.maps.read`.

        ``listVersions``: ``GET`` ``/api/v4/maps/{map_name}/versions/list``

        Parameters
        ----------
        map_name : :obj:`str`, optional
            Unique identifier name of the wanted <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a>.</p> This must contain only lowercase alphanumeric characters.
            The `.`, `_` and `-` characters are also allowed to separate words
            instead of a space BUT can not be at the beginning or end of the name.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-maps/kelvin-maps-overview/#processes'
            target='_blank'>Kelvin Process Map</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> parameters. Only one parameter can be selected.</p> There is
            only one option; `start_date`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/maps/{map_name}/versions/list",
            {"map_name": map_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {
                "200": MapVersionListPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/maps/{map_name}/versions/list", "GET")
            if fetch and not _dry_run
            else result
        )


class MapVersionListPaginated(PaginatorDataModel[MapVersionItem]):
    """
    MapVersionListPaginated object.

    Parameters
    ----------
    data: Optional[List[MapVersionItem]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[MapVersionItem]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Maps</a>. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class Metric(DataModelBase):
    """
    Metric object.

    Parameters
    ----------
    created: Optional[datetime]
    data_type_name: Optional[str]
    data_type_version: Optional[str]
    display_unit: Optional[str]
    name: Optional[str]
    semantic_type_name: Optional[str]
    semantic_type_properties: Optional[Dict[str, Any]]
    title: Optional[str]
    updated: Optional[datetime]
    write: Optional[bool]

    """

    created: Optional[datetime] = Field(
        None,
        description="Time of creation of this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )
    data_type_name: Optional[str] = Field(
        None,
        description="Type of data being recorded to this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>.</p> there are 13 types of data type options; `raw.boolean`, `raw.dynacard`, `raw.float32`, `raw.float64`, `raw.int8`, `raw.int16`, `raw.int32`, `raw.int64`, `raw.uint8`, `raw.uint16`, `raw.uint32`, `raw.uint64` and `raw.text`.",
    )
    data_type_version: Optional[str] = Field(
        None, description="Version of the data type.</p> For example `2.0.0`."
    )
    display_unit: Optional[str] = Field(
        None,
        description="Units for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>.</p> This can be anything to describe the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> units. For example `Amp`, `Hz`, `॰F`, etc.",
    )
    name: Optional[str] = Field(
        None,
        description="Unique identifier name for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>.</p> This contains only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    semantic_type_name: Optional[str] = Field(
        None,
        description="Type of sensor that is streaming data to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>. Depending on the options chosen, there may be more properties available which will be saved to the `SemanticTypeProperties` parameters.</p> There are currently 28 Semantic Type Names available; `None`, `Accelerometer`, `Current`, `Dynacard`, `Event Flow Rate`, `Force`, `Frequency`, `Gas Flow Rate`, `Gas Volume`, `Humidity`, `Latitude`, `Length`, `Location`, `Longitude`, `Mass`, `Power`, `Pressure`, `Relative Humidity`, `State`, `Temperature`, `Time Date`, `Time Span`, `Torque`, `Velocity`, `Vibration`, `Voltage`, `Volume`, `Volume Flow Rate`.",
    )
    semantic_type_properties: Optional[Dict[str, Any]] = Field(
        None,
        description="Additional properties depending on the selected `SemanticTypeName` parameter chosen.</p> For example; if the semantic type chosen is `temperature`, then there will be an additional parameter in semantic type properties for `temperature unit` where fahrenheit or celsius can be chosen.",
    )
    title: Optional[str] = Field(
        None,
        description="Display name (title) for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> . This is the friendly name displayed.</p> It can use any character, numeric, space and special character in this parameter.",
    )
    updated: Optional[datetime] = Field(
        None,
        description="Time of modifying any variable of this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )
    write: Optional[bool] = Field(
        None,
        description="Defines whether this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> is read only (`false`) or read/write (`true`).</p> If the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> feature is used on this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>, then this parameter must be `true`.",
    )

    @classmethod
    def list_bridge_metrics(
        cls,
        bridge_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[Metric], MetricListPaginated]:
        """
        List Bridge Metrics

        Returns a dictionary with a data property containing a list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.

        **Pagination Sortable Columns:** `metric.name`, `metric.title`, `metric.created`, `metric.updated`, `metric.data_type_name`

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``listBridgeMetrics``: ``GET`` ``/api/v4/bridges/{bridge_name}/metrics/list``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin
            Metric</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>
            parameters. Only one parameter can be selected.</p> There are ten
            parameter options; `metric.name`, `metric.title`, `metric.created`,
            `metric.updated` and `metric.data_type_name`.</p> The default is
            `metric.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/metrics/list",
            {"bridge_name": bridge_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": MetricListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/bridges/{bridge_name}/metrics/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate()
    def create_metric(
        self_or_cls,
        data: Optional[Union[requests.MetricCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Metric:
        """
        Create Metric

        Create a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Permission Required:** `kelvin.permission.metric.create`.

        ``createMetric``: ``POST`` ``/api/v4/metrics/create``

        Parameters
        ----------
        data: requests.MetricCreate, optional
        **kwargs:
            Extra parameters for requests.MetricCreate
              - data_type_name: str
              - data_type_version: str
              - display_unit: str
              - name: str
              - semantic_type_name: str
              - semantic_type_properties: dict
              - title: str
              - write: bool

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/metrics/create",
            {},
            {},
            {},
            {},
            data,
            requests.MetricCreate,
            False,
            {"201": Metric, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def upload_metrics(
        cls, file: str, dry_run: Optional[bool] = None, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Upload Metrics

        Upload a csv (comma-separated values) file with up to 20,000 metrics to add as <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> into the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>. Each row represents one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>.

        The first row of the csv file needs to be the header of the columns. `DISPLAY NAME,NAME,SEMANTIC TYPE,DATA TYPE,UNIT DISPLAY,WRITE`.

        Details of the options for each column are explained in this <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-manager-ui/management/metrics/metrics/#importing-metrics-in-bulk' target='_blank'>Kelvin Documentation</a> link.

        The file needs to be saved in UTF-8 format with a comma separating each field. Do not use other separation options available in Microsoft Excel or Google Sheets such as semi-colons or colons. Strings in the csv file can be with or without quotation marks.

        **Permission Required:** `kelvin.permission.metric.create`.

        ``uploadMetrics``: ``POST`` ``/api/v4/metrics/create/upload``

        Parameters
        ----------
        file : :obj:`str`, optional
            Path and name of the CSV File to upload to the <a
            href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a>.</p> You can download a blank copy of the template from
            the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-manager-ui/control-manager-ui-overview/'
            target='_blank'>Kelvin Manager UI</a>. Instructions can be found in
            the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-manager-ui/management/metrics/metrics#1.-download-the-
            metrics-csv-template' target='_blank'>Kelvin Documentation</a>.
        dry_run : :obj:`bool`
            Perform a trial run to create the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> without
            saving the changes.</p> This is very useful when you want to test your
            new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> bulk
            upload without making any changes on the <a
            href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a>.

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/metrics/create/upload",
            {},
            {"dry_run": dry_run},
            {"file": file},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "412": CSVErrorMessage},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def list_metric(
        cls,
        names: Optional[Sequence[str]] = None,
        data_type_name: Optional[Sequence[str]] = None,
        data_type_version: Optional[Sequence[str]] = None,
        semantic_type_name: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        search: Optional[Sequence[str]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[Metric], MetricListPaginated]:
        """
        List Metric

        Returns a dictionary with a data property containing a list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Pagination Sortable Columns:** `metric.name`, `metric.title`, `metric.data_type_name`,
        `metric.data_type_version`, `metric.display_unit`, `metric.semantic_type_name`, `metric.write`,
        `metric.created`, `metric.updated`, `semantic_type.title`

        **Permission Required:** `kelvin.permission.metric.read`.

        ``listMetric``: ``GET`` ``/api/v4/metrics/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> by its
            name. This is given as an array, for example `[extruder,tank]`.</p>
            The filter is done on the full name only according to unique
            identifier name rules (Must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space but not at the beginning or
            end).</p> For example a filter with `[extruder,tank]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> with the
            name `extruder` but not with the names `demo-ch-extruder-gear-
            setpoint` or `demo-og-gas-tank-level`.
        data_type_name : :obj:`Sequence[str]`
            Array of data type names to filter the list. Each string will only
            return a Data Type Type object with exact matches on the `name`
            parameter.</p> There are 13 types of data type options; `raw.boolean`,
            `raw.dynacard`, `raw.float32`, `raw.float64`, `raw.int8`, `raw.int16`,
            `raw.int32`, `raw.int64`, `raw.uint8`, `raw.uint16`, `raw.uint32`,
            `raw.uint64` and `raw.text`.
        data_type_version : :obj:`Sequence[str]`
            Array of data type versions to filter the list. Each string will only
            return a Data Type Type object with exact matches on the `name`
            parameter.</p> For example; `2.0.0` will return results, but `2.0`
            will not.
        semantic_type_name : :obj:`Sequence[str]`
            Array of names to filter the list. Each string will only return a
            Sematic Type object with exact matches on the `name` parameter.</p>
            This must contain only lowercase alphanumeric characters. The `.`, `_`
            and `-` characters are also allowed to separate words instead of a
            space BUT can not be at the beginning or end of the name.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin
            Metric</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>
            parameters. Only one parameter can be selected.</p> There are ten
            parameter options; `metric.name`, `metric.title`,
            `metric.data_type_name`, `metric.data_type_version`,
            `metric.display_unit`, `metric.semantic_type_name`, `metric.write`,
            `metric.created`, `metric.updated` and `semantic_type.title`.</p> The
            default is `metric.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> list. Both
            the Display Name and the Name will be included in the filter field
            criteria. This is given as an array, for example
            `[extruder,tank]`.</p> The search is case insensitive and will find
            partial matches as well. For example if a <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> name or
            display name is `demo-og-centrifugal-pump-speed`, then a match will be
            made if the filter string is `demo` or `FUGaL`.

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/metrics/list",
            {},
            {
                "names": names,
                "data_type_name": data_type_name,
                "data_type_version": data_type_version,
                "semantic_type_name": semantic_type_name,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "search": search,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": MetricListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/metrics/list", "GET") if fetch and not _dry_run else result

    @classmethod
    def list_semantic_type(
        cls,
        names: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> SemanticTypeList:
        """
        List Semantic Type

        Returns a dictionary with a data property containing a list of all available Semantic Type options on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        Sematic Types are sensors that stream data to the Kelvin Metric. Depending on the options chosen, there may be more properties available which will be saved to the SemanticTypeProperties parameters.

        **Sortable Columns:** `semantic_type.name`, `semantic_type.title`,
        `semantic_type.created`, `semantic_type.updated`

        **Permission Required:** `kelvin.permission.metric.read`.

        ``listSemanticType``: ``GET`` ``/api/v4/metrics/semantictypes/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Array of names to filter the list. Each string will only return a
            Sematic Type object with exact matches on the `name` parameter.</p>
            This must contain only lowercase alphanumeric characters. The `.`, `_`
            and `-` characters are also allowed to separate words instead of a
            space BUT can not be at the beginning or end of the name.
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> list. Both
            the Display Name and the Name will be included in the search field
            criteria. This is given as an array, for example
            `[accelerometer,event]`.</p> The search is case insensitive and will
            find partial matches as well. For example if a <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> name or
            display name is `Accelerometer`, then a match will be made if the
            search string is `acc` or `rOmeT`.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>
            parameters. Only one parameter can be selected.</p> There are four
            parameter options; `semantic_type.name`, `semantic_type.title`,
            `semantic_type.created`, `semantic_type.updated`.</p> The default is
            `semantic_type.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/metrics/semantictypes/list",
            {},
            {"names": names, "search": search, "sort_by": sort_by, "sort_asc": sort_asc},
            {},
            {},
            None,
            None,
            False,
            {"200": SemanticTypeList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"metric_name": "name"})
    def delete_metric(
        self_or_cls, metric_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Metric

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>. This cannot be undone once the API request has been submitted.

        **Permission Required:** `kelvin.permission.metric.delete`.

        ``deleteMetric``: ``POST`` ``/api/v4/metrics/{metric_name}/delete``

        Parameters
        ----------
        metric_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/metrics/{metric_name}/delete",
            {"metric_name": metric_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"metric_name": "name"})
    def get_metric(
        self_or_cls, metric_name: str, _dry_run: bool = False, _client: Any = None
    ) -> Metric:
        """
        Get Metric

        Retrieve the properties of a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>.

        **Permission Required:** `kelvin.permission.metric.read`.

        ``getMetric``: ``GET`` ``/api/v4/metrics/{metric_name}/get``

        Parameters
        ----------
        metric_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/metrics/{metric_name}/get",
            {"metric_name": metric_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": Metric, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"metric_name": "name"})
    def update_metric(
        self_or_cls,
        metric_name: str,
        data: Optional[Union[requests.MetricUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Metric:
        """
        Update Metric

        Update an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> with any new values passed through the body parameters.

        **Permission Required:** `kelvin.permission.metric.update`.

        ``updateMetric``: ``POST`` ``/api/v4/metrics/{metric_name}/update``

        Parameters
        ----------
        metric_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        data: requests.MetricUpdate, optional
        **kwargs:
            Extra parameters for requests.MetricUpdate
              - data_type_name: str
              - data_type_version: str
              - display_unit: str
              - semantic_type_name: str
              - semantic_type_properties: dict
              - title: str
              - write: bool

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/metrics/{metric_name}/update",
            {"metric_name": metric_name},
            {},
            {},
            {},
            data,
            requests.MetricUpdate,
            False,
            {
                "200": Metric,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class MetricListPaginated(PaginatorDataModel[Metric]):
    """
    MetricListPaginated object.

    Parameters
    ----------
    data: Optional[List[Metric]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[Metric]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> objects. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class NetworkingAddressItem(DataModelBase):
    """
    NetworkingAddressItem object.

    Parameters
    ----------
    address: Optional[str]
    interface: Optional[str]
    port: Optional[int]

    """

    address: Optional[str] = None
    interface: Optional[str] = None
    port: Optional[int] = None


class NetworkingItem(DataModelBase):
    """
    NetworkingItem object.

    Parameters
    ----------
    addresses: Optional[List[NetworkingAddressItem]]
    name: Optional[str]
    protocol: Optional[str]

    """

    addresses: Optional[List[NetworkingAddressItem]] = None
    name: Optional[str] = None
    protocol: Optional[str] = None


class OEECalculation(DataModelBase):
    """
    OEECalculation object.

    Parameters
    ----------
    good_units: Optional[int]
    ideal_cycle_time: Optional[int]
    planned_production_time: Optional[int]
    run_time: Optional[int]
    total_units: Optional[int]

    """

    good_units: Optional[int] = Field(
        None, description="Total number of goods produced pieces, NOT including the defective ones."
    )
    ideal_cycle_time: Optional[int] = Field(
        None,
        description="Fastest cycle time that your process can achieve in optimal circumstances with no stop time. Make sure all time units use the same baseline such as seconds, minutes, hours or days.",
    )
    planned_production_time: Optional[int] = Field(
        None,
        description="Amount of time the process is planned to be running. Make sure all time units use the same baseline such as seconds, minutes, hours or days.",
    )
    run_time: Optional[int] = Field(
        None,
        description="Total time that the process was running (not stopped) during the Planned Production Time. Make sure all time units use the same baseline such as seconds, minutes, hours or days.",
    )
    total_units: Optional[int] = Field(
        None, description="Total number of produced pieces, INCLUDING the defective ones"
    )


class OEEThresholds(DataModelBase):
    """
    OEEThresholds object.

    Parameters
    ----------
    critical_alarm: Optional[int]
    target: Optional[int]
    warning_alarm: Optional[int]

    """

    critical_alarm: Optional[int] = Field(
        None,
        description='Critical alarm threshold value (in percentage) for the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> at the nominated timestamp.',
    )
    target: Optional[int] = Field(
        None,
        description='Target OEE value (in percentage) for the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> at the nominated timestamp.',
    )
    warning_alarm: Optional[int] = Field(
        None,
        description='Warning alarm threshold value (in percentage) for the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> at the nominated timestamp.',
    )


class OEEValues(DataModelBase):
    """
    OEEValues object.

    Parameters
    ----------
    availability: Optional[float]
    oee: Optional[float]
    quality: Optional[float]
    throughput: Optional[float]

    """

    availability: Optional[float] = Field(
        None,
        description="Percentage result giving the time that the process was operational compared with the planned operational time.",
    )
    oee: Optional[float] = Field(
        None, description="OEE result that measures how well a manufacturing operation is utilized."
    )
    quality: Optional[float] = Field(
        None,
        description="Percentage result giving the actual quality output. This also includes parts that maybe placed into the process a second time for rework.",
    )
    throughput: Optional[float] = Field(
        None,
        description="Percentage result giving the actual output of the process compared with the ideal output.",
    )


class OrchestrationProvision(DataModelBase):
    """
    OrchestrationProvision object.

    Parameters
    ----------
    provision_script: Optional[str]

    """

    provision_script: Optional[str] = None

    @classmethod
    def download_cluster_provision_script(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> OrchestrationProvision:
        """
        Download Cluster Provision Script

        **Permission Required:** `kelvin.permission.orchestration.read`.

        ``downloadClusterProvisionScript``: ``GET`` ``/api/v4/orchestration/clusters/provision/script/download``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/orchestration/clusters/provision/script/download",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": OrchestrationProvision, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class Page(DataModelBase):
    """
    Page object.

    Parameters
    ----------
    next_page: Optional[str]
    page_size: Optional[int]
    previous_page: Optional[str]

    """

    next_page: Optional[str] = None
    page_size: Optional[int] = None
    previous_page: Optional[str] = None


class ParameterAppVersionAsset(DataModelBase):
    """
    ParameterAppVersionAsset object.

    Parameters
    ----------
    app_name: Optional[str]
    app_version: Optional[str]
    asset_name: Optional[str]
    created: Optional[datetime]
    parameter: Optional[str]
    payload: Optional[Dict[str, Any]]
    updated: Optional[datetime]

    """

    app_name: Optional[str] = Field(None, max_length=64)
    app_version: Optional[str] = Field(None, max_length=64)
    asset_name: Optional[str] = Field(None, max_length=64)
    created: Optional[datetime] = None
    parameter: Optional[str] = Field(None, max_length=64)
    payload: Optional[Dict[str, Any]] = None
    updated: Optional[datetime] = None

    @classmethod
    def list_app_version_parameters(
        cls,
        app_name: str,
        version: str,
        asset_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[ParameterAppVersionAsset], ParameterAppVersionAssetListPaginated]:
        """
        List App Version Parameters lists the app version asset parameters.

        **Pagination Sortable Columns:** `asset_app_parameter.app_name`, `asset_app_parameter.app_version_name`, `asset_app_parameter.asset_name`, `asset_app_parameter.parameter`, `asset_app_parameter.created`, `asset_app_parameter.updated`

        **Permission Required:** `kelvin.permission.parameter.read`.

        ``listAppVersionParameters``: ``GET`` ``/api/v4/parameters/app/{app_name}/versions/{version}/assets/{asset_name}/list``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        version : :obj:`str`, optional
            App version
        asset_name : :obj:`str`, optional
            Asset name
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/parameters/app/{app_name}/versions/{version}/assets/{asset_name}/list",
            {"app_name": app_name, "version": version, "asset_name": asset_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {
                "200": ParameterAppVersionAssetListPaginated,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return (
            result.fetch(
                "/api/v4/parameters/app/{app_name}/versions/{version}/assets/{asset_name}/list",
                "GET",
            )
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate()
    def update_parameters(
        self_or_cls,
        app_name: str,
        version: str,
        asset_name: str,
        data: Optional[Union[requests.ParameterUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Update Parameters for given app Version asset.

        **Permission Required:** `kelvin.permission.parameter.update`.

        ``updateParameters``: ``POST`` ``/api/v4/parameters/app/{app_name}/versions/{version}/assets/{asset_name}/update``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        version : :obj:`str`, optional
            App version
        asset_name : :obj:`str`, optional
            Asset name
        data: requests.ParameterUpdate, optional
        **kwargs:
            Extra parameters for requests.ParameterUpdate
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/parameters/app/{app_name}/versions/{version}/assets/{asset_name}/update",
            {"app_name": app_name, "version": version, "asset_name": asset_name},
            {},
            {},
            {},
            data,
            requests.ParameterUpdate,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_schema(
        self_or_cls, app_name: str, version: str, _dry_run: bool = False, _client: Any = None
    ) -> ParameterGetSchema:
        """
        Get Schema

        **Permission Required:** `kelvin.permission.parameter.read`.

        ``getSchema``: ``GET`` ``/api/v4/parameters/app/{app_name}/versions/{version}/schema/get``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        version : :obj:`str`, optional
            App version

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/parameters/app/{app_name}/versions/{version}/schema/get",
            {"app_name": app_name, "version": version},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": ParameterGetSchema,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def list_parameters(
        cls,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        data: Optional[Union[requests.ParameterList, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[ParameterAppVersionAsset], ParameterAppVersionAssetListPaginated]:
        """
        List Parameters lists the asset parameters.

        **Pagination Sortable Columns:** `asset_app_parameter.app_name`, `asset_app_parameter.app_version_name`, `asset_app_parameter.asset_name`, `asset_app_parameter.parameter`, `asset_app_parameter.created`, `asset_app_parameter.updated`

        **Permission Required:** `kelvin.permission.parameter.read`.

        ``listParameters``: ``POST`` ``/api/v4/parameters/list``

        Parameters
        ----------
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true
        data: requests.ParameterList, optional
        **kwargs:
            Extra parameters for requests.ParameterList
              - apps: list
              - asset_names: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/parameters/list",
            {},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            data,
            requests.ParameterList,
            False,
            {
                "200": ParameterAppVersionAssetListPaginated,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result.fetch("/api/v4/parameters/list", "POST") if fetch and not _dry_run else result


class ParameterAppVersionAssetListPaginated(PaginatorDataModel[ParameterAppVersionAsset]):
    """
    ParameterAppVersionAssetListPaginated object.

    Parameters
    ----------
    data: Optional[List[ParameterAppVersionAsset]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[ParameterAppVersionAsset]] = None
    pagination: Optional[pagination.Pagination] = None


class ParameterGetSchema(DataModelBase):
    """
    ParameterGetSchema object.

    Parameters
    ----------
    additionalProperties: Optional[bool]
    properties: Optional[Dict[str, parameterschema.ParameterJSONSchemaProperties]]
    required: Optional[List[str]]
    type: Optional[str]

    """

    additionalProperties: Optional[bool] = None
    properties: Optional[Dict[str, parameterschema.ParameterJSONSchemaProperties]] = None
    required: Optional[List[str]] = None
    type: Optional[str] = Field(None, max_length=64)

    @classmethod
    def get_schema(
        cls, app_name: str, version: str, _dry_run: bool = False, _client: Any = None
    ) -> ParameterGetSchema:
        """
        Get Schema

        **Permission Required:** `kelvin.permission.parameter.read`.

        ``getSchema``: ``GET`` ``/api/v4/parameters/app/{app_name}/versions/{version}/schema/get``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        version : :obj:`str`, optional
            App version

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/parameters/app/{app_name}/versions/{version}/schema/get",
            {"app_name": app_name, "version": version},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": ParameterGetSchema,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result


class ProductionInfo(DataModelBase):
    """
    ProductionInfo object.

    Parameters
    ----------
    expected_end_at: Optional[datetime]
    expected_start_at: Optional[datetime]
    sku: Optional[str]

    """

    expected_end_at: Optional[datetime] = Field(
        None,
        description='End time for the current production in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )
    expected_start_at: Optional[datetime] = Field(
        None,
        description='Start time for the current production in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )
    sku: Optional[str] = Field(
        None,
        description="Display text for the current production information in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.</p> You can use any character, numeric, space and special character in this parameter.",
    )


class PropertyOptions(DataModelBase):
    """
    PropertyOptions object.

    Parameters
    ----------
    name: Optional[str]
    title: Optional[str]

    """

    name: Optional[str] = None
    title: Optional[str] = None


class RecommendationAlarm(DataModelBase):
    """
    RecommendationAlarm object.

    Parameters
    ----------
    alarm_id: Optional[str]
    alarm_type_name: Optional[str]
    description: Optional[str]
    payload: Optional[Dict[str, Any]]
    severity: Optional[int]
    solution: Optional[str]
    source_asset_names: Optional[List[str]]
    tags: Optional[List[str]]
    target_asset_name: Optional[str]
    title: Optional[str]
    trace_id: Optional[str]

    """

    alarm_id: Optional[str] = None
    alarm_type_name: Optional[str] = None
    description: Optional[str] = None
    payload: Optional[Dict[str, Any]] = None
    severity: Optional[int] = None
    solution: Optional[str] = None
    source_asset_names: Optional[List[str]] = None
    tags: Optional[List[str]] = None
    target_asset_name: Optional[str] = None
    title: Optional[str] = None
    trace_id: Optional[str] = None


class RecommendationClustering(DataModelBase):
    """
    RecommendationClustering object.

    Parameters
    ----------
    count: Optional[int]
    recommendations_ids: Optional[List[str]]
    time_bucket_start: Optional[datetime]

    """

    count: Optional[int] = None
    recommendations_ids: Optional[List[str]] = None
    time_bucket_start: Optional[datetime] = None

    @classmethod
    def get_recommendation_clustering(
        cls,
        data: Optional[Union[requests.RecommendationClustering, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[RecommendationClustering]:
        """
        Get Recommendation Clustering

        **Permission Required:** `kelvin.permission.recommendation.read`.

        ``getRecommendationClustering``: ``POST`` ``/api/v4/recommendations/clustering/get``

        Parameters
        ----------
        data: requests.RecommendationClustering, optional
        **kwargs:
            Extra parameters for requests.RecommendationClustering
              - end_date: datetime
              - resource_names: list
              - start_date: datetime
              - states: list
              - time_bucket: str
              - types: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/recommendations/clustering/get",
            {},
            {},
            {},
            {},
            data,
            requests.RecommendationClustering,
            False,
            {
                "200": List[RecommendationClustering],
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class RecommendationControlChange(DataModelBase):
    """
    RecommendationControlChange object.

    Parameters
    ----------
    asset_name: Optional[str]
    control_change_id: Optional[str]
    expiration_date: Optional[str]
    metric_name: Optional[str]
    payload: Optional[Dict[str, Any]]
    retry: Optional[int]
    timeout: Optional[int]
    trace_id: Optional[str]

    """

    asset_name: Optional[str] = None
    control_change_id: Optional[str] = None
    expiration_date: Optional[str] = None
    metric_name: Optional[str] = None
    payload: Optional[Dict[str, Any]] = None
    retry: Optional[int] = None
    timeout: Optional[int] = None
    trace_id: Optional[str] = None


class RecommendationDataLabel(DataModelBase):
    """
    RecommendationDataLabel object.

    Parameters
    ----------
    confidence: Optional[int]
    data_label_id: Optional[int]
    description: Optional[str]
    end_date: Optional[str]
    info: Optional[Dict[str, Any]]
    label_name: Optional[str]
    metrics: Optional[List[Dict[str, Any]]]
    start_date: Optional[str]
    trace_id: Optional[str]
    validation: Optional[bool]

    """

    confidence: Optional[int] = None
    data_label_id: Optional[int] = None
    description: Optional[str] = None
    end_date: Optional[str] = None
    info: Optional[Dict[str, Any]] = None
    label_name: Optional[str] = None
    metrics: Optional[List[Dict[str, Any]]] = None
    start_date: Optional[str] = None
    trace_id: Optional[str] = None
    validation: Optional[bool] = None


class RecommendationLog(DataModelBase):
    """
    RecommendationLog object.

    Parameters
    ----------
    created_at: Optional[str]
    email_list: Optional[List[str]]
    message: Optional[str]
    source: Optional[str]
    state: Optional[str]

    """

    created_at: Optional[str] = None
    email_list: Optional[List[str]] = None
    message: Optional[str] = None
    source: Optional[str] = None
    state: Optional[str] = None


class RecommendationResponsePayload(DataModelBase):
    """
    RecommendationResponsePayload object.

    Parameters
    ----------
    message: Optional[str]
    success: Optional[bool]

    """

    message: Optional[str] = None
    success: Optional[bool] = None

    @instance_classmethod
    @DataModelBase.translate()
    def update_accept_recommendation(
        self_or_cls,
        recommendation_id: str,
        data: Optional[Union[requests.RecommendationAccept, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> RecommendationResponsePayload:
        """
        Update Accept Recommendation

        **Permission Required:** `kelvin.permission.recommendation.update`.

        ``updateAcceptRecommendation``: ``POST`` ``/api/v4/recommendations/{recommendation_id}/accept/update``

        Parameters
        ----------
        recommendation_id : :obj:`str`, optional
            Recommendation ID
        data: requests.RecommendationAccept, optional
        **kwargs:
            Extra parameters for requests.RecommendationAccept
              - message: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/recommendations/{recommendation_id}/accept/update",
            {"recommendation_id": recommendation_id},
            {},
            {},
            {},
            data,
            requests.RecommendationAccept,
            False,
            {"200": RecommendationResponsePayload, "400": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def delete_recommendation(
        cls, recommendation_id: str, _dry_run: bool = False, _client: Any = None
    ) -> RecommendationResponsePayload:
        """
        Delete Recommendation

        **Permission Required:** `kelvin.permission.recommendation.delete`.

        ``deleteRecommendation``: ``POST`` ``/api/v4/recommendations/{recommendation_id}/delete``

        Parameters
        ----------
        recommendation_id : :obj:`str`, optional
            Recommendation ID

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/recommendations/{recommendation_id}/delete",
            {"recommendation_id": recommendation_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": RecommendationResponsePayload, "400": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_recommendation(
        cls, recommendation_id: str, _dry_run: bool = False, _client: Any = None
    ) -> Recommendation:
        """
        Get Recommendation

        **Permission Required:** `kelvin.permission.recommendation.read`.

        ``getRecommendation``: ``GET`` ``/api/v4/recommendations/{recommendation_id}/get``

        Parameters
        ----------
        recommendation_id : :obj:`str`, optional
            Recommendation ID

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/recommendations/{recommendation_id}/get",
            {"recommendation_id": recommendation_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": Recommendation, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_log(
        self_or_cls,
        recommendation_id: str,
        data: Optional[Union[requests.RecommendationCreateLog, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Create Log

        **Permission Required:** `kelvin.permission.recommendation.update`.

        ``createLog``: ``POST`` ``/api/v4/recommendations/{recommendation_id}/log/create``

        Parameters
        ----------
        recommendation_id : :obj:`str`, optional
            Recommendation ID
        data: requests.RecommendationCreateLog, optional
        **kwargs:
            Extra parameters for requests.RecommendationCreateLog
              - message: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/recommendations/{recommendation_id}/log/create",
            {"recommendation_id": recommendation_id},
            {},
            {},
            {},
            data,
            requests.RecommendationCreateLog,
            False,
            {"201": None, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_reject_recommendation(
        self_or_cls,
        recommendation_id: str,
        data: Optional[Union[requests.RecommendationReject, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> RecommendationResponsePayload:
        """
        Update Reject Recommendation

        **Permission Required:** `kelvin.permission.recommendation.update`.

        ``updateRejectRecommendation``: ``POST`` ``/api/v4/recommendations/{recommendation_id}/reject/update``

        Parameters
        ----------
        recommendation_id : :obj:`str`, optional
            Recommendation ID
        data: requests.RecommendationReject, optional
        **kwargs:
            Extra parameters for requests.RecommendationReject
              - message: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/recommendations/{recommendation_id}/reject/update",
            {"recommendation_id": recommendation_id},
            {},
            {},
            {},
            data,
            requests.RecommendationReject,
            False,
            {"200": RecommendationResponsePayload, "400": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class RecommendationType(DataModelBase):
    """
    RecommendationType object.

    Parameters
    ----------
    created_at: Optional[str]
    description: Optional[str]
    title: Optional[str]
    type: Optional[str]

    """

    created_at: Optional[str] = None
    description: Optional[str] = None
    title: Optional[str] = None
    type: Optional[str] = None

    @classmethod
    def list_recommendation_type(
        cls, fetch: bool = True, _dry_run: bool = False, _client: Any = None
    ) -> Union[List[RecommendationType], RecommendationTypePaginated]:
        """
        List Recommendation Type

        **Pagination Sortable Columns:** `type`

        **Permission Required:** `kelvin.permission.recommendation.read`.

        ``listRecommendationType``: ``GET`` ``/api/v4/recommendations/types/list``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/recommendations/types/list",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": RecommendationTypePaginated},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/recommendations/types/list", "GET")
            if fetch and not _dry_run
            else result
        )


class RecommendationTypePaginated(PaginatorDataModel[RecommendationType]):
    """
    RecommendationTypePaginated object.

    Parameters
    ----------
    data: Optional[List[RecommendationType]]
    pagination: Optional[paginator.PaginationInfo]

    """

    data: Optional[List[RecommendationType]] = None
    pagination: Optional[paginator.PaginationInfo] = None


class ReferenceMetric(DataModelBase):
    """
    ReferenceMetric object.

    Parameters
    ----------
    asset_name: Optional[str]
    metric_name: Optional[str]

    """

    asset_name: Optional[str] = Field(
        None,
        description="The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> name for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pair.",
    )
    metric_name: Optional[str] = Field(
        None,
        description="The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> name for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pair.",
    )


class ResponsibleFor(DataModelBase):
    """
    ResponsibleFor object.

    Parameters
    ----------
    name: Optional[str]
    type: Optional[str]

    """

    name: Optional[str] = Field(
        None,
        description="Unique identifier of an existing name for either a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process</a>.</p> This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    type: Optional[str] = Field(
        None,
        description="Type of responsible. Only one parameter can be selected.</p> There are two parameter options; `asset` or `map`.",
    )


class RuleAction(DataModelBase):
    """
    RuleAction object.

    Parameters
    ----------
    metric_name: Optional[str]
    target_asset_name: Optional[str]
    type: Optional[str]

    """

    metric_name: Optional[str] = None
    target_asset_name: Optional[str] = None
    type: Optional[str] = None


class RuleInput(DataModelBase):
    """
    RuleInput object.

    Parameters
    ----------
    asset_name: Optional[str]
    metric_name: Optional[str]

    """

    asset_name: Optional[str] = None
    metric_name: Optional[str] = None


class RuleLogs(DataModelBase):
    """
    RuleLogs object.

    Parameters
    ----------
    logs: Optional[List[str]]

    """

    logs: Optional[List[str]] = None

    @classmethod
    def get_logs_rule(
        cls,
        rule_name: str,
        tail_lines: Optional[str] = None,
        since_time: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> RuleLogs:
        """
        Get Logs Rule

        **Permission Required:** `kelvin.permission.rule.read`.

        ``getLogsRule``: ``GET`` ``/api/v4/rules/{rule_name}/logs/get``

        Parameters
        ----------
        rule_name : :obj:`str`, optional
            Rule name
        tail_lines : :obj:`str`
            The number of lines from the end of the logs to show. Default: 500
        since_time : :obj:`str`
            A timestamp from which to show logs

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/rules/{rule_name}/logs/get",
            {"rule_name": rule_name},
            {"tail_lines": tail_lines, "since_time": since_time},
            {},
            {},
            None,
            None,
            False,
            {
                "200": RuleLogs,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "409": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result


class RuleScriptErrors(DataModelBase):
    """
    RuleScriptErrors object.

    Parameters
    ----------
    errors: Optional[List[str]]

    """

    errors: Optional[List[str]] = None

    @classmethod
    def create_rule(
        cls,
        data: Optional[Union[requests.RuleCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Rule:
        """
        Create Rule

        **Permission Required:** `kelvin.permission.rule.create`.

        ``createRule``: ``POST`` ``/api/v4/rules/create``

        Parameters
        ----------
        data: requests.RuleCreate, optional
        **kwargs:
            Extra parameters for requests.RuleCreate
              - draft: bool
              - enabled: bool
              - map_name: str
              - name: str
              - payload: str
              - target: str
              - title: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/rules/create",
            {},
            {},
            {},
            {},
            data,
            requests.RuleCreate,
            False,
            {
                "201": Rule,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "409": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_rules(
        cls,
        search: Optional[Sequence[str]] = None,
        map_names: Optional[Sequence[str]] = None,
        states: Optional[Sequence[str]] = None,
        target: Optional[str] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[Rule], RulesListPaginated]:
        """
        List Rules

        **Pagination Sortable Columns:** `rule.name`, `rule.title`, `rule.map_name`, `rule.target`, `rule.state`, `rule.enabled`, `rule.created`, `rule.updated`

        **Permission Required:** `kelvin.permission.rule.read`.

        ``listRules``: ``GET`` ``/api/v4/rules/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search rules by name or title
        map_names : :obj:`Sequence[str]`
            Search rules by map name
        states : :obj:`Sequence[str]`
            Search rules by state
        target : :obj:`str`
            Search rules by target
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/rules/list",
            {},
            {
                "search": search,
                "map_names": map_names,
                "states": states,
                "target": target,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {
                "200": RulesListPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/rules/list", "GET") if fetch and not _dry_run else result

    @classmethod
    def validate_rule(
        cls,
        data: Optional[Union[requests.RuleValidate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> RuleScriptErrors:
        """
        Validate Rule

        **Permission Required:** `kelvin.permission.rule.create`.

        ``validateRule``: ``POST`` ``/api/v4/rules/validate``

        Parameters
        ----------
        data: requests.RuleValidate, optional
        **kwargs:
            Extra parameters for requests.RuleValidate
              - script: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/rules/validate",
            {},
            {},
            {},
            {},
            data,
            requests.RuleValidate,
            False,
            {"200": RuleScriptErrors},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def delete_rule(cls, rule_name: str, _dry_run: bool = False, _client: Any = None) -> None:
        """
        Delete Rule

        **Permission Required:** `kelvin.permission.rule.delete`.

        ``deleteRule``: ``POST`` ``/api/v4/rules/{rule_name}/delete``

        Parameters
        ----------
        rule_name : :obj:`str`, optional
            Rule name

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/rules/{rule_name}/delete",
            {"rule_name": rule_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "409": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_rule(cls, rule_name: str, _dry_run: bool = False, _client: Any = None) -> Rule:
        """
        Get Rule

        **Permission Required:** `kelvin.permission.rule.read`.

        ``getRule``: ``GET`` ``/api/v4/rules/{rule_name}/get``

        Parameters
        ----------
        rule_name : :obj:`str`, optional
            Rule name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/rules/{rule_name}/get",
            {"rule_name": rule_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": Rule,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_logs_rule(
        cls,
        rule_name: str,
        tail_lines: Optional[str] = None,
        since_time: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> RuleLogs:
        """
        Get Logs Rule

        **Permission Required:** `kelvin.permission.rule.read`.

        ``getLogsRule``: ``GET`` ``/api/v4/rules/{rule_name}/logs/get``

        Parameters
        ----------
        rule_name : :obj:`str`, optional
            Rule name
        tail_lines : :obj:`str`
            The number of lines from the end of the logs to show. Default: 500
        since_time : :obj:`str`
            A timestamp from which to show logs

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/rules/{rule_name}/logs/get",
            {"rule_name": rule_name},
            {"tail_lines": tail_lines, "since_time": since_time},
            {},
            {},
            None,
            None,
            False,
            {
                "200": RuleLogs,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "409": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def update_rule(
        cls,
        rule_name: str,
        data: Optional[Union[requests.RuleUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Rule:
        """
        Update Rule

        **Permission Required:** `kelvin.permission.rule.update`.

        ``updateRule``: ``POST`` ``/api/v4/rules/{rule_name}/update``

        Parameters
        ----------
        rule_name : :obj:`str`, optional
            Rule name
        data: requests.RuleUpdate, optional
        **kwargs:
            Extra parameters for requests.RuleUpdate
              - draft: bool
              - enabled: bool
              - map_name: str
              - payload: str
              - target: str
              - title: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/rules/{rule_name}/update",
            {"rule_name": rule_name},
            {},
            {},
            {},
            data,
            requests.RuleUpdate,
            False,
            {
                "200": Rule,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "409": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class RuleStatus(DataModelBase):
    """
    RuleStatus object.

    Parameters
    ----------
    last_modified: Optional[str]
    message: Optional[str]
    state: Optional[str]

    """

    last_modified: Optional[str] = None
    message: Optional[str] = None
    state: Optional[str] = None


class ScheduleConfig(DataModelBase):
    """
    ScheduleConfig object.

    Parameters
    ----------
    expression: Optional[str]

    """

    expression: Optional[str] = None


class Secret(DataModelBase):
    """
    Secret object.

    Parameters
    ----------
    name: Optional[str]

    """

    name: Optional[str] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_secret(
        self_or_cls,
        data: Optional[Union[requests.SecretCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Secret:
        """
        Create Secret

        **Permission Required:** `kelvin.permission.secret.create`.

        ``createSecret``: ``POST`` ``/api/v4/secrets/create``

        Parameters
        ----------
        data: requests.SecretCreate, optional
        **kwargs:
            Extra parameters for requests.SecretCreate
              - name: str
              - value: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/secrets/create",
            {},
            {},
            {},
            {},
            data,
            requests.SecretCreate,
            False,
            {"201": Secret, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_secret(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[Secret], SecretListPaginated]:
        """
        List Secret

        **Permission Required:** `kelvin.permission.secret.read`.

        ``listSecret``: ``GET`` ``/api/v4/secrets/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search secrets by name
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/secrets/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": SecretListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/secrets/list", "GET") if fetch and not _dry_run else result

    @instance_classmethod
    @DataModelBase.translate({"secret_name": "name"})
    def delete_secret(
        self_or_cls, secret_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Secret

        **Permission Required:** `kelvin.permission.secret.delete`.

        ``deleteSecret``: ``POST`` ``/api/v4/secrets/{secret_name}/delete``

        Parameters
        ----------
        secret_name : :obj:`str`, optional
            Secret name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/secrets/{secret_name}/delete",
            {"secret_name": secret_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class SecretListPaginated(PaginatorDataModel[Secret]):
    """
    SecretListPaginated object.

    Parameters
    ----------
    data: Optional[List[Secret]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[Secret]] = None
    pagination: Optional[pagination.Pagination] = None


class SemanticTypeItem(DataModelBase):
    """
    SemanticTypeItem object.

    Parameters
    ----------
    created: Optional[datetime]
    name: Optional[str]
    title: Optional[str]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = Field(
        None,
        description='Time of creation of this semantic type in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )
    name: Optional[str] = Field(
        None,
        description="Unique identifier name for the semantic type.</p> This can contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    title: Optional[str] = Field(
        None,
        description="Display name (title) for the semantic type. This is the friendly name displayed.</p> It can use any character, numeric, space and special character in this parameter.",
    )
    updated: Optional[datetime] = Field(
        None,
        description='Time of modifying any variable of this semantic type in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )


class SemanticTypeList(DataModelBase):
    """
    SemanticTypeList object.

    Parameters
    ----------
    data: Optional[List[SemanticTypeItem]]

    """

    data: Optional[List[SemanticTypeItem]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` semantic types. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )

    @classmethod
    def list_semantic_type(
        cls,
        names: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> SemanticTypeList:
        """
        List Semantic Type

        Returns a dictionary with a data property containing a list of all available Semantic Type options on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        Sematic Types are sensors that stream data to the Kelvin Metric. Depending on the options chosen, there may be more properties available which will be saved to the SemanticTypeProperties parameters.

        **Sortable Columns:** `semantic_type.name`, `semantic_type.title`,
        `semantic_type.created`, `semantic_type.updated`

        **Permission Required:** `kelvin.permission.metric.read`.

        ``listSemanticType``: ``GET`` ``/api/v4/metrics/semantictypes/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Array of names to filter the list. Each string will only return a
            Sematic Type object with exact matches on the `name` parameter.</p>
            This must contain only lowercase alphanumeric characters. The `.`, `_`
            and `-` characters are also allowed to separate words instead of a
            space BUT can not be at the beginning or end of the name.
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> list. Both
            the Display Name and the Name will be included in the search field
            criteria. This is given as an array, for example
            `[accelerometer,event]`.</p> The search is case insensitive and will
            find partial matches as well. For example if a <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> name or
            display name is `Accelerometer`, then a match will be made if the
            search string is `acc` or `rOmeT`.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>
            parameters. Only one parameter can be selected.</p> There are four
            parameter options; `semantic_type.name`, `semantic_type.title`,
            `semantic_type.created`, `semantic_type.updated`.</p> The default is
            `semantic_type.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/metrics/semantictypes/list",
            {},
            {"names": names, "search": search, "sort_by": sort_by, "sort_asc": sort_asc},
            {},
            {},
            None,
            None,
            False,
            {"200": SemanticTypeList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class SeverityStatistics(DataModelBase):
    """
    SeverityStatistics object.

    Parameters
    ----------
    acknowledged: Optional[int]
    active: Optional[int]
    resolved: Optional[int]
    severity: Optional[int]

    """

    acknowledged: Optional[int] = Field(
        None,
        description="<a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-alarms/' target='_blank'>Kelvin Alarm</a> that are tagged as `acknowledged` on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.",
    )
    active: Optional[int] = Field(
        None,
        description="<a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-alarms/' target='_blank'>Kelvin Alarm</a> that are tagged as `active` on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>. If they are `active` and also `acknowledged`, they will not be counted in this group but in the `acknowledged` group.",
    )
    resolved: Optional[int] = Field(
        None,
        description="<a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-alarms/' target='_blank'>Kelvin Alarm</a> that are tagged as `resolved` on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.",
    )
    severity: Optional[int] = Field(
        None,
        description="The <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-alarms#alarm-severity' target='_blank'>Kelvin Maps Alarm Severity</a> that the failure overview statistics are related to.</p> This is an integer number between 1 and 5, with; 1 representing `critical`, 2 is `urgent`, 3 is `advisory`, 4 is `medium` and 5 is `low`.",
    )


class ShiftInfo(DataModelBase):
    """
    ShiftInfo object.

    Parameters
    ----------
    end_at: Optional[datetime]
    name: Optional[str]
    start_at: Optional[datetime]

    """

    end_at: Optional[datetime] = Field(
        None,
        description='End time for the current shift in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )
    name: Optional[str] = Field(
        None,
        description="Display text for the current shift information in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.</p> You can use any character, numeric, space and special character in this parameter.",
    )
    start_at: Optional[datetime] = Field(
        None,
        description='Start time for the current shift in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )


class SimpleAsset(DataModelBase):
    """
    SimpleAsset object.

    Parameters
    ----------
    name: Optional[str]
    state: Optional[str]

    """

    name: Optional[str] = Field(
        None,
        description='Unique identifier name for this property in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a>.</p> This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.',
    )
    state: Optional[str] = Field(
        None,
        description="Current status (state) of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>. There are four status options; `online`, `offline`, `partially_online` and `unknown`.",
    )


class SourceAssets(DataModelBase):
    """
    SourceAssets object.

    Parameters
    ----------
    name: Optional[str]
    title: Optional[str]

    """

    name: Optional[str] = None
    title: Optional[str] = None


class StatusStatistics(DataModelBase):
    """
    StatusStatistics object.

    Parameters
    ----------
    acknowledged: Optional[int]
    active: Optional[int]
    resolved: Optional[int]

    """

    acknowledged: Optional[int] = Field(
        None,
        description="<a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-alarms/' target='_blank'>Kelvin Alarm</a> that are tagged as `acknowledged` on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.",
    )
    active: Optional[int] = Field(
        None,
        description="<a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-alarms/' target='_blank'>Kelvin Alarm</a> that are tagged as `active` on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>. If they are `active` and also `acknowledged`, they will not be counted in this group but in the `acknowledged` group.",
    )
    resolved: Optional[int] = Field(
        None,
        description="<a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-alarms/' target='_blank'>Kelvin Alarm</a> that are tagged as `resolved` on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.",
    )


class StorageData(DataModelBase):
    """
    StorageData object.

    Parameters
    ----------
    field_insertion_timestamp: Optional[datetime]
    asset_name: Optional[str]
    name: Optional[str]
    payload: Optional[Dict[str, Any]]
    timestamp: Optional[datetime]

    """

    field_insertion_timestamp: Optional[datetime] = Field(
        None,
        alias="_insertion_timestamp",
        description="Time when the payload data was recorded in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )
    asset_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
        max_length=64,
    )
    name: Optional[str] = Field(
        None,
        description="Unique identifier name for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>.",
        max_length=64,
    )
    payload: Optional[Dict[str, Any]] = Field(
        None,
        description="The actual payload of information saved for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pair.</p> The standard payload will look like this</p>  <blockquote>{</br>&nbsp;&nbsp;\"payload\": {</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"value\": 88</br>&nbsp;&nbsp;&nbsp;&nbsp;}</br>}</blockquote>",
    )
    timestamp: Optional[datetime] = Field(
        None,
        description='Time when the payload data was created at the source in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )


class StorageMetric(DataModelBase):
    """
    StorageMetric object.

    Parameters
    ----------
    asset_name: Optional[str]
    created: Optional[datetime]
    fields: Optional[List[str]]
    name: Optional[str]
    title: Optional[str]
    updated: Optional[datetime]

    """

    asset_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
        max_length=64,
    )
    created: Optional[datetime] = Field(
        None,
        description="Time of creation of this data point in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pair in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )
    fields: Optional[List[str]] = Field(
        None, description="Array of string values which are the keys in the JSON data payload."
    )
    name: Optional[str] = Field(
        None,
        description="Unique identifier name for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>.",
        max_length=64,
    )
    title: Optional[str] = Field(
        None,
        description="Display name (title) of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pair.</p> This is normally left blank and is not used.",
        max_length=64,
    )
    updated: Optional[datetime] = Field(
        None,
        description="Time of modifying any variable of this data point in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pair in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )


class StorageMetricListPaginated(PaginatorDataModel[StorageMetric]):
    """
    StorageMetricListPaginated object.

    Parameters
    ----------
    data: Optional[List[StorageMetric]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[StorageMetric]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class Symbol(DataModelBase):
    """
    Symbol object.

    Parameters
    ----------
    created: Optional[str]
    name: Optional[str]
    payload: Optional[str]
    symbol_type: Optional[str]
    title: Optional[str]
    updated: Optional[str]

    """

    created: Optional[str] = Field(
        None,
        description="Time of creation of this <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )
    name: Optional[str] = Field(
        None,
        description="Unique identifier name for the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a>. This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    payload: Optional[str] = Field(
        None,
        description='Contains the image information usually in SVG format.</p> Example : ""<svg viewBox=\\"0 0 40 40\\" xmlns=\\"http://www.w3.org/2000/svg\\"><defs><style>.c{stroke-width:.71px;fill:none;stroke:#fff;stroke-miterlimit:10}</style></defs><g fill=\\"none\\" fill-rule=\\"evenodd\\"><path d=\\"M4.2 ..... 93-1.93Z\\"/></g></svg>"',
    )
    symbol_type: Optional[str] = Field(
        None,
        description="Category name where the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> will be located in the selection sidebar.</p> You can use any character, numeric, space and special character in this parameter. All characters will be automatically converted to upper case when displaved in <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.",
    )
    title: Optional[str] = Field(
        None,
        description="Display name (title) for the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a>. This is a friendly name displayed in lists and in any references.</p> You can use any character, numeric, space and special character in this parameter.",
    )
    updated: Optional[str] = Field(
        None,
        description="Time of modifying any variable of this <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )

    @instance_classmethod
    @DataModelBase.translate()
    def create_symbol(
        self_or_cls,
        data: Optional[Union[requests.SymbolCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Symbol:
        """
        Create a new Symbol for the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> library.</p> This will be available for use in all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Maps</a>.

        **Permission Required:** `kelvin.permission.maps.create`.

        ``createSymbol``: ``POST`` ``/api/v4/maps/symbols/create``

        Parameters
        ----------
        data: requests.SymbolCreate, optional
        **kwargs:
            Extra parameters for requests.SymbolCreate
              - name: str
              - payload: str
              - symbol_type: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/maps/symbols/create",
            {},
            {},
            {},
            {},
            data,
            requests.SymbolCreate,
            False,
            {"201": Symbol, "400": errors.ErrorMessage, "401": errors.ErrorMessage},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_symbols(
        cls,
        search: Optional[Sequence[str]] = None,
        symbol_types: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[Symbol], SymbolsListPaginated]:
        """
        Returns a dictionary with a data property containing a filtered array of all Symbol objects on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Pagination Sortable Columns:** `symbol.name`, `symbol.title`, `symbol.symbol_type`

        **Permission Required:** `kelvin.permission.maps.read`.

        ``listSymbols``: ``GET`` ``/api/v4/maps/symbols/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> list. Both
            the Display Name (title) and the Name will be included in the search
            field criteria. This is given as an array, for example
            `[pump,fan]`.</p> The search is case insensitive and will find partial
            matches as well. For example if a <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> name or
            display name is `centrifugal_pump`, then a match will be made if the
            search string is `pum` or `FUGaL`.
        symbol_types : :obj:`Sequence[str]`
            Filter on the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> parameter
            `symbol_type`. This is given as an array, for example
            `[pump,fan]`.</p> The filter is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end).</p> For example a search with `[pump,fan]` will return
            Symbols with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        page_size : :obj:`int`
            Number of <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> objects to
            be returned. Page size can be between 1 and 1000 objects.</p> The
            default is 20 <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbols</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbols</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a>
            parameters. Only one parameter can be selected.</p> There are three
            parameter options; `symbol.name`, `symbol.title` and
            `symbol.symbol_type`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/maps/symbols/list",
            {},
            {
                "search": search,
                "symbol_types": symbol_types,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {
                "200": SymbolsListPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/maps/symbols/list", "GET") if fetch and not _dry_run else result
        )

    @instance_classmethod
    @DataModelBase.translate({"symbol_name": "name"})
    def delete_symbol(
        self_or_cls, symbol_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a>. This cannot be undone once the API request has been submitted. </p> Be careful as there will be no warnings if the image is in use in any entity. Any deleted <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbols</a> in use will not cause any errors to <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> overviews and the affected entities will have a blank space where the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> should be displayed.

        **Permission Required:** `kelvin.permission.maps.delete`.

        ``deleteSymbol``: ``POST`` ``/api/v4/maps/symbols/{symbol_name}/delete``

        Parameters
        ----------
        symbol_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a>. This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/maps/symbols/{symbol_name}/delete",
            {"symbol_name": symbol_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"symbol_name": "name"})
    def update_symbol(
        self_or_cls,
        symbol_name: str,
        data: Optional[Union[requests.SymbolUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Symbol:
        """
        Update the information or image of an existing Symbol for the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> library.</p> This will be available for use in all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Maps</a>.

        **Permission Required:** `kelvin.permission.maps.update`.

        ``updateSymbol``: ``POST`` ``/api/v4/maps/symbols/{symbol_name}/update``

        Parameters
        ----------
        symbol_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a>. This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.
        data: requests.SymbolUpdate, optional
        **kwargs:
            Extra parameters for requests.SymbolUpdate
              - payload: str
              - symbol_type: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/maps/symbols/{symbol_name}/update",
            {"symbol_name": symbol_name},
            {},
            {},
            {},
            data,
            requests.SymbolUpdate,
            False,
            {
                "200": Symbol,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class SymbolsListPaginated(PaginatorDataModel[Symbol]):
    """
    SymbolsListPaginated object.

    Parameters
    ----------
    data: Optional[List[Symbol]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[Symbol]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbols</a>. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class TeamMember(DataModelBase):
    """
    TeamMember object.

    Parameters
    ----------
    email: Optional[str]
    name: Optional[str]
    phone_country_code: Optional[str]
    phone_number: Optional[str]
    responsible_for: Optional[ResponsibleFor]
    role: Optional[str]

    """

    email: Optional[str] = Field(
        None,
        description="Email address for the team member.</p> You can use any character, numeric, space and special character in this parameter.",
    )
    name: Optional[str] = Field(
        None,
        description="Display name for the team member.</p> You can use any character, numeric, space and special character in this parameter.",
    )
    phone_country_code: Optional[str] = Field(
        None,
        description="Country code for the team member's phone number.</p> You can use any character, numeric, space and special character in this parameter.",
    )
    phone_number: Optional[str] = Field(
        None,
        description="Phone number for the team member.</p> You can use any character, numeric, space and special character in this parameter.",
    )
    responsible_for: Optional[ResponsibleFor] = None
    role: Optional[str] = Field(
        None,
        description="Role for the team member.</p> You can use any character, numeric, space and special character in this parameter.",
    )


class User(DataModelBase):
    """
    User object.

    Parameters
    ----------
    created: Optional[datetime]
    email: Optional[str]
    first_name: Optional[str]
    id: Optional[UUID]
    last_name: Optional[str]
    username: Optional[str]

    """

    created: Optional[datetime] = None
    email: Optional[str] = None
    first_name: Optional[str] = Field(None, max_length=64)
    id: Optional[UUID] = None
    last_name: Optional[str] = Field(None, max_length=64)
    username: Optional[str] = None

    @classmethod
    def list_user(
        cls,
        username: Optional[Sequence[str]] = None,
        email: Optional[Sequence[str]] = None,
        name: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[User], UserListPaginated]:
        """
        List User

        **Pagination Sortable Columns:** `user_entity.id`, `user_entity.username`, `user_entity.first_name`, `user_entity.last_name`, `user_entity.email`

        **Permission Required:** `kelvin.permission.users.read`.

        ``listUser``: ``GET`` ``/api/v4/users/list``

        Parameters
        ----------
        username : :obj:`Sequence[str]`
            User's username
        email : :obj:`Sequence[str]`
            User's email
        name : :obj:`Sequence[str]`
            User's name
        search : :obj:`Sequence[str]`
            Search Users by name or email
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/list",
            {},
            {
                "username": username,
                "email": email,
                "name": name,
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": UserListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/users/list", "GET") if fetch and not _dry_run else result

    @classmethod
    def get_current_user(cls, _dry_run: bool = False, _client: Any = None) -> UserWithPermissions:
        """
        Get Current User

        **Permission Required:** `n/a`.

        ``getCurrentUser``: ``GET`` ``/api/v4/users/me``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/me",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": UserWithPermissions, "400": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_kelvin_contact_information_user_setting(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> UserSettingItem:
        """
        Get Kelvin Contact Information User Setting

        **Permission Required:** `kelvin.permission.users.read`.

        ``getKelvinContactInformationUserSetting``: ``GET`` ``/api/v4/users/settings/kelvin-contact-info/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/settings/kelvin-contact-info/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": UserSettingItem, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def update_kelvin_contact_information_user_setting(
        cls,
        data: Optional[
            Union[requests.KelvinContactInfoUserSettingUpdate, Mapping[str, Any]]
        ] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> UserSettingItem:
        """
        Update Kelvin Contact Information User Setting

        **Permission Required:** `kelvin.permission.users.update`.

        ``updateKelvinContactInformationUserSetting``: ``POST`` ``/api/v4/users/settings/kelvin-contact-info/update``

        Parameters
        ----------
        data: requests.KelvinContactInfoUserSettingUpdate, optional
        **kwargs:
            Extra parameters for requests.KelvinContactInfoUserSettingUpdate
              - payload: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/users/settings/kelvin-contact-info/update",
            {},
            {},
            {},
            {},
            data,
            requests.KelvinContactInfoUserSettingUpdate,
            False,
            {
                "200": UserSettingItem,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_kelvin_notifications_user_setting(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> UserSettingItem:
        """
        Get Kelvin Notifications User Setting

        **Permission Required:** `kelvin.permission.users.read`.

        ``getKelvinNotificationsUserSetting``: ``GET`` ``/api/v4/users/settings/kelvin-notifications/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/settings/kelvin-notifications/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": UserSettingItem, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def update_kelvin_notifications_user_setting(
        cls,
        data: Optional[Union[requests.NotificationsUserSettingUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> UserSettingItem:
        """
        Update Kelvin Notifications User Setting

        **Permission Required:** `kelvin.permission.users.update`.

        ``updateKelvinNotificationsUserSetting``: ``POST`` ``/api/v4/users/settings/kelvin-notifications/update``

        Parameters
        ----------
        data: requests.NotificationsUserSettingUpdate, optional
        **kwargs:
            Extra parameters for requests.NotificationsUserSettingUpdate
              - payload: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/users/settings/kelvin-notifications/update",
            {},
            {},
            {},
            {},
            data,
            requests.NotificationsUserSettingUpdate,
            False,
            {
                "200": UserSettingItem,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_user_settings(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[UserSettingItem], UserSettingsListPaginated]:
        """
        List User Settings

        **Pagination Sortable Columns:** `user_setting.setting_name, user_setting.created, user_setting.updated`

        **Permission Required:** `kelvin.permission.users.read`.

        ``listUserSettings``: ``GET`` ``/api/v4/users/settings/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search User Setting by setting_name
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/settings/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": UserSettingsListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/users/settings/list", "GET") if fetch and not _dry_run else result
        )

    @classmethod
    def delete_user_setting(
        cls, setting_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete User Setting

        **Permission Required:** `kelvin.permission.users.delete`.

        ``deleteUserSetting``: ``POST`` ``/api/v4/users/settings/{setting_name}/delete``

        Parameters
        ----------
        setting_name : :obj:`str`, optional
            Setting Name

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/users/settings/{setting_name}/delete",
            {"setting_name": setting_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_user_setting(
        cls, setting_name: str, _dry_run: bool = False, _client: Any = None
    ) -> UserSettingItem:
        """
        Get User Setting

        **Permission Required:** `kelvin.permission.users.read`.

        ``getUserSetting``: ``GET`` ``/api/v4/users/settings/{setting_name}/get``

        Parameters
        ----------
        setting_name : :obj:`str`, optional
            Setting Name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/settings/{setting_name}/get",
            {"setting_name": setting_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": UserSettingItem, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def update_user_setting(
        cls,
        setting_name: str,
        data: Optional[Union[requests.UserSettingUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> UserSettingItem:
        """
        Update User Setting

        **Permission Required:** `kelvin.permission.users.update`.

        ``updateUserSetting``: ``POST`` ``/api/v4/users/settings/{setting_name}/update``

        Parameters
        ----------
        setting_name : :obj:`str`, optional
            Setting Name
        data: requests.UserSettingUpdate, optional
        **kwargs:
            Extra parameters for requests.UserSettingUpdate
              - payload: dict

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/users/settings/{setting_name}/update",
            {"setting_name": setting_name},
            {},
            {},
            {},
            data,
            requests.UserSettingUpdate,
            False,
            {
                "200": UserSettingItem,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"user_id": "id"})
    def get_user(self_or_cls, user_id: str, _dry_run: bool = False, _client: Any = None) -> User:
        """
        Get User

        **Permission Required:** `kelvin.permission.user.read`.

        ``getUser``: ``GET`` ``/api/v4/users/{user_id}/get``

        Parameters
        ----------
        user_id : :obj:`str`, optional
            User ID

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/users/{user_id}/get",
            {"user_id": user_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": User, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class UserFollow(DataModelBase):
    """
    UserFollow object.

    Parameters
    ----------
    mute: Optional[bool]
    seen: Optional[bool]

    """

    mute: Optional[bool] = None
    seen: Optional[bool] = None


class UserListPaginated(PaginatorDataModel[User]):
    """
    UserListPaginated object.

    Parameters
    ----------
    data: Optional[List[User]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[User]] = None
    pagination: Optional[pagination.Pagination] = None


class UserSettingItem(DataModelBase):
    """
    UserSettingItem object.

    Parameters
    ----------
    created: Optional[datetime]
    payload: Optional[Dict[str, Any]]
    setting_name: Optional[str]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = None
    payload: Optional[Dict[str, Any]] = None
    setting_name: Optional[str] = Field(None, max_length=64)
    updated: Optional[datetime] = None

    @classmethod
    def get_kelvin_contact_information_user_setting(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> UserSettingItem:
        """
        Get Kelvin Contact Information User Setting

        **Permission Required:** `kelvin.permission.users.read`.

        ``getKelvinContactInformationUserSetting``: ``GET`` ``/api/v4/users/settings/kelvin-contact-info/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/settings/kelvin-contact-info/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": UserSettingItem, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_kelvin_contact_information_user_setting(
        self_or_cls,
        data: Optional[
            Union[requests.KelvinContactInfoUserSettingUpdate, Mapping[str, Any]]
        ] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> UserSettingItem:
        """
        Update Kelvin Contact Information User Setting

        **Permission Required:** `kelvin.permission.users.update`.

        ``updateKelvinContactInformationUserSetting``: ``POST`` ``/api/v4/users/settings/kelvin-contact-info/update``

        Parameters
        ----------
        data: requests.KelvinContactInfoUserSettingUpdate, optional
        **kwargs:
            Extra parameters for requests.KelvinContactInfoUserSettingUpdate
              - payload: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/users/settings/kelvin-contact-info/update",
            {},
            {},
            {},
            {},
            data,
            requests.KelvinContactInfoUserSettingUpdate,
            False,
            {
                "200": UserSettingItem,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_kelvin_notifications_user_setting(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> UserSettingItem:
        """
        Get Kelvin Notifications User Setting

        **Permission Required:** `kelvin.permission.users.read`.

        ``getKelvinNotificationsUserSetting``: ``GET`` ``/api/v4/users/settings/kelvin-notifications/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/settings/kelvin-notifications/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": UserSettingItem, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_kelvin_notifications_user_setting(
        self_or_cls,
        data: Optional[Union[requests.NotificationsUserSettingUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> UserSettingItem:
        """
        Update Kelvin Notifications User Setting

        **Permission Required:** `kelvin.permission.users.update`.

        ``updateKelvinNotificationsUserSetting``: ``POST`` ``/api/v4/users/settings/kelvin-notifications/update``

        Parameters
        ----------
        data: requests.NotificationsUserSettingUpdate, optional
        **kwargs:
            Extra parameters for requests.NotificationsUserSettingUpdate
              - payload: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/users/settings/kelvin-notifications/update",
            {},
            {},
            {},
            {},
            data,
            requests.NotificationsUserSettingUpdate,
            False,
            {
                "200": UserSettingItem,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_user_settings(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[UserSettingItem], UserSettingsListPaginated]:
        """
        List User Settings

        **Pagination Sortable Columns:** `user_setting.setting_name, user_setting.created, user_setting.updated`

        **Permission Required:** `kelvin.permission.users.read`.

        ``listUserSettings``: ``GET`` ``/api/v4/users/settings/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search User Setting by setting_name
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/settings/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": UserSettingsListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/users/settings/list", "GET") if fetch and not _dry_run else result
        )

    @instance_classmethod
    @DataModelBase.translate()
    def delete_user_setting(
        self_or_cls, setting_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete User Setting

        **Permission Required:** `kelvin.permission.users.delete`.

        ``deleteUserSetting``: ``POST`` ``/api/v4/users/settings/{setting_name}/delete``

        Parameters
        ----------
        setting_name : :obj:`str`, optional
            Setting Name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/users/settings/{setting_name}/delete",
            {"setting_name": setting_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_user_setting(
        self_or_cls, setting_name: str, _dry_run: bool = False, _client: Any = None
    ) -> UserSettingItem:
        """
        Get User Setting

        **Permission Required:** `kelvin.permission.users.read`.

        ``getUserSetting``: ``GET`` ``/api/v4/users/settings/{setting_name}/get``

        Parameters
        ----------
        setting_name : :obj:`str`, optional
            Setting Name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/users/settings/{setting_name}/get",
            {"setting_name": setting_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": UserSettingItem, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_user_setting(
        self_or_cls,
        setting_name: str,
        data: Optional[Union[requests.UserSettingUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> UserSettingItem:
        """
        Update User Setting

        **Permission Required:** `kelvin.permission.users.update`.

        ``updateUserSetting``: ``POST`` ``/api/v4/users/settings/{setting_name}/update``

        Parameters
        ----------
        setting_name : :obj:`str`, optional
            Setting Name
        data: requests.UserSettingUpdate, optional
        **kwargs:
            Extra parameters for requests.UserSettingUpdate
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/users/settings/{setting_name}/update",
            {"setting_name": setting_name},
            {},
            {},
            {},
            data,
            requests.UserSettingUpdate,
            False,
            {
                "200": UserSettingItem,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class UserSettingsListPaginated(PaginatorDataModel[UserSettingItem]):
    """
    UserSettingsListPaginated object.

    Parameters
    ----------
    data: Optional[List[UserSettingItem]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[UserSettingItem]] = None
    pagination: Optional[pagination.Pagination] = None


class UserWithPermissions(DataModelBase):
    """
    UserWithPermissions object.

    Parameters
    ----------
    created: Optional[datetime]
    email: Optional[str]
    first_name: Optional[str]
    id: Optional[UUID]
    last_name: Optional[str]
    permissions: Optional[List[str]]
    username: Optional[str]

    """

    created: Optional[datetime] = None
    email: Optional[str] = None
    first_name: Optional[str] = Field(None, max_length=64)
    id: Optional[UUID] = None
    last_name: Optional[str] = Field(None, max_length=64)
    permissions: Optional[List[str]] = None
    username: Optional[str] = None

    @classmethod
    def list_user(
        cls,
        username: Optional[Sequence[str]] = None,
        email: Optional[Sequence[str]] = None,
        name: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[User], UserListPaginated]:
        """
        List User

        **Pagination Sortable Columns:** `user_entity.id`, `user_entity.username`, `user_entity.first_name`, `user_entity.last_name`, `user_entity.email`

        **Permission Required:** `kelvin.permission.users.read`.

        ``listUser``: ``GET`` ``/api/v4/users/list``

        Parameters
        ----------
        username : :obj:`Sequence[str]`
            User's username
        email : :obj:`Sequence[str]`
            User's email
        name : :obj:`Sequence[str]`
            User's name
        search : :obj:`Sequence[str]`
            Search Users by name or email
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/list",
            {},
            {
                "username": username,
                "email": email,
                "name": name,
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": UserListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/users/list", "GET") if fetch and not _dry_run else result

    @classmethod
    def get_current_user(cls, _dry_run: bool = False, _client: Any = None) -> UserWithPermissions:
        """
        Get Current User

        **Permission Required:** `n/a`.

        ``getCurrentUser``: ``GET`` ``/api/v4/users/me``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/me",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": UserWithPermissions, "400": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_kelvin_contact_information_user_setting(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> UserSettingItem:
        """
        Get Kelvin Contact Information User Setting

        **Permission Required:** `kelvin.permission.users.read`.

        ``getKelvinContactInformationUserSetting``: ``GET`` ``/api/v4/users/settings/kelvin-contact-info/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/settings/kelvin-contact-info/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": UserSettingItem, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def update_kelvin_contact_information_user_setting(
        cls,
        data: Optional[
            Union[requests.KelvinContactInfoUserSettingUpdate, Mapping[str, Any]]
        ] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> UserSettingItem:
        """
        Update Kelvin Contact Information User Setting

        **Permission Required:** `kelvin.permission.users.update`.

        ``updateKelvinContactInformationUserSetting``: ``POST`` ``/api/v4/users/settings/kelvin-contact-info/update``

        Parameters
        ----------
        data: requests.KelvinContactInfoUserSettingUpdate, optional
        **kwargs:
            Extra parameters for requests.KelvinContactInfoUserSettingUpdate
              - payload: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/users/settings/kelvin-contact-info/update",
            {},
            {},
            {},
            {},
            data,
            requests.KelvinContactInfoUserSettingUpdate,
            False,
            {
                "200": UserSettingItem,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_kelvin_notifications_user_setting(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> UserSettingItem:
        """
        Get Kelvin Notifications User Setting

        **Permission Required:** `kelvin.permission.users.read`.

        ``getKelvinNotificationsUserSetting``: ``GET`` ``/api/v4/users/settings/kelvin-notifications/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/settings/kelvin-notifications/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": UserSettingItem, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def update_kelvin_notifications_user_setting(
        cls,
        data: Optional[Union[requests.NotificationsUserSettingUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> UserSettingItem:
        """
        Update Kelvin Notifications User Setting

        **Permission Required:** `kelvin.permission.users.update`.

        ``updateKelvinNotificationsUserSetting``: ``POST`` ``/api/v4/users/settings/kelvin-notifications/update``

        Parameters
        ----------
        data: requests.NotificationsUserSettingUpdate, optional
        **kwargs:
            Extra parameters for requests.NotificationsUserSettingUpdate
              - payload: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/users/settings/kelvin-notifications/update",
            {},
            {},
            {},
            {},
            data,
            requests.NotificationsUserSettingUpdate,
            False,
            {
                "200": UserSettingItem,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_user_settings(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[UserSettingItem], UserSettingsListPaginated]:
        """
        List User Settings

        **Pagination Sortable Columns:** `user_setting.setting_name, user_setting.created, user_setting.updated`

        **Permission Required:** `kelvin.permission.users.read`.

        ``listUserSettings``: ``GET`` ``/api/v4/users/settings/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search User Setting by setting_name
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/settings/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": UserSettingsListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/users/settings/list", "GET") if fetch and not _dry_run else result
        )

    @classmethod
    def delete_user_setting(
        cls, setting_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete User Setting

        **Permission Required:** `kelvin.permission.users.delete`.

        ``deleteUserSetting``: ``POST`` ``/api/v4/users/settings/{setting_name}/delete``

        Parameters
        ----------
        setting_name : :obj:`str`, optional
            Setting Name

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/users/settings/{setting_name}/delete",
            {"setting_name": setting_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_user_setting(
        cls, setting_name: str, _dry_run: bool = False, _client: Any = None
    ) -> UserSettingItem:
        """
        Get User Setting

        **Permission Required:** `kelvin.permission.users.read`.

        ``getUserSetting``: ``GET`` ``/api/v4/users/settings/{setting_name}/get``

        Parameters
        ----------
        setting_name : :obj:`str`, optional
            Setting Name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/settings/{setting_name}/get",
            {"setting_name": setting_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": UserSettingItem, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def update_user_setting(
        cls,
        setting_name: str,
        data: Optional[Union[requests.UserSettingUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> UserSettingItem:
        """
        Update User Setting

        **Permission Required:** `kelvin.permission.users.update`.

        ``updateUserSetting``: ``POST`` ``/api/v4/users/settings/{setting_name}/update``

        Parameters
        ----------
        setting_name : :obj:`str`, optional
            Setting Name
        data: requests.UserSettingUpdate, optional
        **kwargs:
            Extra parameters for requests.UserSettingUpdate
              - payload: dict

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/users/settings/{setting_name}/update",
            {"setting_name": setting_name},
            {},
            {},
            {},
            data,
            requests.UserSettingUpdate,
            False,
            {
                "200": UserSettingItem,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_user(cls, user_id: str, _dry_run: bool = False, _client: Any = None) -> User:
        """
        Get User

        **Permission Required:** `kelvin.permission.user.read`.

        ``getUser``: ``GET`` ``/api/v4/users/{user_id}/get``

        Parameters
        ----------
        user_id : :obj:`str`, optional
            User ID

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/users/{user_id}/get",
            {"user_id": user_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": User, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class View2D(DataModelBase):
    """
    View2D object.

    Parameters
    ----------
    image_model: Optional[str]
    x: Optional[float]
    y: Optional[float]

    """

    image_model: Optional[str] = Field(
        None,
        description='A http(s) URL link to an SVG image used to visually display your <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.</p> If the link is behind a secure login, all login or token details must be incorporated into the URL here.',
    )
    x: Optional[float] = Field(
        None,
        description="This is the x coordinate for the placement of the model on the page.</p> The default is 0.</p> This is important as it will affect the coordinates embedded in Kelvin Alarms to highlight alarm locations on the model.",
    )
    y: Optional[float] = Field(
        None,
        description="This is the y coordinate for the placement of the model on the page.</p> The default is 0.</p> This is important as it will affect the coordinates embedded in Kelvin Alarms to highlight alarm locations on the model.",
    )


class View3D(DataModelBase):
    """
    View3D object.

    Parameters
    ----------
    image_model: Optional[str]
    x: Optional[float]
    y: Optional[float]
    z: Optional[float]

    """

    image_model: Optional[str] = Field(
        None,
        description='A http(s) URL link to a GLB model used to visually display your <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.</p> If the link is behind a secure login, all login or token details must be incorporated into the URL here.',
    )
    x: Optional[float] = Field(
        None,
        description="This is the x coordinate for the placement of the model on the page.</p> The default is 0.</p> This is important as it will affect the coordinates embedded in Kelvin Alarms to highlight alarm locations on the model.",
    )
    y: Optional[float] = Field(
        None,
        description="This is the y coordinate for the placement of the model on the page.</p> The default is 0.</p> This is important as it will affect the coordinates embedded in Kelvin Alarms to highlight alarm locations on the model.",
    )
    z: Optional[float] = Field(
        None,
        description="This is the z coordinate for the placement of the model on the page.</p> The default is 0.</p> This is important as it will affect the coordinates embedded in Kelvin Alarms to highlight alarm locations on the model.",
    )


class Visualization(DataModelBase):
    """
    Visualization object.

    Parameters
    ----------
    view_2d: Optional[View2D]
    view_3d: Optional[View3D]

    """

    view_2d: Optional[View2D] = None
    view_3d: Optional[View3D] = None


class WireguardPeer(DataModelBase):
    """
    WireguardPeer object.

    Parameters
    ----------
    allowed_ips: Optional[List[str]]
    created: Optional[datetime]
    endpoint: Optional[str]
    name: Optional[str]
    public_key: Optional[str]
    title: Optional[str]
    type: Optional[str]
    updated: Optional[datetime]
    wireguard_ip: Optional[str]

    """

    allowed_ips: Optional[List[str]] = None
    created: Optional[datetime] = None
    endpoint: Optional[str] = None
    name: Optional[str] = None
    public_key: Optional[str] = None
    title: Optional[str] = None
    type: Optional[str] = None
    updated: Optional[datetime] = None
    wireguard_ip: Optional[str] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_wireguard_peer(
        self_or_cls,
        data: Optional[Union[requests.WireguardPeerCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> WireguardPeer:
        """
        Create Wireguard Peer

        **Permission Required:** `kelvin.permission.acp.create`.

        ``createWireguardPeer``: ``POST`` ``/api/v4/wireguard/peers/create``

        Parameters
        ----------
        data: requests.WireguardPeerCreate, optional
        **kwargs:
            Extra parameters for requests.WireguardPeerCreate
              - allowed_ips: list
              - endpoint: str
              - name: str
              - public_key: str
              - title: str
              - type: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/wireguard/peers/create",
            {},
            {},
            {},
            {},
            data,
            requests.WireguardPeerCreate,
            False,
            {
                "201": WireguardPeer,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_wireguard_peer(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[WireguardPeer], WireguardPeerListPaginated]:
        """
        List Wireguard Peer

        **Pagination Sortable Columns:** `wireguard_peer.name`

        **Permission Required:** `kelvin.permission.acp.read`.

        ``listWireguardPeer``: ``GET`` ``/api/v4/wireguard/peers/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search Peers by name, title or public key
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/wireguard/peers/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": WireguardPeerListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/wireguard/peers/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def get_wireguard_graph(
        cls, format: Optional[str] = None, _dry_run: bool = False, _client: Any = None
    ) -> WireguardTunnel:
        """
        Get Wireguard Graph returns a visual representation of all the tunnels in the system

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getWireguardGraph``: ``POST`` ``/api/v4/wireguard/peers/tunnels/graph/get``

        Parameters
        ----------
        format : :obj:`str`
            Desired return format (svg or dot)

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/wireguard/peers/tunnels/graph/get",
            {},
            {"format": format},
            {},
            {},
            None,
            None,
            False,
            {
                "200": WireguardTunnel,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "500": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def delete_wireguard_peer(
        cls, peer_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Wireguard Peer

        **Permission Required:** `kelvin.permission.acp.delete`.

        ``deleteWireguardPeer``: ``POST`` ``/api/v4/wireguard/peers/{peer_name}/delete``

        Parameters
        ----------
        peer_name : :obj:`str`, optional
            Peer name

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/wireguard/peers/{peer_name}/delete",
            {"peer_name": peer_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_wireguard_peer(
        cls, peer_name: str, _dry_run: bool = False, _client: Any = None
    ) -> WireguardPeer:
        """
        Get Wireguard Peer

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getWireguardPeer``: ``GET`` ``/api/v4/wireguard/peers/{peer_name}/get``

        Parameters
        ----------
        peer_name : :obj:`str`, optional
            Peer name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/wireguard/peers/{peer_name}/get",
            {"peer_name": peer_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": WireguardPeer, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessage},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def create_wireguard_tunnel(
        cls,
        peer_name: str,
        data: Optional[Union[requests.WireguardTunnelCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> WireguardTunnel:
        """
        Create Wireguard Tunnel

        **Permission Required:** `kelvin.permission.acp.create`.

        ``createWireguardTunnel``: ``POST`` ``/api/v4/wireguard/peers/{peer_name}/tunnels/create``

        Parameters
        ----------
        peer_name : :obj:`str`, optional
            Source peer
        data: requests.WireguardTunnelCreate, optional
        **kwargs:
            Extra parameters for requests.WireguardTunnelCreate
              - keep_alive: int
              - wireguard_peer: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/wireguard/peers/{peer_name}/tunnels/create",
            {"peer_name": peer_name},
            {},
            {},
            {},
            data,
            requests.WireguardTunnelCreate,
            False,
            {
                "201": WireguardTunnel,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def delete_wireguard_tunnel(
        cls, peer_name: str, _dry_run: bool = False, _client: Any = None
    ) -> WireguardTunnel:
        """
        Delete Wireguard Tunnel

        **Permission Required:** `kelvin.permission.acp.delete`.

        ``deleteWireguardTunnel``: ``POST`` ``/api/v4/wireguard/peers/{peer_name}/tunnels/delete``

        Parameters
        ----------
        peer_name : :obj:`str`, optional
            Source peer

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/wireguard/peers/{peer_name}/tunnels/delete",
            {"peer_name": peer_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": WireguardTunnel,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def list_wireguard_tunnel(
        cls,
        peer_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[WireguardPeer], WireguardPeerListPaginated]:
        """
        List Wireguard Tunnel

        **Pagination Sortable Columns:** `wireguard_tunnel.wg_src`, `wireguard_tunnel.wg_peer`

        **Permission Required:** `kelvin.permission.acp.read`.

        ``listWireguardTunnel``: ``GET`` ``/api/v4/wireguard/peers/{peer_name}/tunnels/list``

        Parameters
        ----------
        peer_name : :obj:`str`, optional
            Source peer
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/wireguard/peers/{peer_name}/tunnels/list",
            {"peer_name": peer_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": WireguardPeerListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/wireguard/peers/{peer_name}/tunnels/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate()
    def update_wireguard_peer(
        self_or_cls,
        peer_name: str,
        data: Optional[Union[requests.WireguardPeerUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> WireguardPeer:
        """
        Update Wireguard Peer

        **Permission Required:** `kelvin.permission.acp.update`.

        ``updateWireguardPeer``: ``POST`` ``/api/v4/wireguard/peers/{peer_name}/update``

        Parameters
        ----------
        peer_name : :obj:`str`, optional
            Peer name
        data: requests.WireguardPeerUpdate, optional
        **kwargs:
            Extra parameters for requests.WireguardPeerUpdate
              - allowed_ips: list
              - endpoint: str
              - public_key: str
              - title: str
              - type: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/wireguard/peers/{peer_name}/update",
            {"peer_name": peer_name},
            {},
            {},
            {},
            data,
            requests.WireguardPeerUpdate,
            False,
            {
                "200": WireguardPeer,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessage,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class WireguardPeerListPaginated(PaginatorDataModel[WireguardPeer]):
    """
    WireguardPeerListPaginated object.

    Parameters
    ----------
    data: Optional[List[WireguardPeer]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[WireguardPeer]] = None
    pagination: Optional[pagination.Pagination] = None


class WireguardTunnel(DataModelBase):
    """
    WireguardTunnel object.

    Parameters
    ----------
    created: Optional[datetime]
    keep_alive: Optional[int]
    updated: Optional[datetime]
    wireguard_peer: Optional[str]

    """

    created: Optional[datetime] = None
    keep_alive: Optional[int] = None
    updated: Optional[datetime] = None
    wireguard_peer: Optional[str] = None

    @classmethod
    def get_wireguard_graph(
        cls, format: Optional[str] = None, _dry_run: bool = False, _client: Any = None
    ) -> WireguardTunnel:
        """
        Get Wireguard Graph returns a visual representation of all the tunnels in the system

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getWireguardGraph``: ``POST`` ``/api/v4/wireguard/peers/tunnels/graph/get``

        Parameters
        ----------
        format : :obj:`str`
            Desired return format (svg or dot)

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/wireguard/peers/tunnels/graph/get",
            {},
            {"format": format},
            {},
            {},
            None,
            None,
            False,
            {
                "200": WireguardTunnel,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "500": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_wireguard_tunnel(
        self_or_cls,
        peer_name: str,
        data: Optional[Union[requests.WireguardTunnelCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> WireguardTunnel:
        """
        Create Wireguard Tunnel

        **Permission Required:** `kelvin.permission.acp.create`.

        ``createWireguardTunnel``: ``POST`` ``/api/v4/wireguard/peers/{peer_name}/tunnels/create``

        Parameters
        ----------
        peer_name : :obj:`str`, optional
            Source peer
        data: requests.WireguardTunnelCreate, optional
        **kwargs:
            Extra parameters for requests.WireguardTunnelCreate
              - keep_alive: int
              - wireguard_peer: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/wireguard/peers/{peer_name}/tunnels/create",
            {"peer_name": peer_name},
            {},
            {},
            {},
            data,
            requests.WireguardTunnelCreate,
            False,
            {
                "201": WireguardTunnel,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def delete_wireguard_tunnel(
        cls, peer_name: str, _dry_run: bool = False, _client: Any = None
    ) -> WireguardTunnel:
        """
        Delete Wireguard Tunnel

        **Permission Required:** `kelvin.permission.acp.delete`.

        ``deleteWireguardTunnel``: ``POST`` ``/api/v4/wireguard/peers/{peer_name}/tunnels/delete``

        Parameters
        ----------
        peer_name : :obj:`str`, optional
            Source peer

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/wireguard/peers/{peer_name}/tunnels/delete",
            {"peer_name": peer_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": WireguardTunnel,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def list_wireguard_tunnel(
        cls,
        peer_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[WireguardPeer], WireguardPeerListPaginated]:
        """
        List Wireguard Tunnel

        **Pagination Sortable Columns:** `wireguard_tunnel.wg_src`, `wireguard_tunnel.wg_peer`

        **Permission Required:** `kelvin.permission.acp.read`.

        ``listWireguardTunnel``: ``GET`` ``/api/v4/wireguard/peers/{peer_name}/tunnels/list``

        Parameters
        ----------
        peer_name : :obj:`str`, optional
            Source peer
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/wireguard/peers/{peer_name}/tunnels/list",
            {"peer_name": peer_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": WireguardPeerListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/wireguard/peers/{peer_name}/tunnels/list", "GET")
            if fetch and not _dry_run
            else result
        )


class WorkloadAllocation(DataModelBase):
    """
    WorkloadAllocation object.

    Parameters
    ----------
    cpu_requests: Optional[float]
    memory_requests: Optional[float]

    """

    cpu_requests: Optional[float] = None
    memory_requests: Optional[float] = None


class WorkloadCPUUtilization(DataModelBase):
    """
    WorkloadCPUUtilization object.

    Parameters
    ----------
    timestamp: Optional[int]
    value: Optional[float]

    """

    timestamp: Optional[int] = None
    value: Optional[float] = None


class WorkloadLogs(DataModelBase):
    """
    WorkloadLogs object.

    Parameters
    ----------
    logs: Optional[Dict[str, List[str]]]

    """

    logs: Optional[Dict[str, List[str]]] = None

    @classmethod
    def get_workload_logs(
        cls,
        workload_name: str,
        tail_lines: Optional[str] = None,
        since_time: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> WorkloadLogs:
        """
        Get Workload Logs

        **Permission Required:** `kelvin.permission.workload.read`.

        ``getWorkloadLogs``: ``GET`` ``/api/v4/workloads/{workload_name}/logs/get``

        Parameters
        ----------
        workload_name : :obj:`str`, optional
            Workload name
        tail_lines : :obj:`str`
            The number of lines from the end of the logs to show
        since_time : :obj:`str`
            A timestamp from which to show logs

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/workloads/{workload_name}/logs/get",
            {"workload_name": workload_name},
            {"tail_lines": tail_lines, "since_time": since_time},
            {},
            {},
            None,
            None,
            False,
            {
                "200": WorkloadLogs,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "500": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result


class WorkloadMemoryUsage(DataModelBase):
    """
    WorkloadMemoryUsage object.

    Parameters
    ----------
    timestamp: Optional[int]
    value: Optional[float]

    """

    timestamp: Optional[int] = None
    value: Optional[float] = None


class WorkloadNetwork(DataModelBase):
    """
    WorkloadNetwork object.

    Parameters
    ----------
    total_rx: Optional[float]
    total_tx: Optional[float]

    """

    total_rx: Optional[float] = None
    total_tx: Optional[float] = None


class WorkloadStatus(DataModelBase):
    """
    WorkloadStatus object.

    Parameters
    ----------
    last_seen: Optional[datetime]
    message: Optional[str]
    state: Optional[str]
    warnings: Optional[List[str]]

    """

    last_seen: Optional[datetime] = None
    message: Optional[str] = None
    state: Optional[str] = None
    warnings: Optional[List[str]] = None


class WorkloadStatusValuesItem(DataModelBase):
    """
    WorkloadStatusValuesItem object.

    Parameters
    ----------
    last_seen: Optional[datetime]
    message: Optional[str]
    name: Optional[str]
    state: Optional[str]
    warnings: Optional[List[str]]

    """

    last_seen: Optional[datetime] = None
    message: Optional[str] = None
    name: Optional[str] = None
    state: Optional[str] = None
    warnings: Optional[List[str]] = None


class WorkloadTelemetry(DataModelBase):
    """
    WorkloadTelemetry object.

    Parameters
    ----------
    allocation: Optional[WorkloadAllocation]
    cpu_utilization: Optional[List[WorkloadCPUUtilization]]
    memory_usage: Optional[List[WorkloadMemoryUsage]]
    network: Optional[WorkloadNetwork]

    """

    allocation: Optional[WorkloadAllocation] = None
    cpu_utilization: Optional[List[WorkloadCPUUtilization]] = None
    memory_usage: Optional[List[WorkloadMemoryUsage]] = None
    network: Optional[WorkloadNetwork] = None

    @classmethod
    def get_workload_telemetry(
        cls, workload_name: str, _dry_run: bool = False, _client: Any = None
    ) -> WorkloadTelemetry:
        """
        Get Workload Telemetry

        **Permission Required:** `kelvin.permission.workload.read`.

        ``getWorkloadTelemetry``: ``GET`` ``/api/v4/workloads/{workload_name}/telemetry/get``

        Parameters
        ----------
        workload_name : :obj:`str`, optional
            Workload name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/workloads/{workload_name}/telemetry/get",
            {"workload_name": workload_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": WorkloadTelemetry, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class Storage(DataModelBase):
    """
    Storage object.

    Parameters
    ----------

    """

    @classmethod
    def create_historian_metric(
        cls,
        data: Optional[Union[requests.StorageBulkCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Create Historian Metric

        Create one or more data values for defined times for one or more specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        <span style="color: #ff0000;font-weight: bold;">WARNING</span> : If a value already exists at the defined time, then it will be overwriten with the new payload value. The old value will be lost and is not recoverable !

        **Permission Required:** `kelvin.permission.storage.create`.

        ``createHistorianMetric``: ``POST`` ``/api/v4/storage/historian/create``

        Parameters
        ----------
        data: requests.StorageBulkCreate, optional
        **kwargs:
            Extra parameters for requests.StorageBulkCreate
              - data: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/storage/historian/create",
            {},
            {},
            {},
            {},
            data,
            requests.StorageBulkCreate,
            False,
            {"201": None, "207": ErrorMessages, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_historian_metric_last(
        cls,
        name: str,
        asset_name: str,
        fields: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> StorageData:
        """
        Get Historian Metric Last

        Returns the last recorded value in the database for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pair.

        This does not rely on the workload (<a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-apps/' target='_blank'>Kelvin App</a>) that records the data to be online.

        **Permission Required:** `kelvin.permission.storage.read`.

        ``getHistorianMetricLast``: ``GET`` ``/api/v4/storage/historian/last/get``

        Parameters
        ----------
        name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        asset_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        fields : :obj:`str`
            List of wanted field keys that are recorded in the payload. Normally
            this will be value.</p> If there are other unique keys/value pairs in
            the payload, then you can create a list of all keys to retrieve the
            values. e.g. 'value, key2'. If the key does not exist in the stored
            payload, that key will return with a value `null`.

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/storage/historian/last/get",
            {},
            {"name": name, "asset_name": asset_name, "fields": fields},
            {},
            {},
            None,
            None,
            False,
            {"200": StorageData, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_historian_metric_last_advanced(
        cls,
        data: Optional[Union[requests.StorageLast, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Iterator[StorageData]:
        """
        Get Historian Metric Last Advanced

        Returns an array of last recorded values in the database for each of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs in the POST.

        This does not rely on the workload (<a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-apps/' target='_blank'>Kelvin App</a>) that records the data to be online.

        **Permission Required:** `kelvin.permission.storage.read`.

        ``getHistorianMetricLastAdvanced``: ``POST`` ``/api/v4/storage/historian/last/get``

        Parameters
        ----------
        data: requests.StorageLast, optional
        **kwargs:
            Extra parameters for requests.StorageLast
              - selectors: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/storage/historian/last/get",
            {},
            {},
            {},
            {},
            data,
            requests.StorageLast,
            False,
            {"200": StorageData, "401": ErrorMessages, "404": ErrorMessages},
            True,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_historian_metric(
        cls,
        name: Optional[Sequence[str]] = None,
        asset_name: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[StorageMetric], StorageMetricListPaginated]:
        """
        List Historian Metric

        Returns a dictionary with a data property containing a filtered array of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pair objects on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Pagination Sortable Columns:** `storage_metric.name`, `storage_metric.asset_name`

        **Permission Required:** `kelvin.permission.storage.read`.

        ``listHistorianMetric``: ``GET`` ``/api/v4/storage/historian/list``

        Parameters
        ----------
        name : :obj:`Sequence[str]`
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        asset_name : :obj:`Sequence[str]`
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        search : :obj:`Sequence[str]`
            Search and filter the return list. Both the Display Name and the Name
            for the <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> and <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin
            Metrics</a> will be included in the search field criteria. This is
            given as an array, for example `[pump,fan]`.</p> The search is case
            insensitive and will find partial matches as well. For example if a <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> name
            or display name is `centrifugal_pump`, then a match will be made if
            the search string is `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin
            Metric</a> pair objects to be returned. Page size can be between 1 and
            1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pair
            objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs in
            the list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs in
            the list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> parameters.
            Only one parameter can be selected.</p> There are two parameter
            options; `name` and `asset.name`.</p> The default is `asset.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/storage/historian/list",
            {},
            {
                "name": name,
                "asset_name": asset_name,
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": StorageMetricListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/storage/historian/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def delete_historian_range(
        cls,
        data: Optional[Union[requests.StorageDelete, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Delete Historian Range will delete all associated time series values for selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs between a given time range.

        **Permission Required:** `kelvin.permission.storage.delete`.

        ``deleteHistorianRange``: ``POST`` ``/api/v4/storage/historian/range/delete``

        Parameters
        ----------
        data: requests.StorageDelete, optional
        **kwargs:
            Extra parameters for requests.StorageDelete
              - end_time: datetime
              - selectors: list
              - start_time: datetime

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/storage/historian/range/delete",
            {},
            {},
            {},
            {},
            data,
            requests.StorageDelete,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def download_historian_metrics(
        cls,
        data: Optional[Union[requests.StorageRangeAdvanced, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Download Historian Metrics

        Returns a **CSV file** with time series data within a for a given time range and given list of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs in the parameter `selectors`.

        The downloaded csv file will contain six columns; `name` ( <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> ), `time` ( Timestamp when the data was recorded from source ), `asset_name` ( <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> ), `source` ( <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-apps/' target='_blank'>Kelvin App</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> that has recorded the data ), `target` ( Custom parameter set by user ), `value` ( value recorded ).

        **Permission Required:** `kelvin.permission.storage.read`.

        ``downloadHistorianMetrics``: ``POST`` ``/api/v4/storage/historian/range/download``

        Parameters
        ----------
        data: requests.StorageRangeAdvanced, optional
        **kwargs:
            Extra parameters for requests.StorageRangeAdvanced
              - agg: str
              - end_time: datetime
              - fill: str
              - group_by_selector: bool
              - order: str
              - selectors: list
              - start_time: datetime
              - time_bucket: str
              - time_shift: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/storage/historian/range/download",
            {},
            {},
            {},
            {},
            data,
            requests.StorageRangeAdvanced,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_historian_metric_range(
        cls,
        name: str,
        asset_name: str,
        start_time: datetime,
        end_time: datetime,
        agg: Optional[
            Literal[
                "none",
                "count",
                "distinct",
                "integral",
                "mean",
                "median",
                "mode",
                "spread",
                "stddev",
                "sum",
                "max",
                "min",
            ]
        ] = None,
        time_bucket: Optional[str] = None,
        time_shift: Optional[str] = None,
        fill: Optional[str] = None,
        order: Optional[str] = None,
        fields: Optional[Sequence[str]] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Iterator[StorageData]:
        """
        Get Historian Metric Range

        Returns a list of recorded values or calculated statistics from the database for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pair based on a time range.

        This does not rely on the workload (<a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-apps/' target='_blank'>Kelvin App</a>) that records the data to be online.

        **Permission Required:** `kelvin.permission.storage.read`.

        ``getHistorianMetricRange``: ``GET`` ``/api/v4/storage/historian/range/get``

        Parameters
        ----------
        name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        asset_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        start_time : :obj:`datetime`, optional
            Start time of the recorded time to collect the payload data from the
            <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a> in ISO 8601 UTC date/time format. Example;
            '2022-07-08T08:41:01.657916Z'.
        end_time : :obj:`datetime`, optional
            End time of the recorded time to collect the payload data from the <a
            href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a> in ISO 8601 UTC date/time format. Example;
            '2022-07-08T08:41:01.657916Z'.
        agg : :obj:`Literal['none', 'count', 'distinct', 'integral', 'mean', 'median', 'mode', 'spread', 'stddev', 'sum', 'max', 'min']`
            Perform mathematical calculations on a group of data.</p> For
            numerical data there are twelve mathematical options available; `none`
            , `count`,`distinct`, `integral`, `mean`, `median`, `mode`, `spread`,
            `stddev`, `sum`, `max`, `min`.</p> For text based data there are three
            types of mathematical options available; `count`, `distinct`, `mode`.
            The default is `none`.</p> When using this parameter, you must also
            use the parameters `time_bucket` which defines how to group the data
            and `fields` which defines which payload data to use. (none, count,
            distinct, integral, mean, median, mode, spread, stddev, sum, max, min)
        time_bucket : :obj:`str`
            Group the data by time frame for the `agg` parameter calculations.</p>
            The time can be adjusted with these time units `ns`, `ms`, `s`, `m`,
            `h`. e.g. `8765h` equates to is 8,765 hours which is approximately one
            year.
        time_shift : :obj:`str`
            Shift the time buckets from the epoch. Every time bucket starts from
            epoch so, if you want to calculate the time bucket starting on a
            different date and time, you'll need to set this. Example: `5m`, `1h`,
            `1w`.
        fill : :obj:`str`
            Fills any group of data, which is defined by the `time_bucket`
            parameter, with a calculated value when there is no data in the
            database.</p> There are five options available; `none`, `null`,
            `linear`, `previous`, fixed integer value.</p> `none` will ignore the
            group. `null`, `previous` and fixed integer value will be added as the
            value for the empty group. `linear` will perform a linear regression
            to calculated the groups' value.</p> The default is `none`.
        order : :obj:`str`
            Order of the results for the timestamp parameter.</p> There are two
            options available (capital letters is required); `ASC` for ascending
            and `DESC` for descending. The default is `ASC`.
        fields : :obj:`Sequence[str]`
            Array of strings which each string representing one key inside the
            payload. Normally there will be only one key labeled `value`.

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/storage/historian/range/get",
            {},
            {
                "name": name,
                "asset_name": asset_name,
                "start_time": start_time,
                "end_time": end_time,
                "agg": agg,
                "time_bucket": time_bucket,
                "time_shift": time_shift,
                "fill": fill,
                "order": order,
                "fields": fields,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": StorageData, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            True,
            _dry_run,
        )
        return result

    @classmethod
    def get_historian_metric_advanced_range(
        cls,
        data: Optional[Union[requests.StorageRangeAdvanced, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Iterator[StorageData]:
        """
        Get Historian Metric Advanced Range

        Returns a list of recorded values or calculated statistics from the database for one or multiple <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs based on a time range.

        This does not rely on the workload (<a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-apps/' target='_blank'>Kelvin App</a>) that records the data to be online.

        **Permission Required:** `kelvin.permission.storage.read`.

        ``getHistorianMetricAdvancedRange``: ``POST`` ``/api/v4/storage/historian/range/get``

        Parameters
        ----------
        data: requests.StorageRangeAdvanced, optional
        **kwargs:
            Extra parameters for requests.StorageRangeAdvanced
              - agg: str
              - end_time: datetime
              - fill: str
              - group_by_selector: bool
              - order: str
              - selectors: list
              - start_time: datetime
              - time_bucket: str
              - time_shift: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/storage/historian/range/get",
            {},
            {},
            {},
            {},
            data,
            requests.StorageRangeAdvanced,
            False,
            {"200": StorageData, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            True,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def update_historian_metric(
        cls,
        data: Optional[Union[requests.StorageUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Update Historian Metric

        Updates the `title` parameter of a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pair.

        **Permission Required:** `kelvin.permission.storage.update`.

        ``updateHistorianMetric``: ``POST`` ``/api/v4/storage/historian/update``

        Parameters
        ----------
        data: requests.StorageUpdate, optional
        **kwargs:
            Extra parameters for requests.StorageUpdate
              - asset_name: str
              - name: str
              - title: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/storage/historian/update",
            {},
            {},
            {},
            {},
            data,
            requests.StorageUpdate,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def upload_historian_metrics(
        cls, file: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Upload Historian Metrics

        Accepts a **CSV file** with time series data within a for a given time range and given list of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs in the parameter `selectors`.

        The csv file should contain six columns in a comma delimited csv file; `name` ( <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> ), `time` ( Timestamp when the data was recorded from source ), `asset_name` ( <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> ), `source` ( <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-apps/' target='_blank'>Kelvin App</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> that has recorded the data - this value is optional ), `target` ( Custom parameter set by user  - this value is optional ), `value` ( value recorded ).

        The first row must contain the column headers; `name,time,asset_name,source,target,value`.

        **Permission Required:** `kelvin.permission.storage.create`.

        ``uploadHistorianMetrics``: ``POST`` ``/api/v4/storage/historian/upload``

        Parameters
        ----------
        file : :obj:`str`, optional
            The CSV File in a standard formData object in a binary format.

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/storage/historian/upload",
            {},
            {},
            {"file": file},
            {},
            None,
            None,
            False,
            {"201": None, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class ACPAndWorkloadStatus(DataModelBase):
    """
    ACPAndWorkloadStatus object.

    Parameters
    ----------
    node: Optional[ACPStatusValues]
    workloads: Optional[List[WorkloadStatusValuesItem]]

    """

    node: Optional[ACPStatusValues] = None
    workloads: Optional[List[WorkloadStatusValuesItem]] = None


class ACPItem(DataModelBase):
    """
    ACPItem object.

    Parameters
    ----------
    created: Optional[datetime]
    metadata: Optional[Dict[str, Any]]
    name: Optional[str]
    status: Optional[ACPStatusValues]
    title: Optional[str]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[str] = Field(None, max_length=64)
    status: Optional[ACPStatusValues] = None
    title: Optional[str] = Field(None, max_length=64)
    updated: Optional[datetime] = None

    @classmethod
    def list_acp(
        cls,
        names: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        connected: Optional[bool] = None,
        metadata: Optional[Sequence[str]] = None,
        metadata_filter: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[ACPItem], ACPListPaginated]:
        """
        List ACP

        **Pagination Sortable Columns:** `acp.name`, `acp.title`, `acp.created`, `acp.updated`, `status_state`, `status_last_seen`

        **Permission Required:** `kelvin.permission.acp.read`.

        ``listACP``: ``GET`` ``/api/v4/acps/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter ACPs by name
        search : :obj:`Sequence[str]`
            Search ACP by name or title
        connected : :obj:`bool`
            Filter by connected ACPs. Possible Values: true/false. Default: none
        metadata : :obj:`Sequence[str]`
            Inject metadata into the response
        metadata_filter : :obj:`Sequence[str]`
            Dot separated string to filter by metadata values
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/acps/list",
            {},
            {
                "names": names,
                "search": search,
                "connected": connected,
                "metadata": metadata,
                "metadata_filter": metadata_filter,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": ACPListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/acps/list", "GET") if fetch and not _dry_run else result

    @classmethod
    def create_acp_metadata_bulk(
        cls,
        data: Optional[Union[requests.ACPMetadataBulkCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Create ACP Metadata Bulk

        **Permission Required:** `kelvin.permission.acp.create`.

        ``createACPMetadataBulk``: ``POST`` ``/api/v4/acps/metadata/create``

        Parameters
        ----------
        data: requests.ACPMetadataBulkCreate, optional
        **kwargs:
            Extra parameters for requests.ACPMetadataBulkCreate

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/acps/metadata/create",
            {},
            {},
            {},
            {},
            data,
            requests.ACPMetadataBulkCreate,
            False,
            {
                "201": None,
                "207": ErrorMessages,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def delete_acp_metadata_bulk(
        cls,
        data: Optional[Union[requests.ACPMetadataBulkDelete, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Delete ACP Metadata Bulk

        **Permission Required:** `kelvin.permission.acp.delete`.

        ``deleteACPMetadataBulk``: ``POST`` ``/api/v4/acps/metadata/delete``

        Parameters
        ----------
        data: requests.ACPMetadataBulkDelete, optional
        **kwargs:
            Extra parameters for requests.ACPMetadataBulkDelete

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/acps/metadata/delete",
            {},
            {},
            {},
            {},
            data,
            requests.ACPMetadataBulkDelete,
            False,
            {
                "200": None,
                "207": ErrorMessages,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_acp_status_count(cls, _dry_run: bool = False, _client: Any = None) -> ACPStatusCount:
        """
        Get ACP Status Count

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getACPStatusCount``: ``GET`` ``/api/v4/acps/status/count/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/acps/status/count/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": ACPStatusCount,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def delete_acp(self_or_cls, acp_name: str, _dry_run: bool = False, _client: Any = None) -> None:
        """
        Delete ACP

        **Permission Required:** `kelvin.permission.acp.delete`.

        ``deleteACP``: ``POST`` ``/api/v4/acps/{acp_name}/delete``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/delete",
            {"acp_name": acp_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def force_update_acp_edge_app_version(
        self_or_cls, acp_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Force Update ACP Edge App Version

        **Permission Required:** `kelvin.permission.acp.read`.

        ``forceUpdateACPEdgeAppVersion``: ``POST`` ``/api/v4/acps/{acp_name}/edge-apps/version/force-update``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/edge-apps/version/force-update",
            {"acp_name": acp_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def get_acp_edge_app_version(
        self_or_cls, acp_name: str, _dry_run: bool = False, _client: Any = None
    ) -> ACPEdgeAppVersion:
        """
        Get ACP Edge App Version

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getACPEdgeAppVersion``: ``GET`` ``/api/v4/acps/{acp_name}/edge-apps/version/get``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/edge-apps/version/get",
            {"acp_name": acp_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": ACPEdgeAppVersion,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def get_acp(
        self_or_cls,
        acp_name: str,
        metadata: Optional[Sequence[str]] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> ACP:
        """
        Get ACP

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getACP``: ``GET`` ``/api/v4/acps/{acp_name}/get``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        metadata : :obj:`Sequence[str]`
            Inject metadata into the response

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/get",
            {"acp_name": acp_name},
            {"metadata": metadata},
            {},
            {},
            None,
            None,
            False,
            {"200": ACP, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def create_acp_metadata(
        self_or_cls,
        acp_name: str,
        data: Optional[Union[requests.ACPMetadataCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> ACPMetadata:
        """
        Create ACP Metadata

        **Permission Required:** `kelvin.permission.acp.create`.

        ``createACPMetadata``: ``POST`` ``/api/v4/acps/{acp_name}/metadata/create``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        data: requests.ACPMetadataCreate, optional
        **kwargs:
            Extra parameters for requests.ACPMetadataCreate
              - name: str
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/metadata/create",
            {"acp_name": acp_name},
            {},
            {},
            {},
            data,
            requests.ACPMetadataCreate,
            False,
            {"201": ACPMetadata, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def list_acp_metadata(
        self_or_cls,
        acp_name: str,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[ACPMetaDataItem], ACPMetadataListPaginated]:
        """
        List ACP Metadata

        **Pagination Sortable Columns:** `acp_metadata.name`, `acp_metadata.acp_name`

        **Permission Required:** `kelvin.permission.acp.read`.

        ``listACPMetadata``: ``GET`` ``/api/v4/acps/{acp_name}/metadata/list``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        search : :obj:`Sequence[str]`
            Search ACP Metadata by name
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/metadata/list",
            {"acp_name": acp_name},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": ACPMetadataListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/acps/{acp_name}/metadata/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def delete_acp_metadata(
        self_or_cls,
        acp_name: str,
        acp_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> None:
        """
        Delete ACP Metadata

        **Permission Required:** `kelvin.permission.acp.delete`.

        ``deleteACPMetadata``: ``POST`` ``/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/delete``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        acp_metadata_name : :obj:`str`, optional
            ACP Metadata name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/delete",
            {"acp_name": acp_name, "acp_metadata_name": acp_metadata_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def get_acp_metadata(
        self_or_cls,
        acp_name: str,
        acp_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> ACPMetadata:
        """
        Get ACP Metadata

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getACPMetadata``: ``GET`` ``/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/get``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        acp_metadata_name : :obj:`str`, optional
            ACP Metadata name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/get",
            {"acp_name": acp_name, "acp_metadata_name": acp_metadata_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": ACPMetadata, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def update_acp_metadata(
        self_or_cls,
        acp_name: str,
        acp_metadata_name: str,
        data: Optional[Union[requests.ACPMetadataUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> ACPMetadata:
        """
        Update ACP Metadata

        **Permission Required:** `kelvin.permission.acp.update`.

        ``updateACPMetadata``: ``POST`` ``/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/update``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        acp_metadata_name : :obj:`str`, optional
            ACP Metadata name
        data: requests.ACPMetadataUpdate, optional
        **kwargs:
            Extra parameters for requests.ACPMetadataUpdate
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/update",
            {"acp_name": acp_name, "acp_metadata_name": acp_metadata_name},
            {},
            {},
            {},
            data,
            requests.ACPMetadataUpdate,
            False,
            {
                "200": ACPMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def update_acp_status(
        self_or_cls,
        acp_name: str,
        data: Optional[Union[requests.ACPStatusUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> ACPStatus:
        """
        Update ACP Status

        **Permission Required:** `kelvin.permission.acp.update`.

        ``updateACPStatus``: ``POST`` ``/api/v4/acps/{acp_name}/status/update``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        data: requests.ACPStatusUpdate, optional
        **kwargs:
            Extra parameters for requests.ACPStatusUpdate
              - configs: list
              - node: str
              - pending_workloads: list
              - workloads: list

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/status/update",
            {"acp_name": acp_name},
            {},
            {},
            {},
            data,
            requests.ACPStatusUpdate,
            False,
            {"200": ACPStatus, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def get_acp_telemetry(
        self_or_cls, acp_name: str, _dry_run: bool = False, _client: Any = None
    ) -> ACPTelemetry:
        """
        Get ACP Telemetry

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getACPTelemetry``: ``GET`` ``/api/v4/acps/{acp_name}/telemetry/get``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/telemetry/get",
            {"acp_name": acp_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": ACPTelemetry, "400": ErrorMessages, "401": ErrorMessages, "500": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def update_acp(
        self_or_cls,
        acp_name: str,
        data: Optional[Union[requests.ACPUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> ACP:
        """
        Update ACP

        **Permission Required:** `kelvin.permission.acp.update`.

        ``updateACP``: ``POST`` ``/api/v4/acps/{acp_name}/update``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        data: requests.ACPUpdate, optional
        **kwargs:
            Extra parameters for requests.ACPUpdate
              - location: str
              - manifests_scrape_interval: int
              - sync_scrape_interval: int
              - telemetry_scrape_interval: int
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/update",
            {"acp_name": acp_name},
            {},
            {},
            {},
            data,
            requests.ACPUpdate,
            False,
            {
                "200": ACP,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def get_workloads_manifests(
        self_or_cls, acp_name: str, _dry_run: bool = False, _client: Any = None
    ) -> ACPWorkloadManifests:
        """
        Get Workloads Manifests assigned to an ACP

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getWorkloadsManifests``: ``GET`` ``/api/v4/acps/{acp_name}/workloads/manifests/get``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/workloads/manifests/get",
            {"acp_name": acp_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": ACPWorkloadManifests,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result


class ACPListPaginated(PaginatorDataModel[ACPItem]):
    """
    ACPListPaginated object.

    Parameters
    ----------
    data: Optional[List[ACPItem]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[ACPItem]] = None
    pagination: Optional[pagination.Pagination] = None


class ACPStatus(DataModelBase):
    """
    ACPStatus object.

    Parameters
    ----------
    name: Optional[str]
    status: Optional[ACPStatusValues]

    """

    name: Optional[str] = None
    status: Optional[ACPStatusValues] = None

    @classmethod
    def update_acp_status(
        cls,
        acp_name: str,
        data: Optional[Union[requests.ACPStatusUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> ACPStatus:
        """
        Update ACP Status

        **Permission Required:** `kelvin.permission.acp.update`.

        ``updateACPStatus``: ``POST`` ``/api/v4/acps/{acp_name}/status/update``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        data: requests.ACPStatusUpdate, optional
        **kwargs:
            Extra parameters for requests.ACPStatusUpdate
              - configs: list
              - node: str
              - pending_workloads: list
              - workloads: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/status/update",
            {"acp_name": acp_name},
            {},
            {},
            {},
            data,
            requests.ACPStatusUpdate,
            False,
            {"200": ACPStatus, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class Alarm(DataModelBase):
    """
    Alarm object.

    Parameters
    ----------
    acknowledged_at: Optional[datetime]
    acknowledged_by: Optional[str]
    alarm_class_name: Optional[str]
    alarm_class_title: Optional[str]
    alarm_type_name: Optional[str]
    alarm_type_title: Optional[str]
    created_at: Optional[datetime]
    created_by: Optional[CreatedBy]
    custom_identifier: Optional[str]
    description: Optional[str]
    id: Optional[str]
    payload: Optional[Dict[str, Any]]
    resolved_at: Optional[datetime]
    resolved_by: Optional[str]
    severity: Optional[int]
    severity_name: Optional[str]
    severity_title: Optional[str]
    solution: Optional[str]
    source_assets: Optional[List[SourceAssets]]
    status: Optional[str]
    status_payload: Optional[Dict[str, Any]]
    tags: Optional[List[str]]
    target_asset_class_name: Optional[str]
    target_asset_class_title: Optional[str]
    target_asset_name: Optional[str]
    target_asset_title: Optional[str]
    target_asset_type_name: Optional[str]
    target_asset_type_title: Optional[str]
    title: Optional[str]
    updated_at: Optional[datetime]

    """

    acknowledged_at: Optional[datetime] = None
    acknowledged_by: Optional[str] = None
    alarm_class_name: Optional[str] = None
    alarm_class_title: Optional[str] = None
    alarm_type_name: Optional[str] = None
    alarm_type_title: Optional[str] = None
    created_at: Optional[datetime] = None
    created_by: Optional[CreatedBy] = None
    custom_identifier: Optional[str] = None
    description: Optional[str] = None
    id: Optional[str] = None
    payload: Optional[Dict[str, Any]] = None
    resolved_at: Optional[datetime] = None
    resolved_by: Optional[str] = None
    severity: Optional[int] = None
    severity_name: Optional[str] = None
    severity_title: Optional[str] = None
    solution: Optional[str] = None
    source_assets: Optional[List[SourceAssets]] = None
    status: Optional[str] = None
    status_payload: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    target_asset_class_name: Optional[str] = None
    target_asset_class_title: Optional[str] = None
    target_asset_name: Optional[str] = None
    target_asset_title: Optional[str] = None
    target_asset_type_name: Optional[str] = None
    target_asset_type_title: Optional[str] = None
    title: Optional[str] = None
    updated_at: Optional[datetime] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_alarm_class(
        self_or_cls,
        data: Optional[Union[requests.AlarmClassCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmClass:
        """
        Create Alarm Class

        **Permission Required:** `kelvin.permission.alarm_class.create`.

        ``createAlarmClass``: ``POST`` ``/api/v4/alarms/class/create``

        Parameters
        ----------
        data: requests.AlarmClassCreate, optional
        **kwargs:
            Extra parameters for requests.AlarmClassCreate
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/class/create",
            {},
            {},
            {},
            {},
            data,
            requests.AlarmClassCreate,
            False,
            {"201": AlarmClass, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_alarm_class(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        owner: Optional[str] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AlarmClass], AlarmClassListPaginated]:
        """
        List Alarm Class

        **Pagination Sortable Columns:** `alarm_class.name`, `alarm_class.title`, `alarm_class.created`, `alarm_class.updated`, `alarm_class.owner`

        **Permission Required:** `kelvin.permission.alarm_class.read`.

        ``listAlarmClass``: ``GET`` ``/api/v4/alarms/class/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search Alarm Class by name or title
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true
        owner : :obj:`str`
            Filter Alarm Class by owner. Possible Values: kelvin/custom

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/class/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "owner": owner,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmClassListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/alarms/class/list", "GET") if fetch and not _dry_run else result
        )

    @instance_classmethod
    @DataModelBase.translate()
    def delete_alarm_class(
        self_or_cls, alarm_class_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Alarm Class

        **Permission Required:** `kelvin.permission.alarm_class.delete`.

        ``deleteAlarmClass``: ``POST`` ``/api/v4/alarms/class/{alarm_class_name}/delete``

        Parameters
        ----------
        alarm_class_name : :obj:`str`, optional
            Alarm Class Name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/class/{alarm_class_name}/delete",
            {"alarm_class_name": alarm_class_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_alarm_class(
        self_or_cls, alarm_class_name: str, _dry_run: bool = False, _client: Any = None
    ) -> AlarmClass:
        """
        Get Alarm Class

        **Permission Required:** `kelvin.permission.alarm_class.read`.

        ``getAlarmClass``: ``GET`` ``/api/v4/alarms/class/{alarm_class_name}/get``

        Parameters
        ----------
        alarm_class_name : :obj:`str`, optional
            Alarm Class Name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/class/{alarm_class_name}/get",
            {"alarm_class_name": alarm_class_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmClass, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_alarm_class(
        self_or_cls,
        alarm_class_name: str,
        data: Optional[Union[requests.AlarmClassUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmClass:
        """
        Update Alarm Class

        **Permission Required:** `kelvin.permission.alarm_class.update`.

        ``updateAlarmClass``: ``POST`` ``/api/v4/alarms/class/{alarm_class_name}/update``

        Parameters
        ----------
        alarm_class_name : :obj:`str`, optional
            Alarm Class Name
        data: requests.AlarmClassUpdate, optional
        **kwargs:
            Extra parameters for requests.AlarmClassUpdate
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/class/{alarm_class_name}/update",
            {"alarm_class_name": alarm_class_name},
            {},
            {},
            {},
            data,
            requests.AlarmClassUpdate,
            False,
            {
                "200": AlarmClass,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_alarm_clustering(
        cls,
        data: Optional[Union[requests.AlarmClustering, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[AlarmClustering]:
        """
        Get Alarm Clustering

        **Permission Required:** `kelvin.permission.alarm.read`.

        ``getAlarmClustering``: ``POST`` ``/api/v4/alarms/clustering/get``

        Parameters
        ----------
        data: requests.AlarmClustering, optional
        **kwargs:
            Extra parameters for requests.AlarmClustering
              - alarm_severities: list
              - asset_include_children: bool
              - end_date: datetime
              - start_date: datetime
              - target_asset_names: list
              - time_bucket: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/clustering/get",
            {},
            {},
            {},
            {},
            data,
            requests.AlarmClustering,
            False,
            {
                "200": List[AlarmClustering],
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_alarm(
        self_or_cls,
        data: Optional[Union[requests.AlarmCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Alarm:
        """
        Create Alarm. The alarm is associated with an asset (Kelvin Asset, Kelvin Component, Kelvin Part or Kelvin Sensor). The asset(s) that trigger the alarm (source) does not need to be the same asset (target) that the alarm is associated with. The source asset can be more than one asset.

        **Permission Required:** `kelvin.permission.alarm.create`.

        ``createAlarm``: ``POST`` ``/api/v4/alarms/create``

        Parameters
        ----------
        data: requests.AlarmCreate, optional
        **kwargs:
            Extra parameters for requests.AlarmCreate
              - alarm_type_name: str
              - created_by: str
              - custom_identifier: str
              - description: str
              - payload: dict
              - severity: int
              - solution: str
              - source_asset_names: list
              - tags: list
              - target_asset_name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/create",
            {},
            {},
            {},
            {},
            data,
            requests.AlarmCreate,
            False,
            {"201": Alarm, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_alarm_filter(
        self_or_cls,
        data: Optional[Union[requests.AlarmFilterCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmFilter:
        """
        Create Alarm Filter

        **Permission Required:** `kelvin.permission.alarm_filter.create`.

        ``createAlarmFilter``: ``POST`` ``/api/v4/alarms/filters/create``

        Parameters
        ----------
        data: requests.AlarmFilterCreate, optional
        **kwargs:
            Extra parameters for requests.AlarmFilterCreate
              - payload: dict
              - title: str
              - username: str
              - version: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/filters/create",
            {},
            {},
            {},
            {},
            data,
            requests.AlarmFilterCreate,
            False,
            {"201": AlarmFilter, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_alarm_filter(
        cls,
        search: Optional[Sequence[str]] = None,
        alarm_class_name: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AlarmFilter], AlarmFilterListPaginated]:
        """
        List Alarm Filter

        **Pagination Sortable Columns:** `alarm_filter.title`, `alarm_filter.username`, `alarm_filter.version`, `alarm_filter.created`, `alarm_filter.updated`

        **Permission Required:** `kelvin.permission.alarm_filter.read`.

        ``listAlarmFilter``: ``GET`` ``/api/v4/alarms/filters/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search alarm filter by title or version
        alarm_class_name : :obj:`Sequence[str]`
            Filter alarm filter by alarm class
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/filters/list",
            {},
            {
                "search": search,
                "alarm_class_name": alarm_class_name,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmFilterListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/alarms/filters/list", "GET") if fetch and not _dry_run else result
        )

    @classmethod
    def delete_alarm_filter(
        cls, alarm_filter_id: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Alarm Filter

        **Permission Required:** `kelvin.permission.alarm_filter.delete`.

        ``deleteAlarmFilter``: ``POST`` ``/api/v4/alarms/filters/{alarm_filter_id}/delete``

        Parameters
        ----------
        alarm_filter_id : :obj:`str`, optional
            Alarm Filter id

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/filters/{alarm_filter_id}/delete",
            {"alarm_filter_id": alarm_filter_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_alarm_filter(
        cls,
        alarm_filter_id: str,
        metadata: Optional[Sequence[str]] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> AlarmFilter:
        """
        Get Alarm Filter

        **Permission Required:** `kelvin.permission.alarm_filter.read`.

        ``getAlarmFilter``: ``GET`` ``/api/v4/alarms/filters/{alarm_filter_id}/get``

        Parameters
        ----------
        alarm_filter_id : :obj:`str`, optional
            Alarm Filter ID
        metadata : :obj:`Sequence[str]`
            Inject metadata into the response

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/filters/{alarm_filter_id}/get",
            {"alarm_filter_id": alarm_filter_id},
            {"metadata": metadata},
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmFilter, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_alarm_filter(
        self_or_cls,
        alarm_filter_id: str,
        data: Optional[Union[requests.AlarmFilterUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmFilter:
        """
        Update Alarm Filter

        **Permission Required:** `kelvin.permission.alarm_filter.update`.

        ``updateAlarmFilter``: ``POST`` ``/api/v4/alarms/filters/{alarm_filter_id}/update``

        Parameters
        ----------
        alarm_filter_id : :obj:`str`, optional
            Alarm Filter ID
        data: requests.AlarmFilterUpdate, optional
        **kwargs:
            Extra parameters for requests.AlarmFilterUpdate
              - payload: dict
              - title: str
              - version: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/filters/{alarm_filter_id}/update",
            {"alarm_filter_id": alarm_filter_id},
            {},
            {},
            {},
            data,
            requests.AlarmFilterUpdate,
            False,
            {"200": AlarmFilter, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_alarms(
        cls,
        pagination_type: Optional[Literal["limits", "cursor", "stream"]] = None,
        page_size: Optional[int] = 1000,
        page: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        direction: Optional[Literal["asc", "desc"]] = None,
        sort_by: Optional[Sequence[str]] = None,
        data: Optional[Union[requests.AlarmList, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[Alarm], AlarmListPaginated]:
        """
        List Alarms

        **Pagination Sortable Columns:** `id`, `title`, `alarm_class_name`, `alarm_class_title`, `alarm_type_name`, `alarm_type_title`, `target_asset_class_name`, `target_asset_class_title`, `target_asset_type_name`, `target_asset_type_title`, `target_asset_name`, `target_asset_title`, `description`, `solution`, `status`, `severity`, `severity_name`, `severity_title`, `created_by.type`, `created_by.name`, `custom_identifier`, `created_at`, `acknowledged_by`, `acknowledged_at`, `resolved_by`, `resolved_at`, `updated`

        **Permission Required:** `kelvin.permission.alarm.read`.

        ``listAlarms``: ``POST`` ``/api/v4/alarms/list``

        Parameters
        ----------
        pagination_type : :obj:`Literal['limits', 'cursor', 'stream']`
            Desired pagination type (limits, cursor, stream)
        page_size : :obj:`int`
            Desired page size
        page : :obj:`int`
            Desired page. Only valid for type=limits pagination
        next : :obj:`str`
            Retrieve next page. Only valid for type=cursor pagination
        previous : :obj:`str`
            Retrieve previous page. Only valid for type=cursor pagination
        direction : :obj:`Literal['asc', 'desc']`
            Direction in which to sort the data (asc, desc)
        sort_by : :obj:`Sequence[str]`
            Columns by which to sort the data
        data: requests.AlarmList, optional
        **kwargs:
            Extra parameters for requests.AlarmList
              - acknowledged_at_end: datetime
              - acknowledged_at_start: datetime
              - acknowledged_by: list
              - alarm_class_names: list
              - alarm_ids: list
              - alarm_severities: list
              - alarm_statuses: list
              - alarm_type_names: list
              - asset_class_names: list
              - asset_include_children: bool
              - asset_type_names: list
              - created_at_end: datetime
              - created_at_start: datetime
              - created_by: list
              - custom_identifiers: list
              - resolved_at_end: datetime
              - resolved_at_start: datetime
              - resolved_by: list
              - search: list
              - tags: list
              - target_asset_names: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/list",
            {},
            {
                "pagination_type": pagination_type,
                "page_size": page_size,
                "page": page,
                "next": next,
                "previous": previous,
                "direction": direction,
                "sort_by": sort_by,
            },
            {},
            {},
            data,
            requests.AlarmList,
            False,
            {"200": AlarmListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result.fetch("/api/v4/alarms/list", "POST") if fetch and not _dry_run else result

    @classmethod
    def get_alarm_severities(cls, _dry_run: bool = False, _client: Any = None) -> AlarmSeverityList:
        """
        Get Alarm Severities

        **Permission Required:** `kelvin.permission.alarm_severity.read`.

        ``getAlarmSeverities``: ``GET`` ``/api/v4/alarms/severities/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/severities/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmSeverityList, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def update_alarm_severities(
        cls,
        data: Optional[Union[requests.AlarmSeverityUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmSeverityList:
        """
        Update Alarm Severities

        **Permission Required:** `kelvin.permission.alarm_severity.update`.

        ``updateAlarmSeverities``: ``POST`` ``/api/v4/alarms/severities/update``

        Parameters
        ----------
        data: requests.AlarmSeverityUpdate, optional
        **kwargs:
            Extra parameters for requests.AlarmSeverityUpdate
              - data: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/severities/update",
            {},
            {},
            {},
            {},
            data,
            requests.AlarmSeverityUpdate,
            False,
            {
                "200": AlarmSeverityList,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_asset_alarm_statistics(
        cls,
        asset_names: Optional[Sequence[str]] = None,
        asset_include_children: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> AlarmAssetsStatistics:
        """
        Get Asset Alarm Statistics

        **Permission Required:** `kelvin.permission.alarm.read`.

        ``getAssetAlarmStatistics``: ``GET`` ``/api/v4/alarms/statistics/assets/get``

        Parameters
        ----------
        asset_names : :obj:`Sequence[str]`
            Filter by asset_names
        asset_include_children : :obj:`bool`
            Include children statistics. Default: false

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/statistics/assets/get",
            {},
            {"asset_names": asset_names, "asset_include_children": asset_include_children},
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmAssetsStatistics, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_statistics(
        self_or_cls,
        data: Optional[Union[requests.AlarmList, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmStatistics:
        """
        Get Statistics

        **Permission Required:** `kelvin.permission.alarm.read`.

        ``getStatistics``: ``POST`` ``/api/v4/alarms/statistics/get``

        Parameters
        ----------
        data: requests.AlarmList, optional
        **kwargs:
            Extra parameters for requests.AlarmList
              - acknowledged_at_end: datetime
              - acknowledged_at_start: datetime
              - acknowledged_by: list
              - alarm_class_names: list
              - alarm_ids: list
              - alarm_severities: list
              - alarm_statuses: list
              - alarm_type_names: list
              - asset_class_names: list
              - asset_include_children: bool
              - asset_type_names: list
              - created_at_end: datetime
              - created_at_start: datetime
              - created_by: list
              - custom_identifiers: list
              - resolved_at_end: datetime
              - resolved_at_start: datetime
              - resolved_by: list
              - search: list
              - tags: list
              - target_asset_names: list

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/statistics/get",
            {},
            {},
            {},
            {},
            data,
            requests.AlarmList,
            False,
            {"200": AlarmStatistics, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_tag(
        self_or_cls,
        data: Optional[Union[requests.AlarmTagCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmTag:
        """
        Create Tag

        **Permission Required:** `kelvin.permission.alarm.create`.

        ``createTag``: ``POST`` ``/api/v4/alarms/tags/create``

        Parameters
        ----------
        data: requests.AlarmTagCreate, optional
        **kwargs:
            Extra parameters for requests.AlarmTagCreate
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/tags/create",
            {},
            {},
            {},
            {},
            data,
            requests.AlarmTagCreate,
            False,
            {"201": AlarmTag, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_tags(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AlarmTag], AlarmTagListPaginated]:
        """
        List Tags

        **Pagination Sortable Columns:** `tag.name`, `tag.title`

        **Permission Required:** `kelvin.permission.alarm.read`.

        ``listTags``: ``GET`` ``/api/v4/alarms/tags/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search tags by name or title
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/tags/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmTagListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/alarms/tags/list", "GET") if fetch and not _dry_run else result

    @classmethod
    def delete_tag(cls, tag_name: str, _dry_run: bool = False, _client: Any = None) -> None:
        """
        Delete Tag

        **Permission Required:** `kelvin.permission.alarm.delete`.

        ``deleteTag``: ``POST`` ``/api/v4/alarms/tags/{tag_name}/delete``

        Parameters
        ----------
        tag_name : :obj:`str`, optional
            Tag name

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/tags/{tag_name}/delete",
            {"tag_name": tag_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_tag(cls, tag_name: str, _dry_run: bool = False, _client: Any = None) -> AlarmTag:
        """
        Get Tag

        **Permission Required:** `kelvin.permission.alarm.read`.

        ``getTag``: ``GET`` ``/api/v4/alarms/tags/{tag_name}/get``

        Parameters
        ----------
        tag_name : :obj:`str`, optional
            Tag name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/tags/{tag_name}/get",
            {"tag_name": tag_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmTag, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_tag(
        self_or_cls,
        tag_name: str,
        data: Optional[Union[requests.AlarmTagUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmTag:
        """
        Update Tag

        **Permission Required:** `kelvin.permission.alarm.update`.

        ``updateTag``: ``POST`` ``/api/v4/alarms/tags/{tag_name}/update``

        Parameters
        ----------
        tag_name : :obj:`str`, optional
            Tag name
        data: requests.AlarmTagUpdate, optional
        **kwargs:
            Extra parameters for requests.AlarmTagUpdate
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/tags/{tag_name}/update",
            {"tag_name": tag_name},
            {},
            {},
            {},
            data,
            requests.AlarmTagUpdate,
            False,
            {
                "200": AlarmTag,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_alarm_type(
        self_or_cls,
        data: Optional[Union[requests.AlarmTypeCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmType:
        """
        Create Alarm Type

        **Permission Required:** `kelvin.permission.alarm_type.create`.

        ``createAlarmType``: ``POST`` ``/api/v4/alarms/types/create``

        Parameters
        ----------
        data: requests.AlarmTypeCreate, optional
        **kwargs:
            Extra parameters for requests.AlarmTypeCreate
              - alarm_class_name: str
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/types/create",
            {},
            {},
            {},
            {},
            data,
            requests.AlarmTypeCreate,
            False,
            {"201": AlarmType, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_alarm_type(
        cls,
        search: Optional[Sequence[str]] = None,
        alarm_class_name: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        owner: Optional[str] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AlarmType], AlarmTypeListPaginated]:
        """
        List Alarm Type

        **Pagination Sortable Columns:** `alarm_type.name`, `alarm_type.title`, `alarm_type.created`, `alarm_type.updated`, `alarm_class.name`, `alarm_class.title`, `alarm_type.owner`

        **Permission Required:** `kelvin.permission.alarm_type.read`.

        ``listAlarmType``: ``GET`` ``/api/v4/alarms/types/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search alarm type by name or title
        alarm_class_name : :obj:`Sequence[str]`
            Filter alarm type by alarm class
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true
        owner : :obj:`str`
            Filter Alarm Type by owner. Possible Values: kelvin/custom

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/types/list",
            {},
            {
                "search": search,
                "alarm_class_name": alarm_class_name,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "owner": owner,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmTypeListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/alarms/types/list", "GET") if fetch and not _dry_run else result
        )

    @instance_classmethod
    @DataModelBase.translate()
    def delete_alarm_type(
        self_or_cls, alarm_type_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Alarm Type

        **Permission Required:** `kelvin.permission.alarm_type.delete`.

        ``deleteAlarmType``: ``POST`` ``/api/v4/alarms/types/{alarm_type_name}/delete``

        Parameters
        ----------
        alarm_type_name : :obj:`str`, optional
            Alarm Type name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/types/{alarm_type_name}/delete",
            {"alarm_type_name": alarm_type_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_alarm_type(
        self_or_cls, alarm_type_name: str, _dry_run: bool = False, _client: Any = None
    ) -> AlarmType:
        """
        Get Alarm Type

        **Permission Required:** `kelvin.permission.alarm_type.read`.

        ``getAlarmType``: ``GET`` ``/api/v4/alarms/types/{alarm_type_name}/get``

        Parameters
        ----------
        alarm_type_name : :obj:`str`, optional
            Alarm Type name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/types/{alarm_type_name}/get",
            {"alarm_type_name": alarm_type_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmType, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_alarm_type(
        self_or_cls,
        alarm_type_name: str,
        data: Optional[Union[requests.AlarmTypeUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmType:
        """
        Update Alarm Type

        **Permission Required:** `kelvin.permission.alarm_type.update`.

        ``updateAlarmType``: ``POST`` ``/api/v4/alarms/types/{alarm_type_name}/update``

        Parameters
        ----------
        alarm_type_name : :obj:`str`, optional
            Alarm Type name
        data: requests.AlarmTypeUpdate, optional
        **kwargs:
            Extra parameters for requests.AlarmTypeUpdate
              - alarm_class_name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/types/{alarm_type_name}/update",
            {"alarm_type_name": alarm_type_name},
            {},
            {},
            {},
            data,
            requests.AlarmTypeUpdate,
            False,
            {
                "200": AlarmType,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"alarm_id": "id"})
    def delete_alarm(
        self_or_cls, alarm_id: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Alarm

        **Permission Required:** `kelvin.permission.alarm.delete`.

        ``deleteAlarm``: ``POST`` ``/api/v4/alarms/{alarm_id}/delete``

        Parameters
        ----------
        alarm_id : :obj:`str`, optional
            Alarm UUID

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/{alarm_id}/delete",
            {"alarm_id": alarm_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"alarm_id": "id"})
    def get_alarm(self_or_cls, alarm_id: str, _dry_run: bool = False, _client: Any = None) -> Alarm:
        """
        Get Alarm

        **Permission Required:** `kelvin.permission.alarm.read`.

        ``getAlarm``: ``GET`` ``/api/v4/alarms/{alarm_id}/get``

        Parameters
        ----------
        alarm_id : :obj:`str`, optional
            Alarm UUID

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/{alarm_id}/get",
            {"alarm_id": alarm_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": Alarm, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"alarm_id": "id"})
    def update_status(
        self_or_cls,
        alarm_id: str,
        data: Optional[Union[requests.AlarmUpdateStatus, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Update Status

        **Permission Required:** `kelvin.permission.alarm.update`.

        ``updateStatus``: ``POST`` ``/api/v4/alarms/{alarm_id}/status/update``

        Parameters
        ----------
        alarm_id : :obj:`str`, optional
            Alarm UUID
        data: requests.AlarmUpdateStatus, optional
        **kwargs:
            Extra parameters for requests.AlarmUpdateStatus
              - status: str
              - status_payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/{alarm_id}/status/update",
            {"alarm_id": alarm_id},
            {},
            {},
            {},
            data,
            requests.AlarmUpdateStatus,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"alarm_id": "id"})
    def update(
        self_or_cls,
        alarm_id: str,
        data: Optional[Union[requests.AlarmUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Alarm:
        """
        Update Alarm

        **Permission Required:** `kelvin.permission.alarm.update`.

        ``update``: ``POST`` ``/api/v4/alarms/{alarm_id}/update``

        Parameters
        ----------
        alarm_id : :obj:`str`, optional
            Alarm UUID
        data: requests.AlarmUpdate, optional
        **kwargs:
            Extra parameters for requests.AlarmUpdate
              - alarm_type_name: str
              - custom_identifier: str
              - description: str
              - payload: dict
              - severity: int
              - solution: str
              - source_asset_names: list
              - tags: list
              - target_asset_name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/{alarm_id}/update",
            {"alarm_id": alarm_id},
            {},
            {},
            {},
            data,
            requests.AlarmUpdate,
            False,
            {"201": Alarm, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class AlarmAssetStatistics(DataModelBase):
    """
    AlarmAssetStatistics object.

    Parameters
    ----------
    asset_name: Optional[str]
    severity: Optional[List[SeverityStatistics]]
    status: Optional[StatusStatistics]

    """

    asset_name: Optional[str] = None
    severity: Optional[List[SeverityStatistics]] = None
    status: Optional[StatusStatistics] = None


class AlarmAssetsStatistics(DataModelBase):
    """
    AlarmAssetsStatistics object.

    Parameters
    ----------
    data: Optional[List[AlarmAssetStatistics]]

    """

    data: Optional[List[AlarmAssetStatistics]] = None

    @classmethod
    def get_asset_alarm_statistics(
        cls,
        asset_names: Optional[Sequence[str]] = None,
        asset_include_children: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> AlarmAssetsStatistics:
        """
        Get Asset Alarm Statistics

        **Permission Required:** `kelvin.permission.alarm.read`.

        ``getAssetAlarmStatistics``: ``GET`` ``/api/v4/alarms/statistics/assets/get``

        Parameters
        ----------
        asset_names : :obj:`Sequence[str]`
            Filter by asset_names
        asset_include_children : :obj:`bool`
            Include children statistics. Default: false

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/statistics/assets/get",
            {},
            {"asset_names": asset_names, "asset_include_children": asset_include_children},
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmAssetsStatistics, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class AlarmListPaginated(PaginatorDataModel[Alarm]):
    """
    AlarmListPaginated object.

    Parameters
    ----------
    data: Optional[List[Alarm]]
    pagination: Optional[paginator.PaginationInfo]

    """

    data: Optional[List[Alarm]] = None
    pagination: Optional[paginator.PaginationInfo] = None


class AlarmStatistics(DataModelBase):
    """
    AlarmStatistics object.

    Parameters
    ----------
    severity: Optional[List[SeverityStatistics]]
    status: Optional[StatusStatistics]

    """

    severity: Optional[List[SeverityStatistics]] = None
    status: Optional[StatusStatistics] = None

    @classmethod
    def get_asset_alarm_statistics(
        cls,
        asset_names: Optional[Sequence[str]] = None,
        asset_include_children: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> AlarmAssetsStatistics:
        """
        Get Asset Alarm Statistics

        **Permission Required:** `kelvin.permission.alarm.read`.

        ``getAssetAlarmStatistics``: ``GET`` ``/api/v4/alarms/statistics/assets/get``

        Parameters
        ----------
        asset_names : :obj:`Sequence[str]`
            Filter by asset_names
        asset_include_children : :obj:`bool`
            Include children statistics. Default: false

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/alarms/statistics/assets/get",
            {},
            {"asset_names": asset_names, "asset_include_children": asset_include_children},
            {},
            {},
            None,
            None,
            False,
            {"200": AlarmAssetsStatistics, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_statistics(
        cls,
        data: Optional[Union[requests.AlarmList, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AlarmStatistics:
        """
        Get Statistics

        **Permission Required:** `kelvin.permission.alarm.read`.

        ``getStatistics``: ``POST`` ``/api/v4/alarms/statistics/get``

        Parameters
        ----------
        data: requests.AlarmList, optional
        **kwargs:
            Extra parameters for requests.AlarmList
              - acknowledged_at_end: datetime
              - acknowledged_at_start: datetime
              - acknowledged_by: list
              - alarm_class_names: list
              - alarm_ids: list
              - alarm_severities: list
              - alarm_statuses: list
              - alarm_type_names: list
              - asset_class_names: list
              - asset_include_children: bool
              - asset_type_names: list
              - created_at_end: datetime
              - created_at_start: datetime
              - created_by: list
              - custom_identifiers: list
              - resolved_at_end: datetime
              - resolved_at_start: datetime
              - resolved_by: list
              - search: list
              - tags: list
              - target_asset_names: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/alarms/statistics/get",
            {},
            {},
            {},
            {},
            data,
            requests.AlarmList,
            False,
            {"200": AlarmStatistics, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class App(DataModelBase):
    """
    App object.

    Parameters
    ----------
    created: Optional[datetime]
    description: Optional[str]
    latest_version: Optional[str]
    name: Optional[str]
    title: Optional[str]
    type: Optional[str]
    updated: Optional[datetime]
    versions: Optional[List[AppVersion]]

    """

    created: Optional[datetime] = None
    description: Optional[str] = None
    latest_version: Optional[str] = None
    name: Optional[str] = Field(None, max_length=64)
    title: Optional[str] = Field(None, max_length=64)
    type: Optional[str] = None
    updated: Optional[datetime] = None
    versions: Optional[List[AppVersion]] = None

    @classmethod
    def create_app(
        cls,
        data: Optional[Union[requests.AppCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> App:
        """
        Create App

        **Note:** If the App already exists, the App Version will be appended to the existing App

        **Permission Required:** `kelvin.permission.appregistry.create`.

        ``createApp``: ``POST`` ``/api/v4/appregistry/create``

        Parameters
        ----------
        data: requests.AppCreate, optional
        **kwargs:
            Extra parameters for requests.AppCreate
              - payload: dict

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/appregistry/create",
            {},
            {},
            {},
            {},
            data,
            requests.AppCreate,
            False,
            {"201": App, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_apps(
        cls,
        type: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[App], AppListPaginated]:
        """
        List Apps

        **Pagination Sortable Columns:** `app.name`, `app.title`, `app.type`, `app.latest_version`, `app.created`, `app.updated`, `status`

        **Permission Required:** `kelvin.permission.appregistry.read`.

        ``listApps``: ``GET`` ``/api/v4/appregistry/list``

        Parameters
        ----------
        type : :obj:`Sequence[str]`
            Match the type field
        search : :obj:`Sequence[str]`
            Search Apps by name and title
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/appregistry/list",
            {},
            {
                "type": type,
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AppListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/appregistry/list", "GET") if fetch and not _dry_run else result

    @instance_classmethod
    @DataModelBase.translate({"app_name": "name"})
    def delete_app(self_or_cls, app_name: str, _dry_run: bool = False, _client: Any = None) -> None:
        """
        Delete App

        **Note:** Deleting an App will also delete all App Versions

        **Permission Required:** `kelvin.permission.appregistry.delete`.

        ``deleteApp``: ``POST`` ``/api/v4/appregistry/{app_name}/delete``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/appregistry/{app_name}/delete",
            {"app_name": app_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "412": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"app_name": "name"})
    def get_app(self_or_cls, app_name: str, _dry_run: bool = False, _client: Any = None) -> App:
        """
        Get App

        **Permission Required:** `kelvin.permission.appregistry.read`.

        ``getApp``: ``GET`` ``/api/v4/appregistry/{app_name}/get``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/appregistry/{app_name}/get",
            {"app_name": app_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": App, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"app_name": "name"})
    def update_app(
        self_or_cls,
        app_name: str,
        data: Optional[Union[requests.AppUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> App:
        """
        Update App

        **Permission Required:** `kelvin.permission.appregistry.update`.

        ``updateApp``: ``POST`` ``/api/v4/appregistry/{app_name}/update``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        data: requests.AppUpdate, optional
        **kwargs:
            Extra parameters for requests.AppUpdate
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/appregistry/{app_name}/update",
            {"app_name": app_name},
            {},
            {},
            {},
            data,
            requests.AppUpdate,
            False,
            {"200": App, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"app_name": "name"})
    def delete_app_version(
        self_or_cls, app_name: str, app_version: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete App Version

        **Note:** This operation also deletes the associated Docker Image

        **Permission Required:** `kelvin.permission.appregistry.delete`.

        ``deleteAppVersion``: ``POST`` ``/api/v4/appregistry/{app_name}/versions/{app_version}/delete``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        app_version : :obj:`str`, optional
            App Version

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/appregistry/{app_name}/versions/{app_version}/delete",
            {"app_name": app_name, "app_version": app_version},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"app_name": "name"})
    def get_app_version(
        self_or_cls, app_name: str, app_version: str, _dry_run: bool = False, _client: Any = None
    ) -> AppVersion:
        """
        Get App Version

        **Permission Required:** `kelvin.permission.appregistry.read`.

        ``getAppVersion``: ``GET`` ``/api/v4/appregistry/{app_name}/versions/{app_version}/get``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        app_version : :obj:`str`, optional
            App Version

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/appregistry/{app_name}/versions/{app_version}/get",
            {"app_name": app_name, "app_version": app_version},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": AppVersion, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class AppListPaginated(PaginatorDataModel[App]):
    """
    AppListPaginated object.

    Parameters
    ----------
    data: Optional[List[App]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[App]] = None
    pagination: Optional[pagination.Pagination] = None


class AssetHierarchyItem(DataModelBase):
    """
    AssetHierarchyItem object.

    Parameters
    ----------
    asset_type_name: Optional[str]
    entity_type_name: Optional[str]
    hierarchy: Optional[List[AssetHierarchyItem]]
    metrics: Optional[List[AssetMetricItem]]
    name: Optional[str]
    new: Optional[bool]
    status: Optional[str]
    title: Optional[str]
    visualization: Optional[Visualization]

    """

    asset_type_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    entity_type_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the entity type linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>.',
    )
    hierarchy: Optional[List[AssetHierarchyItem]] = Field(
        None,
        description="A list of all <a href=\"https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/\" target=\"_blank\">Kelvin Assets</a> which will include any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a> that are in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> below this <a href=\"https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/\" target=\"_blank\">Kelvin Assets</a>.",
    )
    metrics: Optional[List[AssetMetricItem]] = Field(
        None,
        description='List of all <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/" target="_blank">Kelvin Metrics</a> linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    name: Optional[str] = Field(
        None,
        description='Unique identifier name for this property in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a>.</p> This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.',
    )
    new: Optional[bool] = None
    status: Optional[str] = Field(
        None,
        description="Current status (state) of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>. There are four status options; `online`, `offline`, `partially_online` and `unknown`.",
    )
    title: Optional[str] = Field(
        None,
        description='Display name (title) for this property in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a>. This is a friendly name displayed in lists and in references within asset details.</p> You can use any character, numeric, space and special character in this parameter.',
    )
    visualization: Optional[Visualization] = None


class AssetHierarchyList(DataModelBase):
    """
    AssetHierarchyList object.

    Parameters
    ----------
    data: Optional[List[AssetHierarchyItem]]

    """

    data: Optional[List[AssetHierarchyItem]] = Field(
        None,
        description="A dictionary with a data property of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> with their <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> structure.",
    )

    @classmethod
    def upload_assets(
        cls, file: str, dry_run: Optional[bool] = None, _dry_run: bool = False, _client: Any = None
    ) -> AssetHierarchyList:
        """
        Upload Assets

        Upload a csv (comma-separated values) file with up to 20,000 assets to add as <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> into the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>. Each row represents one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>.

        The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> can also be created in this file by declaring the parent for each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>. If this field is left blank, then it is assumed to have no parent and will appear at the top of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        The first row of the csv file needs to be the header of the columns. `DISPLAY NAME,NAME,ASSET TYPE,LATITUDE,LONGITUDE,DIRECT PARENT,ENTITY TYPE`.

        Details of the options for each column are explained in this <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-manager-ui/management/assets/assets/#importing-assets-in-bulk' target='_blank'>Kelvin Documentation</a> link.

        The file needs to be saved in UTF-8 format with a comma separating each field. Do not use other separation options available in Microsoft Excel or Google Sheets such as semi-colons or colons. Strings in the csv file can be with or without quotation marks.

        **Permission Required:** `kelvin.permission.asset.create`.

        ``uploadAssets``: ``POST`` ``/api/v4/assets/create/upload``

        Parameters
        ----------
        file : :obj:`str`, optional
            Path and name of the CSV File to upload to the <a
            href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a>.</p> You can download a blank copy of the template from
            the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-manager-ui/control-manager-ui-overview/'
            target='_blank'>Kelvin Manager UI</a>. Instructions can be found in
            the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-manager-ui/management/metrics/metrics/#1-download-the-
            assets-csv-template' target='_blank'>Kelvin Documentation</a>.
        dry_run : :obj:`bool`
            Perform a trial run to create the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> without
            saving the changes.</p> This is very useful when you want to test your
            new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> structure
            without making any changes on the <a
            href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a>.

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/create/upload",
            {},
            {"dry_run": dry_run},
            {"file": file},
            {},
            None,
            None,
            False,
            {
                "200": AssetHierarchyList,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "412": CSVErrorMessage,
            },
            False,
            _dry_run,
        )
        return result


class AssetItem(DataModelBase):
    """
    AssetItem object.

    Parameters
    ----------
    asset_class_name: Optional[str]
    asset_class_title: Optional[str]
    asset_type_name: Optional[str]
    asset_type_title: Optional[str]
    created: Optional[datetime]
    entity_type_name: Optional[str]
    entity_type_title: Optional[str]
    name: Optional[str]
    properties: Optional[List[AssetProperty]]
    status: Optional[AssetStatusItem]
    title: Optional[str]
    updated: Optional[datetime]

    """

    asset_class_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
        max_length=64,
    )
    asset_class_title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
        max_length=64,
    )
    asset_type_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
        max_length=64,
    )
    asset_type_title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    created: Optional[datetime] = Field(
        None,
        description='Time of creation of this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )
    entity_type_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the entity type linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>.',
        max_length=64,
    )
    entity_type_title: Optional[str] = Field(
        None,
        description='Display name of the entity type linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>.',
    )
    name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
        max_length=64,
    )
    properties: Optional[List[AssetProperty]] = Field(
        None,
        description="Array of custom properties. These properties are not used by the Kelvin Platform and are for end-user use only.",
    )
    status: Optional[AssetStatusItem] = None
    title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
        max_length=64,
    )
    updated: Optional[datetime] = Field(
        None,
        description='Time of modifying any variable of this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )

    @instance_classmethod
    @DataModelBase.translate()
    def create_asset_class(
        self_or_cls,
        data: Optional[Union[requests.AssetClassCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetClass:
        """
        Create Asset Class

        To create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> you first need to create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> and <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>. A <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> is linked to an <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> which defines how the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> will be referenced in <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>. For example: <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> that is defined as a Group can only be linked to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> that is saved as <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> **group**.

        There are five <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a>; `group`, `asset`, `component`, `part` and `sensor`. Detailed information about these <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> and how they are used can be found at <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/</a>.

        A <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> is directly linked to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a>. There can be many <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> linked to one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a>.

        **Permission Required:** `kelvin.permission.asset_class.create`.

        ``createAssetClass``: ``POST`` ``/api/v4/assets/class/create``

        Parameters
        ----------
        data: requests.AssetClassCreate, optional
        **kwargs:
            Extra parameters for requests.AssetClassCreate
              - entity_type_name: str
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/class/create",
            {},
            {},
            {},
            {},
            data,
            requests.AssetClassCreate,
            False,
            {"201": AssetClass, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_asset_class(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        owner: Optional[str] = None,
        entity_type_name: Optional[Sequence[str]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetClass], AssetClassListPaginated]:
        """
        List Asset Class

        Returns a filtered dictionary with a data object containing an array of <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Classes</a> objects on the Kelvin Platform that meet the criteria of any parameters passed with the API request.

        If no query parameters are given with the API request, then the defaults will be used to return the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> list.

        The defaults are the first 20 <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Classe</a> objects returned in alphabetical order by the unique identifier name.

        **Pagination Sortable Columns:** `asset_class.name`, `asset_class.title`, `asset_class.created`, `asset_class.updated`, `asset_class.owner`, `asset_class.device_type_name`

        **Permission Required:** `kelvin.permission.asset_class.read`.

        ``listAssetClass``: ``GET`` ``/api/v4/assets/class/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> list. Both the Display Name and the Name will be included in
            the search field criteria. This is given as an array, for example
            `[pump,fan]`.</p> The search is case insensitive and will find partial
            matches as well. For example if a <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> name is `centrifugal_pump`, then a match will be made if the
            search string is `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-class'
            target='_blank'>Kelvin Asset Class</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Classes</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response parameter under pagination -> previous_page
            and pagination -> next_page respectively.</p> The pagination ->
            next_page alphanumeric string should be used here to show a list of
            the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Classes</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response parameter under pagination -> previous_page
            and pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> parameters. Only one parameter can be selected.</p> There
            are six parameter options; `asset_class.name`, `asset_class.title`,
            `asset_class.created`, `asset_class.updated`, `asset_class.owner` and
            `asset_class.device_type_name`.</p> The default is `asset_class.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        owner : :obj:`str`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-class'
            target='_blank'>Kelvin Asset Class</a> by owner.</p> There are two
            types of owners; `custom` (any user) or `kelvin` (core <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a>).</p> The default will select all owner options.
        entity_type_name : :obj:`Sequence[str]`
            Filter and return the results of one or more of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a>
            names. This is given as an array, for example `[group,asset]`. Prefix
            any entity type name with the character `!` for a NOT operation.</p>
            There are five <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets#entity-type'
            target='_blank'>Entity Type</a> names available to choose from;
            `group`, `asset`, `component`, `part`, `sensor`.</p> The default will
            select all available <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a>
            name options.</p>

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/class/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "owner": owner,
                "entity_type_name": entity_type_name,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetClassListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/assets/class/list", "GET") if fetch and not _dry_run else result
        )

    @instance_classmethod
    @DataModelBase.translate()
    def delete_asset_class(
        self_or_cls, asset_class_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Asset Class

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a>. This cannot be undone once the API request has been submitted.

        This command can not delete <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Classes</a> that are currently linked to any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Types</a> and will return an error 403.

        **Permission Required:** `kelvin.permission.asset_class.delete`.

        ``deleteAssetClass``: ``POST`` ``/api/v4/assets/class/{asset_class_name}/delete``

        Parameters
        ----------
        asset_class_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class </a> name to delete.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/class/{asset_class_name}/delete",
            {"asset_class_name": asset_class_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_asset_class(
        self_or_cls, asset_class_name: str, _dry_run: bool = False, _client: Any = None
    ) -> AssetClass:
        """
        Get Asset Class

        Retrieves the properties of a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>.

        **Permission Required:** `kelvin.permission.asset_class.read`.

        ``getAssetClass``: ``GET`` ``/api/v4/assets/class/{asset_class_name}/get``

        Parameters
        ----------
        asset_class_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> name to retrieve.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/class/{asset_class_name}/get",
            {"asset_class_name": asset_class_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetClass,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_asset_class(
        self_or_cls,
        asset_class_name: str,
        data: Optional[Union[requests.AssetClassUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetClass:
        """
        Update Asset Class

        Updates an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> with any new values passed through the body parameters.

        Only the Display Name (title) body parameter is required. If this body parameter does not need to be changed, it should still have the original Display Name (title) given. Any other body parameters that are not required and not provided will remain unchanged.

        Only the unique identifier name can not be changed. If you need to change this parameter, then you will need to make a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> and relink all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Types</a> to the new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a>.

        **Permission Required:** `kelvin.permission.asset_class.update`.

        ``updateAssetClass``: ``POST`` ``/api/v4/assets/class/{asset_class_name}/update``

        Parameters
        ----------
        asset_class_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> name to retrieve.</p> This is the unique identifier name and
            not the display name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        data: requests.AssetClassUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetClassUpdate
              - entity_type_name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/class/{asset_class_name}/update",
            {"asset_class_name": asset_class_name},
            {},
            {},
            {},
            data,
            requests.AssetClassUpdate,
            False,
            {
                "200": AssetClass,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_asset(
        self_or_cls,
        dry_run: Optional[bool] = None,
        data: Optional[Union[requests.AssetCreateWithParent, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Asset:
        """
        Create Asset

        Create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> and optionally create a full <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> under the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> with one API request.

        If the top <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a>, then multiple <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a> can be created in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> and below the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a>, multiple <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a> can be created according to <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> rules.

        If the top <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> is a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a>, then below the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a>, only multiple <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a> can be created according to <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> rules.

        To create any <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> you first need to create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> and <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>. A Kelvin Asset Class is linked to an entity type which defines how the Kelvin Asset will be referenced in Kelvin Assets. for example: Kelvin Assets that is defined as a Group can only be linked to a Kelvin Type and Kelvin Class that is saved as entity type **group**.

        There are five entity types; `group`, `asset`, `component`, `part` and `sensor`. Detailed information about these entity types and how they are used can be found at <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/</a>.

        **Permission Required:** `kelvin.permission.asset.create`.

        ``createAsset``: ``POST`` ``/api/v4/assets/create``

        Parameters
        ----------
        dry_run : :obj:`bool`
            Perform a trial run to create the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> without
            saving the changes.</p> This is very useful when you want to test your
            new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> structure
            without making any changes on the Kelvin Platform.
        data: requests.AssetCreateWithParent, optional
        **kwargs:
            Extra parameters for requests.AssetCreateWithParent
              - asset_template_name: str
              - asset_type_name: str
              - entity_type_name: str
              - failure_detection: str
              - hierarchy: list
              - location: str
              - metrics: list
              - name: str
              - parent_name: str
              - properties: list
              - title: str
              - visualization: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/create",
            {},
            {"dry_run": dry_run},
            {},
            {},
            data,
            requests.AssetCreateWithParent,
            False,
            {
                "201": Asset,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def upload_assets(
        cls, file: str, dry_run: Optional[bool] = None, _dry_run: bool = False, _client: Any = None
    ) -> AssetHierarchyList:
        """
        Upload Assets

        Upload a csv (comma-separated values) file with up to 20,000 assets to add as <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> into the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>. Each row represents one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>.

        The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> can also be created in this file by declaring the parent for each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>. If this field is left blank, then it is assumed to have no parent and will appear at the top of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        The first row of the csv file needs to be the header of the columns. `DISPLAY NAME,NAME,ASSET TYPE,LATITUDE,LONGITUDE,DIRECT PARENT,ENTITY TYPE`.

        Details of the options for each column are explained in this <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-manager-ui/management/assets/assets/#importing-assets-in-bulk' target='_blank'>Kelvin Documentation</a> link.

        The file needs to be saved in UTF-8 format with a comma separating each field. Do not use other separation options available in Microsoft Excel or Google Sheets such as semi-colons or colons. Strings in the csv file can be with or without quotation marks.

        **Permission Required:** `kelvin.permission.asset.create`.

        ``uploadAssets``: ``POST`` ``/api/v4/assets/create/upload``

        Parameters
        ----------
        file : :obj:`str`, optional
            Path and name of the CSV File to upload to the <a
            href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a>.</p> You can download a blank copy of the template from
            the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-manager-ui/control-manager-ui-overview/'
            target='_blank'>Kelvin Manager UI</a>. Instructions can be found in
            the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-manager-ui/management/metrics/metrics/#1-download-the-
            assets-csv-template' target='_blank'>Kelvin Documentation</a>.
        dry_run : :obj:`bool`
            Perform a trial run to create the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> without
            saving the changes.</p> This is very useful when you want to test your
            new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> structure
            without making any changes on the <a
            href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a>.

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/create/upload",
            {},
            {"dry_run": dry_run},
            {"file": file},
            {},
            None,
            None,
            False,
            {
                "200": AssetHierarchyList,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "412": CSVErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def list_failure_overview(
        cls,
        pagination_type: Optional[Literal["limits", "cursor", "stream"]] = None,
        page_size: Optional[int] = 1000,
        page: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        direction: Optional[Literal["asc", "desc"]] = None,
        sort_by: Optional[Sequence[str]] = None,
        data: Optional[Union[requests.FailureOverview, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[FailureOverviewItem], FailureOverviewPaginated]:
        """
        List Failure Overview

        Returns a dictionary with a data property containing an array of failure overview summaries for <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> objects that have failures recorded on the Kelvin Platform based on the filter requirements in the body parameters.

        This will summarize all failures on <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> of each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> and give the failure quotient per <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>.

        **Pagination Sortable Columns:** `name`, `title`, `asset_type_name`, `asset_type_title`, `device_type_name`, `device_type_title`, `failure_quotient`, `severity`, `total_sev1`, `total_sev2`, `total_sev3`, `total_sev4`, `total_sev5`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``listFailureOverview``: ``POST`` ``/api/v4/assets/failure-overview/list``

        Parameters
        ----------
        pagination_type : :obj:`Literal['limits', 'cursor', 'stream']`
            Method of handling pages in the returned data. There are three options
            available;</p> limits: This is used with the query parameters `page“
            to select which page of data to return. The start of the data returned
            will be calculated using the `page_size“ and `page` query parameters
            for the location to start and the query parameters `sort_by` and
            `direction` will determine the order of the data.</p> cursor: This is
            used with the query parameters `next` and `previous` which uses a
            string as the start or end location reference. The string to use is
            returned in the previous query json response in the keys `next_page`
            and `previous_page`.</p> stream: This will return all the data in one
            response. (limits, cursor, stream)
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> failure statistic objects to be returned. Page size can be
            between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistic objects.
        page : :obj:`int`
            Used only with query parameter `pagination_type` set as `limits`.</p>
            An integer for the wanted page of results. The start of the data
            returned will be calculated using the `page_size“ and `page` query
            parameters for the location to start and the query parameters
            `sort_by` and `direction` will determine the order of the data.
        next : :obj:`str`
            Used only with query parameter `pagination_type` set as `cursor`.</p>
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        previous : :obj:`str`
            Used only with query parameter `pagination_type` set as `cursor`.</p>
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        direction : :obj:`Literal['asc', 'desc']`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `asc` (ascending order) and
            `desc` (descending order).</p> The default is `asc` (ascending). (asc,
            desc)
        sort_by : :obj:`Sequence[str]`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics parameters. Only one parameter can be selected.</p> There
            are ten parameter options; `name`, `title`, `asset_type_name`,
            `asset_type_title`, `device_type_name`, `device_type_title`,
            `failure_quotient`, `total_sev1`, `total_sev2`, `total_sev3`,
            `total_sev4` and `total_sev5`.</p> The default is `name`
        data: requests.FailureOverview, optional
        **kwargs:
            Extra parameters for requests.FailureOverview
              - alarm_severities: list
              - asset_names: list
              - asset_type_names: list
              - map_names: list
              - parent_asset_name: str
              - search: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/failure-overview/list",
            {},
            {
                "pagination_type": pagination_type,
                "page_size": page_size,
                "page": page,
                "next": next,
                "previous": previous,
                "direction": direction,
                "sort_by": sort_by,
            },
            {},
            {},
            data,
            requests.FailureOverview,
            False,
            {
                "200": FailureOverviewPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/assets/failure-overview/list", "POST")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def get_asset_hierarchies(cls, _dry_run: bool = False, _client: Any = None) -> AssetHierarchies:
        """
        Get Asset Hierarchies

        Retrieve a full list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> stored on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        The list will contain all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> information inclusive of their <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        There are no options to filter the list, so this list can get very big if there are large numbers of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> present on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetHierarchies``: ``GET`` ``/api/v4/assets/hierarchy/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/hierarchy/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": AssetHierarchies, "400": errors.ErrorMessage, "401": errors.ErrorMessage},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def update_asset_hierarchies(
        cls,
        dry_run: Optional[bool] = None,
        data: Optional[Union[requests.HierarchyUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Update Asset Hierarchies

        Update one or many <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> in one API request with any new values passed through the body parameters. Any <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> not included in the body parameter will remain unchanged.

        The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> of every <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> must be maintained within this structure. This is similar as `/assets/{asset_name}/update` API request except that you can update multiple <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> at the same time and one key difference regarding `hierarchy` that is explains later. Below is an explanation which should apply to all <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> given in the body parameter.

        It is only possible to edit starting from either a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> or a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a>. It is not possible to directly edit <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a>.

        To edit a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Component</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Part</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensor</a>, the body parameters must start with either the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> or a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a> higher up in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        Every <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> must be declared from the highest level. The API request will accept any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> to update without requiring it to be inside the `hierarchy` parameter in <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a>, but if this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> originally is positioned under a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a>, then this structure will be lost and the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> will move to the top of a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        The minimum required in the body parameters is the `name`, `title`, `asset_type_name` and `entity_type_name`. If these body parameters do not need to be changed, it should still contain the original information. Any other body parameters that are not required and not provided will remain unchanged.

        The only exception to this minimum requirement is when the parameter `delete` is marked as `true`. In this case the only other parameter required is `name`. If deleting any <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> with this method, all children <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> in the `hierarchy` below will also be deleted.

        <span style="color: #ff0000;font-weight: bold;">WARNING</span> : If the `hierarchy` parameter is used, all `components`, `parts` and `sensors` for only the next level down must be included in the body parameters with a minimum parameters `name`, `title`, `asset_type_name` and `entity_type_name` given. If any body parameter does not need to be changed, it should still contain the original information. Any other body parameters that are not required and not provided will remain unchanged. <span style="color: #ff0000;font-weight: bold;">Any `components`, `parts` or `sensors` and its children items at this level not included will be automatically and permenently deleted.</span>.

        If in any `components`, `parts` or `sensors` body parameters, the `hierarchy` parameter is not provided, then the `hierarchy` for that particular `components`, `parts` or `sensors` will remain and not be deleted.

        **Permission Required:** `kelvin.permission.asset.create`.

        ``updateAssetHierarchies``: ``POST`` ``/api/v4/assets/hierarchy/update``

        Parameters
        ----------
        dry_run : :obj:`bool`
            Perform a trial run to update the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> without
            saving the changes.</p> This is very useful when you want to test your
            new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> structure
            without making any changes on the Kelvin Platform.
        data: requests.HierarchyUpdate, optional
        **kwargs:
            Extra parameters for requests.HierarchyUpdate
              - data: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/hierarchy/update",
            {},
            {"dry_run": dry_run},
            {},
            {},
            data,
            requests.HierarchyUpdate,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_asset(
        cls,
        search: Optional[Sequence[str]] = None,
        names: Optional[Sequence[str]] = None,
        asset_type_name: Optional[Sequence[str]] = None,
        status_state: Optional[Sequence[str]] = None,
        entity_type_name: Optional[Sequence[str]] = None,
        map: Optional[str] = None,
        properties_filter: Optional[Sequence[str]] = None,
        properties: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetItem], AssetListPaginated]:
        """
        List Asset

        Returns a dictionary with a data property containing a filtered array of all <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> objects on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> are categorized by entity types and, unless specified, all entity types are included in the filter. There are five entity types; `group`, `asset`, `component`, `part` and `sensor`. Detailed information about these entity types and how they are used can be found at <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/</a>.

        **Pagination Sortable Columns:** `asset.name`, `asset.title`, `asset.created`, `asset.updated`, `asset_type.name`, `asset_type.title`, `status_state`, `status_last_seen`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``listAsset``: ``GET`` ``/api/v4/assets/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> list. Both
            the Display Name and the Name will be included in the search field
            criteria. This is given as an array, for example `[pump,fan]`.</p> The
            search is case insensitive and will find partial matches as well. For
            example if a <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin
            Asset</a> name or display name is `centrifugal_pump`, then a match
            will be made if the search string is `pum` or `FUGaL`.
        names : :obj:`Sequence[str]`
            Filter on the <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a> parameter `name`. This is given as an array, for example
            `[pump,fan]`.</p> The filter is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end).</p> For example a search with `[pump,fan]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> with the
            name `pump` but not with the names `pumps` or `centrifugal-fan`.
        asset_type_name : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> by its name. This is given as an array, for example
            `[pump,fan]`.</p> The filter is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end).</p> For example a filter with `[pump,fan]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        status_state : :obj:`Sequence[str]`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a> by its current status. Multiple parameters can be given in
            an array, for example `[online,partially_online]` and will be filtered
            as `OR`.</p> There are four parameter options; `online`, `offline`,
            `partially_online` and `unknown`.
        entity_type_name : :obj:`Sequence[str]`
            Filter and return the results of one or more of the entity type names.
            This is given as an array, for example `[group,asset]`. Prefix any
            entity type name with the character `!` for a NOT operation.</p> There
            are five entity type names available to choose from; `group`, `asset`,
            `component`, `part`, `sensor`.</p> The default will select all
            available entity type name options.</p>
        map : :obj:`str`
            Filter for assets that belong to the map
        properties_filter : :obj:`Sequence[str]`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> that contain a property with a specified value. The
            property must be declared using its `name` and not its `title`
            (Display Name). Multiple properties or multiple values can be filtered
            within this array. For example `[demo_property=demo_value]` or
            `[demo_property_1=demo_value,demo_property_2=88]`.</p> All values to
            be filtered must be an exact match and is case sensitive. Also there
            must be no spaces before or after the equal sign.</p> For example;
            `[demo_property=88]` is accepted but `[demo_property = 88]` will cause
            a 400 error.
        properties : :obj:`Sequence[str]`
            Only returns specified properties in each <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>.</p> This
            does not filter the array of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> returned,
            only filters the properties in each <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>. If the
            property does not exist in a <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>, then the
            properties parameter is returned with no contents. If this is the only
            parameter used, then all <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>on the <a
            href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a> will be returned.</p> The default is to return all
            properties for each <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a>.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>
            objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> parameters.
            Only one parameter can be selected.</p> There are eight parameter
            options; `asset.name`, `asset.title`, `asset.created`,
            `asset.updated`, `asset_type.name`, `asset_type.title`, `status_state`
            and `status_last_seen`.</p> The default is `asset.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/list",
            {},
            {
                "search": search,
                "names": names,
                "asset_type_name": asset_type_name,
                "status_state": status_state,
                "entity_type_name": entity_type_name,
                "map": map,
                "properties_filter": properties_filter,
                "properties": properties,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetListPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/assets/list", "GET") if fetch and not _dry_run else result

    @classmethod
    def get_asset_oee(
        cls,
        timestamp: Optional[str] = None,
        data: Optional[Union[requests.AssetOEEGet, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[AssetOEE]:
        """
        Get Asset OEE

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetOEE``: ``POST`` ``/api/v4/assets/oee/get``

        Parameters
        ----------
        timestamp : :obj:`str`
            Timestamp to search for specific <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> related <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-asset-details/#performance-details'
            target='_blank'>OEE</a> values for a given point in time (supports
            RFC3339 and Unix timestamps with nanosecond precision).</p> If no
            timestamp is given in the query or body parameters, then the current
            time will be selected.
        data: requests.AssetOEEGet, optional
        **kwargs:
            Extra parameters for requests.AssetOEEGet
              - asset_names: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/oee/get",
            {},
            {"timestamp": timestamp},
            {},
            {},
            data,
            requests.AssetOEEGet,
            False,
            {
                "200": List[AssetOEE],
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_asset_statistics(
        cls,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        data: Optional[Union[requests.AssetStatistics, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[AssetStatisticsItem], AssetStatisticsPaginated]:
        """
        Get Asset Statistics

        Returns a list of the requested <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> with details on the failure quotient, number of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (children) and the current OEE calculations.

        **Pagination Sortable Columns:** `asset.name`, `asset.asset_type_name`, `asset.device_type_name`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetStatistics``: ``POST`` ``/api/v4/assets/statistics/get``

        Parameters
        ----------
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a> Statistic objects to be returned. Page size can be between 1
            and 1000 objects.</p> The default is 20 Kelvin Asset Statistic
            objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> statistics
            in the list.</p> The alphanumeric string which are the bookmarks for
            the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> statistics
            in the list.</p> The alphanumeric string which are the bookmarks for
            the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> parameters.
            Only one parameter can be selected.</p> There are three parameter
            options; `asset.name`, `asset.asset_type_name` and
            `asset.device_type_name`.</p> The default is `asset.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        data: requests.AssetStatistics, optional
        **kwargs:
            Extra parameters for requests.AssetStatistics
              - asset_type_names: list
              - entity_type_names: list
              - names: list
              - search: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/statistics/get",
            {},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            data,
            requests.AssetStatistics,
            False,
            {
                "200": AssetStatisticsPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/assets/statistics/get", "POST")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def get_asset_status_count(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> AssetStatusCount:
        """
        Get Asset Status Count

        Summary total count of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> into four statuses.

        There are four status (state) values that can be returned; `online` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and all assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are all online and receiving information, `offline` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and all assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are all offline, `partially_online` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and some assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are online and receiving information and `unknown` where the status (state) has never received any data to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> and/or is not declared on any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> as a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetStatusCount``: ``GET`` ``/api/v4/assets/status/count/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/status/count/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetStatusCount,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_asset_statuses(cls, _dry_run: bool = False, _client: Any = None) -> AssetStatus:
        """
        Get Asset Statuses

        Returns a list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and the current status (state).

        There are four status (state) values that can be returned; `online` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and all assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are all online and receiving information, `offline` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and all assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are all offline, `partially_online` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and some assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are online and receiving information and `unknown` where the status (state) has never received any data to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> and/or is not declared on any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> as a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetStatuses``: ``GET`` ``/api/v4/assets/status/current/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/status/current/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetStatus,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_asset_template(
        self_or_cls,
        data: Optional[Union[requests.AssetTemplateCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTemplate:
        """
        Create Asset Template

        Create a custom <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/asset-groups' target='_blank'>Kelvin Group</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> template with a full <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Assets</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a>.

        For each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>, this template can also create all the parameters for <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-ai-failure-detection/' target='_blank'>Kelvin Failure Detection AI</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> and visualization information for <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/' target='_blank'>Kelvin Maps</a>

        **Permission Required:** `kelvin.permission.asset.create`.

        ``createAssetTemplate``: ``POST`` ``/api/v4/assets/templates/create``

        Parameters
        ----------
        data: requests.AssetTemplateCreate, optional
        **kwargs:
            Extra parameters for requests.AssetTemplateCreate
              - asset_type_name: str
              - description: str
              - entity_type_name: str
              - failure_detection: str
              - hierarchy: list
              - hints: dict
              - image_url: str
              - metrics: list
              - name: str
              - properties: list
              - title: str
              - visualization: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/templates/create",
            {},
            {},
            {},
            {},
            data,
            requests.AssetTemplateCreate,
            False,
            {"201": AssetTemplate, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_asset_template(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        asset_type_names: Optional[Sequence[str]] = None,
        entity_type_names: Optional[Sequence[str]] = None,
        asset_class_names: Optional[Sequence[str]] = None,
        owner: Optional[str] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetTemplateItem], AssetTemplateListPaginated]:
        """
        List Asset Template

        Returns a dictionary with a data property containing a filtered array of all <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Templates</a> objects on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Pagination Sortable Columns:** `asset_template.name`, `asset_template.title`, `asset_template.created`, `asset_template.updated`, `asset_template.asset_type_name`, `asset_template.device_type_name`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``listAssetTemplate``: ``GET`` ``/api/v4/assets/templates/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Templates</a> list. Both the Display Name and the Name will be
            included in the search field criteria. This is given as an array, for
            example `[pump,fan]`.</p> The search is case insensitive and will find
            partial matches as well. For example if a Kelvin Asset Type name is
            `centrifugal_pump`, then a match will be made if the search string is
            `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#kelvin-templates'
            target='_blank'>Kelvin Template</a> objects to be returned. Page size
            can be between 1 and 1000 objects.</p> The default is 20 Kelvin
            Template objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Templates</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Templates</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> parameters. Only one parameter can be selected.</p> There
            are six parameter options; `asset_template.name`,
            `asset_template.title`, `asset_template.created`,
            `asset_template.updated`, `asset_template.asset_type_name` and
            `asset_template.device_type_name`.</p> The default is
            `asset_template.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        asset_type_names : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> by its name. This is given as an array, for example
            `[pump,fan]`.</p> The search is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end). For example a search with `[pump,fan]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        entity_type_names : :obj:`Sequence[str]`
            Filter and return the results of one or more of the entity type names.
            This is given as an array, for example `[group,asset]`. Prefix any
            entity type name with the character `!` for a NOT operation.</p> There
            are five entity type names available to choose from; `group`, `asset`,
            `component`, `part`, `sensor`.</p> The default will select all
            available entity type name options.</p>
        asset_class_names : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> by its name. This is given as an array, for example
            `[pump,fan]`.</p> The search is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end). For example a search with `[pump,fan]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        owner : :obj:`str`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#kelvin-templates'
            target='_blank'>Kelvin Templates</a> by owner.</p> There are two types
            of owners; `custom` (any user) or `kelvin` (core kelvin).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/templates/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "asset_type_names": asset_type_names,
                "entity_type_names": entity_type_names,
                "asset_class_names": asset_class_names,
                "owner": owner,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetTemplateListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/assets/templates/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def delete_asset_template(
        cls, asset_template_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Asset Template

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin Template</a>. This cannot be undone once the API request has been submitted.

        **Permission Required:** `kelvin.permission.asset.delete`.

        ``deleteAssetTemplate``: ``POST`` ``/api/v4/assets/templates/{asset_template_name}/delete``

        Parameters
        ----------
        asset_template_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> name to retrieve.</p> This is the unique identifier name
            and not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a>.

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/templates/{asset_template_name}/delete",
            {"asset_template_name": asset_template_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_asset_template(
        cls, asset_template_name: str, _dry_run: bool = False, _client: Any = None
    ) -> AssetTemplate:
        """
        Get Asset Template

        Retrieves the properties of a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Template</a>.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetTemplate``: ``GET`` ``/api/v4/assets/templates/{asset_template_name}/get``

        Parameters
        ----------
        asset_template_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> name to retrieve.</p> This is the unique identifier name
            and not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/templates/{asset_template_name}/get",
            {"asset_template_name": asset_template_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetTemplate,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_asset_template(
        self_or_cls,
        asset_template_name: str,
        data: Optional[Union[requests.AssetTemplateUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTemplate:
        """
        Update Asset Template

        Updates an existing Kelvin Template with any new values passed through the body parameters.</p> All body parameters are optional and if not provided will remain unchanged.

        Only the unique identifier name can not be changed. If you need to change this parameter, then you will need to make a new Kelvin Template with a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (Hint: To avoid having to type everything in again, you can get the current JSON structure of the Kelvin Template from /assets/templates/{asset_template_name}/get API and then use this as the foundation for a new Kelvin Template).

        **Permission Required:** `kelvin.permission.asset.update`.

        ``updateAssetTemplate``: ``POST`` ``/api/v4/assets/templates/{asset_template_name}/update``

        Parameters
        ----------
        asset_template_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> name to retrieve.</p> This is the unique identifier name
            and not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a>.
        data: requests.AssetTemplateUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetTemplateUpdate
              - asset_type_name: str
              - description: str
              - entity_type_name: str
              - failure_detection: str
              - hierarchy: list
              - hints: dict
              - image_url: str
              - metrics: list
              - properties: list
              - title: str
              - visualization: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/templates/{asset_template_name}/update",
            {"asset_template_name": asset_template_name},
            {},
            {},
            {},
            data,
            requests.AssetTemplateUpdate,
            False,
            {
                "200": AssetTemplate,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_asset_type(
        self_or_cls,
        data: Optional[Union[requests.AssetTypeCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetType:
        """
        Create Asset Type

        To create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> you first need to create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> and <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>. A <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> is linked to an <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> which defines how the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> will be referenced in <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>. For example: <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> that is defined as a Group can only be linked to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> that is saved as <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> **group**.

        There are five <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a>; `group`, `asset`, `component`, `part` and `sensor`. Detailed information about these <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> and how they are used can be found at <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/</a>.

        A <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> is directly linked to a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>. There can be many <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> linked to one <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.

        **Permission Required:** `kelvin.permission.asset_type.create`.

        ``createAssetType``: ``POST`` ``/api/v4/assets/types/create``

        Parameters
        ----------
        data: requests.AssetTypeCreate, optional
        **kwargs:
            Extra parameters for requests.AssetTypeCreate
              - asset_class_name: str
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/create",
            {},
            {},
            {},
            {},
            data,
            requests.AssetTypeCreate,
            False,
            {"201": AssetType, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_asset_type(
        cls,
        search: Optional[Sequence[str]] = None,
        asset_class_name: Optional[Sequence[str]] = None,
        metadata: Optional[Sequence[str]] = None,
        metadata_filter: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        owner: Optional[str] = None,
        entity_type_name: Optional[Sequence[str]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetType], AssetTypeListPaginated]:
        """
        List Asset Type

        Returns a filtered dictionary with a data object containing an array of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> objects on the Kelvin Platform that meet the criteria of any parameters passed with the API request.

        If no query parameters are given with the API request, then the defaults will be used to return the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> list.

        The defaults are the first 20 <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> objects returned in alphabetical order by the unique identifier name.

        **Pagination Sortable Columns:** `asset_class.name`, `asset_class.title`, `asset_class.created`, `asset_class.updated`, `asset_class.owner`, `asset_class.device_type_name`

        **Pagination Sortable Columns:** `asset_type.name`, `asset_type.title`, `asset_type.created`, `asset_type.updated`, `asset_type.owner`, `asset_class.name`, `asset_class.title`, `asset_class.device_type_name`

        **Permission Required:** `kelvin.permission.asset_type.read`.

        ``listAssetType``: ``GET`` ``/api/v4/assets/types/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> list. Both the Display Name and the Name will be included in
            the search field criteria. This is given as an array, for example
            `[pump,fan]`.</p> The search is case insensitive and will find partial
            matches as well. For example if a Kelvin Asset Type name is
            `centrifugal_pump`, then a match will be made if the search string is
            `pum` or `FUGaL`.
        asset_class_name : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> by its name. This is given as an array, for example
            `[pump,fan]`.</p> The search is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end). For example a search with `[pump,fan]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        metadata : :obj:`Sequence[str]`
            Array of Kelvin Asset Type Metadata names. Kelvin Asset Type Metadata
            payload(s) will be attached to any <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Types</a> that are linked to any of the Kelvin Asset Type Metadata
            name(s) in this list.
        metadata_filter : :obj:`Sequence[str]`
            Array of Kelvin Asset Type Metadata filter options to perform on the
            Kelvin Asset Type Metadata payload.</p> Each filter takes the format
            `<metadata_name>.<payload_key>=<wanted_filtered_value>`. An example of
            two filters is `[metadata-test1.key1=String1,metadata-
            test2.key2=88]`.</p> Any JSON keys with string values are case
            sensitive.</p> Multiple JSON key filters in the array from the same
            Kelvin Asset Type Metadata object will be filtered as `OR`. For
            example; if Kelvin Asset Type Metadata name `metadata-test` has two
            key parameters `'key1': 'String1'` and `'key2': 25`, then a
            metadata_filter `[metadata-test.key1=String1,metadata-test.key2=88]`
            will return results as one of the two values match in the same Kelvin
            Asset Type Metadata object.</p> Multiple JSON key filters in the array
            from different Kelvin Asset Type Metadata objects will be filtered as
            `AND`. For example; if Kelvin Asset Type Metadata name `metadata-
            test1` has a key/value pair `'key1': 'String1'` and Kelvin Asset Type
            Metadata name `metadata-test2` has a key/value pair`'key2': 25`, then
            a metadata_filter `[metadata-test1.key1=String1,metadata-
            test2.key2=88]` will <strong>NOT</strong> return results as one of the
            two key/value pairs from different Kelvin Asset Type Metadata objects
            does not match.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-type'
            target='_blank'>Kelvin Asset Type</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 Kelvin
            Asset Type objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Types</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Types</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Types</a> parameters. Only one parameter can be selected.</p> There
            are eight parameter options; `asset_type.name`, `asset_type.title`,
            `asset_type.created`, `asset_type.updated`, `asset_class.name`,
            `asset_class.title`, `asset_type.owner` and
            `asset_class.device_type_name`.</p> The default is `asset_type.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        owner : :obj:`str`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-type'
            target='_blank'>Kelvin Asset Type</a> by owner.</p> There are two
            types of owners; `custom` (any user) or `kelvin` (core kelvin asset
            type).</p> The default will select all owner options.
        entity_type_name : :obj:`Sequence[str]`
            Filter and return the results of one or more of the entity type names.
            This is given as an array, for example `[group,asset]`. Prefix any
            entity type name with the character `!` for a NOT operation.</p> There
            are five entity type names available to choose from; `group`, `asset`,
            `component`, `part`, `sensor`.</p> The default will select all
            available entity type name options.</p>

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/types/list",
            {},
            {
                "search": search,
                "asset_class_name": asset_class_name,
                "metadata": metadata,
                "metadata_filter": metadata_filter,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "owner": owner,
                "entity_type_name": entity_type_name,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetTypeListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/assets/types/list", "GET") if fetch and not _dry_run else result
        )

    @instance_classmethod
    @DataModelBase.translate()
    def delete_asset_type(
        self_or_cls, asset_type_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Asset Type

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. This cannot be undone once the API request has been submitted.

        This command can not delete <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Types</a> that are currently linked to any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and will return an error 403.

        **Permission Required:** `kelvin.permission.asset_type.delete`.

        ``deleteAssetType``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/delete``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to delete.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/delete",
            {"asset_type_name": asset_type_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_asset_type(
        self_or_cls,
        asset_type_name: str,
        metadata: Optional[Sequence[str]] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> AssetType:
        """
        Get Asset Type

        Retrieves the properties of a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.

        **Permission Required:** `kelvin.permission.asset_type.read`.

        ``getAssetType``: ``GET`` ``/api/v4/assets/types/{asset_type_name}/get``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to retrieve.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        metadata : :obj:`Sequence[str]`
            Array of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets#asset-type-metadata'
            target='_blank'>Kelvin Asset Type Metadata</a> names. If the metadata
            name exists for the <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-type'
            target='_blank'>Kelvin Asset Type</a>, then the payload for the
            metadata name will be attached in the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> response object.</p> <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects are created using the API endpoint
            `/assets/types/{asset_type_name}/metadata/` and is linked to a <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>. The same name can be used for different <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> for easy filtering across multiple <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/types/{asset_type_name}/get",
            {"asset_type_name": asset_type_name},
            {"metadata": metadata},
            {},
            {},
            None,
            None,
            False,
            {"200": AssetType, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        data: Optional[Union[requests.AssetTypeMetadataCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTypeMetadata:
        """
        Create Asset Type Metadata

        Creates a custom JSON payload that can be attached to a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>. You can create multiple different types of metadata payloads for each <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a>.

        When performing a `get` or `list` API request on <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a> or <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> then you can also add a metadata parameter. The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> payload will then be embedded in the response.

        For listing <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a> you can also perform filters on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> payload to only return <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a> with <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> payload parameters matching the filters.

        This <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> does not affect the operations of <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> on the Kelvin Platform. <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> is not available in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-manager-ui" target="_blank">Kelvin Manager UI</a>.

        **Permission Required:** `kelvin.permission.asset_type.create`.

        ``createAssetTypeMetadata``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/metadata/create``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            Unique identifier name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> to attach the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> to.</p> This must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space BUT can not be at the
            beginning or end of the name.
        data: requests.AssetTypeMetadataCreate, optional
        **kwargs:
            Extra parameters for requests.AssetTypeMetadataCreate
              - name: str
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/metadata/create",
            {"asset_type_name": asset_type_name},
            {},
            {},
            {},
            data,
            requests.AssetTypeMetadataCreate,
            False,
            {
                "201": AssetTypeMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_asset_type_metadata(
        cls,
        asset_type_name: str,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetTypeMetadata], AssetTypeMetadataListPaginated]:
        """
        List Asset Type Metadata

        Returns a filtered list of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> objects linked with a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.

        The path parameter is required but the query parameters are optional. If no query parameters are given with the API request, then the defaults will be used to return the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> list. The defaults are the first 20 <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> returned in alphabetical order by the unique identifier name.

        **Pagination Sortable Columns:** `asset_type_metadata.name`

        **Permission Required:** `kelvin.permission.asset_type.read`.

        ``listAssetTypeMetadata``: ``GET`` ``/api/v4/assets/types/{asset_type_name}/metadata/list``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name where the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> payloads are stored.</p> The search is done on
            the full name only according to unique identifier name rules (Must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space.).
            For example a search with the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name `big-pump` will return all <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> associated with the name `big-pump` but not
            with the names `pump` or `big-pump-machine`.
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects list. Only the Name will be included
            in the search field criteria. This is given as an array, for example
            `[pump,fan]`.</p> The search is case insensitive and will find partial
            matches as well. For example if a Kelvin Asset Type name is
            centrifugal_pump, then a match will be made if the search string is
            `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets#asset-type-metadata'
            target='_blank'>Kelvin Asset Type Metadata</a> objects to be returned.
            Page size can be between 1 and 1000 objects. The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects in the list.</p> The alphanumeric
            string which are the bookmarks for the beginning and end of the
            current list is given in the previous JSON response value under the
            key pagination -> previous_page and pagination -> next_page
            respectively.</p> The pagination -> next_page alphanumeric string
            should be used here to show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects in the list.</p> The alphanumeric
            string which are the bookmarks for the beginning and end of the
            current list is given in the previous JSON response value under the
            key pagination -> previous_page and pagination -> next_page
            respectively.</p> The pagination -> previous_page alphanumeric string
            should be used here to show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> parameters. Only one parameter can be
            selected.</p> There in only one parameter option;
            `asset_type_metadata.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order). The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/types/{asset_type_name}/metadata/list",
            {"asset_type_name": asset_type_name},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetTypeMetadataListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/assets/types/{asset_type_name}/metadata/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate()
    def delete_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        asset_type_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> None:
        """
        Delete Asset Type Metadata

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object associated with a specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. This cannot be undone once the API request has been submitted.

        This will only delete the specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. If there is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object with the same name and payload BUT associated with a different <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>, this will not be deleted.

        **Permission Required:** `kelvin.permission.asset_type.delete`.

        ``deleteAssetTypeMetadata``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/delete``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to delete.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        asset_type_metadata_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> unique identifier name to delete.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/delete",
            {
                "asset_type_name": asset_type_name,
                "asset_type_metadata_name": asset_type_metadata_name,
            },
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        asset_type_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> AssetTypeMetadata:
        """
        Get Asset Type Metadata

        Retrieves the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object associated with a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.

        This will only retrieve the specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. If there is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object with the same name and payload BUT associated with a different <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>, this will not be retrieved.

        **Permission Required:** `kelvin.permission.asset_type.read`.

        ``getAssetTypeMetadata``: ``GET`` ``/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/get``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to retrieve.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        asset_type_metadata_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> unique identifier name to retrieve.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/get",
            {
                "asset_type_name": asset_type_name,
                "asset_type_metadata_name": asset_type_metadata_name,
            },
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetTypeMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        asset_type_metadata_name: str,
        data: Optional[Union[requests.AssetTypeMetadataUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTypeMetadata:
        """
        Update Asset Type Metadata

        Updates the payload of an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object associated with a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>.

        The payload will be completely replaced by the new payload. Any existing key/value pairs that you want to keep must be included in your new payload that is sent with the API request.

        This will only update the payload of the specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. If there is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object with the same name and payload BUT associated with a different <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>, this will not be updated.

        **Permission Required:** `kelvin.permission.asset_type.update`.

        ``updateAssetTypeMetadata``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/update``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            Unique identifier name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> to replace the specified metadata payload.</p> This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.
        asset_type_metadata_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> unique identifier name to retrieve.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        data: requests.AssetTypeMetadataUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetTypeMetadataUpdate
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/update",
            {
                "asset_type_name": asset_type_name,
                "asset_type_metadata_name": asset_type_metadata_name,
            },
            {},
            {},
            {},
            data,
            requests.AssetTypeMetadataUpdate,
            False,
            {
                "200": AssetTypeMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_asset_type(
        self_or_cls,
        asset_type_name: str,
        data: Optional[Union[requests.AssetTypeUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetType:
        """
        Update Asset Type

        Updates an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> with any new values passed through the body parameters.</p> All body parameters are optional and if not provided will remain unchanged.</p> Only the unique identifier name can not be changed. If you need to change this parameter, then you will need to make a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> and relink all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> to the new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>.

        **Permission Required:** `kelvin.permission.asset_type.update`.

        ``updateAssetType``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/update``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to retrieve.</p> This is the unique identifier name and
            not the display name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        data: requests.AssetTypeUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetTypeUpdate
              - asset_class_name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/update",
            {"asset_type_name": asset_type_name},
            {},
            {},
            {},
            data,
            requests.AssetTypeUpdate,
            False,
            {
                "200": AssetType,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_workloads(
        cls,
        pagination_type: Optional[Literal["limits", "cursor", "stream"]] = None,
        page_size: Optional[int] = 1000,
        page: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        direction: Optional[Literal["asc", "desc"]] = None,
        sort_by: Optional[str] = None,
        data: Optional[Union[requests.AssetWorkloadsList, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[AssetWorkloadItem], AssetWorkloadListPaginated]:
        """
        List Workloads

        **Pagination Sortable Columns:** `asset_name`, `workload_name`, `app_name`, `app_version`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``listWorkloads``: ``POST`` ``/api/v4/assets/workloads/list``

        Parameters
        ----------
        pagination_type : :obj:`Literal['limits', 'cursor', 'stream']`
            Desired pagination type (limits, cursor, stream)
        page_size : :obj:`int`
            Desired page size
        page : :obj:`int`
            Desired page. Only valid for type=limits pagination
        next : :obj:`str`
            Retrieve next page. Only valid for type=cursor pagination
        previous : :obj:`str`
            Retrieve previous page. Only valid for type=cursor pagination
        direction : :obj:`Literal['asc', 'desc']`
            Direction in which to sort the data (asc, desc)
        sort_by : :obj:`str`
            Columns by which to sort the data
        data: requests.AssetWorkloadsList, optional
        **kwargs:
            Extra parameters for requests.AssetWorkloadsList
              - asset_names: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/workloads/list",
            {},
            {
                "pagination_type": pagination_type,
                "page_size": page_size,
                "page": page,
                "next": next,
                "previous": previous,
                "direction": direction,
                "sort_by": sort_by,
            },
            {},
            {},
            data,
            requests.AssetWorkloadsList,
            False,
            {"200": AssetWorkloadListPaginated, "400": errors.ErrorMessage},
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/assets/workloads/list", "POST")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"asset_name": "name"})
    def list_asset_data_streams(
        self_or_cls,
        asset_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        data: Optional[Union[requests.AssetDataStreamsList, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[AssetDataStreamItem], AssetDataStreamsListPaginated]:
        """
        List Asset Data Streams

        Returns an array of dictionary objects with all the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pairs for the requested <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>.

        If the optional `include_asset_children` in the request body is true, then the returned dictionary will also filter for all children <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> below the `asset_name`.


        **Pagination Sortable Columns:** `datastream.asset_name`, `datastream.metric_name`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``listAssetDataStreams``: ``POST`` ``/api/v4/assets/{asset_name}/datastreams/list``

        Parameters
        ----------
        asset_name : :obj:`str`, optional
            Unique identifier name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin
            Metric</a> pair objects to be returned. Page size can be between 1 and
            1000 objects.</p> The default is 20 Kelvin Asset/Kelvin Metric pair
            objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair
            objects in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair
            objects in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair
            objects. Only one parameter can be selected.</p> There are two
            parameter options; `datastream.asset_name` and
            `datastream.metric_name`.</p> The default is `datastream.asset_name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        data: requests.AssetDataStreamsList, optional
        **kwargs:
            Extra parameters for requests.AssetDataStreamsList
              - include_asset_children: bool

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/{asset_name}/datastreams/list",
            {"asset_name": asset_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            data,
            requests.AssetDataStreamsList,
            False,
            {
                "200": AssetDataStreamsListPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/assets/{asset_name}/datastreams/list", "POST")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"asset_name": "name"})
    def delete_asset(
        self_or_cls, asset_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Asset

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>. This cannot be undone once the API request has been submitted.

        <span style="color: #ff0000;font-weight: bold;">WARNING</span> : This command will also delete any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> that are in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> below the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> being deleted.

        For example; if a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> has also two <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a> and one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensor</a> linked in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> below the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>, when deleting the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>, the two <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a> and one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensor</a> will also be automatically deleted. If you delete one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Component</a>, then the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>, and the remaining <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Component</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensor</a> will still remain active as long as they are not positioned below the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Component</a> in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        **Permission Required:** `kelvin.permission.asset.delete`.

        ``deleteAsset``: ``POST`` ``/api/v4/assets/{asset_name}/delete``

        Parameters
        ----------
        asset_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> name to
            delete.</p> This is the unique identifier name and not the display
            name (title) of the <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/{asset_name}/delete",
            {"asset_name": asset_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_name": "name"})
    def get_asset(
        self_or_cls,
        asset_name: str,
        metadata: Optional[Sequence[str]] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Asset:
        """
        Get Asset

        Retrieve the properties of a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> and all children <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in it's <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAsset``: ``GET`` ``/api/v4/assets/{asset_name}/get``

        Parameters
        ----------
        asset_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> name to
            retrieve.</p> This is the unique identifier name and not the display
            name (title) of the <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        metadata : :obj:`Sequence[str]`
            Array of Kelvin Asset Type Metadata names. Kelvin Asset Type Metadata
            payload(s) of the names provided will be attached to any <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> response
            object that are linked to any of the Kelvin Asset Type Metadata
            name(s) in this list.</p> The relationship between <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> and Kelvin
            Asset Type Metadata objects is via the common link to the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/{asset_name}/get",
            {"asset_name": asset_name},
            {"metadata": metadata},
            {},
            {},
            None,
            None,
            False,
            {
                "200": Asset,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_name": "name"})
    def get_asset_hierarchy(
        self_or_cls,
        asset_name: str,
        entity_type_depth: Optional[str] = None,
        asset_type_depth: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Asset:
        """
        Get Asset Hierarchy

        Retrieve a full list of one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and it's <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> stored on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetHierarchy``: ``GET`` ``/api/v4/assets/{asset_name}/hierarchy/get``

        Parameters
        ----------
        asset_name : :obj:`str`, optional
            Unique identifier name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> to retrieve
            the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-hierarchy'
            target='_blank'>hierarchy</a>.</p> This must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space BUT can not be at the
            beginning or end of the name.
        entity_type_depth : :obj:`str`
            Sets the start entity type depth in which the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>
            is returned.
        asset_type_depth : :obj:`str`
            Sets the start asset type depth in which the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>
            is returned. Only valid when entity_type_depth = group

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/{asset_name}/hierarchy/get",
            {"asset_name": asset_name},
            {"entity_type_depth": entity_type_depth, "asset_type_depth": asset_type_depth},
            {},
            {},
            None,
            None,
            False,
            {
                "200": Asset,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_name": "name"})
    def update_asset(
        self_or_cls,
        asset_name: str,
        dry_run: Optional[bool] = None,
        data: Optional[Union[requests.AssetUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Asset:
        """
        Update Asset

        Update an existing <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> with any new values passed through the body parameters. With the same API request you can also include updates to any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> that are in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> of this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>.

        It is only possible to edit starting from either a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> or a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a>. It is not possible to directly edit <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a>.

        To edit a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Component</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Part</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensor</a>, the body parameters must start with either the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> or a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a> higher up in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>. The only exception is if the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a> is below the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a>, the body parameters can start at the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a> level and ignore the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a>.

        The minimum required in the body parameters is the top level `title`. If this body parameter does not need to be changed, it should still have the original Display Name (title) given. Any other body parameters that are not required and not provided will remain unchanged.

        <span style="color: #ff0000;font-weight: bold;">WARNING</span> : If the `hierarchy` parameter is used, all `components`, `parts` and `sensors` for that next level only must be included in the body parameters with a minimum parameters `name`, `title`, `asset_type_name` and `entity_type_name` given. If any body parameter does not need to be changed, it should still contain the original information. Any other body parameters that are not required and not provided will remain unchanged. <span style="color: #ff0000;font-weight: bold;">Any `components`, `parts` or `sensors` at this level not included will be automatically and permanently deleted.</span>.

        If in any `components`, `parts` or `sensors` body parameters, the `hierarchy` parameter is not provided, then the `hierarchy` for that particular `components`, `parts` or `sensors` will remain unchanged and not be deleted.

        **Permission Required:** `kelvin.permission.asset.update`.

        ``updateAsset``: ``POST`` ``/api/v4/assets/{asset_name}/update``

        Parameters
        ----------
        asset_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset
            Group</a> or a <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin
            Asset</a> name at the top of the hierarchy. Even if the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> is
            below the <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-groups'
            target='_blank'>Kelvin Asset Group</a>, the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> name
            be used here.</p> This is the unique identifier name and not the
            display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>.
        dry_run : :obj:`bool`
            Perform a trial run to update the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> without
            saving the changes.</p> This is very useful when you want to test your
            new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> structure
            without making any changes on the Kelvin Platform.
        data: requests.AssetUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetUpdate
              - asset_template_name: str
              - asset_type_name: str
              - failure_detection: str
              - hierarchy: list
              - location: str
              - metrics: list
              - properties: list
              - title: str
              - visualization: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/{asset_name}/update",
            {"asset_name": asset_name},
            {"dry_run": dry_run},
            {},
            {},
            data,
            requests.AssetUpdate,
            False,
            {
                "200": Asset,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_bridge_assets(
        cls,
        bridge_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetItem], AssetListPaginated]:
        """
        List Bridge Assets

        Returns a dictionary with a data property containing a list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.

        **Pagination Sortable Columns:** `asset.name`, `asset.title`, `asset.created`, `asset.updated`, `asset_type.title`

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``listBridgeAssets``: ``GET`` ``/api/v4/bridges/{bridge_name}/assets/list``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> by its
            name.</p> The filter is done on the full name only according to unique
            identifier name rules (Must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space but not at the beginning or
            end).</p> For example a filter with `demo-bridge-one` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> linked to
            the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> with the
            name `demo-bridge-one` but not with the names `demo-bridge` or
            `bridge-one`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> parameters.
            Only one parameter can be selected.</p> There are ten parameter
            options; `asset.name`, `asset.title`, `asset.created`, `asset.updated`
            and `asset_type.title`.</p> The default is `asset.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/assets/list",
            {"bridge_name": bridge_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/bridges/{bridge_name}/assets/list", "GET")
            if fetch and not _dry_run
            else result
        )


class AssetListPaginated(PaginatorDataModel[AssetItem]):
    """
    AssetListPaginated object.

    Parameters
    ----------
    data: Optional[List[AssetItem]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[AssetItem]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class AssetOEE(DataModelBase):
    """
    AssetOEE object.

    Parameters
    ----------
    asset_name: Optional[str]
    oee_calculation: Optional[OEECalculation]
    oee_thresholds: Optional[OEEThresholds]
    oee_values: Optional[OEEValues]

    """

    asset_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    oee_calculation: Optional[OEECalculation] = None
    oee_thresholds: Optional[OEEThresholds] = None
    oee_values: Optional[OEEValues] = None

    @classmethod
    def get_asset_oee(
        cls,
        timestamp: Optional[str] = None,
        data: Optional[Union[requests.AssetOEEGet, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[AssetOEE]:
        """
        Get Asset OEE

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetOEE``: ``POST`` ``/api/v4/assets/oee/get``

        Parameters
        ----------
        timestamp : :obj:`str`
            Timestamp to search for specific <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> related <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-asset-details/#performance-details'
            target='_blank'>OEE</a> values for a given point in time (supports
            RFC3339 and Unix timestamps with nanosecond precision).</p> If no
            timestamp is given in the query or body parameters, then the current
            time will be selected.
        data: requests.AssetOEEGet, optional
        **kwargs:
            Extra parameters for requests.AssetOEEGet
              - asset_names: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/oee/get",
            {},
            {"timestamp": timestamp},
            {},
            {},
            data,
            requests.AssetOEEGet,
            False,
            {
                "200": List[AssetOEE],
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class AssetStatisticsItem(DataModelBase):
    """
    AssetStatisticsItem object.

    Parameters
    ----------
    asset_type_name: Optional[str]
    asset_type_title: Optional[str]
    children_count: Optional[int]
    entity_type_name: Optional[str]
    entity_type_title: Optional[str]
    failure_quotient: Optional[float]
    name: Optional[str]
    oee: Optional[AssetOEE]
    title: Optional[str]

    """

    asset_type_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.',
    )
    asset_type_title: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.',
    )
    children_count: Optional[int] = Field(
        None,
        description="Total number of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> that are direct children.</p> This will not count more than one level below the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> in the `name`. So direct children that have children of their own will only be counted as 1.",
    )
    entity_type_name: Optional[str] = Field(
        None,
        description="Unique identifier name of the entity type. This is the chosen name from a fixed list defined by Kelvin.",
    )
    entity_type_title: Optional[str] = Field(
        None,
        description="Display name of the entity type. This is the chosen display name (title) from a fixed list defined by Kelvin.",
    )
    failure_quotient: Optional[float] = Field(
        None,
        description='The current percentage failure time of this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> compared to the total failure time of all <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups" target="_blank">Kelvin Group</a>.',
    )
    name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    oee: Optional[AssetOEE] = None
    title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )

    @classmethod
    def get_asset_statistics(
        cls,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        data: Optional[Union[requests.AssetStatistics, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[AssetStatisticsItem], AssetStatisticsPaginated]:
        """
        Get Asset Statistics

        Returns a list of the requested <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> with details on the failure quotient, number of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (children) and the current OEE calculations.

        **Pagination Sortable Columns:** `asset.name`, `asset.asset_type_name`, `asset.device_type_name`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetStatistics``: ``POST`` ``/api/v4/assets/statistics/get``

        Parameters
        ----------
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a> Statistic objects to be returned. Page size can be between 1
            and 1000 objects.</p> The default is 20 Kelvin Asset Statistic
            objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> statistics
            in the list.</p> The alphanumeric string which are the bookmarks for
            the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> statistics
            in the list.</p> The alphanumeric string which are the bookmarks for
            the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> parameters.
            Only one parameter can be selected.</p> There are three parameter
            options; `asset.name`, `asset.asset_type_name` and
            `asset.device_type_name`.</p> The default is `asset.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        data: requests.AssetStatistics, optional
        **kwargs:
            Extra parameters for requests.AssetStatistics
              - asset_type_names: list
              - entity_type_names: list
              - names: list
              - search: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/statistics/get",
            {},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            data,
            requests.AssetStatistics,
            False,
            {
                "200": AssetStatisticsPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/assets/statistics/get", "POST")
            if fetch and not _dry_run
            else result
        )


class AssetStatisticsPaginated(PaginatorDataModel[AssetStatisticsItem]):
    """
    AssetStatisticsPaginated object.

    Parameters
    ----------
    data: Optional[List[AssetStatisticsItem]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[AssetStatisticsItem]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> statistics. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class AssetStatus(DataModelBase):
    """
    AssetStatus object.

    Parameters
    ----------
    data: Optional[List[SimpleAsset]]

    """

    data: Optional[List[SimpleAsset]] = Field(
        None,
        description="Array of dictionary objects of the status of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.",
    )

    @classmethod
    def get_asset_statuses(cls, _dry_run: bool = False, _client: Any = None) -> AssetStatus:
        """
        Get Asset Statuses

        Returns a list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and the current status (state).

        There are four status (state) values that can be returned; `online` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and all assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are all online and receiving information, `offline` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and all assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are all offline, `partially_online` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and some assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are online and receiving information and `unknown` where the status (state) has never received any data to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> and/or is not declared on any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> as a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetStatuses``: ``GET`` ``/api/v4/assets/status/current/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/status/current/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetStatus,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result


class CSVError(DataModelBase):
    """
    CSVError object.

    Parameters
    ----------
    description: Optional[str]
    name: Optional[str]
    positions: Optional[List[CSVPosition]]
    solution: Optional[str]
    title: Optional[str]
    type: Optional[str]

    """

    description: Optional[str] = Field(
        None, description="A detailed description of the type of error encountered."
    )
    name: Optional[str] = Field(None, description="Unique name of the error message")
    positions: Optional[List[CSVPosition]] = Field(
        None, description="A dictionary of each error encountered and it's position in the file."
    )
    solution: Optional[str] = Field(None, description="Possible solutions to fix the errors.")
    title: Optional[str] = Field(None, description="Display Name (title) of the error message")
    type: Optional[str] = Field(
        None,
        description="Type of error detected. There are two types of errors.</p> `structural` errors means that there is something wrong with the csv file. For example; this can be wrong number of columns, all rows don't have the right number of columns, the header does not contain the right column names, etc.</p> `content` errors means that the information given fails the validation tests. For example; the latitude or longitude has invalid numbers or characters, the name contains invalid characters,etc.",
    )


class CSVErrorMessage(DataModelBase):
    """
    CSVErrorMessage object.

    Parameters
    ----------
    errors: Optional[List[CSVError]]

    """

    errors: Optional[List[CSVError]] = Field(
        None, description="An array of all errors detected during the validation of the csv file."
    )


class Cluster(DataModelBase):
    """
    Cluster object.

    Parameters
    ----------
    cidr: Optional[ClusterCIDR]
    created: Optional[datetime]
    info: Optional[Dict[str, Any]]
    kelvin_info: Optional[Dict[str, Any]]
    kubeconfig: Optional[str]
    name: Optional[str]
    network_info: Optional[Dict[str, Any]]
    ready: Optional[bool]
    system_info: Optional[Dict[str, Any]]
    title: Optional[str]
    updated: Optional[datetime]

    """

    cidr: Optional[ClusterCIDR] = None
    created: Optional[datetime] = None
    info: Optional[Dict[str, Any]] = None
    kelvin_info: Optional[Dict[str, Any]] = None
    kubeconfig: Optional[str] = None
    name: Optional[str] = None
    network_info: Optional[Dict[str, Any]] = None
    ready: Optional[bool] = None
    system_info: Optional[Dict[str, Any]] = None
    title: Optional[str] = None
    updated: Optional[datetime] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_cluster(
        self_or_cls,
        data: Optional[Union[requests.ClusterCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Cluster:
        """
        Create Cluster

        **Permission Required:** `kelvin.permission.acp.create`.

        ``createCluster``: ``POST`` ``/api/v4/orchestration/clusters/create``

        Parameters
        ----------
        data: requests.ClusterCreate, optional
        **kwargs:
            Extra parameters for requests.ClusterCreate
              - info: dict
              - kelvin_info: dict
              - kubeconfig: str
              - location: str
              - name: str
              - network_info: dict
              - system_info: dict
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/orchestration/clusters/create",
            {},
            {},
            {},
            {},
            data,
            requests.ClusterCreate,
            False,
            {
                "201": Cluster,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_cluster(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[Cluster], ClusterListPaginated]:
        """
        List Cluster

        **Pagination Sortable Columns:** `cluster.name`

        **Permission Required:** `kelvin.permission.acp.read`.

        ``listCluster``: ``GET`` ``/api/v4/orchestration/clusters/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search Cluster by name or title
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/orchestration/clusters/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": ClusterListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/orchestration/clusters/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def download_cluster_provision_binary(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> Iterator[bytes]:
        """
        Download Cluster Provision Binary

        **Permission Required:** `kelvin.permission.orchestration.read`.

        ``downloadClusterProvisionBinary``: ``GET`` ``/api/v4/orchestration/clusters/provision/bin/download``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/orchestration/clusters/provision/bin/download",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": bytes, "400": ErrorMessages, "401": ErrorMessages},
            True,
            _dry_run,
        )
        return result

    @classmethod
    def download_cluster_provision_script(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> OrchestrationProvision:
        """
        Download Cluster Provision Script

        **Permission Required:** `kelvin.permission.orchestration.read`.

        ``downloadClusterProvisionScript``: ``GET`` ``/api/v4/orchestration/clusters/provision/script/download``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/orchestration/clusters/provision/script/download",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": OrchestrationProvision, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"cluster_name": "name"})
    def get_cluster(
        self_or_cls, cluster_name: str, _dry_run: bool = False, _client: Any = None
    ) -> Cluster:
        """
        Get Cluster

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getCluster``: ``GET`` ``/api/v4/orchestration/clusters/{cluster_name}/get``

        Parameters
        ----------
        cluster_name : :obj:`str`, optional
            Cluster name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/orchestration/clusters/{cluster_name}/get",
            {"cluster_name": cluster_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": Cluster, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessage},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"cluster_name": "name"})
    def get_cluster_manifests(
        self_or_cls,
        cluster_name: str,
        version: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> ClusterManifestList:
        """
        Get Cluster Manifests

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getClusterManifests``: ``GET`` ``/api/v4/orchestration/clusters/{cluster_name}/manifests/get``

        Parameters
        ----------
        cluster_name : :obj:`str`, optional
            Cluster name
        version : :obj:`str`
            Current Version

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/orchestration/clusters/{cluster_name}/manifests/get",
            {"cluster_name": cluster_name},
            {"version": version},
            {},
            {},
            None,
            None,
            False,
            {
                "200": ClusterManifestList,
                "204": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"cluster_name": "name"})
    def download_cluster_private_registry_credentials(
        self_or_cls, cluster_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Download Cluster Private Registry Credentials

        **Permission Required:** `kelvin.permission.acp.read`.

        ``downloadClusterPrivateRegistryCredentials``: ``GET`` ``/api/v4/orchestration/clusters/{cluster_name}/private-registry/download``

        Parameters
        ----------
        cluster_name : :obj:`str`, optional
            Cluster name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/orchestration/clusters/{cluster_name}/private-registry/download",
            {"cluster_name": cluster_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "500": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"cluster_name": "name"})
    def update_cluster(
        self_or_cls,
        cluster_name: str,
        data: Optional[Union[requests.ClusterUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Cluster:
        """
        Update Cluster

        **Permission Required:** `kelvin.permission.acp.update`.

        ``updateCluster``: ``POST`` ``/api/v4/orchestration/clusters/{cluster_name}/update``

        Parameters
        ----------
        cluster_name : :obj:`str`, optional
            Cluster name
        data: requests.ClusterUpdate, optional
        **kwargs:
            Extra parameters for requests.ClusterUpdate
              - info: dict
              - kelvin_info: dict
              - kubeconfig: str
              - network_info: dict
              - ready: bool
              - system_info: dict
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/orchestration/clusters/{cluster_name}/update",
            {"cluster_name": cluster_name},
            {},
            {},
            {},
            data,
            requests.ClusterUpdate,
            False,
            {
                "200": Cluster,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessage,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class ClusterListPaginated(PaginatorDataModel[Cluster]):
    """
    ClusterListPaginated object.

    Parameters
    ----------
    data: Optional[List[Cluster]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[Cluster]] = None
    pagination: Optional[pagination.Pagination] = None


class ControlChangeGet(DataModelBase):
    """
    ControlChangeGet object.

    Parameters
    ----------
    asset_name: str
    created: Optional[datetime]
    created_by: Optional[str]
    created_type: Optional[str]
    id: str
    last_message: Optional[str]
    last_state: Optional[str]
    metric_name: str
    old_payload: Optional[Dict[str, Any]]
    payload: Optional[Dict[str, Any]]
    status_log: Optional[List[ControlChangeGetStatus]]
    timestamp: Optional[datetime]
    updated: Optional[datetime]

    """

    asset_name: str = Field(
        ...,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    created: Optional[datetime] = Field(
        None,
        description="Time of creation of this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> in ISO 8601 UTC date/time format. Example; \"2022-08-22T08:41:01.657916Z\".",
    )
    created_by: Optional[str] = Field(
        None,
        description="Who created the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a>.</p> For a `user` this will normally be a user name or user email address and for a `workload` it will be the workload's unique name.",
    )
    created_type: Optional[str] = Field(
        None,
        description="Type of process that created the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a>.</p> There are two types; `user` which is a normal user registered on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> or `workload` which is an automated process like a Kelvin Rule or from a program in a  <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-apps/' target='_blank'>Kelvin App</a>.",
    )
    id: str = Field(
        ...,
        description="Unique identifier id for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a>.",
    )
    last_message: Optional[str] = Field(
        None,
        description="Last message received from the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> Manager.</p> For example some messages received could be `The system considers the Managed Control Change to be successfully applied.` or `The Control Change was sent to the Bridge. At this stage, the system is monitoring according to the Acceptance Criteria parameters and the retry logic.`.",
    )
    last_state: Optional[str] = Field(
        None,
        description="Current state of the last <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a>.</p> Available states are; `pending`, `sent`, `applied` and `failed`. check out <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/#from-api-to-applied' target='_blank'>Kelvin Control Change Statuses</a> in the Kelvin Documentation for more details about each status.",
    )
    metric_name: str = Field(
        ...,
        description="Unique identifier name of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a>.",
    )
    old_payload: Optional[Dict[str, Any]] = Field(
        None, description="The original value payload before the change was applied"
    )
    payload: Optional[Dict[str, Any]] = Field(
        None, description="The new value payload to be applied."
    )
    status_log: Optional[List[ControlChangeGetStatus]] = Field(
        None,
        description="Array of dictionary objects with the details of each status change including the `timestamp`, `state`, `message` and `payload value`.",
    )
    timestamp: Optional[datetime] = Field(
        None,
        description="Time when `created_by` sent the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> request to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>. The date-time is in ISO 8601 UTC date/time format. Example; \"2022-08-22T08:41:01.657916Z\".",
    )
    updated: Optional[datetime] = Field(
        None,
        description="Time of last state change of this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> in ISO 8601 UTC date/time format. Example; \"2022-08-22T08:41:01.657916Z\".",
    )

    @classmethod
    def get_control_change_clustering(
        cls,
        data: Optional[Union[requests.ControlChangeClustering, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[ControlChangeClustering]:
        """
        Get Control Change Clustering

        Groups and counts the occurrence of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Changes</a> within a defined time bucket.

        The grouping can also be filtered to only include <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Changes</a> for certain <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> or current <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> statuses.

        **Permission Required:** `kelvin.permission.control_change.read`.

        ``getControlChangeClustering``: ``POST`` ``/api/v4/control-changes/clustering/get``

        Parameters
        ----------
        data: requests.ControlChangeClustering, optional
        **kwargs:
            Extra parameters for requests.ControlChangeClustering
              - asset_include_children: bool
              - asset_names: list
              - end_date: datetime
              - metric_names: list
              - start_date: datetime
              - states: list
              - time_bucket: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/control-changes/clustering/get",
            {},
            {},
            {},
            {},
            data,
            requests.ControlChangeClustering,
            False,
            {
                "200": List[ControlChangeClustering],
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_control_change(
        self_or_cls,
        data: Optional[Union[requests.ControlChangeCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> ControlChange:
        """
        Create Control Change

        Send a new value to be written to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair.

        The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> Manager will automatically find which <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a> hosts the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> with the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair.

        **Permission Required:** `kelvin.permission.control_change.create`.

        ``createControlChange``: ``POST`` ``/api/v4/control-changes/create``

        Parameters
        ----------
        data: requests.ControlChangeCreate, optional
        **kwargs:
            Extra parameters for requests.ControlChangeCreate
              - asset_name: str
              - expiration_date: datetime
              - metric_name: str
              - payload: dict
              - retry: int
              - timeout: int

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/control-changes/create",
            {},
            {},
            {},
            {},
            data,
            requests.ControlChangeCreate,
            False,
            {"201": ControlChange, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_last_control_change(
        cls,
        status_limit: Optional[int] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        data: Optional[Union[requests.ControlChangeLast, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[ControlChangeGet], ControlChangeGetPaginated]:
        """
        Get Last Control Change

        Returns a list of the last <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> for each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pairs for each of the body parameters in the array `asset_names`.

        The list will include <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Changes</a> that succeeded, failed or are pending.

        Each object will not only give the `status` and `payload` of the last <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> but also the `status_log` containing the information of when the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> was created, sent to bridge and confirmed with a read.

        **Pagination Sortable Columns:** `control_change.id`, `control_change.asset_name`, `control_change.metric_name`, `control_change.last_state`, `control_change.created`, `control_change.updated`, `control_change.timestamp`

        **Permission Required:** `kelvin.permission.control_change.read`.

        ``getLastControlChange``: ``POST`` ``/api/v4/control-changes/last/get``

        Parameters
        ----------
        status_limit : :obj:`int`
            Number of statuses per <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> objects to be returned. Page size can be between 1 and 300
            objects.</p> Default value is 20.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-control-change/'
            target='_blank'>Kelvin Control Change</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 Kelvin
            Asset Statistic objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> list.</p> The alphanumeric string which are the bookmarks
            for the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> list.</p> The alphanumeric string which are the bookmarks
            for the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> parameters. Only one parameter can be selected.</p> There
            are seven parameter options; `control_change.id`,
            `control_change.asset_name`, `control_change.metric_name`,
            `control_change.last_state`, `control_change.created`,
            `control_change.updated` and `control_change.timestamp`.</p> The
            default is `control_change.id`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        data: requests.ControlChangeLast, optional
        **kwargs:
            Extra parameters for requests.ControlChangeLast
              - asset_include_children: bool
              - asset_names: list
              - metric_names: list
              - states: list
              - status_limit: int

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/control-changes/last/get",
            {},
            {
                "status_limit": status_limit,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            data,
            requests.ControlChangeLast,
            False,
            {"200": ControlChangeGetPaginated, "400": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/control-changes/last/get", "POST")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def list_control_change(
        cls,
        status_limit: Optional[int] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        data: Optional[Union[requests.ControlChangeList, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[ControlChangeGet], ControlChangeGetPaginated]:
        """
        List Control Change lists the Control Changes for each asset metric.

        Returns a list of the history of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> requests for each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pairs for each of the body parameters in the array `asset_names`.

        **Pagination Sortable Columns:** `control_change.id`, `control_change.asset_name`, `control_change.metric_name`, `control_change.last_state`, `control_change.created`, `control_change.updated`, `control_change.timestamp`

        **Permission Required:** `kelvin.permission.control_change.read`.

        ``listControlChange``: ``POST`` ``/api/v4/control-changes/list``

        Parameters
        ----------
        status_limit : :obj:`int`
            Number of statuses per <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> objects to be returned. Page size can be between 1 and 300
            objects.</p> Default value is 20.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-control-change/'
            target='_blank'>Kelvin Control Change</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 Kelvin
            Asset Statistic objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> list.</p> The alphanumeric string which are the bookmarks
            for the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> list.</p> The alphanumeric string which are the bookmarks
            for the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> parameters. Only one parameter can be selected.</p> There
            are seven parameter options; `control_change.id`,
            `control_change.asset_name`, `control_change.metric_name`,
            `control_change.last_state`, `control_change.created`,
            `control_change.updated` and `control_change.timestamp`.</p> The
            default is `control_change.id`.
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        data: requests.ControlChangeList, optional
        **kwargs:
            Extra parameters for requests.ControlChangeList
              - asset_include_children: bool
              - asset_names: list
              - ids: list
              - metric_names: list
              - states: list
              - status_limit: int

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/control-changes/list",
            {},
            {
                "status_limit": status_limit,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            data,
            requests.ControlChangeList,
            False,
            {"200": ControlChangeGetPaginated, "400": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/control-changes/list", "POST")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def get_range_control_change(
        cls,
        status_limit: Optional[int] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        data: Optional[Union[requests.ControlChangeRange, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[ControlChangeGet], ControlChangeGetPaginated]:
        """
        Get Range Control Change.

        Returns a list of the history of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> status changes that have happened within a date range for each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pairs for each of the body parameters in the array `asset_names`.

        **Pagination Sortable Columns:** `control_change.id`, `control_change.asset_name`, `control_change.metric_name`, `control_change.last_state`, `control_change.created`, `control_change.updated`, `control_change.timestamp`

        **Permission Required:** `kelvin.permission.control_change.read`.

        ``getRangeControlChange``: ``POST`` ``/api/v4/control-changes/range/get``

        Parameters
        ----------
        status_limit : :obj:`int`
            Number of statuses per <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> objects to be returned. Page size can be between 1 and 300
            objects.</p> Default value is 20.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-control-change/'
            target='_blank'>Kelvin Control Change</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 Kelvin
            Asset Statistic objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> list.</p> The alphanumeric string which are the bookmarks
            for the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> list.</p> The alphanumeric string which are the bookmarks
            for the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> parameters. Only one parameter can be selected.</p> There
            are seven parameter options; `control_change.id`,
            `control_change.asset_name`, `control_change.metric_name`,
            `control_change.last_state`, `control_change.created`,
            `control_change.updated` and `control_change.timestamp`.</p> The
            default is `control_change.id`.
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        data: requests.ControlChangeRange, optional
        **kwargs:
            Extra parameters for requests.ControlChangeRange
              - asset_include_children: bool
              - asset_names: list
              - end_date: datetime
              - metric_names: list
              - start_date: datetime
              - states: list
              - status_limit: int

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/control-changes/range/get",
            {},
            {
                "status_limit": status_limit,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            data,
            requests.ControlChangeRange,
            False,
            {"200": ControlChangeGetPaginated, "400": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/control-changes/range/get", "POST")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def download_control_change(
        cls,
        node: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[ControlChange], ControlChangePaginated]:
        """
        Download Control Change

        This is required only for internal <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> management. It will download all control changes on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> tagged as `pending` to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a>.

        **Pagination Sortable Columns:** `control_change.id`, `control_change.asset_name`, `control_change.metric_name`, `control_change.last_state`, `control_change.created`, `control_change.updated`, `control_change.timestamp`

        **Permission Required:** `kelvin.permission.control_change.read`.

        ``downloadControlChange``: ``GET`` ``/api/v4/control-changes/sync/{node}/download``

        Parameters
        ----------
        node : :obj:`str`, optional
            Name of an existing <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin
            Node</a> to check for <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> objects tagged as `pending` on the <a
            href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a> and initiate download to this <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-nodes/' target='_blank'>Kelvin Node</a>.</p> This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-control-change/'
            target='_blank'>Kelvin Control Change</a> request objects to be
            returned. Page size can be between 1 and 1000 objects.</p> The default
            is 20 Kelvin Asset Statistic objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> requests in the list.</p> The alphanumeric string which are
            the bookmarks for the beginning and end of the current list is given
            in the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> requests in the list.</p> The alphanumeric string which are
            the bookmarks for the beginning and end of the current list is given
            in the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> parameters.
            Only one parameter can be selected.</p> There are sevens parameter
            options; `control_change.id`, `control_change.asset_name`,
            `control_change.metric_name`, `control_change.last_state`,
            `control_change.created`, `control_change.updated`,
            `control_change.timestamp`.</p> The default is `control_change.id`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/control-changes/sync/{node}/download",
            {"node": node},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": ControlChangePaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/control-changes/sync/{node}/download", "GET")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def upload_control_change(
        cls,
        node: str,
        data: Optional[Union[requests.ControlChangeUpload, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Upload Control Change

        This is required only for internal <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> management. It will update the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> with the current status of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> requests on a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin Node</a>.

        **Permission Required:** `kelvin.permission.control_change.create`.

        ``uploadControlChange``: ``POST`` ``/api/v4/control-changes/sync/{node}/upload``

        Parameters
        ----------
        node : :obj:`str`, optional
            Name of an existing <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-nodes/' target='_blank'>Kelvin
            Node</a> to check <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-control-change/'
            target='_blank'>Kelvin Control Change</a> statuses and initiate upload
            (synchronize) to the <a
            href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        data: requests.ControlChangeUpload, optional
        **kwargs:
            Extra parameters for requests.ControlChangeUpload
              - requests: list
              - statuses: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/control-changes/sync/{node}/upload",
            {"node": node},
            {},
            {},
            {},
            data,
            requests.ControlChangeUpload,
            False,
            {
                "201": None,
                "207": ErrorMessages,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_control_change(
        cls,
        control_change_id: str,
        status_limit: Optional[int] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> ControlChangeGet:
        """
        Get Control Change

        Returns the properties of a single <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> request via its unique ID.

        Returned object will not only give the `status` and `payload` of the last <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> but also the `status_log` containing the information of when the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> was created, sent to bridge and confirmed with a read.

        **Permission Required:** `kelvin.permission.control_change.read`.

        ``getControlChange``: ``GET`` ``/api/v4/control-changes/{control_change_id}/get``

        Parameters
        ----------
        control_change_id : :obj:`str`, optional
            Unique identifier id for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a>.</p> This must contain only lowercase alphanumeric
            characters and the `-` character only. For example
            `764168a8-0e1e-33aa-adc7-14dfbb78dfad`
        status_limit : :obj:`int`
            Number of statuses per <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-control-change/' target='_blank'>Kelvin Control
            Change</a> objects to be returned. Page size can be between 1 and 300
            objects.</p> Default value is 20.

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/control-changes/{control_change_id}/get",
            {"control_change_id": control_change_id},
            {"status_limit": status_limit},
            {},
            {},
            None,
            None,
            False,
            {"200": ControlChangeGet, "400": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class ControlChangeGetPaginated(PaginatorDataModel[ControlChangeGet]):
    """
    ControlChangeGetPaginated object.

    Parameters
    ----------
    data: Optional[List[ControlChangeGet]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[ControlChangeGet]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-control-change/' target='_blank'>Kelvin Control Change</a> objects. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class DataLabel(DataModelBase):
    """
    DataLabel object.

    Parameters
    ----------
    confidence: Optional[int]
    created: Optional[datetime]
    description: Optional[str]
    end_date: Optional[datetime]
    id: Optional[int]
    info: Optional[Dict[str, Any]]
    label_name: Optional[str]
    metrics: Optional[List[DataLabelMetricItem]]
    source: Optional[DataLabelSource]
    start_date: Optional[datetime]
    updated: Optional[datetime]
    validation: Optional[bool]

    """

    confidence: Optional[int] = Field(
        None,
        description="Option  for Machine Learning systems to save the confidence results of any model's output",
    )
    created: Optional[datetime] = Field(
        None,
        description="Time of creation of this <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )
    description: Optional[str] = Field(
        None,
        description="Any type of description that adequately explains this <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Label</a> entry. In a practical sense this description could be used in a dashboard for the operators to understand this particular <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Label</a>.",
    )
    end_date: Optional[datetime] = Field(
        None,
        description="Timestamp for the end of a time range for which the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Label</a> information is relevant (supports RFC3339 with nanosecond precision, e.g. 2022-11-03T08:15:03.278515Z).</p> If the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Label</a> is a snapshot in time, the start_time and end_time usually will be the same.",
    )
    id: Optional[int] = Field(
        None,
        description="Unique integer number for the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Label</a>.</p> This is similar to a primary key in a database which is a unique integer number representing one row of data.\"",
    )
    info: Optional[Dict[str, Any]] = Field(
        None,
        description="A JSON object with any key/value pairs that provide information about this <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Label</a>.</p> It is recommended that any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pair instantaneous values that are referenced are also saved here rather than trying to link this timestamp to <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pair recorded value timestamp.",
    )
    label_name: Optional[str] = Field(
        None,
        description="This is the name from the Label variable which can be created with the Kelvin API `/datalabels/labels/create`.</p> If the Label name does not exist, it will be automatically created.",
    )
    metrics: Optional[List[DataLabelMetricItem]] = Field(
        None,
        description="An array of JSON objects containing the Kelvin Asset name and Kelvin Metric name pairs that are related to the Data Label.",
    )
    source: Optional[DataLabelSource] = None
    start_date: Optional[datetime] = Field(
        None,
        description="Timestamp for the start of a time range for which the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Label</a> information is relevant (supports RFC3339 with nanosecond precision, e.g. 2022-11-03T08:15:03.278515Z).",
    )
    updated: Optional[datetime] = Field(
        None,
        description="Time of modifying any variable of this <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> in ISO 8601 UTC date/time format. Example; \"2022-07-08T08:41:01.657916Z\".",
    )
    validation: Optional[bool] = Field(
        None,
        description="Option for Machine Learning systems to save the validation results of any model's output",
    )

    @instance_classmethod
    @DataModelBase.translate()
    def get_data_labels_clustering(
        self_or_cls,
        data: Optional[Union[requests.DataLabelCluster, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[DataLabelCluster]:
        """
        Get Data Labels Clustering

        Groups and counts the occurrence of Label Names within a defined time bucket for recorded <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a>.

        The grouping can also be filtered to only include certain parameters of <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a>.

        For example you can filter on Label names, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs, and time range.

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``getDataLabelsClustering``: ``POST`` ``/api/v4/datalabels/clustering/get``

        Parameters
        ----------
        data: requests.DataLabelCluster, optional
        **kwargs:
            Extra parameters for requests.DataLabelCluster
              - end_date: datetime
              - label_names: list
              - metrics: list
              - start_date: datetime
              - time_bucket: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/clustering/get",
            {},
            {},
            {},
            {},
            data,
            requests.DataLabelCluster,
            False,
            {"200": List[DataLabelCluster], "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_data_label(
        self_or_cls,
        data: Optional[Union[requests.DataLabelCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> DataLabel:
        """
        Create Data Label

        <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> are a way to annotate specific events for one or more <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs.

        This is particularly useful if you need to freeze a set of data points and decision making notes from the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> and/or from third party applications (such as an MES or a specialized machine learning model) in one data package that can be visualized on a dashboard or retrieved at a later date for analysis.

        **Permission Required:** `kelvin.permission.data_label.create`.

        ``createDataLabel``: ``POST`` ``/api/v4/datalabels/create``

        Parameters
        ----------
        data: requests.DataLabelCreate, optional
        **kwargs:
            Extra parameters for requests.DataLabelCreate
              - confidence: int
              - description: str
              - end_date: datetime
              - info: dict
              - label_name: str
              - metrics: list
              - source: str
              - start_date: datetime
              - validation: bool

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/create",
            {},
            {},
            {},
            {},
            data,
            requests.DataLabelCreate,
            False,
            {"201": DataLabel, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def filter_data_label(
        cls,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        data: Optional[Union[requests.DataLabelFilter, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[DataLabel], DataLabelListPaginated]:
        """
        Filter Data Label

        An advanced version of List Data Label which allows you to also filter on <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs.

        All other options in List Data Label API are also available in this API request.

        **Pagination Sortable Columns:** `data_label.id`

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``filterDataLabel``: ``POST`` ``/api/v4/datalabels/filter``

        Parameters
        ----------
        page_size : :obj:`int`
            Number of <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-api/kelvin-api-categories/data-labels/'
            target='_blank'>Kelvin Data Labels</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-api/kelvin-api-categories/data-labels/'
            target='_blank'>Kelvin Data Labels</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-api/kelvin-api-categories/data-labels/'
            target='_blank'>Kelvin Data Labels</a> in the list.</p> The
            alphanumeric string which are the bookmarks for the beginning and end
            of the current list is given in the previous JSON response value under
            the key pagination -> previous_page and pagination -> next_page
            respectively.</p> The pagination -> next_page alphanumeric string
            should be used here to show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-api/kelvin-api-categories/data-labels/'
            target='_blank'>Kelvin Data Labels</a> in the list.</p> The
            alphanumeric string which are the bookmarks for the beginning and end
            of the current list is given in the previous JSON response value under
            the key pagination -> previous_page and pagination -> next_page
            respectively.</p> The pagination -> previous_page alphanumeric string
            should be used here to show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-api/kelvin-api-categories/data-labels/'
            target='_blank'>Kelvin Data Labels</a> parameters. Only one parameter
            can be selected.</p> There in only one parameter option;
            `data_label.id`.</p> The default is `data_label.id`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        data: requests.DataLabelFilter, optional
        **kwargs:
            Extra parameters for requests.DataLabelFilter
              - label_names: list
              - metrics: list
              - search: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/filter",
            {},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            data,
            requests.DataLabelFilter,
            False,
            {"200": DataLabelListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/datalabels/filter", "POST") if fetch and not _dry_run else result
        )

    @classmethod
    def create_label(
        cls,
        data: Optional[Union[requests.LabelCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Label:
        """
        Create Label

        Creates a label that can be used as a reference and filter in <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a>.

        Tip: When a create/update <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> API request is performed and the Label does not exist, this `Create Label` API request will be automatically performed.

        **Permission Required:** `kelvin.permission.data_label.create`.

        ``createLabel``: ``POST`` ``/api/v4/datalabels/labels/create``

        Parameters
        ----------
        data: requests.LabelCreate, optional
        **kwargs:
            Extra parameters for requests.LabelCreate
              - name: str
              - title: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/create",
            {},
            {},
            {},
            {},
            data,
            requests.LabelCreate,
            False,
            {"201": Label, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_label(
        cls,
        names: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        metadata: Optional[Sequence[str]] = None,
        metadata_filter: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[Label], LabelListPaginated]:
        """
        List Label

        Returns a dictionary with a data property containing a list of all Labels on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Pagination Sortable Columns:** `label.name`

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``listLabel``: ``GET`` ``/api/v4/datalabels/labels/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter Label on the parameter by its name. This is given as an array,
            for example `[extruder,tank]`.</p> The filter is done on the full name
            only according to unique identifier name rules (Must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space but not at the
            beginning or end).</p> For example a filter with `[extruder,tank]`
            will return Labels with the name `extruder` but not with the names
            `demo-ch-extruder-gear-setpoint` or `demo-og-gas-tank-level`.
        search : :obj:`Sequence[str]`
            Search and filter the Label list. Both the Display Name (title) and
            the Name will be included in the filter field criteria. This is given
            as an array, for example `[extruder,tank]`.</p> The search is case
            insensitive and will find partial matches as well. For example if a
            Label name or display name is `demo-og-centrifugal-pump-speed`, then a
            match will be made if the filter string is `demo` or `FUGaL`.
        metadata : :obj:`Sequence[str]`
            Inject Label Metadata into the response
        metadata_filter : :obj:`Sequence[str]`
            Array of metadata keys/value filter conditions. For <metadata_name>
            with the same name, the filter conditions will result in OR queries.
            For <metadata_name> with different names will result in AND queries.
            Example: [
            <metadata_name>.<payload_key_to_search>=<payload_value_to_search>,
            <metadata_name2>.<payload_key2_to_search>=<payload_value2_to_search> ]
        page_size : :obj:`int`
            Number of Label objects to be returned. Page size can be between 1 and
            1000 objects.</p> The default is 20 Label objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of Labels in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of Labels in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the Label parameters. Only one parameter
            can be selected.</p> There is only parameter option available which is
            also the default; `label.name`.
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/datalabels/labels/list",
            {},
            {
                "names": names,
                "search": search,
                "metadata": metadata,
                "metadata_filter": metadata_filter,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": LabelListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/datalabels/labels/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def create_label_metadata_bulk(
        cls,
        data: Optional[Union[requests.LabelMetadataBulkCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Create Label Metadata Bulk

        Bulk create option for create Label Metadata API which creates a custom JSON payload that can be attached to a Label. You can create multiple different types of metadata payloads for each Label.

        When performing a `get` or `list` API request on Label or <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> then you can also add a metadata parameter. The Label Metadata payload will then be embedded in the response.

        For listing Labels you can also perform filters on the Label Metadata payload to only return labels with Metadata Label payload parameters matching the filters.

        This Label Metadata does not affect the operations of Labels or <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> on the Kelvin Platform. Label Metadata is not available in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-manager-ui" target="_blank">Kelvin Manager UI</a>.

        **Permission Required:** `kelvin.permission.data_label.create`.

        ``createLabelMetadataBulk``: ``POST`` ``/api/v4/datalabels/labels/metadata/create``

        Parameters
        ----------
        data: requests.LabelMetadataBulkCreate, optional
        **kwargs:
            Extra parameters for requests.LabelMetadataBulkCreate

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/metadata/create",
            {},
            {},
            {},
            {},
            data,
            requests.LabelMetadataBulkCreate,
            False,
            {
                "201": None,
                "207": ErrorMessages,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def delete_label_metadata_bulk(
        cls,
        data: Optional[Union[requests.LabelMetadataBulkDelete, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Delete Label Metadata Bulk

        Bulk delete option for delete Label Metadata API which permanently deletes an existing Label Metadata object associated with a specific Label. This cannot be undone once the API request has been submitted.

        This will only delete the specific Label Metadata object linked to the Label. If there is a Label Metadata object with the same name and payload BUT associated with a different Label, this will not be deleted.

        **Permission Required:** `kelvin.permission.data_label.delete`.

        ``deleteLabelMetadataBulk``: ``POST`` ``/api/v4/datalabels/labels/metadata/delete``

        Parameters
        ----------
        data: requests.LabelMetadataBulkDelete, optional
        **kwargs:
            Extra parameters for requests.LabelMetadataBulkDelete

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/metadata/delete",
            {},
            {},
            {},
            {},
            data,
            requests.LabelMetadataBulkDelete,
            False,
            {
                "200": None,
                "207": ErrorMessages,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def delete_label(
        self_or_cls, label_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Label

        Permanently delete an existing Label. This cannot be undone once the API request has been submitted.

        <span style="color: #ff0000;font-weight: bold;">WARNING</span> : If you delete a Label, all related <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> will also be permanently deleted !

        **Permission Required:** `kelvin.permission.data_label.delete`.

        ``deleteLabel``: ``POST`` ``/api/v4/datalabels/labels/{label_name}/delete``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/{label_name}/delete",
            {"label_name": label_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_label(
        self_or_cls,
        label_name: str,
        metadata: Optional[Sequence[str]] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Label:
        """
        Get Label

        Retrieve the properties of a Label.

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``getLabel``: ``GET`` ``/api/v4/datalabels/labels/{label_name}/get``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        metadata : :obj:`Sequence[str]`
            Inject Label Metadata into the response

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/datalabels/labels/{label_name}/get",
            {"label_name": label_name},
            {"metadata": metadata},
            {},
            {},
            None,
            None,
            False,
            {"200": Label, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_label_metadata(
        self_or_cls,
        label_name: str,
        data: Optional[Union[requests.LabelMetadataCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> LabelMetadata:
        """
        Create Label Metadata

        Creates a custom JSON payload that can be attached to a Label. You can create multiple different types of metadata payloads for each Label.

        When performing a `get` or `list` API request on Label or <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> then you can also add this metadata name. This Label Metadata payload will then be embedded in the response.

        For listing Labels you can also perform filters on the Label Metadata payload to only return labels with Metadata Label payload parameters matching the filters.

        This Label Metadata does not affect the operations of Labels or <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> on the Kelvin Platform. Label Metadata is not available in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-manager-ui" target="_blank">Kelvin Manager UI</a>.

        **Permission Required:** `kelvin.permission.data_label.create`.

        ``createLabelMetadata``: ``POST`` ``/api/v4/datalabels/labels/{label_name}/metadata/create``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        data: requests.LabelMetadataCreate, optional
        **kwargs:
            Extra parameters for requests.LabelMetadataCreate
              - name: str
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/{label_name}/metadata/create",
            {"label_name": label_name},
            {},
            {},
            {},
            data,
            requests.LabelMetadataCreate,
            False,
            {
                "201": LabelMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_label_metadata(
        cls,
        label_name: str,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[LabelMetadata], LabelMetadataListPaginated]:
        """
        List Label Metadata

        Returns a filtered list of Label Metadata objects linked with a Label.

        The path parameter is required but the query parameters are optional. If no query parameters are given with the API request, then the defaults will be used to return the Label Metadata list. The defaults are the first 20 Label Metadata linked to the Label returned in alphabetical order by the unique identifier name.

        **Pagination Sortable Columns:** `label_metadata.name`, `label_metadata.label_name`

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``listLabelMetadata``: ``GET`` ``/api/v4/datalabels/labels/{label_name}/metadata/list``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        search : :obj:`Sequence[str]`
            Search and filter the Label Metadata objects list. Only the Name will
            be included in the search field criteria. This is given as an array,
            for example `[pump,fan]`.</p> The search is case insensitive and will
            find partial matches as well. For example if a Label Metadata name is
            centrifugal_pump, then a match will be made if the search string is
            `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of Label Metadata objects to be returned. Page size can be
            between 1 and 1000 objects. The default is 20 Label Metadata objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of Label Metadata
            objects in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of Label Metadata
            objects in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the Label Metadata parameters. Only one
            parameter can be selected.</p> There are two parameter options;
            `label_metadata.name`, `label_metadata.label_name`. The default is
            `label_metadata.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order). The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/datalabels/labels/{label_name}/metadata/list",
            {"label_name": label_name},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": LabelMetadataListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/datalabels/labels/{label_name}/metadata/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate()
    def delete_label_metadata(
        self_or_cls,
        label_name: str,
        label_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> None:
        """
        Delete Label Metadata

        Permanently delete an existing Label Metadata object associated with a specific Label. This cannot be undone once the API request has been submitted.

        This will only delete the specific Label Metadata object linked to the Label. If there is a Label Metadata object with the same name and payload BUT associated with a different Label, this will not be deleted.

        **Permission Required:** `kelvin.permission.data_label.delete`.

        ``deleteLabelMetadata``: ``POST`` ``/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/delete``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        label_metadata_name : :obj:`str`, optional
            Label Metadata unique identifier name to retrieve.</p> This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/delete",
            {"label_name": label_name, "label_metadata_name": label_metadata_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_label_metadata(
        self_or_cls,
        label_name: str,
        label_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> LabelMetadata:
        """
        Get Label Metadata

        Retrieves the Label Metadata object associated with a Label.

        This will only retrieve the specific Label Metadata object linked to the Label. If there is a Label Metadata object with the same name and payload BUT associated with a different Label, this will not be retrieved.

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``getLabelMetadata``: ``GET`` ``/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/get``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        label_metadata_name : :obj:`str`, optional
            Label Metadata unique identifier name to retrieve.</p> This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/get",
            {"label_name": label_name, "label_metadata_name": label_metadata_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": LabelMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_label_metadata(
        self_or_cls,
        label_name: str,
        label_metadata_name: str,
        data: Optional[Union[requests.LabelMetadataUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> LabelMetadata:
        """
        Update Label Metadata

        Updates the payload of an existing Label Metadata object associated with a Label.

        The payload will be completely replaced by the new payload. Any existing key/value pairs that you want to keep must be included in your new payload that is sent with the API request.

        This will only update the payload of the specific Label Metadata object linked to the Label. If there is a Label Metadata object with the same name and payload BUT associated with a different Label, this will not be updated.

        **Permission Required:** `kelvin.permission.data_label.update`.

        ``updateLabelMetadata``: ``POST`` ``/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/update``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        label_metadata_name : :obj:`str`, optional
            Label Metadata unique identifier name to retrieve.</p> This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.
        data: requests.LabelMetadataUpdate, optional
        **kwargs:
            Extra parameters for requests.LabelMetadataUpdate
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/{label_name}/metadata/{label_metadata_name}/update",
            {"label_name": label_name, "label_metadata_name": label_metadata_name},
            {},
            {},
            {},
            data,
            requests.LabelMetadataUpdate,
            False,
            {
                "200": LabelMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_label(
        self_or_cls,
        label_name: str,
        data: Optional[Union[requests.LabelUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Label:
        """
        Update Label

        Update an existing Label with any new values passed through the body parameters.

        **Permission Required:** `kelvin.permission.data_label.update`.

        ``updateLabel``: ``POST`` ``/api/v4/datalabels/labels/{label_name}/update``

        Parameters
        ----------
        label_name : :obj:`str`, optional
            Unique identifier name for the Label.</p> This must contain only
            lowercase alphanumeric characters. The `.`, `_` and `-` characters are
            also allowed to separate words instead of a space BUT can not be at
            the beginning or end of the name.
        data: requests.LabelUpdate, optional
        **kwargs:
            Extra parameters for requests.LabelUpdate
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/labels/{label_name}/update",
            {"label_name": label_name},
            {},
            {},
            {},
            data,
            requests.LabelUpdate,
            False,
            {
                "200": Label,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_data_label_last(
        self_or_cls,
        data: Optional[Union[requests.DataLabelRange, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[DataLabel]:
        """
        Get Data Label Last

        Retrieve the properties of only the last <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Label</a> entry.</p> Some options are available to limit the search criteria or range. </p> Finding the last entry can be limited to either after `start_date` or before `end_date` or between the two dates. Also an array of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs or Label names can be filtered.

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``getDataLabelLast``: ``POST`` ``/api/v4/datalabels/last/get``

        Parameters
        ----------
        data: requests.DataLabelRange, optional
        **kwargs:
            Extra parameters for requests.DataLabelRange
              - end_date: datetime
              - label_names: list
              - metrics: list
              - start_date: datetime

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/last/get",
            {},
            {},
            {},
            {},
            data,
            requests.DataLabelRange,
            False,
            {"200": List[DataLabel], "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_data_label(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[DataLabel], DataLabelListPaginated]:
        """
        List Data Label

        Returns an array of dictionary objects with all the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> based on any of the parameters given. If no parameters are given, all <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> will be returned.

        **Pagination Sortable Columns:** `data_label.id`

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``listDataLabel``: ``GET`` ``/api/v4/datalabels/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-api/kelvin-api-categories/data-labels/'
            target='_blank'>Kelvin Data Labels</a> list. Both the Display Name
            (title) and the Name will be included in the search field criteria.
            This is given as an array, for example `[pump,fan]`.</p> The search is
            case insensitive and will find partial matches as well. For example if
            a <a href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-api/kelvin-api-categories/data-labels/'
            target='_blank'>Kelvin Data Labels</a> name or display name is
            `centrifugal_pump`, then a match will be made if the search string is
            `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-api/kelvin-api-categories/data-labels/'
            target='_blank'>Kelvin Data Labels</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-api/kelvin-api-categories/data-labels/'
            target='_blank'>Kelvin Data Labels</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-api/kelvin-api-categories/data-labels/'
            target='_blank'>Kelvin Data Labels</a> in the list.</p> The
            alphanumeric string which are the bookmarks for the beginning and end
            of the current list is given in the previous JSON response value under
            the key pagination -> previous_page and pagination -> next_page
            respectively.</p> The pagination -> next_page alphanumeric string
            should be used here to show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-api/kelvin-api-categories/data-labels/'
            target='_blank'>Kelvin Data Labels</a> in the list.</p> The
            alphanumeric string which are the bookmarks for the beginning and end
            of the current list is given in the previous JSON response value under
            the key pagination -> previous_page and pagination -> next_page
            respectively.</p> The pagination -> previous_page alphanumeric string
            should be used here to show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-api/kelvin-api-categories/data-labels/'
            target='_blank'>Kelvin Data Labels</a> parameters. Only one parameter
            can be selected.</p> There in only one parameter option;
            `data_label.id`.</p> The default is `data_label.id`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/datalabels/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": DataLabelListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/datalabels/list", "GET") if fetch and not _dry_run else result

    @instance_classmethod
    @DataModelBase.translate()
    def get_data_label_range(
        self_or_cls,
        data: Optional[Union[requests.DataLabelRange, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Iterator[DataLabel]:
        """
        Get Data Label Range

        Retrieve the properties of a list of <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> where the `start_date` or `end_date` of the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> is within the range of this GET API `start_date` and `end_date`.

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``getDataLabelRange``: ``POST`` ``/api/v4/datalabels/range/get``

        Parameters
        ----------
        data: requests.DataLabelRange, optional
        **kwargs:
            Extra parameters for requests.DataLabelRange
              - end_date: datetime
              - label_names: list
              - metrics: list
              - start_date: datetime

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/range/get",
            {},
            {},
            {},
            {},
            data,
            requests.DataLabelRange,
            False,
            {"200": DataLabel, "400": ErrorMessages, "401": ErrorMessages},
            True,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"datalabel_id": "id"})
    def delete_data_label(
        self_or_cls, datalabel_id: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Data Label

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a>. This cannot be undone once the API request has been submitted.

        **Permission Required:** `kelvin.permission.data_label.delete`.

        ``deleteDataLabel``: ``POST`` ``/api/v4/datalabels/{datalabel_id}/delete``

        Parameters
        ----------
        datalabel_id : :obj:`str`, optional
            Unique integer number for the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-api/kelvin-api-categories/data-labels/'
            target='_blank'>Kelvin Data Label</a> to update.</p> This is similar
            to a primary key in a database which is a unique integer number
            representing one row of data.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/{datalabel_id}/delete",
            {"datalabel_id": datalabel_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"datalabel_id": "id"})
    def get_data_label(
        self_or_cls, datalabel_id: str, _dry_run: bool = False, _client: Any = None
    ) -> DataLabel:
        """
        Get Data Label

        Retrieve the properties of a <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Label</a>.

        **Permission Required:** `kelvin.permission.data_label.read`.

        ``getDataLabel``: ``GET`` ``/api/v4/datalabels/{datalabel_id}/get``

        Parameters
        ----------
        datalabel_id : :obj:`str`, optional
            Unique integer number for the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-api/kelvin-api-categories/data-labels/'
            target='_blank'>Kelvin Data Label</a> to update.</p> This is similar
            to a primary key in a database which is a unique integer number
            representing one row of data.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/datalabels/{datalabel_id}/get",
            {"datalabel_id": datalabel_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": DataLabel, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"datalabel_id": "id"})
    def update_data_label(
        self_or_cls,
        datalabel_id: str,
        data: Optional[Union[requests.DataLabelCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> DataLabel:
        """
        Update Data Label

        <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a> in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> are a way to annotate specific events for one or more <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs.

        This is particularly useful if you need to freeze a set of data points and decision making notes from the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> and/or from third party applications (such as an MES or a specialized machine learning model) in one package that can be visualized on a dashboard or retrieved at a later date for analysis.

        If `metrics` are provided in the update, it will replace the full existing list.

        **Permission Required:** `kelvin.permission.data_label.update`.

        ``updateDataLabel``: ``POST`` ``/api/v4/datalabels/{datalabel_id}/update``

        Parameters
        ----------
        datalabel_id : :obj:`str`, optional
            Unique integer number for the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-api/kelvin-api-categories/data-labels/'
            target='_blank'>Kelvin Data Labels</a> to update.</p> This is similar
            to a primary key in a database which is a unique integer number
            representing one row of data.
        data: requests.DataLabelCreate, optional
        **kwargs:
            Extra parameters for requests.DataLabelCreate
              - confidence: int
              - description: str
              - end_date: datetime
              - info: dict
              - label_name: str
              - metrics: list
              - source: str
              - start_date: datetime
              - validation: bool

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datalabels/{datalabel_id}/update",
            {"datalabel_id": datalabel_id},
            {},
            {},
            {},
            data,
            requests.DataLabelCreate,
            False,
            {
                "200": DataLabel,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class DataLabelListPaginated(PaginatorDataModel[DataLabel]):
    """
    DataLabelListPaginated object.

    Parameters
    ----------
    data: Optional[List[DataLabel]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[DataLabel]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-api/kelvin-api-categories/data-labels/' target='_blank'>Kelvin Data Labels</a>. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class DataType(DataModelBase):
    """
    DataType object.

    Parameters
    ----------
    connect: Optional[bool]
    created: Optional[datetime]
    icd: Optional[ICDPayload]
    name: Optional[str]
    schema_: Optional[Dict[str, Any]]
    source: Optional[str]
    type: Optional[str]
    updated: Optional[datetime]
    version: Optional[str]

    """

    connect: Optional[bool] = None
    created: Optional[datetime] = None
    icd: Optional[ICDPayload] = None
    name: Optional[str] = Field(None, max_length=64)
    schema_: Optional[Dict[str, Any]] = Field(None, alias="schema")
    source: Optional[str] = None
    type: Optional[str] = Field(None, max_length=45)
    updated: Optional[datetime] = None
    version: Optional[str] = Field(None, max_length=45)

    @instance_classmethod
    @DataModelBase.translate()
    def create_data_type(
        self_or_cls,
        data: Optional[Union[requests.DataTypeCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> DataType:
        """
        Create Data Type
        Regex validators:
        - data type name: `^([a-z][a-z0-9_]+\\.)+[a-z][a-z0-9_]+$`
        - data type class_name: `^[a-zA-Z][a-zA-Z0-9_]+$`

        **Permission Required:** `kelvin.permission.data_type.create`.

        ``createDataType``: ``POST`` ``/api/v4/datatypes/create``

        Parameters
        ----------
        data: requests.DataTypeCreate, optional
        **kwargs:
            Extra parameters for requests.DataTypeCreate
              - icd: str
              - schema: dict
              - source: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/datatypes/create",
            {},
            {},
            {},
            {},
            data,
            requests.DataTypeCreate,
            False,
            {"201": DataType, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_data_type(
        cls,
        search: Optional[Sequence[str]] = None,
        all: Optional[bool] = None,
        connect: Optional[bool] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[DataType], DataTypeListPaginated]:
        """
        List Data Type

        **Pagination Sortable Columns:** `data_type.name`, `data_type.version`
        By default returns only the latest versions for each data type

        **Permission Required:** `kelvin.permission.data_type.read`.

        ``listDataType``: ``GET`` ``/api/v4/datatypes/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search data types by name
        all : :obj:`bool`
            List all versions of all data types. If false, it will only list the
            latest version. Default: False.
        connect : :obj:`bool`
            Only fetch connect data types. Default: False.
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/datatypes/list",
            {},
            {
                "search": search,
                "all": all,
                "connect": connect,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": DataTypeListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/datatypes/list", "GET") if fetch and not _dry_run else result

    @instance_classmethod
    @DataModelBase.translate({"data_type_name": "name"})
    def get_data_type_latest_version(
        self_or_cls, data_type_name: str, _dry_run: bool = False, _client: Any = None
    ) -> DataType:
        """
        Get Data Type Latest Version

        **Permission Required:** `kelvin.permission.data_type.read`.

        ``getDataTypeLatestVersion``: ``GET`` ``/api/v4/datatypes/{data_type_name}/versions/latest/get``

        Parameters
        ----------
        data_type_name : :obj:`str`, optional
            Data Type name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/datatypes/{data_type_name}/versions/latest/get",
            {"data_type_name": data_type_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": DataType, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"data_type_name": "name", "data_type_version": "version"})
    def get_data_type_dependencies(
        self_or_cls,
        data_type_name: str,
        data_type_version: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> List[DataType]:
        """
        Get Data Type Dependencies. This endpoint ill return all dependencies levels in a flattened array.

        **Permission Required:** `kelvin.permission.data_type.read`.

        ``getDataTypeDependencies``: ``GET`` ``/api/v4/datatypes/{data_type_name}/versions/{data_type_version}/dependencies/get``

        Parameters
        ----------
        data_type_name : :obj:`str`, optional
            Data Type name
        data_type_version : :obj:`str`, optional
            Data Type version

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/datatypes/{data_type_name}/versions/{data_type_version}/dependencies/get",
            {"data_type_name": data_type_name, "data_type_version": data_type_version},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": List[DataType],
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"data_type_name": "name", "data_type_version": "version"})
    def get_data_type(
        self_or_cls,
        data_type_name: str,
        data_type_version: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> DataType:
        """
        Get Data Type

        **Permission Required:** `kelvin.permission.data_type.read`.

        ``getDataType``: ``GET`` ``/api/v4/datatypes/{data_type_name}/versions/{data_type_version}/get``

        Parameters
        ----------
        data_type_name : :obj:`str`, optional
            Data Type name
        data_type_version : :obj:`str`, optional
            Data Type version

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/datatypes/{data_type_name}/versions/{data_type_version}/get",
            {"data_type_name": data_type_name, "data_type_version": data_type_version},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": DataType, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"data_type_name": "name", "data_type_version": "version"})
    def get_data_type_schema(
        self_or_cls,
        data_type_name: str,
        data_type_version: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> DataTypeSchema:
        """
        Get Data Type Schema

        **Permission Required:** `kelvin.permission.data_type.read`.

        ``getDataTypeSchema``: ``GET`` ``/api/v4/datatypes/{data_type_name}/versions/{data_type_version}/schema/get``

        Parameters
        ----------
        data_type_name : :obj:`str`, optional
            Data Type name
        data_type_version : :obj:`str`, optional
            Data Type version

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/datatypes/{data_type_name}/versions/{data_type_version}/schema/get",
            {"data_type_name": data_type_name, "data_type_version": data_type_version},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": DataTypeSchema,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result


class DataTypeListPaginated(PaginatorDataModel[DataType]):
    """
    DataTypeListPaginated object.

    Parameters
    ----------
    data: Optional[List[DataType]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[DataType]] = None
    pagination: Optional[pagination.Pagination] = None


class EmissionsDashboardAnalytics(DataModelBase):
    """
    EmissionsDashboardAnalytics object.

    Parameters
    ----------
    historian: Optional[List[EmissionsDashboardAnalyticsHistorian]]
    total_inefficient_consumed_energy: Optional[float]
    total_inefficient_cost: Optional[float]
    total_scope2_cost: Optional[float]
    total_scope2_emission: Optional[float]

    """

    historian: Optional[List[EmissionsDashboardAnalyticsHistorian]] = None
    total_inefficient_consumed_energy: Optional[float] = None
    total_inefficient_cost: Optional[float] = None
    total_scope2_cost: Optional[float] = None
    total_scope2_emission: Optional[float] = None


class EmissionsInefficientAsset(DataModelBase):
    """
    EmissionsInefficientAsset object.

    Parameters
    ----------
    alarm: Optional[EmissionsInefficientAssetAlarm]
    analytics: Optional[EmissionsInefficientAssetAnalytics]
    name: Optional[str]
    title: Optional[str]

    """

    alarm: Optional[EmissionsInefficientAssetAlarm] = None
    analytics: Optional[EmissionsInefficientAssetAnalytics] = None
    name: Optional[str] = None
    title: Optional[str] = None


class EntityReference(DataModelBase):
    """
    EntityReference object.

    Parameters
    ----------
    metric: Optional[ReferenceMetric]
    name: Optional[str]
    title: Optional[str]
    type: Optional[str]
    visualization: Optional[Dict[str, Any]]

    """

    metric: Optional[ReferenceMetric] = None
    name: Optional[str] = Field(
        None,
        description="Unique identifier name for the display value in the entity in this new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.</p> This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    title: Optional[str] = Field(
        None,
        description="Display name (title) for the display value for the entity in this new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>. This is a friendly name displayed in lists and in any references.</p> You can use any character, numeric, space and special character in this parameter.",
    )
    type: Optional[str] = Field(
        None,
        description="The type of reference.</p> There is only one option at the moment; `metric`.",
    )
    visualization: Optional[Dict[str, Any]] = Field(None, description="For internal use only.")


class FailureAnalysis(DataModelBase):
    """
    FailureAnalysis object.

    Parameters
    ----------
    failures: Optional[List[Failure]]
    metric_semantic_type: Optional[str]
    name: Optional[str]
    spectral_bands: Optional[List[FailureAnalysisSpectralBand]]

    """

    failures: Optional[List[Failure]] = None
    metric_semantic_type: Optional[str] = None
    name: Optional[str] = None
    spectral_bands: Optional[List[FailureAnalysisSpectralBand]] = None


class FailureAnalysisList(DataModelBase):
    """
    FailureAnalysisList object.

    Parameters
    ----------
    data: Optional[List[FailureAnalysis]]

    """

    data: Optional[List[FailureAnalysis]] = None

    @classmethod
    def list_analysis(
        cls, semantic_type_name: Optional[str] = None, _dry_run: bool = False, _client: Any = None
    ) -> FailureAnalysisList:
        """
        List Analysis

        **Permission Required:** `kelvin.permission.failure_detection.read`.

        ``listAnalysis``: ``GET`` ``/api/v4/failure-detection/analysis/list``

        Parameters
        ----------
        semantic_type_name : :obj:`str`
            Filter analysis by semantic_type_name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/failure-detection/analysis/list",
            {},
            {"semantic_type_name": semantic_type_name},
            {},
            {},
            None,
            None,
            False,
            {"200": FailureAnalysisList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def list_thresholds(
        cls,
        component_class_names: Optional[Sequence[str]] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> FailureAnalysisThresholdsList:
        """
        List Thresholds

        **Permission Required:** `kelvin.permission.failure_detection.read`.

        ``listThresholds``: ``GET`` ``/api/v4/failure-detection/analysis/thresholds/list``

        Parameters
        ----------
        component_class_names : :obj:`Sequence[str]`
            Filter Thresholds by component_class_name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/failure-detection/analysis/thresholds/list",
            {},
            {"component_class_names": component_class_names},
            {},
            {},
            None,
            None,
            False,
            {"200": FailureAnalysisThresholdsList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def create_thresholds(
        cls,
        component_failure_class_name: str,
        data: Optional[Union[requests.FailureAnalysisThresholdsUpsert, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> FailureAnalysisThresholdsUpsert:
        """
        Create Thresholds

        **Permission Required:** `kelvin.permission.failure_detection.create`.

        ``createThresholds``: ``POST`` ``/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/create``

        Parameters
        ----------
        component_failure_class_name : :obj:`str`, optional
            component failure class name for which you are creating thresholds
        data: requests.FailureAnalysisThresholdsUpsert, optional
        **kwargs:
            Extra parameters for requests.FailureAnalysisThresholdsUpsert
              - thresholds: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/create",
            {"component_failure_class_name": component_failure_class_name},
            {},
            {},
            {},
            data,
            requests.FailureAnalysisThresholdsUpsert,
            False,
            {"201": FailureAnalysisThresholdsUpsert, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def delete_thresholds(
        cls,
        component_failure_class_name: str,
        data: Optional[Union[requests.FailureAnalysisThresholdsUpsert, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Delete Thresholds

        **Permission Required:** `kelvin.permission.failure_detection.delete`.

        ``deleteThresholds``: ``POST`` ``/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/delete``

        Parameters
        ----------
        component_failure_class_name : :obj:`str`, optional
            component failure class name for which you are deleting thresholds
        data: requests.FailureAnalysisThresholdsUpsert, optional
        **kwargs:
            Extra parameters for requests.FailureAnalysisThresholdsUpsert
              - thresholds: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/delete",
            {"component_failure_class_name": component_failure_class_name},
            {},
            {},
            {},
            data,
            requests.FailureAnalysisThresholdsUpsert,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def update_thresholds(
        cls,
        component_failure_class_name: str,
        data: Optional[Union[requests.FailureAnalysisThresholdsUpsert, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> FailureAnalysisThresholdsUpsert:
        """
        Update Thresholds

        **Permission Required:** `kelvin.permission.failure_detection.update`.

        ``updateThresholds``: ``POST`` ``/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/update``

        Parameters
        ----------
        component_failure_class_name : :obj:`str`, optional
            component failure class name for which you are updating thresholds
        data: requests.FailureAnalysisThresholdsUpsert, optional
        **kwargs:
            Extra parameters for requests.FailureAnalysisThresholdsUpsert
              - thresholds: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/analysis/thresholds/{component_failure_class_name}/update",
            {"component_failure_class_name": component_failure_class_name},
            {},
            {},
            {},
            data,
            requests.FailureAnalysisThresholdsUpsert,
            False,
            {"200": FailureAnalysisThresholdsUpsert, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class FailureClassProperty(DataModelBase):
    """
    FailureClassProperty object.

    Parameters
    ----------
    data_type: Optional[str]
    name: Optional[str]
    title: Optional[str]
    unit_options: Optional[List[PropertyOptions]]
    value_options: Optional[List[PropertyOptions]]

    """

    data_type: Optional[str] = None
    name: Optional[str] = None
    title: Optional[str] = None
    unit_options: Optional[List[PropertyOptions]] = None
    value_options: Optional[List[PropertyOptions]] = None


class FailureDetection(DataModelBase):
    """
    FailureDetection object.

    Parameters
    ----------
    enabled: Optional[bool]
    failure_class_name: Optional[str]
    failure_quotient: Optional[float]
    properties: Optional[List[FailureDetectionProperty]]

    """

    enabled: Optional[bool] = Field(
        None,
        description='The default activation state of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-ai-failure-detection/" target="_blank">Kelvin Failure Detection AI</a> for this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.</p>  `true` (enabled) and `false` (disabled).</p> The default is `false` (disabled).',
    )
    failure_class_name: Optional[str] = Field(
        None,
        description='The name (not the Display Name / Title) of the default <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-ai-failure-detection/" target="_blank">Kelvin Failure Detection Class</a>.</p> This parameter is only used when <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-ai-failure-detection/" target="_blank">Kelvin Failure Detection AI</a> is enabled.',
    )
    failure_quotient: Optional[float] = Field(
        None,
        description='The current percentage failure time of this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> compared to the total failure time of all <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups" target="_blank">Kelvin Group</a>.',
    )
    properties: Optional[List[FailureDetectionProperty]] = Field(
        None,
        description='List of properties required by the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-ai-failure-detection/" target="_blank">Kelvin Failure Detection AI</a> model.</p> For example if you have a <a href=\'https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor\' target=\'_blank\'>Kelvin Sensor</a> and select the  `Vibration Piezo` failure class, then you will need to include information about the sampling rate, sample duration, axial/horizontal/vertical orientations. Any default values not set here must be filled in by the user when adding this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )


class Integration(DataModelBase):
    """
    Integration object.

    Parameters
    ----------
    configuration: Optional[IntegrationConfiguration]
    created: Optional[datetime]
    enable: Optional[bool]
    name: Optional[str]
    status: Optional[IntegrationStatus]
    title: Optional[str]
    type: Optional[str]
    updated: Optional[datetime]

    """

    configuration: Optional[IntegrationConfiguration] = None
    created: Optional[datetime] = None
    enable: Optional[bool] = None
    name: Optional[str] = None
    status: Optional[IntegrationStatus] = None
    title: Optional[str] = None
    type: Optional[str] = None
    updated: Optional[datetime] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_aws_region(
        self_or_cls,
        data: Optional[Union[requests.IntegrationAwsRegionCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> IntegrationAwsRegion:
        """
        Create AWS Region

        **Permission Required:** `kelvin.permission.integration.create`.

        ``createAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/create``

        Parameters
        ----------
        data: requests.IntegrationAwsRegionCreate, optional
        **kwargs:
            Extra parameters for requests.IntegrationAwsRegionCreate
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/create",
            {},
            {},
            {},
            {},
            data,
            requests.IntegrationAwsRegionCreate,
            False,
            {"201": IntegrationAwsRegion, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_aws_regions(
        cls,
        names: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> IntegrationAwsRegionList:
        """
        List AWS Regions

        **Pagination Sortable Columns:** `aws_regions.name`, `aws_regions.title`, `aws_regions.created`, `aws_regions.updated`

        **Permission Required:** `kelvin.permission.integration.read`.

        ``listAWSRegions``: ``GET`` ``/api/v4/integrations/aws/regions/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter Regions by name
        search : :obj:`Sequence[str]`
            Search Regions by name or title
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/integrations/aws/regions/list",
            {},
            {
                "names": names,
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": IntegrationAwsRegionList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def delete_aws_region(
        self_or_cls, name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete AWS Region

        **Permission Required:** `kelvin.permission.integration.delete`.

        ``deleteAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/{name}/delete``

        Parameters
        ----------
        name : :obj:`str`, optional
            Region name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/{name}/delete",
            {"name": name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_aws_region(
        self_or_cls, name: str, _dry_run: bool = False, _client: Any = None
    ) -> IntegrationAwsRegion:
        """
        Get AWS Region

        **Permission Required:** `kelvin.permission.integration.read`.

        ``getAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/{name}/get``

        Parameters
        ----------
        name : :obj:`str`, optional
            Region name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/{name}/get",
            {"name": name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": IntegrationAwsRegion, "400": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_aws_region(
        self_or_cls,
        name: str,
        data: Optional[Union[requests.IntegrationAwsRegionUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> IntegrationAwsRegion:
        """
        Update AWS Region

        **Permission Required:** `kelvin.permission.integration.update`.

        ``updateAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/{name}/update``

        Parameters
        ----------
        name : :obj:`str`, optional
            Region name
        data: requests.IntegrationAwsRegionUpdate, optional
        **kwargs:
            Extra parameters for requests.IntegrationAwsRegionUpdate
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/{name}/update",
            {"name": name},
            {},
            {},
            {},
            data,
            requests.IntegrationAwsRegionUpdate,
            False,
            {
                "200": IntegrationAwsRegion,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_integration(
        self_or_cls,
        data: Optional[Union[requests.IntegrationCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Integration:
        """
        Create Integration

        **Permission Required:** `kelvin.permission.integration.create`.

        ``createIntegration``: ``POST`` ``/api/v4/integrations/create``

        Parameters
        ----------
        data: requests.IntegrationCreate, optional
        **kwargs:
            Extra parameters for requests.IntegrationCreate
              - configuration: str
              - enable: bool
              - name: str
              - title: str
              - type: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/create",
            {},
            {},
            {},
            {},
            data,
            requests.IntegrationCreate,
            False,
            {"201": Integration, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def list_integrations(
        self_or_cls,
        names: Optional[Sequence[str]] = None,
        types: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        enable: Optional[bool] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> IntegrationList:
        """
        List Integrations

        **Pagination Sortable Columns:** `integration.name`, `integration.title`, `integration.type`, `integration.enable`, `integration.state`, `integration.last_seen`, `integration.created`, `integration.updated`

        **Permission Required:** `kelvin.permission.integration.read`.

        ``listIntegrations``: ``GET`` ``/api/v4/integrations/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter Integrations by name
        types : :obj:`Sequence[str]`
            Filter Integrations by type
        search : :obj:`Sequence[str]`
            Search Integrations by name or title
        enable : :obj:`bool`
            Filter by enable Integrations. Possible Values: true/false. Default:
            none
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/integrations/list",
            {},
            {
                "names": names,
                "types": types,
                "search": search,
                "enable": enable,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": IntegrationList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def delete_integration(
        self_or_cls, name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Integration

        **Permission Required:** `kelvin.permission.integration.delete`.

        ``deleteIntegration``: ``POST`` ``/api/v4/integrations/{name}/delete``

        Parameters
        ----------
        name : :obj:`str`, optional
            Integration name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/{name}/delete",
            {"name": name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_integration(
        self_or_cls, name: str, _dry_run: bool = False, _client: Any = None
    ) -> Integration:
        """
        Get Integration

        **Permission Required:** `kelvin.permission.integration.read`.

        ``getIntegration``: ``GET`` ``/api/v4/integrations/{name}/get``

        Parameters
        ----------
        name : :obj:`str`, optional
            Integration name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/integrations/{name}/get",
            {"name": name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": Integration, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_integration(
        self_or_cls,
        name: str,
        data: Optional[Union[requests.IntegrationUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Integration:
        """
        Update Integration

        **Permission Required:** `kelvin.permission.integration.update`.

        ``updateIntegration``: ``POST`` ``/api/v4/integrations/{name}/update``

        Parameters
        ----------
        name : :obj:`str`, optional
            Integration name
        data: requests.IntegrationUpdate, optional
        **kwargs:
            Extra parameters for requests.IntegrationUpdate
              - configuration: str
              - enable: bool
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/{name}/update",
            {"name": name},
            {},
            {},
            {},
            data,
            requests.IntegrationUpdate,
            False,
            {"200": Integration, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class IntegrationListItem(DataModelBase):
    """
    IntegrationListItem object.

    Parameters
    ----------
    created: Optional[datetime]
    enable: Optional[bool]
    name: Optional[str]
    status: Optional[IntegrationStatus]
    title: Optional[str]
    type: Optional[str]
    updated: Optional[datetime]

    """

    created: Optional[datetime] = None
    enable: Optional[bool] = None
    name: Optional[str] = None
    status: Optional[IntegrationStatus] = None
    title: Optional[str] = None
    type: Optional[str] = None
    updated: Optional[datetime] = None


class MapEntity(DataModelBase):
    """
    MapEntity object.

    Parameters
    ----------
    name: Optional[str]
    references: Optional[List[EntityReference]]
    title: Optional[str]
    visualization: Optional[Dict[str, Any]]

    """

    name: Optional[str] = Field(
        None,
        description="Unique identifier name for the entity in this new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.</p> This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    references: Optional[List[EntityReference]] = Field(
        None,
        description="Information on the type of data related to the entity and all the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> pairs.",
    )
    title: Optional[str] = Field(
        None,
        description="Display name (title) for the entity in this new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>. This is a friendly name displayed in lists and in any references.</p> You can use any character, numeric, space and special character in this parameter.",
    )
    visualization: Optional[Dict[str, Any]] = Field(
        None,
        description="Information for the entity display on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.</p> Each entity will have visualization data for the type of display, the symbol to use, the position, the size, the related <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> and a unique id.",
    )


class MapModel(DataModelBase):
    """
    MapModel object.

    Parameters
    ----------
    asset_name: Optional[str]
    end_date: Optional[datetime]
    entities: Optional[List[MapEntity]]
    failure_detection: Optional[MapFailureDetection]
    id: Optional[str]
    mode: Optional[str]
    name: Optional[str]
    relationships: Optional[List[MapRelationship]]
    start_date: Optional[datetime]
    title: Optional[str]

    """

    asset_name: Optional[str] = Field(
        None,
        description="Name of the parent <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.</p> This <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> must be a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> with a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> `site`.",
    )
    end_date: Optional[datetime] = Field(
        None,
        description="Date when this version of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> version was superseded with a newer version.</p> This will be shown in ISO 8601 format. e.g \"2023-02-27T10:20:31.194Z\".</p> This will not be return if the requested version is the current (latest) version.",
    )
    entities: Optional[List[MapEntity]] = Field(
        None,
        description="All the entities that make up the process flow in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.</p> This is used with relationships to connect the entities together,",
    )
    failure_detection: Optional[MapFailureDetection] = None
    id: Optional[str] = Field(
        None,
        description="Unique identifier id for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> request.",
    )
    mode: Optional[str] = Field(
        None,
        description="The mode of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.</p> There are two options available; `simulation` and `production`.</p> For production mode, all entities must be linked to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> that exists on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.</p> For simulation mode, entities do not need to be linked to any existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>.",
    )
    name: Optional[str] = Field(
        None,
        description="Unique identifier name for this new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process</a>.</p> This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    relationships: Optional[List[MapRelationship]] = Field(
        None,
        description="Maps out how each entity is connected to other entities in the process flow in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.",
    )
    start_date: Optional[datetime] = Field(
        None,
        description="Date when this version of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> was created.</p> This will be shown in ISO 8601 format. e.g \"2023-02-27T10:20:31.194Z\".",
    )
    title: Optional[str] = Field(
        None,
        description="Display name (title) for this new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>. This is a friendly name displayed in lists and in any references.</p> You can use any character, numeric, space and special character in this parameter.",
    )

    @instance_classmethod
    @DataModelBase.translate()
    def create_map(
        self_or_cls,
        data: Optional[Union[requests.MapCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> MapModel:
        """
        Create a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> in <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview' target='_blank'>Kelvin Maps</a>.

        **Permission Required:** `kelvin.permission.maps.create`.

        ``createMap``: ``POST`` ``/api/v4/maps/create``

        Parameters
        ----------
        data: requests.MapCreate, optional
        **kwargs:
            Extra parameters for requests.MapCreate
              - asset_name: str
              - entities: list
              - mode: str
              - name: str
              - relationships: list
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/maps/create",
            {},
            {},
            {},
            {},
            data,
            requests.MapCreate,
            False,
            {"201": MapModel, "400": errors.ErrorMessage, "412": errors.ErrorMessage},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_maps(
        cls,
        entity: Optional[str] = None,
        timestamp: Optional[str] = None,
        mode: Optional[str] = None,
        asset_name: Optional[str] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[MapItem], MapListPaginated]:
        """
        Returns a dictionary with a data property containing a filtered array of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Maps</a> objects on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Pagination Sortable Columns:** `map.name`, `map.title`, `start_date`, `mode`, `map.asset_name`

        **Permission Required:** `kelvin.permission.maps.read`.

        ``listMaps``: ``GET`` ``/api/v4/maps/list``

        Parameters
        ----------
        entity : :obj:`str`
            Filter on the entity name in the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a>.
        timestamp : :obj:`str`
            Timestamp to search for a specific <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> version (supports RFC3339 and Unix timestamps with nanosecond
            precision).</p> If no timestamp is given in the query or body
            parameters, then the current time will be selected which will look at
            the most recent version of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a>.
        mode : :obj:`str`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-maps/kelvin-maps-overview/#processes'
            target='_blank'>Kelvin Process Maps</a> based on the mode key.</p>
            There are two parameter options; `production` and `simulation`.
        asset_name : :obj:`str`
            Filter on the name of the parent <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> for
            the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a>.</p> This <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin
            Asset</a> must be a <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-groups'
            target='_blank'>Kelvin Asset Group</a> with a <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> `site`.</p> This filter will not search for <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset' target='_blank'>Kelvin Assets</a> that
            are located in the entities in <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a>.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-maps/kelvin-maps-overview/#processes'
            target='_blank'>Kelvin Process Map</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> parameters. Only one parameter can be selected.</p> There are
            five parameter options; `map.name`, `map.title`, `map.asset_name`,
            `start_date` and `mode`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/maps/list",
            {},
            {
                "entity": entity,
                "timestamp": timestamp,
                "mode": mode,
                "asset_name": asset_name,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {
                "200": MapListPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/maps/list", "GET") if fetch and not _dry_run else result

    @classmethod
    def get_map_oee(
        cls,
        timestamp: Optional[str] = None,
        data: Optional[Union[requests.MapOEEGet, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[MapOEE]:
        """
        Get OEE data for the selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>. The shift information returned will be the data that was active for the requested timestamp.

        **Permission Required:** `kelvin.permission.maps.read`.

        ``getMapOEE``: ``POST`` ``/api/v4/maps/oee/get``

        Parameters
        ----------
        timestamp : :obj:`str`
            Timestamp to search for specific OEE data values (supports RFC3339 and
            Unix timestamps with nanosecond precision).</p> Example;
            '2022-07-08T08:41:01.657916Z'.
        data: requests.MapOEEGet, optional
        **kwargs:
            Extra parameters for requests.MapOEEGet
              - map_names: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/maps/oee/get",
            {},
            {"timestamp": timestamp},
            {},
            {},
            data,
            requests.MapOEEGet,
            False,
            {"200": List[MapOEE], "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_map_shift(
        cls,
        timestamp: Optional[str] = None,
        data: Optional[Union[requests.MapShiftGet, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[MapShift]:
        """
        Get Shift data for the selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>. The shift information returned will be the data that was active for the requested timestamp.

        **Permission Required:** `kelvin.permission.maps.read`.

        ``getMapShift``: ``POST`` ``/api/v4/maps/shift/get``

        Parameters
        ----------
        timestamp : :obj:`str`
            Timestamp to search for a specific shift (supports RFC3339 and Unix
            timestamps with nanosecond precision).</p> Example;
            '2022-07-08T08:41:01.657916Z'.
        data: requests.MapShiftGet, optional
        **kwargs:
            Extra parameters for requests.MapShiftGet
              - map_names: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/maps/shift/get",
            {},
            {"timestamp": timestamp},
            {},
            {},
            data,
            requests.MapShiftGet,
            False,
            {
                "200": List[MapShift],
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_symbol(
        self_or_cls,
        data: Optional[Union[requests.SymbolCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Symbol:
        """
        Create a new Symbol for the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> library.</p> This will be available for use in all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Maps</a>.

        **Permission Required:** `kelvin.permission.maps.create`.

        ``createSymbol``: ``POST`` ``/api/v4/maps/symbols/create``

        Parameters
        ----------
        data: requests.SymbolCreate, optional
        **kwargs:
            Extra parameters for requests.SymbolCreate
              - name: str
              - payload: str
              - symbol_type: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/maps/symbols/create",
            {},
            {},
            {},
            {},
            data,
            requests.SymbolCreate,
            False,
            {"201": Symbol, "400": errors.ErrorMessage, "401": errors.ErrorMessage},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_symbols(
        cls,
        search: Optional[Sequence[str]] = None,
        symbol_types: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[Symbol], SymbolsListPaginated]:
        """
        Returns a dictionary with a data property containing a filtered array of all Symbol objects on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Pagination Sortable Columns:** `symbol.name`, `symbol.title`, `symbol.symbol_type`

        **Permission Required:** `kelvin.permission.maps.read`.

        ``listSymbols``: ``GET`` ``/api/v4/maps/symbols/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> list. Both
            the Display Name (title) and the Name will be included in the search
            field criteria. This is given as an array, for example
            `[pump,fan]`.</p> The search is case insensitive and will find partial
            matches as well. For example if a <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> name or
            display name is `centrifugal_pump`, then a match will be made if the
            search string is `pum` or `FUGaL`.
        symbol_types : :obj:`Sequence[str]`
            Filter on the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> parameter
            `symbol_type`. This is given as an array, for example
            `[pump,fan]`.</p> The filter is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end).</p> For example a search with `[pump,fan]` will return
            Symbols with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        page_size : :obj:`int`
            Number of <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> objects to
            be returned. Page size can be between 1 and 1000 objects.</p> The
            default is 20 <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbols</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbols</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a>
            parameters. Only one parameter can be selected.</p> There are three
            parameter options; `symbol.name`, `symbol.title` and
            `symbol.symbol_type`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/maps/symbols/list",
            {},
            {
                "search": search,
                "symbol_types": symbol_types,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {
                "200": SymbolsListPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/maps/symbols/list", "GET") if fetch and not _dry_run else result
        )

    @classmethod
    def delete_symbol(cls, symbol_name: str, _dry_run: bool = False, _client: Any = None) -> None:
        """
        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a>. This cannot be undone once the API request has been submitted. </p> Be careful as there will be no warnings if the image is in use in any entity. Any deleted <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbols</a> in use will not cause any errors to <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> overviews and the affected entities will have a blank space where the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> should be displayed.

        **Permission Required:** `kelvin.permission.maps.delete`.

        ``deleteSymbol``: ``POST`` ``/api/v4/maps/symbols/{symbol_name}/delete``

        Parameters
        ----------
        symbol_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a>. This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/maps/symbols/{symbol_name}/delete",
            {"symbol_name": symbol_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_symbol(
        self_or_cls,
        symbol_name: str,
        data: Optional[Union[requests.SymbolUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Symbol:
        """
        Update the information or image of an existing Symbol for the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-maps/kelvin-maps-editors/kelvin-maps-process-map-editor/?h=symbol#symbol-library' target='_blank'>Symbol</a> library.</p> This will be available for use in all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Maps</a>.

        **Permission Required:** `kelvin.permission.maps.update`.

        ``updateSymbol``: ``POST`` ``/api/v4/maps/symbols/{symbol_name}/update``

        Parameters
        ----------
        symbol_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-editors/kelvin-maps-process-map-
            editor/?h=symbol#symbol-library' target='_blank'>Symbol</a>. This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.
        data: requests.SymbolUpdate, optional
        **kwargs:
            Extra parameters for requests.SymbolUpdate
              - payload: str
              - symbol_type: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/maps/symbols/{symbol_name}/update",
            {"symbol_name": symbol_name},
            {},
            {},
            {},
            data,
            requests.SymbolUpdate,
            False,
            {
                "200": Symbol,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def delete_map(cls, map_name: str, _dry_run: bool = False, _client: Any = None) -> None:
        """
        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>. This cannot be undone once the API request has been submitted. </p>This will also delete all version of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.

        **Permission Required:** `kelvin.permission.maps.delete`.

        ``deleteMap``: ``POST`` ``/api/v4/maps/{map_name}/delete``

        Parameters
        ----------
        map_name : :obj:`str`, optional
            Unique identifier name of the wanted <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a>.</p> This must contain only lowercase alphanumeric characters.
            The `.`, `_` and `-` characters are also allowed to separate words
            instead of a space BUT can not be at the beginning or end of the name.

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/maps/{map_name}/delete",
            {"map_name": map_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_map(
        cls,
        map_name: str,
        timestamp: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> MapModel:
        """
        Retrieve the properties of a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> and all related entities and relationships associated with the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.

        **Permission Required:** `kelvin.permission.maps.read`.

        ``getMap``: ``GET`` ``/api/v4/maps/{map_name}/get``

        Parameters
        ----------
        map_name : :obj:`str`, optional
            Unique identifier name of the wanted <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a>.</p> This must contain only lowercase alphanumeric characters.
            The `.`, `_` and `-` characters are also allowed to separate words
            instead of a space BUT can not be at the beginning or end of the name.
        timestamp : :obj:`str`
            Timestamp to search for a specific <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> version (supports RFC3339 and Unix timestamps with nanosecond
            precision).</p> If no timestamp is given in the query or body
            parameters, then the current time will be selected which will look at
            the most recent version of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a>.

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/maps/{map_name}/get",
            {"map_name": map_name},
            {"timestamp": timestamp},
            {},
            {},
            None,
            None,
            False,
            {
                "200": MapModel,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def create_map_oee(
        cls,
        map_name: str,
        data: Optional[Union[requests.MapOEECreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> MapOEE:
        """
        Create new OEE data for the selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.

        When new OEE data is created, the current OEE data will be timestamped with an end_date which is the same as the start_date for the new OEE data. This timestamp is automatically generated from the current time when the API request is submitted.

        **Permission Required:** `kelvin.permission.maps.create`.

        ``createMapOEE``: ``POST`` ``/api/v4/maps/{map_name}/oee/create``

        Parameters
        ----------
        map_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a> to save the data to.</p> This must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space BUT can not be at the
            beginning or end of the name.
        data: requests.MapOEECreate, optional
        **kwargs:
            Extra parameters for requests.MapOEECreate
              - assets_oee: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/maps/{map_name}/oee/create",
            {"map_name": map_name},
            {},
            {},
            {},
            data,
            requests.MapOEECreate,
            False,
            {"200": MapOEE, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def create_map_shift(
        cls,
        map_name: str,
        data: Optional[Union[requests.MapShiftCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> MapShift:
        """
        Create a new Shift for the selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.

        When a new Shift is created, the current Shift will be timestamped with an end_date which is the same as the start_date for the new shift. This timestamp is automatically generated from the current time when the API request is submitted.

        **Permission Required:** `kelvin.permission.maps.create`.

        ``createMapShift``: ``POST`` ``/api/v4/maps/{map_name}/shift/create``

        Parameters
        ----------
        map_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a> to save the data to.</p> This must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space BUT can not be at the
            beginning or end of the name.
        data: requests.MapShiftCreate, optional
        **kwargs:
            Extra parameters for requests.MapShiftCreate
              - production_info: str
              - shift_info: str
              - team_info: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/maps/{map_name}/shift/create",
            {"map_name": map_name},
            {},
            {},
            {},
            data,
            requests.MapShiftCreate,
            False,
            {"200": MapShift, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_map(
        self_or_cls,
        map_name: str,
        data: Optional[Union[requests.MapUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> MapModel:
        """
        Update the information and process flows in a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> in <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview' target='_blank'>Kelvin Maps</a>.

        **Permission Required:** `kelvin.permission.maps.update`.

        ``updateMap``: ``POST`` ``/api/v4/maps/{map_name}/update``

        Parameters
        ----------
        map_name : :obj:`str`, optional
            Map name
        data: requests.MapUpdate, optional
        **kwargs:
            Extra parameters for requests.MapUpdate
              - asset_name: str
              - entities: list
              - mode: str
              - relationships: list
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/maps/{map_name}/update",
            {"map_name": map_name},
            {},
            {},
            {},
            data,
            requests.MapUpdate,
            False,
            {
                "200": MapModel,
                "400": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_versions(
        cls,
        map_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[MapVersionItem], MapVersionListPaginated]:
        """
        List all the versions that have been saved for a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.

        This will include some limited data such as the mode and time when the version was active as the latest version.

        The current (latest) <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a> version will not have an `end_date` key.

        **Pagination Sortable Columns:** `start_date`

        **Permission Required:** `kelvin.permission.maps.read`.

        ``listVersions``: ``GET`` ``/api/v4/maps/{map_name}/versions/list``

        Parameters
        ----------
        map_name : :obj:`str`, optional
            Unique identifier name of the wanted <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a>.</p> This must contain only lowercase alphanumeric characters.
            The `.`, `_` and `-` characters are also allowed to separate words
            instead of a space BUT can not be at the beginning or end of the name.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-maps/kelvin-maps-overview/#processes'
            target='_blank'>Kelvin Process Map</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Maps</a> parameters. Only one parameter can be selected.</p> There is
            only one option; `start_date`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/maps/{map_name}/versions/list",
            {"map_name": map_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {
                "200": MapVersionListPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/maps/{map_name}/versions/list", "GET")
            if fetch and not _dry_run
            else result
        )


class MapOEE(DataModelBase):
    """
    MapOEE object.

    Parameters
    ----------
    map_name: Optional[str]
    oee_calculation: Optional[OEECalculation]
    oee_thresholds: Optional[OEEThresholds]
    oee_values: Optional[OEEValues]

    """

    map_name: Optional[str] = Field(
        None,
        description="Unique identifier name for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.</p> This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    oee_calculation: Optional[OEECalculation] = None
    oee_thresholds: Optional[OEEThresholds] = None
    oee_values: Optional[OEEValues] = None

    @classmethod
    def get_map_oee(
        cls,
        timestamp: Optional[str] = None,
        data: Optional[Union[requests.MapOEEGet, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[MapOEE]:
        """
        Get OEE data for the selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>. The shift information returned will be the data that was active for the requested timestamp.

        **Permission Required:** `kelvin.permission.maps.read`.

        ``getMapOEE``: ``POST`` ``/api/v4/maps/oee/get``

        Parameters
        ----------
        timestamp : :obj:`str`
            Timestamp to search for specific OEE data values (supports RFC3339 and
            Unix timestamps with nanosecond precision).</p> Example;
            '2022-07-08T08:41:01.657916Z'.
        data: requests.MapOEEGet, optional
        **kwargs:
            Extra parameters for requests.MapOEEGet
              - map_names: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/maps/oee/get",
            {},
            {"timestamp": timestamp},
            {},
            {},
            data,
            requests.MapOEEGet,
            False,
            {"200": List[MapOEE], "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_map_oee(
        self_or_cls,
        map_name: str,
        data: Optional[Union[requests.MapOEECreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> MapOEE:
        """
        Create new OEE data for the selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.

        When new OEE data is created, the current OEE data will be timestamped with an end_date which is the same as the start_date for the new OEE data. This timestamp is automatically generated from the current time when the API request is submitted.

        **Permission Required:** `kelvin.permission.maps.create`.

        ``createMapOEE``: ``POST`` ``/api/v4/maps/{map_name}/oee/create``

        Parameters
        ----------
        map_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a> to save the data to.</p> This must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space BUT can not be at the
            beginning or end of the name.
        data: requests.MapOEECreate, optional
        **kwargs:
            Extra parameters for requests.MapOEECreate
              - assets_oee: list

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/maps/{map_name}/oee/create",
            {"map_name": map_name},
            {},
            {},
            {},
            data,
            requests.MapOEECreate,
            False,
            {"200": MapOEE, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class MapShift(DataModelBase):
    """
    MapShift object.

    Parameters
    ----------
    map_name: Optional[str]
    production_info: Optional[ProductionInfo]
    shift_info: Optional[ShiftInfo]
    team_info: Optional[List[TeamMember]]

    """

    map_name: Optional[str] = Field(
        None,
        description="Unique identifier name for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.</p> This must contain only lowercase alphanumeric characters. The `.`, `_` and `-` characters are also allowed to separate words instead of a space BUT can not be at the beginning or end of the name.",
    )
    production_info: Optional[ProductionInfo] = None
    shift_info: Optional[ShiftInfo] = None
    team_info: Optional[List[TeamMember]] = Field(
        None, description="Array of the team members working in this shift."
    )

    @classmethod
    def get_map_shift(
        cls,
        timestamp: Optional[str] = None,
        data: Optional[Union[requests.MapShiftGet, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[MapShift]:
        """
        Get Shift data for the selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>. The shift information returned will be the data that was active for the requested timestamp.

        **Permission Required:** `kelvin.permission.maps.read`.

        ``getMapShift``: ``POST`` ``/api/v4/maps/shift/get``

        Parameters
        ----------
        timestamp : :obj:`str`
            Timestamp to search for a specific shift (supports RFC3339 and Unix
            timestamps with nanosecond precision).</p> Example;
            '2022-07-08T08:41:01.657916Z'.
        data: requests.MapShiftGet, optional
        **kwargs:
            Extra parameters for requests.MapShiftGet
              - map_names: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/maps/shift/get",
            {},
            {"timestamp": timestamp},
            {},
            {},
            data,
            requests.MapShiftGet,
            False,
            {
                "200": List[MapShift],
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_map_shift(
        self_or_cls,
        map_name: str,
        data: Optional[Union[requests.MapShiftCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> MapShift:
        """
        Create a new Shift for the selected <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process Map</a>.

        When a new Shift is created, the current Shift will be timestamped with an end_date which is the same as the start_date for the new shift. This timestamp is automatically generated from the current time when the API request is submitted.

        **Permission Required:** `kelvin.permission.maps.create`.

        ``createMapShift``: ``POST`` ``/api/v4/maps/{map_name}/shift/create``

        Parameters
        ----------
        map_name : :obj:`str`, optional
            Unique identifier name for the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            maps/kelvin-maps-overview/#processes' target='_blank'>Kelvin Process
            Map</a> to save the data to.</p> This must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space BUT can not be at the
            beginning or end of the name.
        data: requests.MapShiftCreate, optional
        **kwargs:
            Extra parameters for requests.MapShiftCreate
              - production_info: str
              - shift_info: str
              - team_info: list

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/maps/{map_name}/shift/create",
            {"map_name": map_name},
            {},
            {},
            {},
            data,
            requests.MapShiftCreate,
            False,
            {"200": MapShift, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class RecommendationActions(DataModelBase):
    """
    RecommendationActions object.

    Parameters
    ----------
    alarms: Optional[List[RecommendationAlarm]]
    control_changes: Optional[List[RecommendationControlChange]]
    datalabels: Optional[List[RecommendationDataLabel]]

    """

    alarms: Optional[List[RecommendationAlarm]] = None
    control_changes: Optional[List[RecommendationControlChange]] = None
    datalabels: Optional[List[RecommendationDataLabel]] = None


class RuleExecutionConfig(DataModelBase):
    """
    RuleExecutionConfig object.

    Parameters
    ----------
    loop_config: Optional[LoopConfig]
    mode: Optional[str]
    schedule_config: Optional[ScheduleConfig]

    """

    loop_config: Optional[LoopConfig] = None
    mode: Optional[str] = None
    schedule_config: Optional[ScheduleConfig] = None


class RulePayload(DataModelBase):
    """
    RulePayload object.

    Parameters
    ----------
    actions: Optional[List[RuleAction]]
    execution_config: Optional[RuleExecutionConfig]
    inputs: Optional[List[RuleInput]]
    script: Optional[str]
    visualization: Optional[Dict[str, Any]]

    """

    actions: Optional[List[RuleAction]] = None
    execution_config: Optional[RuleExecutionConfig] = None
    inputs: Optional[List[RuleInput]] = None
    script: Optional[str] = None
    visualization: Optional[Dict[str, Any]] = None


class Workload(DataModelBase):
    """
    Workload object.

    Parameters
    ----------
    acp_name: Optional[str]
    app_name: Optional[str]
    app_version: Optional[str]
    created: Optional[datetime]
    download_status: Optional[str]
    enabled: Optional[bool]
    name: Optional[str]
    networking: Optional[List[NetworkingItem]]
    payload: Optional[Dict[str, Any]]
    status: Optional[WorkloadStatus]
    title: Optional[str]
    updated: Optional[datetime]

    """

    acp_name: Optional[str] = None
    app_name: Optional[str] = None
    app_version: Optional[str] = None
    created: Optional[datetime] = None
    download_status: Optional[str] = None
    enabled: Optional[bool] = None
    name: Optional[str] = None
    networking: Optional[List[NetworkingItem]] = None
    payload: Optional[Dict[str, Any]] = None
    status: Optional[WorkloadStatus] = None
    title: Optional[str] = None
    updated: Optional[datetime] = None

    @instance_classmethod
    @DataModelBase.translate()
    def deploy_workload(
        self_or_cls,
        data: Optional[Union[requests.WorkloadDeploy, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Workload:
        """
        Deploy Workload

        **Permission Required:** `kelvin.permission.workload.update`.

        ``deployWorkload``: ``POST`` ``/api/v4/workloads/deploy``

        Parameters
        ----------
        data: requests.WorkloadDeploy, optional
        **kwargs:
            Extra parameters for requests.WorkloadDeploy
              - acp_name: str
              - app_name: str
              - app_version: str
              - name: str
              - payload: dict
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/workloads/deploy",
            {},
            {},
            {},
            {},
            data,
            requests.WorkloadDeploy,
            False,
            {
                "201": Workload,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"workload_name": "name"})
    def list_workload(
        self_or_cls,
        app_name: Optional[Sequence[str]] = None,
        app_version: Optional[Sequence[str]] = None,
        acp_name: Optional[Sequence[str]] = None,
        workload_name: Optional[Sequence[str]] = None,
        enabled: Optional[bool] = None,
        asset_name: Optional[str] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        search: Optional[Sequence[str]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[Workload], WorkloadListPaginated]:
        """
        List Workload

        **Pagination Sortable Columns:** `workload.name`, `workload.enabled

        **Permission Required:** `kelvin.permission.workload.read`.

        ``listWorkload``: ``GET`` ``/api/v4/workloads/list``

        Parameters
        ----------
        app_name : :obj:`Sequence[str]`
            App Name
        app_version : :obj:`Sequence[str]`
            App Version
        acp_name : :obj:`Sequence[str]`
            ACP Name
        workload_name : :obj:`Sequence[str]`
            Workload Name
        enabled : :obj:`bool`
            Filter workloads by enabled status
        asset_name : :obj:`str`
            Filter workloads with given asset
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true
        search : :obj:`Sequence[str]`
            Search workloads by name, title, App name and ACP name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/workloads/list",
            {},
            {
                "app_name": app_name,
                "app_version": app_version,
                "acp_name": acp_name,
                "workload_name": workload_name,
                "enabled": enabled,
                "asset_name": asset_name,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "search": search,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": WorkloadListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/workloads/list", "GET") if fetch and not _dry_run else result

    @instance_classmethod
    @DataModelBase.translate({"workload_name": "name"})
    def download_workload_package_file(
        self_or_cls, workload_name: str, _dry_run: bool = False, _client: Any = None
    ) -> Iterator[bytes]:
        """
        Download Workload Package File

        **Permission Required:** `kelvin.permission.workload.read`.

        ``downloadWorkloadPackageFile``: ``GET`` ``/api/v4/workloads/{workload_name}/download``

        Parameters
        ----------
        workload_name : :obj:`str`, optional
            Workload name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/workloads/{workload_name}/download",
            {"workload_name": workload_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": bytes,
                "202": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "412": None,
            },
            True,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"workload_name": "name"})
    def get_workload(
        self_or_cls, workload_name: str, _dry_run: bool = False, _client: Any = None
    ) -> Workload:
        """
        Get Workload

        **Permission Required:** `kelvin.permission.workload.read`.

        ``getWorkload``: ``GET`` ``/api/v4/workloads/{workload_name}/get``

        Parameters
        ----------
        workload_name : :obj:`str`, optional
            Workload name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/workloads/{workload_name}/get",
            {"workload_name": workload_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": Workload, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"workload_name": "name"})
    def get_workload_logs(
        self_or_cls,
        workload_name: str,
        tail_lines: Optional[str] = None,
        since_time: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> WorkloadLogs:
        """
        Get Workload Logs

        **Permission Required:** `kelvin.permission.workload.read`.

        ``getWorkloadLogs``: ``GET`` ``/api/v4/workloads/{workload_name}/logs/get``

        Parameters
        ----------
        workload_name : :obj:`str`, optional
            Workload name
        tail_lines : :obj:`str`
            The number of lines from the end of the logs to show
        since_time : :obj:`str`
            A timestamp from which to show logs

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/workloads/{workload_name}/logs/get",
            {"workload_name": workload_name},
            {"tail_lines": tail_lines, "since_time": since_time},
            {},
            {},
            None,
            None,
            False,
            {
                "200": WorkloadLogs,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "500": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"workload_name": "name"})
    def start_workload(
        self_or_cls, workload_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Start Workload

        **Permission Required:** `kelvin.permission.workload.update`.

        ``startWorkload``: ``GET`` ``/api/v4/workloads/{workload_name}/start``

        Parameters
        ----------
        workload_name : :obj:`str`, optional
            Workload name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/workloads/{workload_name}/start",
            {"workload_name": workload_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"workload_name": "name"})
    def stop_workload(
        self_or_cls, workload_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Stop Workload

        **Permission Required:** `kelvin.permission.workload.update`.

        ``stopWorkload``: ``GET`` ``/api/v4/workloads/{workload_name}/stop``

        Parameters
        ----------
        workload_name : :obj:`str`, optional
            Workload name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/workloads/{workload_name}/stop",
            {"workload_name": workload_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"workload_name": "name"})
    def get_workload_telemetry(
        self_or_cls, workload_name: str, _dry_run: bool = False, _client: Any = None
    ) -> WorkloadTelemetry:
        """
        Get Workload Telemetry

        **Permission Required:** `kelvin.permission.workload.read`.

        ``getWorkloadTelemetry``: ``GET`` ``/api/v4/workloads/{workload_name}/telemetry/get``

        Parameters
        ----------
        workload_name : :obj:`str`, optional
            Workload name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/workloads/{workload_name}/telemetry/get",
            {"workload_name": workload_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": WorkloadTelemetry, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"workload_name": "name"})
    def undeploy_workload(
        self_or_cls, workload_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Undeploy Workload

        **Permission Required:** `kelvin.permission.workload.delete`.

        ``undeployWorkload``: ``POST`` ``/api/v4/workloads/{workload_name}/undeploy``

        Parameters
        ----------
        workload_name : :obj:`str`, optional
            Workload name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/workloads/{workload_name}/undeploy",
            {"workload_name": workload_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result


class WorkloadListPaginated(PaginatorDataModel[Workload]):
    """
    WorkloadListPaginated object.

    Parameters
    ----------
    data: Optional[List[Workload]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[Workload]] = None
    pagination: Optional[pagination.Pagination] = None


class ACP(DataModelBase):
    """
    ACP object.

    Parameters
    ----------
    cluster_name: Optional[str]
    created: Optional[datetime]
    kelvin_info: Optional[Dict[str, Any]]
    location: Optional[ACPLocationItem]
    manifests_scrape_interval: Optional[int]
    metadata: Optional[Dict[str, Any]]
    name: Optional[str]
    network_info: Optional[List[Dict[str, Any]]]
    node_name: Optional[str]
    status: Optional[ACPAndWorkloadStatus]
    sync_scrape_interval: Optional[int]
    system_info: Optional[Dict[str, Any]]
    telemetry_scrape_interval: Optional[int]
    title: Optional[str]
    updated: Optional[datetime]

    """

    cluster_name: Optional[str] = None
    created: Optional[datetime] = None
    kelvin_info: Optional[Dict[str, Any]] = None
    location: Optional[ACPLocationItem] = None
    manifests_scrape_interval: Optional[int] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[str] = Field(None, max_length=64)
    network_info: Optional[List[Dict[str, Any]]] = None
    node_name: Optional[str] = None
    status: Optional[ACPAndWorkloadStatus] = None
    sync_scrape_interval: Optional[int] = None
    system_info: Optional[Dict[str, Any]] = None
    telemetry_scrape_interval: Optional[int] = None
    title: Optional[str] = Field(None, max_length=64)
    updated: Optional[datetime] = None

    @classmethod
    def list_acp(
        cls,
        names: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        connected: Optional[bool] = None,
        metadata: Optional[Sequence[str]] = None,
        metadata_filter: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[ACPItem], ACPListPaginated]:
        """
        List ACP

        **Pagination Sortable Columns:** `acp.name`, `acp.title`, `acp.created`, `acp.updated`, `status_state`, `status_last_seen`

        **Permission Required:** `kelvin.permission.acp.read`.

        ``listACP``: ``GET`` ``/api/v4/acps/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter ACPs by name
        search : :obj:`Sequence[str]`
            Search ACP by name or title
        connected : :obj:`bool`
            Filter by connected ACPs. Possible Values: true/false. Default: none
        metadata : :obj:`Sequence[str]`
            Inject metadata into the response
        metadata_filter : :obj:`Sequence[str]`
            Dot separated string to filter by metadata values
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/acps/list",
            {},
            {
                "names": names,
                "search": search,
                "connected": connected,
                "metadata": metadata,
                "metadata_filter": metadata_filter,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": ACPListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/acps/list", "GET") if fetch and not _dry_run else result

    @classmethod
    def create_acp_metadata_bulk(
        cls,
        data: Optional[Union[requests.ACPMetadataBulkCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Create ACP Metadata Bulk

        **Permission Required:** `kelvin.permission.acp.create`.

        ``createACPMetadataBulk``: ``POST`` ``/api/v4/acps/metadata/create``

        Parameters
        ----------
        data: requests.ACPMetadataBulkCreate, optional
        **kwargs:
            Extra parameters for requests.ACPMetadataBulkCreate

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/acps/metadata/create",
            {},
            {},
            {},
            {},
            data,
            requests.ACPMetadataBulkCreate,
            False,
            {
                "201": None,
                "207": ErrorMessages,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def delete_acp_metadata_bulk(
        cls,
        data: Optional[Union[requests.ACPMetadataBulkDelete, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Delete ACP Metadata Bulk

        **Permission Required:** `kelvin.permission.acp.delete`.

        ``deleteACPMetadataBulk``: ``POST`` ``/api/v4/acps/metadata/delete``

        Parameters
        ----------
        data: requests.ACPMetadataBulkDelete, optional
        **kwargs:
            Extra parameters for requests.ACPMetadataBulkDelete

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/acps/metadata/delete",
            {},
            {},
            {},
            {},
            data,
            requests.ACPMetadataBulkDelete,
            False,
            {
                "200": None,
                "207": ErrorMessages,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_acp_status_count(cls, _dry_run: bool = False, _client: Any = None) -> ACPStatusCount:
        """
        Get ACP Status Count

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getACPStatusCount``: ``GET`` ``/api/v4/acps/status/count/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/acps/status/count/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": ACPStatusCount,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def delete_acp(self_or_cls, acp_name: str, _dry_run: bool = False, _client: Any = None) -> None:
        """
        Delete ACP

        **Permission Required:** `kelvin.permission.acp.delete`.

        ``deleteACP``: ``POST`` ``/api/v4/acps/{acp_name}/delete``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/delete",
            {"acp_name": acp_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def force_update_acp_edge_app_version(
        self_or_cls, acp_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Force Update ACP Edge App Version

        **Permission Required:** `kelvin.permission.acp.read`.

        ``forceUpdateACPEdgeAppVersion``: ``POST`` ``/api/v4/acps/{acp_name}/edge-apps/version/force-update``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/edge-apps/version/force-update",
            {"acp_name": acp_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def get_acp_edge_app_version(
        self_or_cls, acp_name: str, _dry_run: bool = False, _client: Any = None
    ) -> ACPEdgeAppVersion:
        """
        Get ACP Edge App Version

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getACPEdgeAppVersion``: ``GET`` ``/api/v4/acps/{acp_name}/edge-apps/version/get``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/edge-apps/version/get",
            {"acp_name": acp_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": ACPEdgeAppVersion,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def get_acp(
        self_or_cls,
        acp_name: str,
        metadata: Optional[Sequence[str]] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> ACP:
        """
        Get ACP

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getACP``: ``GET`` ``/api/v4/acps/{acp_name}/get``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        metadata : :obj:`Sequence[str]`
            Inject metadata into the response

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/get",
            {"acp_name": acp_name},
            {"metadata": metadata},
            {},
            {},
            None,
            None,
            False,
            {"200": ACP, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def create_acp_metadata(
        self_or_cls,
        acp_name: str,
        data: Optional[Union[requests.ACPMetadataCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> ACPMetadata:
        """
        Create ACP Metadata

        **Permission Required:** `kelvin.permission.acp.create`.

        ``createACPMetadata``: ``POST`` ``/api/v4/acps/{acp_name}/metadata/create``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        data: requests.ACPMetadataCreate, optional
        **kwargs:
            Extra parameters for requests.ACPMetadataCreate
              - name: str
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/metadata/create",
            {"acp_name": acp_name},
            {},
            {},
            {},
            data,
            requests.ACPMetadataCreate,
            False,
            {"201": ACPMetadata, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def list_acp_metadata(
        self_or_cls,
        acp_name: str,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[ACPMetaDataItem], ACPMetadataListPaginated]:
        """
        List ACP Metadata

        **Pagination Sortable Columns:** `acp_metadata.name`, `acp_metadata.acp_name`

        **Permission Required:** `kelvin.permission.acp.read`.

        ``listACPMetadata``: ``GET`` ``/api/v4/acps/{acp_name}/metadata/list``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        search : :obj:`Sequence[str]`
            Search ACP Metadata by name
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/metadata/list",
            {"acp_name": acp_name},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": ACPMetadataListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/acps/{acp_name}/metadata/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def delete_acp_metadata(
        self_or_cls,
        acp_name: str,
        acp_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> None:
        """
        Delete ACP Metadata

        **Permission Required:** `kelvin.permission.acp.delete`.

        ``deleteACPMetadata``: ``POST`` ``/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/delete``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        acp_metadata_name : :obj:`str`, optional
            ACP Metadata name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/delete",
            {"acp_name": acp_name, "acp_metadata_name": acp_metadata_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def get_acp_metadata(
        self_or_cls,
        acp_name: str,
        acp_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> ACPMetadata:
        """
        Get ACP Metadata

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getACPMetadata``: ``GET`` ``/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/get``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        acp_metadata_name : :obj:`str`, optional
            ACP Metadata name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/get",
            {"acp_name": acp_name, "acp_metadata_name": acp_metadata_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": ACPMetadata, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def update_acp_metadata(
        self_or_cls,
        acp_name: str,
        acp_metadata_name: str,
        data: Optional[Union[requests.ACPMetadataUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> ACPMetadata:
        """
        Update ACP Metadata

        **Permission Required:** `kelvin.permission.acp.update`.

        ``updateACPMetadata``: ``POST`` ``/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/update``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        acp_metadata_name : :obj:`str`, optional
            ACP Metadata name
        data: requests.ACPMetadataUpdate, optional
        **kwargs:
            Extra parameters for requests.ACPMetadataUpdate
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/metadata/{acp_metadata_name}/update",
            {"acp_name": acp_name, "acp_metadata_name": acp_metadata_name},
            {},
            {},
            {},
            data,
            requests.ACPMetadataUpdate,
            False,
            {
                "200": ACPMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def update_acp_status(
        self_or_cls,
        acp_name: str,
        data: Optional[Union[requests.ACPStatusUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> ACPStatus:
        """
        Update ACP Status

        **Permission Required:** `kelvin.permission.acp.update`.

        ``updateACPStatus``: ``POST`` ``/api/v4/acps/{acp_name}/status/update``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        data: requests.ACPStatusUpdate, optional
        **kwargs:
            Extra parameters for requests.ACPStatusUpdate
              - configs: list
              - node: str
              - pending_workloads: list
              - workloads: list

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/status/update",
            {"acp_name": acp_name},
            {},
            {},
            {},
            data,
            requests.ACPStatusUpdate,
            False,
            {"200": ACPStatus, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def get_acp_telemetry(
        self_or_cls, acp_name: str, _dry_run: bool = False, _client: Any = None
    ) -> ACPTelemetry:
        """
        Get ACP Telemetry

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getACPTelemetry``: ``GET`` ``/api/v4/acps/{acp_name}/telemetry/get``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/telemetry/get",
            {"acp_name": acp_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": ACPTelemetry, "400": ErrorMessages, "401": ErrorMessages, "500": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def update_acp(
        self_or_cls,
        acp_name: str,
        data: Optional[Union[requests.ACPUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> ACP:
        """
        Update ACP

        **Permission Required:** `kelvin.permission.acp.update`.

        ``updateACP``: ``POST`` ``/api/v4/acps/{acp_name}/update``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name
        data: requests.ACPUpdate, optional
        **kwargs:
            Extra parameters for requests.ACPUpdate
              - location: str
              - manifests_scrape_interval: int
              - sync_scrape_interval: int
              - telemetry_scrape_interval: int
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/acps/{acp_name}/update",
            {"acp_name": acp_name},
            {},
            {},
            {},
            data,
            requests.ACPUpdate,
            False,
            {
                "200": ACP,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"acp_name": "name"})
    def get_workloads_manifests(
        self_or_cls, acp_name: str, _dry_run: bool = False, _client: Any = None
    ) -> ACPWorkloadManifests:
        """
        Get Workloads Manifests assigned to an ACP

        **Permission Required:** `kelvin.permission.acp.read`.

        ``getWorkloadsManifests``: ``GET`` ``/api/v4/acps/{acp_name}/workloads/manifests/get``

        Parameters
        ----------
        acp_name : :obj:`str`, optional
            ACP name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/acps/{acp_name}/workloads/manifests/get",
            {"acp_name": acp_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": ACPWorkloadManifests,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result


class Asset(DataModelBase):
    """
    Asset object.

    Parameters
    ----------
    asset_class_name: Optional[str]
    asset_class_title: Optional[str]
    asset_template_name: Optional[str]
    asset_type_name: Optional[str]
    asset_type_title: Optional[str]
    created: Optional[datetime]
    entity_type_name: Optional[str]
    entity_type_title: Optional[str]
    failure_detection: Optional[FailureDetection]
    hierarchy: Optional[List[Asset]]
    location: Optional[AssetLocationItem]
    metrics: Optional[List[AssetMetricItem]]
    name: Optional[str]
    properties: Optional[List[AssetProperty]]
    status: Optional[AssetStatusItem]
    title: Optional[str]
    updated: Optional[datetime]
    visualization: Optional[Visualization]

    """

    asset_class_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> linked to the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
        max_length=64,
    )
    asset_class_title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> linked to the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
        max_length=64,
    )
    asset_template_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Template</a> used to create this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.</p> If this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> was created from scratch, then this parameter will be `null`.',
    )
    asset_type_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
        max_length=64,
    )
    asset_type_title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    created: Optional[datetime] = Field(
        None,
        description='Time of creation of this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )
    entity_type_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the entity type linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>.',
    )
    entity_type_title: Optional[str] = Field(
        None,
        description='Display name of the entity type linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>.',
    )
    failure_detection: Optional[FailureDetection] = None
    hierarchy: Optional[List[Asset]] = Field(
        None,
        description="A list of all <a href=\"https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/\" target=\"_blank\">Kelvin Assets</a> which will include any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a> that are in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> below this <a href=\"https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/\" target=\"_blank\">Kelvin Assets</a>.",
    )
    location: Optional[AssetLocationItem] = None
    metrics: Optional[List[AssetMetricItem]] = Field(
        None,
        description='List of all <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/" target="_blank">Kelvin Metrics</a> linked to this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
        max_length=64,
    )
    properties: Optional[List[AssetProperty]] = Field(
        None,
        description='List of any custom properties for this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    status: Optional[AssetStatusItem] = None
    title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
        max_length=64,
    )
    updated: Optional[datetime] = Field(
        None,
        description='Time of modifying any variable of this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )
    visualization: Optional[Visualization] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_asset_class(
        self_or_cls,
        data: Optional[Union[requests.AssetClassCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetClass:
        """
        Create Asset Class

        To create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> you first need to create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> and <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>. A <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> is linked to an <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> which defines how the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> will be referenced in <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>. For example: <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> that is defined as a Group can only be linked to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> that is saved as <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> **group**.

        There are five <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a>; `group`, `asset`, `component`, `part` and `sensor`. Detailed information about these <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> and how they are used can be found at <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/</a>.

        A <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> is directly linked to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a>. There can be many <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> linked to one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a>.

        **Permission Required:** `kelvin.permission.asset_class.create`.

        ``createAssetClass``: ``POST`` ``/api/v4/assets/class/create``

        Parameters
        ----------
        data: requests.AssetClassCreate, optional
        **kwargs:
            Extra parameters for requests.AssetClassCreate
              - entity_type_name: str
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/class/create",
            {},
            {},
            {},
            {},
            data,
            requests.AssetClassCreate,
            False,
            {"201": AssetClass, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_asset_class(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        owner: Optional[str] = None,
        entity_type_name: Optional[Sequence[str]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetClass], AssetClassListPaginated]:
        """
        List Asset Class

        Returns a filtered dictionary with a data object containing an array of <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Classes</a> objects on the Kelvin Platform that meet the criteria of any parameters passed with the API request.

        If no query parameters are given with the API request, then the defaults will be used to return the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> list.

        The defaults are the first 20 <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Classe</a> objects returned in alphabetical order by the unique identifier name.

        **Pagination Sortable Columns:** `asset_class.name`, `asset_class.title`, `asset_class.created`, `asset_class.updated`, `asset_class.owner`, `asset_class.device_type_name`

        **Permission Required:** `kelvin.permission.asset_class.read`.

        ``listAssetClass``: ``GET`` ``/api/v4/assets/class/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> list. Both the Display Name and the Name will be included in
            the search field criteria. This is given as an array, for example
            `[pump,fan]`.</p> The search is case insensitive and will find partial
            matches as well. For example if a <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> name is `centrifugal_pump`, then a match will be made if the
            search string is `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-class'
            target='_blank'>Kelvin Asset Class</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Classes</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response parameter under pagination -> previous_page
            and pagination -> next_page respectively.</p> The pagination ->
            next_page alphanumeric string should be used here to show a list of
            the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Classes</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response parameter under pagination -> previous_page
            and pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> parameters. Only one parameter can be selected.</p> There
            are six parameter options; `asset_class.name`, `asset_class.title`,
            `asset_class.created`, `asset_class.updated`, `asset_class.owner` and
            `asset_class.device_type_name`.</p> The default is `asset_class.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        owner : :obj:`str`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-class'
            target='_blank'>Kelvin Asset Class</a> by owner.</p> There are two
            types of owners; `custom` (any user) or `kelvin` (core <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a>).</p> The default will select all owner options.
        entity_type_name : :obj:`Sequence[str]`
            Filter and return the results of one or more of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a>
            names. This is given as an array, for example `[group,asset]`. Prefix
            any entity type name with the character `!` for a NOT operation.</p>
            There are five <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets#entity-type'
            target='_blank'>Entity Type</a> names available to choose from;
            `group`, `asset`, `component`, `part`, `sensor`.</p> The default will
            select all available <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a>
            name options.</p>

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/class/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "owner": owner,
                "entity_type_name": entity_type_name,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetClassListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/assets/class/list", "GET") if fetch and not _dry_run else result
        )

    @instance_classmethod
    @DataModelBase.translate()
    def delete_asset_class(
        self_or_cls, asset_class_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Asset Class

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a>. This cannot be undone once the API request has been submitted.

        This command can not delete <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Classes</a> that are currently linked to any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Types</a> and will return an error 403.

        **Permission Required:** `kelvin.permission.asset_class.delete`.

        ``deleteAssetClass``: ``POST`` ``/api/v4/assets/class/{asset_class_name}/delete``

        Parameters
        ----------
        asset_class_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class </a> name to delete.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/class/{asset_class_name}/delete",
            {"asset_class_name": asset_class_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_asset_class(
        self_or_cls, asset_class_name: str, _dry_run: bool = False, _client: Any = None
    ) -> AssetClass:
        """
        Get Asset Class

        Retrieves the properties of a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>.

        **Permission Required:** `kelvin.permission.asset_class.read`.

        ``getAssetClass``: ``GET`` ``/api/v4/assets/class/{asset_class_name}/get``

        Parameters
        ----------
        asset_class_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> name to retrieve.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/class/{asset_class_name}/get",
            {"asset_class_name": asset_class_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetClass,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_asset_class(
        self_or_cls,
        asset_class_name: str,
        data: Optional[Union[requests.AssetClassUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetClass:
        """
        Update Asset Class

        Updates an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> with any new values passed through the body parameters.

        Only the Display Name (title) body parameter is required. If this body parameter does not need to be changed, it should still have the original Display Name (title) given. Any other body parameters that are not required and not provided will remain unchanged.

        Only the unique identifier name can not be changed. If you need to change this parameter, then you will need to make a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> and relink all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Types</a> to the new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a>.

        **Permission Required:** `kelvin.permission.asset_class.update`.

        ``updateAssetClass``: ``POST`` ``/api/v4/assets/class/{asset_class_name}/update``

        Parameters
        ----------
        asset_class_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> name to retrieve.</p> This is the unique identifier name and
            not the display name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        data: requests.AssetClassUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetClassUpdate
              - entity_type_name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/class/{asset_class_name}/update",
            {"asset_class_name": asset_class_name},
            {},
            {},
            {},
            data,
            requests.AssetClassUpdate,
            False,
            {
                "200": AssetClass,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_asset(
        self_or_cls,
        dry_run: Optional[bool] = None,
        data: Optional[Union[requests.AssetCreateWithParent, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Asset:
        """
        Create Asset

        Create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> and optionally create a full <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> under the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> with one API request.

        If the top <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a>, then multiple <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a> can be created in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> and below the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a>, multiple <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a> can be created according to <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> rules.

        If the top <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> is a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a>, then below the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a>, only multiple <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a> can be created according to <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> rules.

        To create any <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> you first need to create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> and <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>. A Kelvin Asset Class is linked to an entity type which defines how the Kelvin Asset will be referenced in Kelvin Assets. for example: Kelvin Assets that is defined as a Group can only be linked to a Kelvin Type and Kelvin Class that is saved as entity type **group**.

        There are five entity types; `group`, `asset`, `component`, `part` and `sensor`. Detailed information about these entity types and how they are used can be found at <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/</a>.

        **Permission Required:** `kelvin.permission.asset.create`.

        ``createAsset``: ``POST`` ``/api/v4/assets/create``

        Parameters
        ----------
        dry_run : :obj:`bool`
            Perform a trial run to create the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> without
            saving the changes.</p> This is very useful when you want to test your
            new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> structure
            without making any changes on the Kelvin Platform.
        data: requests.AssetCreateWithParent, optional
        **kwargs:
            Extra parameters for requests.AssetCreateWithParent
              - asset_template_name: str
              - asset_type_name: str
              - entity_type_name: str
              - failure_detection: str
              - hierarchy: list
              - location: str
              - metrics: list
              - name: str
              - parent_name: str
              - properties: list
              - title: str
              - visualization: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/create",
            {},
            {"dry_run": dry_run},
            {},
            {},
            data,
            requests.AssetCreateWithParent,
            False,
            {
                "201": Asset,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def upload_assets(
        cls, file: str, dry_run: Optional[bool] = None, _dry_run: bool = False, _client: Any = None
    ) -> AssetHierarchyList:
        """
        Upload Assets

        Upload a csv (comma-separated values) file with up to 20,000 assets to add as <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> into the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>. Each row represents one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>.

        The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> can also be created in this file by declaring the parent for each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>. If this field is left blank, then it is assumed to have no parent and will appear at the top of the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        The first row of the csv file needs to be the header of the columns. `DISPLAY NAME,NAME,ASSET TYPE,LATITUDE,LONGITUDE,DIRECT PARENT,ENTITY TYPE`.

        Details of the options for each column are explained in this <a href='https://docs.kelvininc.com/latest/documentation/kelvin-platform/kelvin-manager-ui/management/assets/assets/#importing-assets-in-bulk' target='_blank'>Kelvin Documentation</a> link.

        The file needs to be saved in UTF-8 format with a comma separating each field. Do not use other separation options available in Microsoft Excel or Google Sheets such as semi-colons or colons. Strings in the csv file can be with or without quotation marks.

        **Permission Required:** `kelvin.permission.asset.create`.

        ``uploadAssets``: ``POST`` ``/api/v4/assets/create/upload``

        Parameters
        ----------
        file : :obj:`str`, optional
            Path and name of the CSV File to upload to the <a
            href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a>.</p> You can download a blank copy of the template from
            the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-manager-ui/control-manager-ui-overview/'
            target='_blank'>Kelvin Manager UI</a>. Instructions can be found in
            the <a href='https://docs.kelvininc.com/latest/documentation/kelvin-
            platform/kelvin-manager-ui/management/metrics/metrics/#1-download-the-
            assets-csv-template' target='_blank'>Kelvin Documentation</a>.
        dry_run : :obj:`bool`
            Perform a trial run to create the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> without
            saving the changes.</p> This is very useful when you want to test your
            new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> structure
            without making any changes on the <a
            href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a>.

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/create/upload",
            {},
            {"dry_run": dry_run},
            {"file": file},
            {},
            None,
            None,
            False,
            {
                "200": AssetHierarchyList,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "412": CSVErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def list_failure_overview(
        cls,
        pagination_type: Optional[Literal["limits", "cursor", "stream"]] = None,
        page_size: Optional[int] = 1000,
        page: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        direction: Optional[Literal["asc", "desc"]] = None,
        sort_by: Optional[Sequence[str]] = None,
        data: Optional[Union[requests.FailureOverview, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[FailureOverviewItem], FailureOverviewPaginated]:
        """
        List Failure Overview

        Returns a dictionary with a data property containing an array of failure overview summaries for <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> objects that have failures recorded on the Kelvin Platform based on the filter requirements in the body parameters.

        This will summarize all failures on <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> of each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> and give the failure quotient per <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>.

        **Pagination Sortable Columns:** `name`, `title`, `asset_type_name`, `asset_type_title`, `device_type_name`, `device_type_title`, `failure_quotient`, `severity`, `total_sev1`, `total_sev2`, `total_sev3`, `total_sev4`, `total_sev5`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``listFailureOverview``: ``POST`` ``/api/v4/assets/failure-overview/list``

        Parameters
        ----------
        pagination_type : :obj:`Literal['limits', 'cursor', 'stream']`
            Method of handling pages in the returned data. There are three options
            available;</p> limits: This is used with the query parameters `page“
            to select which page of data to return. The start of the data returned
            will be calculated using the `page_size“ and `page` query parameters
            for the location to start and the query parameters `sort_by` and
            `direction` will determine the order of the data.</p> cursor: This is
            used with the query parameters `next` and `previous` which uses a
            string as the start or end location reference. The string to use is
            returned in the previous query json response in the keys `next_page`
            and `previous_page`.</p> stream: This will return all the data in one
            response. (limits, cursor, stream)
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> failure statistic objects to be returned. Page size can be
            between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistic objects.
        page : :obj:`int`
            Used only with query parameter `pagination_type` set as `limits`.</p>
            An integer for the wanted page of results. The start of the data
            returned will be calculated using the `page_size“ and `page` query
            parameters for the location to start and the query parameters
            `sort_by` and `direction` will determine the order of the data.
        next : :obj:`str`
            Used only with query parameter `pagination_type` set as `cursor`.</p>
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        previous : :obj:`str`
            Used only with query parameter `pagination_type` set as `cursor`.</p>
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        direction : :obj:`Literal['asc', 'desc']`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `asc` (ascending order) and
            `desc` (descending order).</p> The default is `asc` (ascending). (asc,
            desc)
        sort_by : :obj:`Sequence[str]`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics parameters. Only one parameter can be selected.</p> There
            are ten parameter options; `name`, `title`, `asset_type_name`,
            `asset_type_title`, `device_type_name`, `device_type_title`,
            `failure_quotient`, `total_sev1`, `total_sev2`, `total_sev3`,
            `total_sev4` and `total_sev5`.</p> The default is `name`
        data: requests.FailureOverview, optional
        **kwargs:
            Extra parameters for requests.FailureOverview
              - alarm_severities: list
              - asset_names: list
              - asset_type_names: list
              - map_names: list
              - parent_asset_name: str
              - search: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/failure-overview/list",
            {},
            {
                "pagination_type": pagination_type,
                "page_size": page_size,
                "page": page,
                "next": next,
                "previous": previous,
                "direction": direction,
                "sort_by": sort_by,
            },
            {},
            {},
            data,
            requests.FailureOverview,
            False,
            {
                "200": FailureOverviewPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/assets/failure-overview/list", "POST")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def get_asset_hierarchies(cls, _dry_run: bool = False, _client: Any = None) -> AssetHierarchies:
        """
        Get Asset Hierarchies

        Retrieve a full list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> stored on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        The list will contain all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> information inclusive of their <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        There are no options to filter the list, so this list can get very big if there are large numbers of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> present on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetHierarchies``: ``GET`` ``/api/v4/assets/hierarchy/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/hierarchy/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": AssetHierarchies, "400": errors.ErrorMessage, "401": errors.ErrorMessage},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def update_asset_hierarchies(
        cls,
        dry_run: Optional[bool] = None,
        data: Optional[Union[requests.HierarchyUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Update Asset Hierarchies

        Update one or many <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> in one API request with any new values passed through the body parameters. Any <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> not included in the body parameter will remain unchanged.

        The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> of every <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> must be maintained within this structure. This is similar as `/assets/{asset_name}/update` API request except that you can update multiple <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> at the same time and one key difference regarding `hierarchy` that is explains later. Below is an explanation which should apply to all <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> given in the body parameter.

        It is only possible to edit starting from either a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> or a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a>. It is not possible to directly edit <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a>.

        To edit a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Component</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Part</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensor</a>, the body parameters must start with either the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> or a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a> higher up in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        Every <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> must be declared from the highest level. The API request will accept any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> to update without requiring it to be inside the `hierarchy` parameter in <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a>, but if this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> originally is positioned under a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a>, then this structure will be lost and the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> will move to the top of a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        The minimum required in the body parameters is the `name`, `title`, `asset_type_name` and `entity_type_name`. If these body parameters do not need to be changed, it should still contain the original information. Any other body parameters that are not required and not provided will remain unchanged.

        The only exception to this minimum requirement is when the parameter `delete` is marked as `true`. In this case the only other parameter required is `name`. If deleting any <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> with this method, all children <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> in the `hierarchy` below will also be deleted.

        <span style="color: #ff0000;font-weight: bold;">WARNING</span> : If the `hierarchy` parameter is used, all `components`, `parts` and `sensors` for only the next level down must be included in the body parameters with a minimum parameters `name`, `title`, `asset_type_name` and `entity_type_name` given. If any body parameter does not need to be changed, it should still contain the original information. Any other body parameters that are not required and not provided will remain unchanged. <span style="color: #ff0000;font-weight: bold;">Any `components`, `parts` or `sensors` and its children items at this level not included will be automatically and permenently deleted.</span>.

        If in any `components`, `parts` or `sensors` body parameters, the `hierarchy` parameter is not provided, then the `hierarchy` for that particular `components`, `parts` or `sensors` will remain and not be deleted.

        **Permission Required:** `kelvin.permission.asset.create`.

        ``updateAssetHierarchies``: ``POST`` ``/api/v4/assets/hierarchy/update``

        Parameters
        ----------
        dry_run : :obj:`bool`
            Perform a trial run to update the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> without
            saving the changes.</p> This is very useful when you want to test your
            new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> structure
            without making any changes on the Kelvin Platform.
        data: requests.HierarchyUpdate, optional
        **kwargs:
            Extra parameters for requests.HierarchyUpdate
              - data: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/hierarchy/update",
            {},
            {"dry_run": dry_run},
            {},
            {},
            data,
            requests.HierarchyUpdate,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_asset(
        cls,
        search: Optional[Sequence[str]] = None,
        names: Optional[Sequence[str]] = None,
        asset_type_name: Optional[Sequence[str]] = None,
        status_state: Optional[Sequence[str]] = None,
        entity_type_name: Optional[Sequence[str]] = None,
        map: Optional[str] = None,
        properties_filter: Optional[Sequence[str]] = None,
        properties: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetItem], AssetListPaginated]:
        """
        List Asset

        Returns a dictionary with a data property containing a filtered array of all <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> objects on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> are categorized by entity types and, unless specified, all entity types are included in the filter. There are five entity types; `group`, `asset`, `component`, `part` and `sensor`. Detailed information about these entity types and how they are used can be found at <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/</a>.

        **Pagination Sortable Columns:** `asset.name`, `asset.title`, `asset.created`, `asset.updated`, `asset_type.name`, `asset_type.title`, `status_state`, `status_last_seen`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``listAsset``: ``GET`` ``/api/v4/assets/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> list. Both
            the Display Name and the Name will be included in the search field
            criteria. This is given as an array, for example `[pump,fan]`.</p> The
            search is case insensitive and will find partial matches as well. For
            example if a <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin
            Asset</a> name or display name is `centrifugal_pump`, then a match
            will be made if the search string is `pum` or `FUGaL`.
        names : :obj:`Sequence[str]`
            Filter on the <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a> parameter `name`. This is given as an array, for example
            `[pump,fan]`.</p> The filter is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end).</p> For example a search with `[pump,fan]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> with the
            name `pump` but not with the names `pumps` or `centrifugal-fan`.
        asset_type_name : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> by its name. This is given as an array, for example
            `[pump,fan]`.</p> The filter is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end).</p> For example a filter with `[pump,fan]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        status_state : :obj:`Sequence[str]`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a> by its current status. Multiple parameters can be given in
            an array, for example `[online,partially_online]` and will be filtered
            as `OR`.</p> There are four parameter options; `online`, `offline`,
            `partially_online` and `unknown`.
        entity_type_name : :obj:`Sequence[str]`
            Filter and return the results of one or more of the entity type names.
            This is given as an array, for example `[group,asset]`. Prefix any
            entity type name with the character `!` for a NOT operation.</p> There
            are five entity type names available to choose from; `group`, `asset`,
            `component`, `part`, `sensor`.</p> The default will select all
            available entity type name options.</p>
        map : :obj:`str`
            Filter for assets that belong to the map
        properties_filter : :obj:`Sequence[str]`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> that contain a property with a specified value. The
            property must be declared using its `name` and not its `title`
            (Display Name). Multiple properties or multiple values can be filtered
            within this array. For example `[demo_property=demo_value]` or
            `[demo_property_1=demo_value,demo_property_2=88]`.</p> All values to
            be filtered must be an exact match and is case sensitive. Also there
            must be no spaces before or after the equal sign.</p> For example;
            `[demo_property=88]` is accepted but `[demo_property = 88]` will cause
            a 400 error.
        properties : :obj:`Sequence[str]`
            Only returns specified properties in each <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>.</p> This
            does not filter the array of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> returned,
            only filters the properties in each <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>. If the
            property does not exist in a <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>, then the
            properties parameter is returned with no contents. If this is the only
            parameter used, then all <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>on the <a
            href='https://docs.kelvininc.com/latest/kelvin-
            overview/overview/#kelvin-platform' target='_blank'>Kelvin
            Platform</a> will be returned.</p> The default is to return all
            properties for each <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a>.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>
            objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> parameters.
            Only one parameter can be selected.</p> There are eight parameter
            options; `asset.name`, `asset.title`, `asset.created`,
            `asset.updated`, `asset_type.name`, `asset_type.title`, `status_state`
            and `status_last_seen`.</p> The default is `asset.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/list",
            {},
            {
                "search": search,
                "names": names,
                "asset_type_name": asset_type_name,
                "status_state": status_state,
                "entity_type_name": entity_type_name,
                "map": map,
                "properties_filter": properties_filter,
                "properties": properties,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetListPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/assets/list", "GET") if fetch and not _dry_run else result

    @classmethod
    def get_asset_oee(
        cls,
        timestamp: Optional[str] = None,
        data: Optional[Union[requests.AssetOEEGet, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[AssetOEE]:
        """
        Get Asset OEE

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetOEE``: ``POST`` ``/api/v4/assets/oee/get``

        Parameters
        ----------
        timestamp : :obj:`str`
            Timestamp to search for specific <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> related <a
            href='https://docs.kelvininc.com/latest/documentation/kelvin-
            maps/kelvin-maps-asset-details/#performance-details'
            target='_blank'>OEE</a> values for a given point in time (supports
            RFC3339 and Unix timestamps with nanosecond precision).</p> If no
            timestamp is given in the query or body parameters, then the current
            time will be selected.
        data: requests.AssetOEEGet, optional
        **kwargs:
            Extra parameters for requests.AssetOEEGet
              - asset_names: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/oee/get",
            {},
            {"timestamp": timestamp},
            {},
            {},
            data,
            requests.AssetOEEGet,
            False,
            {
                "200": List[AssetOEE],
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_asset_statistics(
        cls,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        data: Optional[Union[requests.AssetStatistics, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[AssetStatisticsItem], AssetStatisticsPaginated]:
        """
        Get Asset Statistics

        Returns a list of the requested <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> with details on the failure quotient, number of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (children) and the current OEE calculations.

        **Pagination Sortable Columns:** `asset.name`, `asset.asset_type_name`, `asset.device_type_name`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetStatistics``: ``POST`` ``/api/v4/assets/statistics/get``

        Parameters
        ----------
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a> Statistic objects to be returned. Page size can be between 1
            and 1000 objects.</p> The default is 20 Kelvin Asset Statistic
            objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> statistics
            in the list.</p> The alphanumeric string which are the bookmarks for
            the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> statistics
            in the list.</p> The alphanumeric string which are the bookmarks for
            the beginning and end of the current list is given in the previous
            JSON response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> parameters.
            Only one parameter can be selected.</p> There are three parameter
            options; `asset.name`, `asset.asset_type_name` and
            `asset.device_type_name`.</p> The default is `asset.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        data: requests.AssetStatistics, optional
        **kwargs:
            Extra parameters for requests.AssetStatistics
              - asset_type_names: list
              - entity_type_names: list
              - names: list
              - search: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/statistics/get",
            {},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            data,
            requests.AssetStatistics,
            False,
            {
                "200": AssetStatisticsPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/assets/statistics/get", "POST")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def get_asset_status_count(
        cls, _dry_run: bool = False, _client: Any = None
    ) -> AssetStatusCount:
        """
        Get Asset Status Count

        Summary total count of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> into four statuses.

        There are four status (state) values that can be returned; `online` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and all assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are all online and receiving information, `offline` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and all assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are all offline, `partially_online` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and some assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are online and receiving information and `unknown` where the status (state) has never received any data to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> and/or is not declared on any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> as a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetStatusCount``: ``GET`` ``/api/v4/assets/status/count/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/status/count/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetStatusCount,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_asset_statuses(cls, _dry_run: bool = False, _client: Any = None) -> AssetStatus:
        """
        Get Asset Statuses

        Returns a list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and the current status (state).

        There are four status (state) values that can be returned; `online` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and all assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are all online and receiving information, `offline` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and all assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are all offline, `partially_online` where the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and some assets below in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (if applicable) are online and receiving information and `unknown` where the status (state) has never received any data to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metric</a> and/or is not declared on any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> as a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetStatuses``: ``GET`` ``/api/v4/assets/status/current/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/status/current/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetStatus,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_asset_template(
        self_or_cls,
        data: Optional[Union[requests.AssetTemplateCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTemplate:
        """
        Create Asset Template

        Create a custom <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/asset-groups' target='_blank'>Kelvin Group</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> template with a full <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Assets</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a>.

        For each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>, this template can also create all the parameters for <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-ai-failure-detection/' target='_blank'>Kelvin Failure Detection AI</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> and visualization information for <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/' target='_blank'>Kelvin Maps</a>

        **Permission Required:** `kelvin.permission.asset.create`.

        ``createAssetTemplate``: ``POST`` ``/api/v4/assets/templates/create``

        Parameters
        ----------
        data: requests.AssetTemplateCreate, optional
        **kwargs:
            Extra parameters for requests.AssetTemplateCreate
              - asset_type_name: str
              - description: str
              - entity_type_name: str
              - failure_detection: str
              - hierarchy: list
              - hints: dict
              - image_url: str
              - metrics: list
              - name: str
              - properties: list
              - title: str
              - visualization: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/templates/create",
            {},
            {},
            {},
            {},
            data,
            requests.AssetTemplateCreate,
            False,
            {"201": AssetTemplate, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_asset_template(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        asset_type_names: Optional[Sequence[str]] = None,
        entity_type_names: Optional[Sequence[str]] = None,
        asset_class_names: Optional[Sequence[str]] = None,
        owner: Optional[str] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetTemplateItem], AssetTemplateListPaginated]:
        """
        List Asset Template

        Returns a dictionary with a data property containing a filtered array of all <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Templates</a> objects on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Pagination Sortable Columns:** `asset_template.name`, `asset_template.title`, `asset_template.created`, `asset_template.updated`, `asset_template.asset_type_name`, `asset_template.device_type_name`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``listAssetTemplate``: ``GET`` ``/api/v4/assets/templates/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Templates</a> list. Both the Display Name and the Name will be
            included in the search field criteria. This is given as an array, for
            example `[pump,fan]`.</p> The search is case insensitive and will find
            partial matches as well. For example if a Kelvin Asset Type name is
            `centrifugal_pump`, then a match will be made if the search string is
            `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#kelvin-templates'
            target='_blank'>Kelvin Template</a> objects to be returned. Page size
            can be between 1 and 1000 objects.</p> The default is 20 Kelvin
            Template objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Templates</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Templates</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> parameters. Only one parameter can be selected.</p> There
            are six parameter options; `asset_template.name`,
            `asset_template.title`, `asset_template.created`,
            `asset_template.updated`, `asset_template.asset_type_name` and
            `asset_template.device_type_name`.</p> The default is
            `asset_template.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        asset_type_names : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> by its name. This is given as an array, for example
            `[pump,fan]`.</p> The search is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end). For example a search with `[pump,fan]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        entity_type_names : :obj:`Sequence[str]`
            Filter and return the results of one or more of the entity type names.
            This is given as an array, for example `[group,asset]`. Prefix any
            entity type name with the character `!` for a NOT operation.</p> There
            are five entity type names available to choose from; `group`, `asset`,
            `component`, `part`, `sensor`.</p> The default will select all
            available entity type name options.</p>
        asset_class_names : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> by its name. This is given as an array, for example
            `[pump,fan]`.</p> The search is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end). For example a search with `[pump,fan]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        owner : :obj:`str`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#kelvin-templates'
            target='_blank'>Kelvin Templates</a> by owner.</p> There are two types
            of owners; `custom` (any user) or `kelvin` (core kelvin).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/templates/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "asset_type_names": asset_type_names,
                "entity_type_names": entity_type_names,
                "asset_class_names": asset_class_names,
                "owner": owner,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetTemplateListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/assets/templates/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def delete_asset_template(
        cls, asset_template_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Asset Template

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin Template</a>. This cannot be undone once the API request has been submitted.

        **Permission Required:** `kelvin.permission.asset.delete`.

        ``deleteAssetTemplate``: ``POST`` ``/api/v4/assets/templates/{asset_template_name}/delete``

        Parameters
        ----------
        asset_template_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> name to retrieve.</p> This is the unique identifier name
            and not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a>.

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/templates/{asset_template_name}/delete",
            {"asset_template_name": asset_template_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_asset_template(
        cls, asset_template_name: str, _dry_run: bool = False, _client: Any = None
    ) -> AssetTemplate:
        """
        Get Asset Template

        Retrieves the properties of a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Template</a>.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetTemplate``: ``GET`` ``/api/v4/assets/templates/{asset_template_name}/get``

        Parameters
        ----------
        asset_template_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> name to retrieve.</p> This is the unique identifier name
            and not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/templates/{asset_template_name}/get",
            {"asset_template_name": asset_template_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetTemplate,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_asset_template(
        self_or_cls,
        asset_template_name: str,
        data: Optional[Union[requests.AssetTemplateUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTemplate:
        """
        Update Asset Template

        Updates an existing Kelvin Template with any new values passed through the body parameters.</p> All body parameters are optional and if not provided will remain unchanged.

        Only the unique identifier name can not be changed. If you need to change this parameter, then you will need to make a new Kelvin Template with a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (Hint: To avoid having to type everything in again, you can get the current JSON structure of the Kelvin Template from /assets/templates/{asset_template_name}/get API and then use this as the foundation for a new Kelvin Template).

        **Permission Required:** `kelvin.permission.asset.update`.

        ``updateAssetTemplate``: ``POST`` ``/api/v4/assets/templates/{asset_template_name}/update``

        Parameters
        ----------
        asset_template_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> name to retrieve.</p> This is the unique identifier name
            and not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a>.
        data: requests.AssetTemplateUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetTemplateUpdate
              - asset_type_name: str
              - description: str
              - entity_type_name: str
              - failure_detection: str
              - hierarchy: list
              - hints: dict
              - image_url: str
              - metrics: list
              - properties: list
              - title: str
              - visualization: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/templates/{asset_template_name}/update",
            {"asset_template_name": asset_template_name},
            {},
            {},
            {},
            data,
            requests.AssetTemplateUpdate,
            False,
            {
                "200": AssetTemplate,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_asset_type(
        self_or_cls,
        data: Optional[Union[requests.AssetTypeCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetType:
        """
        Create Asset Type

        To create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> you first need to create a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> and <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>. A <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> is linked to an <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> which defines how the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> will be referenced in <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>. For example: <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> that is defined as a Group can only be linked to a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset Class</a> that is saved as <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> **group**.

        There are five <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a>; `group`, `asset`, `component`, `part` and `sensor`. Detailed information about these <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#entity-type' target='_blank'>Entity Type</a> and how they are used can be found at <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/</a>.

        A <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a> is directly linked to a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>. There can be many <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> linked to one <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.

        **Permission Required:** `kelvin.permission.asset_type.create`.

        ``createAssetType``: ``POST`` ``/api/v4/assets/types/create``

        Parameters
        ----------
        data: requests.AssetTypeCreate, optional
        **kwargs:
            Extra parameters for requests.AssetTypeCreate
              - asset_class_name: str
              - name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/create",
            {},
            {},
            {},
            {},
            data,
            requests.AssetTypeCreate,
            False,
            {"201": AssetType, "400": ErrorMessages, "401": ErrorMessages, "409": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_asset_type(
        cls,
        search: Optional[Sequence[str]] = None,
        asset_class_name: Optional[Sequence[str]] = None,
        metadata: Optional[Sequence[str]] = None,
        metadata_filter: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        owner: Optional[str] = None,
        entity_type_name: Optional[Sequence[str]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetType], AssetTypeListPaginated]:
        """
        List Asset Type

        Returns a filtered dictionary with a data object containing an array of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> objects on the Kelvin Platform that meet the criteria of any parameters passed with the API request.

        If no query parameters are given with the API request, then the defaults will be used to return the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> list.

        The defaults are the first 20 <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> objects returned in alphabetical order by the unique identifier name.

        **Pagination Sortable Columns:** `asset_class.name`, `asset_class.title`, `asset_class.created`, `asset_class.updated`, `asset_class.owner`, `asset_class.device_type_name`

        **Pagination Sortable Columns:** `asset_type.name`, `asset_type.title`, `asset_type.created`, `asset_type.updated`, `asset_type.owner`, `asset_class.name`, `asset_class.title`, `asset_class.device_type_name`

        **Permission Required:** `kelvin.permission.asset_type.read`.

        ``listAssetType``: ``GET`` ``/api/v4/assets/types/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> list. Both the Display Name and the Name will be included in
            the search field criteria. This is given as an array, for example
            `[pump,fan]`.</p> The search is case insensitive and will find partial
            matches as well. For example if a Kelvin Asset Type name is
            `centrifugal_pump`, then a match will be made if the search string is
            `pum` or `FUGaL`.
        asset_class_name : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> by its name. This is given as an array, for example
            `[pump,fan]`.</p> The search is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end). For example a search with `[pump,fan]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        metadata : :obj:`Sequence[str]`
            Array of Kelvin Asset Type Metadata names. Kelvin Asset Type Metadata
            payload(s) will be attached to any <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Types</a> that are linked to any of the Kelvin Asset Type Metadata
            name(s) in this list.
        metadata_filter : :obj:`Sequence[str]`
            Array of Kelvin Asset Type Metadata filter options to perform on the
            Kelvin Asset Type Metadata payload.</p> Each filter takes the format
            `<metadata_name>.<payload_key>=<wanted_filtered_value>`. An example of
            two filters is `[metadata-test1.key1=String1,metadata-
            test2.key2=88]`.</p> Any JSON keys with string values are case
            sensitive.</p> Multiple JSON key filters in the array from the same
            Kelvin Asset Type Metadata object will be filtered as `OR`. For
            example; if Kelvin Asset Type Metadata name `metadata-test` has two
            key parameters `'key1': 'String1'` and `'key2': 25`, then a
            metadata_filter `[metadata-test.key1=String1,metadata-test.key2=88]`
            will return results as one of the two values match in the same Kelvin
            Asset Type Metadata object.</p> Multiple JSON key filters in the array
            from different Kelvin Asset Type Metadata objects will be filtered as
            `AND`. For example; if Kelvin Asset Type Metadata name `metadata-
            test1` has a key/value pair `'key1': 'String1'` and Kelvin Asset Type
            Metadata name `metadata-test2` has a key/value pair`'key2': 25`, then
            a metadata_filter `[metadata-test1.key1=String1,metadata-
            test2.key2=88]` will <strong>NOT</strong> return results as one of the
            two key/value pairs from different Kelvin Asset Type Metadata objects
            does not match.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-type'
            target='_blank'>Kelvin Asset Type</a> objects to be returned. Page
            size can be between 1 and 1000 objects.</p> The default is 20 Kelvin
            Asset Type objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Types</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Types</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Types</a> parameters. Only one parameter can be selected.</p> There
            are eight parameter options; `asset_type.name`, `asset_type.title`,
            `asset_type.created`, `asset_type.updated`, `asset_class.name`,
            `asset_class.title`, `asset_type.owner` and
            `asset_class.device_type_name`.</p> The default is `asset_type.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        owner : :obj:`str`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-type'
            target='_blank'>Kelvin Asset Type</a> by owner.</p> There are two
            types of owners; `custom` (any user) or `kelvin` (core kelvin asset
            type).</p> The default will select all owner options.
        entity_type_name : :obj:`Sequence[str]`
            Filter and return the results of one or more of the entity type names.
            This is given as an array, for example `[group,asset]`. Prefix any
            entity type name with the character `!` for a NOT operation.</p> There
            are five entity type names available to choose from; `group`, `asset`,
            `component`, `part`, `sensor`.</p> The default will select all
            available entity type name options.</p>

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/types/list",
            {},
            {
                "search": search,
                "asset_class_name": asset_class_name,
                "metadata": metadata,
                "metadata_filter": metadata_filter,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "owner": owner,
                "entity_type_name": entity_type_name,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetTypeListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/assets/types/list", "GET") if fetch and not _dry_run else result
        )

    @instance_classmethod
    @DataModelBase.translate()
    def delete_asset_type(
        self_or_cls, asset_type_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Asset Type

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. This cannot be undone once the API request has been submitted.

        This command can not delete <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Types</a> that are currently linked to any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and will return an error 403.

        **Permission Required:** `kelvin.permission.asset_type.delete`.

        ``deleteAssetType``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/delete``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to delete.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/delete",
            {"asset_type_name": asset_type_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_asset_type(
        self_or_cls,
        asset_type_name: str,
        metadata: Optional[Sequence[str]] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> AssetType:
        """
        Get Asset Type

        Retrieves the properties of a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.

        **Permission Required:** `kelvin.permission.asset_type.read`.

        ``getAssetType``: ``GET`` ``/api/v4/assets/types/{asset_type_name}/get``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to retrieve.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        metadata : :obj:`Sequence[str]`
            Array of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets#asset-type-metadata'
            target='_blank'>Kelvin Asset Type Metadata</a> names. If the metadata
            name exists for the <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-type'
            target='_blank'>Kelvin Asset Type</a>, then the payload for the
            metadata name will be attached in the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> response object.</p> <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects are created using the API endpoint
            `/assets/types/{asset_type_name}/metadata/` and is linked to a <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>. The same name can be used for different <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> for easy filtering across multiple <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/types/{asset_type_name}/get",
            {"asset_type_name": asset_type_name},
            {"metadata": metadata},
            {},
            {},
            None,
            None,
            False,
            {"200": AssetType, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        data: Optional[Union[requests.AssetTypeMetadataCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTypeMetadata:
        """
        Create Asset Type Metadata

        Creates a custom JSON payload that can be attached to a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>. You can create multiple different types of metadata payloads for each <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a>.

        When performing a `get` or `list` API request on <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a> or <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> then you can also add a metadata parameter. The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> payload will then be embedded in the response.

        For listing <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a> you can also perform filters on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> payload to only return <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Types</a> with <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> payload parameters matching the filters.

        This <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> does not affect the operations of <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> on the Kelvin Platform. <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> is not available in the <a href="https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-manager-ui" target="_blank">Kelvin Manager UI</a>.

        **Permission Required:** `kelvin.permission.asset_type.create`.

        ``createAssetTypeMetadata``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/metadata/create``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            Unique identifier name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> to attach the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> to.</p> This must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space BUT can not be at the
            beginning or end of the name.
        data: requests.AssetTypeMetadataCreate, optional
        **kwargs:
            Extra parameters for requests.AssetTypeMetadataCreate
              - name: str
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/metadata/create",
            {"asset_type_name": asset_type_name},
            {},
            {},
            {},
            data,
            requests.AssetTypeMetadataCreate,
            False,
            {
                "201": AssetTypeMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_asset_type_metadata(
        cls,
        asset_type_name: str,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetTypeMetadata], AssetTypeMetadataListPaginated]:
        """
        List Asset Type Metadata

        Returns a filtered list of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> objects linked with a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.

        The path parameter is required but the query parameters are optional. If no query parameters are given with the API request, then the defaults will be used to return the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> list. The defaults are the first 20 <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> returned in alphabetical order by the unique identifier name.

        **Pagination Sortable Columns:** `asset_type_metadata.name`

        **Permission Required:** `kelvin.permission.asset_type.read`.

        ``listAssetTypeMetadata``: ``GET`` ``/api/v4/assets/types/{asset_type_name}/metadata/list``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name where the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> payloads are stored.</p> The search is done on
            the full name only according to unique identifier name rules (Must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space.).
            For example a search with the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name `big-pump` will return all <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> associated with the name `big-pump` but not
            with the names `pump` or `big-pump-machine`.
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects list. Only the Name will be included
            in the search field criteria. This is given as an array, for example
            `[pump,fan]`.</p> The search is case insensitive and will find partial
            matches as well. For example if a Kelvin Asset Type name is
            centrifugal_pump, then a match will be made if the search string is
            `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets#asset-type-metadata'
            target='_blank'>Kelvin Asset Type Metadata</a> objects to be returned.
            Page size can be between 1 and 1000 objects. The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects in the list.</p> The alphanumeric
            string which are the bookmarks for the beginning and end of the
            current list is given in the previous JSON response value under the
            key pagination -> previous_page and pagination -> next_page
            respectively.</p> The pagination -> next_page alphanumeric string
            should be used here to show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> objects in the list.</p> The alphanumeric
            string which are the bookmarks for the beginning and end of the
            current list is given in the previous JSON response value under the
            key pagination -> previous_page and pagination -> next_page
            respectively.</p> The pagination -> previous_page alphanumeric string
            should be used here to show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> parameters. Only one parameter can be
            selected.</p> There in only one parameter option;
            `asset_type_metadata.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order). The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/types/{asset_type_name}/metadata/list",
            {"asset_type_name": asset_type_name},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetTypeMetadataListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/assets/types/{asset_type_name}/metadata/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate()
    def delete_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        asset_type_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> None:
        """
        Delete Asset Type Metadata

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object associated with a specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. This cannot be undone once the API request has been submitted.

        This will only delete the specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. If there is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object with the same name and payload BUT associated with a different <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>, this will not be deleted.

        **Permission Required:** `kelvin.permission.asset_type.delete`.

        ``deleteAssetTypeMetadata``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/delete``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to delete.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        asset_type_metadata_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> unique identifier name to delete.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/delete",
            {
                "asset_type_name": asset_type_name,
                "asset_type_metadata_name": asset_type_metadata_name,
            },
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def get_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        asset_type_metadata_name: str,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> AssetTypeMetadata:
        """
        Get Asset Type Metadata

        Retrieves the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object associated with a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.

        This will only retrieve the specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. If there is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object with the same name and payload BUT associated with a different <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>, this will not be retrieved.

        **Permission Required:** `kelvin.permission.asset_type.read`.

        ``getAssetTypeMetadata``: ``GET`` ``/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/get``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to retrieve.</p> This is the unique identifier name and
            not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        asset_type_metadata_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> unique identifier name to retrieve.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/get",
            {
                "asset_type_name": asset_type_name,
                "asset_type_metadata_name": asset_type_metadata_name,
            },
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetTypeMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_asset_type_metadata(
        self_or_cls,
        asset_type_name: str,
        asset_type_metadata_name: str,
        data: Optional[Union[requests.AssetTypeMetadataUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTypeMetadata:
        """
        Update Asset Type Metadata

        Updates the payload of an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object associated with a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>.

        The payload will be completely replaced by the new payload. Any existing key/value pairs that you want to keep must be included in your new payload that is sent with the API request.

        This will only update the payload of the specific <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object linked to the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>. If there is a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin Asset Type Metadata</a> object with the same name and payload BUT associated with a different <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>, this will not be updated.

        **Permission Required:** `kelvin.permission.asset_type.update`.

        ``updateAssetTypeMetadata``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/update``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            Unique identifier name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> to replace the specified metadata payload.</p> This must
            contain only lowercase alphanumeric characters. The `.`, `_` and `-`
            characters are also allowed to separate words instead of a space BUT
            can not be at the beginning or end of the name.
        asset_type_metadata_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets#asset-type-metadata' target='_blank'>Kelvin
            Asset Type Metadata</a> unique identifier name to retrieve.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        data: requests.AssetTypeMetadataUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetTypeMetadataUpdate
              - payload: dict

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/metadata/{asset_type_metadata_name}/update",
            {
                "asset_type_name": asset_type_name,
                "asset_type_metadata_name": asset_type_metadata_name,
            },
            {},
            {},
            {},
            data,
            requests.AssetTypeMetadataUpdate,
            False,
            {
                "200": AssetTypeMetadata,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_asset_type(
        self_or_cls,
        asset_type_name: str,
        data: Optional[Union[requests.AssetTypeUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetType:
        """
        Update Asset Type

        Updates an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> with any new values passed through the body parameters.</p> All body parameters are optional and if not provided will remain unchanged.</p> Only the unique identifier name can not be changed. If you need to change this parameter, then you will need to make a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a> and relink all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> to the new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset Type</a>.

        **Permission Required:** `kelvin.permission.asset_type.update`.

        ``updateAssetType``: ``POST`` ``/api/v4/assets/types/{asset_type_name}/update``

        Parameters
        ----------
        asset_type_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> name to retrieve.</p> This is the unique identifier name and
            not the display name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        data: requests.AssetTypeUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetTypeUpdate
              - asset_class_name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/types/{asset_type_name}/update",
            {"asset_type_name": asset_type_name},
            {},
            {},
            {},
            data,
            requests.AssetTypeUpdate,
            False,
            {
                "200": AssetType,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_workloads(
        cls,
        pagination_type: Optional[Literal["limits", "cursor", "stream"]] = None,
        page_size: Optional[int] = 1000,
        page: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        direction: Optional[Literal["asc", "desc"]] = None,
        sort_by: Optional[str] = None,
        data: Optional[Union[requests.AssetWorkloadsList, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[AssetWorkloadItem], AssetWorkloadListPaginated]:
        """
        List Workloads

        **Pagination Sortable Columns:** `asset_name`, `workload_name`, `app_name`, `app_version`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``listWorkloads``: ``POST`` ``/api/v4/assets/workloads/list``

        Parameters
        ----------
        pagination_type : :obj:`Literal['limits', 'cursor', 'stream']`
            Desired pagination type (limits, cursor, stream)
        page_size : :obj:`int`
            Desired page size
        page : :obj:`int`
            Desired page. Only valid for type=limits pagination
        next : :obj:`str`
            Retrieve next page. Only valid for type=cursor pagination
        previous : :obj:`str`
            Retrieve previous page. Only valid for type=cursor pagination
        direction : :obj:`Literal['asc', 'desc']`
            Direction in which to sort the data (asc, desc)
        sort_by : :obj:`str`
            Columns by which to sort the data
        data: requests.AssetWorkloadsList, optional
        **kwargs:
            Extra parameters for requests.AssetWorkloadsList
              - asset_names: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/assets/workloads/list",
            {},
            {
                "pagination_type": pagination_type,
                "page_size": page_size,
                "page": page,
                "next": next,
                "previous": previous,
                "direction": direction,
                "sort_by": sort_by,
            },
            {},
            {},
            data,
            requests.AssetWorkloadsList,
            False,
            {"200": AssetWorkloadListPaginated, "400": errors.ErrorMessage},
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/assets/workloads/list", "POST")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"asset_name": "name"})
    def list_asset_data_streams(
        self_or_cls,
        asset_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        data: Optional[Union[requests.AssetDataStreamsList, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[AssetDataStreamItem], AssetDataStreamsListPaginated]:
        """
        List Asset Data Streams

        Returns an array of dictionary objects with all the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pairs for the requested <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>.

        If the optional `include_asset_children` in the request body is true, then the returned dictionary will also filter for all children <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> below the `asset_name`.


        **Pagination Sortable Columns:** `datastream.asset_name`, `datastream.metric_name`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``listAssetDataStreams``: ``POST`` ``/api/v4/assets/{asset_name}/datastreams/list``

        Parameters
        ----------
        asset_name : :obj:`str`, optional
            Unique identifier name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>.</p> This
            must contain only lowercase alphanumeric characters. The `.`, `_` and
            `-` characters are also allowed to separate words instead of a space
            BUT can not be at the beginning or end of the name.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a> / <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-metrics' target='_blank'>Kelvin
            Metric</a> pair objects to be returned. Page size can be between 1 and
            1000 objects.</p> The default is 20 Kelvin Asset/Kelvin Metric pair
            objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair
            objects in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair
            objects in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> / <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-metrics' target='_blank'>Kelvin Metric</a> pair
            objects. Only one parameter can be selected.</p> There are two
            parameter options; `datastream.asset_name` and
            `datastream.metric_name`.</p> The default is `datastream.asset_name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        data: requests.AssetDataStreamsList, optional
        **kwargs:
            Extra parameters for requests.AssetDataStreamsList
              - include_asset_children: bool

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/{asset_name}/datastreams/list",
            {"asset_name": asset_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            data,
            requests.AssetDataStreamsList,
            False,
            {
                "200": AssetDataStreamsListPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/assets/{asset_name}/datastreams/list", "POST")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"asset_name": "name"})
    def delete_asset(
        self_or_cls, asset_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Asset

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>. This cannot be undone once the API request has been submitted.

        <span style="color: #ff0000;font-weight: bold;">WARNING</span> : This command will also delete any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> that are in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> below the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> being deleted.

        For example; if a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> has also two <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a> and one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensor</a> linked in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> below the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>, when deleting the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>, the two <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a> and one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensor</a> will also be automatically deleted. If you delete one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Component</a>, then the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>, and the remaining <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Component</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensor</a> will still remain active as long as they are not positioned below the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Component</a> in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        **Permission Required:** `kelvin.permission.asset.delete`.

        ``deleteAsset``: ``POST`` ``/api/v4/assets/{asset_name}/delete``

        Parameters
        ----------
        asset_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> name to
            delete.</p> This is the unique identifier name and not the display
            name (title) of the <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/{asset_name}/delete",
            {"asset_name": asset_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_name": "name"})
    def get_asset(
        self_or_cls,
        asset_name: str,
        metadata: Optional[Sequence[str]] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Asset:
        """
        Get Asset

        Retrieve the properties of a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> and all children <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in it's <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAsset``: ``GET`` ``/api/v4/assets/{asset_name}/get``

        Parameters
        ----------
        asset_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> name to
            retrieve.</p> This is the unique identifier name and not the display
            name (title) of the <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Asset</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.
        metadata : :obj:`Sequence[str]`
            Array of Kelvin Asset Type Metadata names. Kelvin Asset Type Metadata
            payload(s) of the names provided will be attached to any <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> response
            object that are linked to any of the Kelvin Asset Type Metadata
            name(s) in this list.</p> The relationship between <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> and Kelvin
            Asset Type Metadata objects is via the common link to the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a>.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/{asset_name}/get",
            {"asset_name": asset_name},
            {"metadata": metadata},
            {},
            {},
            None,
            None,
            False,
            {
                "200": Asset,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_name": "name"})
    def get_asset_hierarchy(
        self_or_cls,
        asset_name: str,
        entity_type_depth: Optional[str] = None,
        asset_type_depth: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Asset:
        """
        Get Asset Hierarchy

        Retrieve a full list of one <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> and it's <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> stored on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetHierarchy``: ``GET`` ``/api/v4/assets/{asset_name}/hierarchy/get``

        Parameters
        ----------
        asset_name : :obj:`str`, optional
            Unique identifier name of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> to retrieve
            the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-hierarchy'
            target='_blank'>hierarchy</a>.</p> This must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space BUT can not be at the
            beginning or end of the name.
        entity_type_depth : :obj:`str`
            Sets the start entity type depth in which the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>
            is returned.
        asset_type_depth : :obj:`str`
            Sets the start asset type depth in which the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>
            is returned. Only valid when entity_type_depth = group

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/{asset_name}/hierarchy/get",
            {"asset_name": asset_name},
            {"entity_type_depth": entity_type_depth, "asset_type_depth": asset_type_depth},
            {},
            {},
            None,
            None,
            False,
            {
                "200": Asset,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_name": "name"})
    def update_asset(
        self_or_cls,
        asset_name: str,
        dry_run: Optional[bool] = None,
        data: Optional[Union[requests.AssetUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Asset:
        """
        Update Asset

        Update an existing <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> with any new values passed through the body parameters. With the same API request you can also include updates to any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> that are in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> of this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a>.

        It is only possible to edit starting from either a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> or a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a>. It is not possible to directly edit <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a>.

        To edit a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Component</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Part</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensor</a>, the body parameters must start with either the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> or a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a> higher up in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>. The only exception is if the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a> is below the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a>, the body parameters can start at the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a> level and ignore the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a>.

        The minimum required in the body parameters is the top level `title`. If this body parameter does not need to be changed, it should still have the original Display Name (title) given. Any other body parameters that are not required and not provided will remain unchanged.

        <span style="color: #ff0000;font-weight: bold;">WARNING</span> : If the `hierarchy` parameter is used, all `components`, `parts` and `sensors` for that next level only must be included in the body parameters with a minimum parameters `name`, `title`, `asset_type_name` and `entity_type_name` given. If any body parameter does not need to be changed, it should still contain the original information. Any other body parameters that are not required and not provided will remain unchanged. <span style="color: #ff0000;font-weight: bold;">Any `components`, `parts` or `sensors` at this level not included will be automatically and permanently deleted.</span>.

        If in any `components`, `parts` or `sensors` body parameters, the `hierarchy` parameter is not provided, then the `hierarchy` for that particular `components`, `parts` or `sensors` will remain unchanged and not be deleted.

        **Permission Required:** `kelvin.permission.asset.update`.

        ``updateAsset``: ``POST`` ``/api/v4/assets/{asset_name}/update``

        Parameters
        ----------
        asset_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset
            Group</a> or a <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin
            Asset</a> name at the top of the hierarchy. Even if the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> is
            below the <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#asset-groups'
            target='_blank'>Kelvin Asset Group</a>, the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> name
            be used here.</p> This is the unique identifier name and not the
            display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>.
        dry_run : :obj:`bool`
            Perform a trial run to update the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> without
            saving the changes.</p> This is very useful when you want to test your
            new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> structure
            without making any changes on the Kelvin Platform.
        data: requests.AssetUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetUpdate
              - asset_template_name: str
              - asset_type_name: str
              - failure_detection: str
              - hierarchy: list
              - location: str
              - metrics: list
              - properties: list
              - title: str
              - visualization: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/{asset_name}/update",
            {"asset_name": asset_name},
            {"dry_run": dry_run},
            {},
            {},
            data,
            requests.AssetUpdate,
            False,
            {
                "200": Asset,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_bridge_assets(
        cls,
        bridge_name: str,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetItem], AssetListPaginated]:
        """
        List Bridge Assets

        Returns a dictionary with a data property containing a list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a>.

        **Pagination Sortable Columns:** `asset.name`, `asset.title`, `asset.created`, `asset.updated`, `asset_type.title`

        **Permission Required:** `kelvin.permission.bridge.read`.

        ``listBridgeAssets``: ``GET`` ``/api/v4/bridges/{bridge_name}/assets/list``

        Parameters
        ----------
        bridge_name : :obj:`str`, optional
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> by its
            name.</p> The filter is done on the full name only according to unique
            identifier name rules (Must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space but not at the beginning or
            end).</p> For example a filter with `demo-bridge-one` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> linked to
            the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-bridges/' target='_blank'>Kelvin Bridge</a> with the
            name `demo-bridge-one` but not with the names `demo-bridge` or
            `bridge-one`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> objects to be returned. Page size can be between 1 and 1000
            objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination -> next_page
            alphanumeric string should be used here to show a list of the next
            page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> in the
            list.</p> The alphanumeric string which are the bookmarks for the
            beginning and end of the current list is given in the previous JSON
            response value under the key pagination -> previous_page and
            pagination -> next_page respectively.</p> The pagination ->
            previous_page alphanumeric string should be used here to show a list
            of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> parameters.
            Only one parameter can be selected.</p> There are ten parameter
            options; `asset.name`, `asset.title`, `asset.created`, `asset.updated`
            and `asset_type.title`.</p> The default is `asset.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/bridges/{bridge_name}/assets/list",
            {"bridge_name": bridge_name},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/bridges/{bridge_name}/assets/list", "GET")
            if fetch and not _dry_run
            else result
        )


class AssetClassFailureList(DataModelBase):
    """
    AssetClassFailureList object.

    Parameters
    ----------
    data: Optional[Dict[str, List[FailureAnalysis]]]

    """

    data: Optional[Dict[str, List[FailureAnalysis]]] = None

    @classmethod
    def create_failures(
        cls,
        data: Optional[Union[requests.FailuresCreateUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Create Failures

        **Permission Required:** `kelvin.permission.failure_detection.create`.

        ``createFailures``: ``POST`` ``/api/v4/failure-detection/failures/create``

        Parameters
        ----------
        data: requests.FailuresCreateUpdate, optional
        **kwargs:
            Extra parameters for requests.FailuresCreateUpdate
              - failures: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/failures/create",
            {},
            {},
            {},
            {},
            data,
            requests.FailuresCreateUpdate,
            False,
            {
                "201": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def delete_failures(
        cls,
        data: Optional[Union[requests.FailuresDelete, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Delete Failures

        **Permission Required:** `kelvin.permission.failure_detection.delete`.

        ``deleteFailures``: ``POST`` ``/api/v4/failure-detection/failures/delete``

        Parameters
        ----------
        data: requests.FailuresDelete, optional
        **kwargs:
            Extra parameters for requests.FailuresDelete
              - failures: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/failures/delete",
            {},
            {},
            {},
            {},
            data,
            requests.FailuresDelete,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_failures(
        cls,
        asset_class: str,
        source_component_class: Optional[Sequence[str]] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> AssetClassFailureList:
        """
        List Failures

        **Permission Required:** `kelvin.permission.failure_detection.read`.

        ``listFailures``: ``GET`` ``/api/v4/failure-detection/failures/list``

        Parameters
        ----------
        asset_class : :obj:`str`, optional
            Filter failures by asset class
        source_component_class : :obj:`Sequence[str]`
            Filter failures by source component class name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/failure-detection/failures/list",
            {},
            {"asset_class": asset_class, "source_component_class": source_component_class},
            {},
            {},
            None,
            None,
            False,
            {"200": AssetClassFailureList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def update_failures(
        cls,
        data: Optional[Union[requests.FailuresCreateUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Update Failures

        **Permission Required:** `kelvin.permission.failure_detection.update`.

        ``updateFailures``: ``POST`` ``/api/v4/failure-detection/failures/update``

        Parameters
        ----------
        data: requests.FailuresCreateUpdate, optional
        **kwargs:
            Extra parameters for requests.FailuresCreateUpdate
              - failures: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/failures/update",
            {},
            {},
            {},
            {},
            data,
            requests.FailuresCreateUpdate,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
                "409": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class AssetHierarchies(DataModelBase):
    """
    AssetHierarchies object.

    Parameters
    ----------
    data: Optional[List[Asset]]

    """

    data: Optional[List[Asset]] = Field(
        None,
        description="A dictionary with a data property of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> created on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> with their <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> structure.",
    )

    @classmethod
    def get_asset_hierarchies(cls, _dry_run: bool = False, _client: Any = None) -> AssetHierarchies:
        """
        Get Asset Hierarchies

        Retrieve a full list of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> stored on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        The list will contain all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> information inclusive of their <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        There are no options to filter the list, so this list can get very big if there are large numbers of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> present on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetHierarchies``: ``GET`` ``/api/v4/assets/hierarchy/get``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/hierarchy/get",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": AssetHierarchies, "400": errors.ErrorMessage, "401": errors.ErrorMessage},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_asset_hierarchies(
        self_or_cls,
        dry_run: Optional[bool] = None,
        data: Optional[Union[requests.HierarchyUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Update Asset Hierarchies

        Update one or many <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> in one API request with any new values passed through the body parameters. Any <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> not included in the body parameter will remain unchanged.

        The <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> of every <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> must be maintained within this structure. This is similar as `/assets/{asset_name}/update` API request except that you can update multiple <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> at the same time and one key difference regarding `hierarchy` that is explains later. Below is an explanation which should apply to all <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> given in the body parameter.

        It is only possible to edit starting from either a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> or a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a>. It is not possible to directly edit <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a>.

        To edit a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Component</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Part</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensor</a>, the body parameters must start with either the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a> or a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset" target="_blank">Kelvin Asset</a> higher up in the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        Every <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> must be declared from the highest level. The API request will accept any <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> to update without requiring it to be inside the `hierarchy` parameter in <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a>, but if this <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> originally is positioned under a <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-groups' target='_blank'>Kelvin Asset Group</a>, then this structure will be lost and the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a> will move to the top of a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.

        The minimum required in the body parameters is the `name`, `title`, `asset_type_name` and `entity_type_name`. If these body parameters do not need to be changed, it should still contain the original information. Any other body parameters that are not required and not provided will remain unchanged.

        The only exception to this minimum requirement is when the parameter `delete` is marked as `true`. In this case the only other parameter required is `name`. If deleting any <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> with this method, all children <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> in the `hierarchy` below will also be deleted.

        <span style="color: #ff0000;font-weight: bold;">WARNING</span> : If the `hierarchy` parameter is used, all `components`, `parts` and `sensors` for only the next level down must be included in the body parameters with a minimum parameters `name`, `title`, `asset_type_name` and `entity_type_name` given. If any body parameter does not need to be changed, it should still contain the original information. Any other body parameters that are not required and not provided will remain unchanged. <span style="color: #ff0000;font-weight: bold;">Any `components`, `parts` or `sensors` and its children items at this level not included will be automatically and permenently deleted.</span>.

        If in any `components`, `parts` or `sensors` body parameters, the `hierarchy` parameter is not provided, then the `hierarchy` for that particular `components`, `parts` or `sensors` will remain and not be deleted.

        **Permission Required:** `kelvin.permission.asset.create`.

        ``updateAssetHierarchies``: ``POST`` ``/api/v4/assets/hierarchy/update``

        Parameters
        ----------
        dry_run : :obj:`bool`
            Perform a trial run to update the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> without
            saving the changes.</p> This is very useful when you want to test your
            new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> structure
            without making any changes on the Kelvin Platform.
        data: requests.HierarchyUpdate, optional
        **kwargs:
            Extra parameters for requests.HierarchyUpdate
              - data: list

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/hierarchy/update",
            {},
            {"dry_run": dry_run},
            {},
            {},
            data,
            requests.HierarchyUpdate,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "412": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class AssetTemplateHierarchy(DataModelBase):
    """
    AssetTemplateHierarchy object.

    Parameters
    ----------
    asset_type_name: Optional[str]
    entity_type_name: Optional[str]
    entity_type_title: Optional[str]
    failure_detection: Optional[FailureDetection]
    from_template_name: Optional[str]
    hierarchy: Optional[List[AssetTemplateHierarchy]]
    hints: Optional[Dict[str, Any]]
    metrics: Optional[List[AssetMetricItem]]
    properties: Optional[List[AssetTemplateProperties]]
    title: Optional[str]
    visualization: Optional[Visualization]

    """

    asset_type_name: Optional[str] = Field(
        None,
        description='The name (not the Display Name / Title) of the default <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> that will be selected.</p> This can be changed by the user when adding the Kelvin Template as a new <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    entity_type_name: Optional[str] = Field(
        None,
        description='Entity type name that is linked to this new Kelvin Template.</p> There are 5 entity type options available to choose from; `group`, `asset`, `component`, `part` and `sensor`.</p> Detailed information about the asset hierarchy and function of each entity type can be found at <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/</a>.',
    )
    entity_type_title: Optional[str] = Field(
        None,
        description='Entity type display name that is linked to this new Kelvin Template.</p> There are 5 entity type options available to choose from; `Group`, `Asset`, `Component`, `Part` and `Sensor`.</p> Detailed information about the asset hierarchy and function of each entity type can be found at <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/</a>.',
    )
    failure_detection: Optional[FailureDetection] = None
    from_template_name: Optional[str] = Field(
        None,
        description="Name of the <a href=\"https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates\" target=\"_blank\">Kelvin Template</a> to copy its full <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> to this location.</p> If this parameter is used, no other parameter in this structure is required.",
    )
    hierarchy: Optional[List[AssetTemplateHierarchy]] = Field(
        None,
        description='This is a recursive array that can reach unlimited levels of <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Assets</a> to be able to accurately describe all items in your <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    hints: Optional[Dict[str, Any]] = Field(
        None, description="Unused. This is reserved as a future feature."
    )
    metrics: Optional[List[AssetMetricItem]] = Field(
        None, description="Unused. This is reserved as a future feature."
    )
    properties: Optional[List[AssetTemplateProperties]] = Field(
        None,
        description="List of optional properties for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>.</p> This is not used within the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> and is available for use by authorized applications to store and retrieve custom properties for each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>.</p> This can be changed by the user when adding the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin Template</a> as a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>.",
    )
    title: Optional[str] = Field(
        None,
        description="Default display name (title) for this property in the new Kelvin Template. This is a friendly name displayed in lists and in references.</p> You can use any character, numeric, space and special character in this parameter.</p> This is shown as an example Display Name parameter field.</p> If you use `from_template_name parameter` this parameter is not required.",
    )
    visualization: Optional[Visualization] = None


class AssetTemplateItem(DataModelBase):
    """
    AssetTemplateItem object.

    Parameters
    ----------
    asset_class_name: Optional[str]
    asset_class_title: Optional[str]
    asset_type_name: Optional[str]
    asset_type_title: Optional[str]
    created: Optional[datetime]
    description: Optional[str]
    entity_type_name: Optional[str]
    entity_type_title: Optional[str]
    failure_detection: Optional[FailureDetection]
    hints: Optional[Dict[str, Any]]
    image_url: Optional[str]
    name: Optional[str]
    owner: Optional[str]
    title: Optional[str]
    updated: Optional[datetime]

    """

    asset_class_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>.',
    )
    asset_class_title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a>.',
    )
    asset_type_name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.',
    )
    asset_type_title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a>.',
    )
    created: Optional[datetime] = Field(
        None,
        description='Time of creation of this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )
    description: Optional[str] = Field(
        None,
        description='Detailed description of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Template</a>',
    )
    entity_type_name: Optional[str] = Field(
        None,
        description="Unique identifier name of the entity type. This is the chosen name from a fixed list defined by Kelvin.",
    )
    entity_type_title: Optional[str] = Field(
        None,
        description="Display name of the entity type. This is the chosen display name (title) from a fixed list defined by Kelvin.",
    )
    failure_detection: Optional[FailureDetection] = None
    hints: Optional[Dict[str, Any]] = Field(
        None, description="Unused. This is reserved as a future feature."
    )
    image_url: Optional[str] = Field(
        None,
        description="A http(s) URL link to an image to visually display your template picture next to the description.</p> The file can be in any web-compatible format including jpg, png, gif, animated gif and apng. Even though any size is allowed as it will be automatically resized, it is advised to keep it below 400 x 400 px.</p> If the link is behind a secure login, all login or token details must be incorporated into the URL here.",
    )
    name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Template</a>.',
    )
    owner: Optional[str] = Field(
        None,
        description='Who created the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Template</a>. There are two types of owners; custom (any user) or kelvin (core <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Template</a>).',
    )
    title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Template</a>.',
    )
    updated: Optional[datetime] = Field(
        None,
        description='Time of modifying any variable of this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )

    @instance_classmethod
    @DataModelBase.translate()
    def create_asset_template(
        self_or_cls,
        data: Optional[Union[requests.AssetTemplateCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTemplate:
        """
        Create Asset Template

        Create a custom <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/asset-groups' target='_blank'>Kelvin Group</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> template with a full <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Assets</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a>.

        For each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>, this template can also create all the parameters for <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-ai-failure-detection/' target='_blank'>Kelvin Failure Detection AI</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> and visualization information for <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/' target='_blank'>Kelvin Maps</a>

        **Permission Required:** `kelvin.permission.asset.create`.

        ``createAssetTemplate``: ``POST`` ``/api/v4/assets/templates/create``

        Parameters
        ----------
        data: requests.AssetTemplateCreate, optional
        **kwargs:
            Extra parameters for requests.AssetTemplateCreate
              - asset_type_name: str
              - description: str
              - entity_type_name: str
              - failure_detection: str
              - hierarchy: list
              - hints: dict
              - image_url: str
              - metrics: list
              - name: str
              - properties: list
              - title: str
              - visualization: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/templates/create",
            {},
            {},
            {},
            {},
            data,
            requests.AssetTemplateCreate,
            False,
            {"201": AssetTemplate, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_asset_template(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        asset_type_names: Optional[Sequence[str]] = None,
        entity_type_names: Optional[Sequence[str]] = None,
        asset_class_names: Optional[Sequence[str]] = None,
        owner: Optional[str] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetTemplateItem], AssetTemplateListPaginated]:
        """
        List Asset Template

        Returns a dictionary with a data property containing a filtered array of all <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Templates</a> objects on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Pagination Sortable Columns:** `asset_template.name`, `asset_template.title`, `asset_template.created`, `asset_template.updated`, `asset_template.asset_type_name`, `asset_template.device_type_name`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``listAssetTemplate``: ``GET`` ``/api/v4/assets/templates/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Templates</a> list. Both the Display Name and the Name will be
            included in the search field criteria. This is given as an array, for
            example `[pump,fan]`.</p> The search is case insensitive and will find
            partial matches as well. For example if a Kelvin Asset Type name is
            `centrifugal_pump`, then a match will be made if the search string is
            `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#kelvin-templates'
            target='_blank'>Kelvin Template</a> objects to be returned. Page size
            can be between 1 and 1000 objects.</p> The default is 20 Kelvin
            Template objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Templates</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Templates</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> parameters. Only one parameter can be selected.</p> There
            are six parameter options; `asset_template.name`,
            `asset_template.title`, `asset_template.created`,
            `asset_template.updated`, `asset_template.asset_type_name` and
            `asset_template.device_type_name`.</p> The default is
            `asset_template.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        asset_type_names : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> by its name. This is given as an array, for example
            `[pump,fan]`.</p> The search is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end). For example a search with `[pump,fan]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        entity_type_names : :obj:`Sequence[str]`
            Filter and return the results of one or more of the entity type names.
            This is given as an array, for example `[group,asset]`. Prefix any
            entity type name with the character `!` for a NOT operation.</p> There
            are five entity type names available to choose from; `group`, `asset`,
            `component`, `part`, `sensor`.</p> The default will select all
            available entity type name options.</p>
        asset_class_names : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> by its name. This is given as an array, for example
            `[pump,fan]`.</p> The search is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end). For example a search with `[pump,fan]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        owner : :obj:`str`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#kelvin-templates'
            target='_blank'>Kelvin Templates</a> by owner.</p> There are two types
            of owners; `custom` (any user) or `kelvin` (core kelvin).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/templates/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "asset_type_names": asset_type_names,
                "entity_type_names": entity_type_names,
                "asset_class_names": asset_class_names,
                "owner": owner,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetTemplateListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/assets/templates/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"asset_template_name": "name"})
    def delete_asset_template(
        self_or_cls, asset_template_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Asset Template

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin Template</a>. This cannot be undone once the API request has been submitted.

        **Permission Required:** `kelvin.permission.asset.delete`.

        ``deleteAssetTemplate``: ``POST`` ``/api/v4/assets/templates/{asset_template_name}/delete``

        Parameters
        ----------
        asset_template_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> name to retrieve.</p> This is the unique identifier name
            and not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a>.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/templates/{asset_template_name}/delete",
            {"asset_template_name": asset_template_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_template_name": "name"})
    def get_asset_template(
        self_or_cls, asset_template_name: str, _dry_run: bool = False, _client: Any = None
    ) -> AssetTemplate:
        """
        Get Asset Template

        Retrieves the properties of a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Template</a>.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetTemplate``: ``GET`` ``/api/v4/assets/templates/{asset_template_name}/get``

        Parameters
        ----------
        asset_template_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> name to retrieve.</p> This is the unique identifier name
            and not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/templates/{asset_template_name}/get",
            {"asset_template_name": asset_template_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetTemplate,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_template_name": "name"})
    def update_asset_template(
        self_or_cls,
        asset_template_name: str,
        data: Optional[Union[requests.AssetTemplateUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTemplate:
        """
        Update Asset Template

        Updates an existing Kelvin Template with any new values passed through the body parameters.</p> All body parameters are optional and if not provided will remain unchanged.

        Only the unique identifier name can not be changed. If you need to change this parameter, then you will need to make a new Kelvin Template with a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (Hint: To avoid having to type everything in again, you can get the current JSON structure of the Kelvin Template from /assets/templates/{asset_template_name}/get API and then use this as the foundation for a new Kelvin Template).

        **Permission Required:** `kelvin.permission.asset.update`.

        ``updateAssetTemplate``: ``POST`` ``/api/v4/assets/templates/{asset_template_name}/update``

        Parameters
        ----------
        asset_template_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> name to retrieve.</p> This is the unique identifier name
            and not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a>.
        data: requests.AssetTemplateUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetTemplateUpdate
              - asset_type_name: str
              - description: str
              - entity_type_name: str
              - failure_detection: str
              - hierarchy: list
              - hints: dict
              - image_url: str
              - metrics: list
              - properties: list
              - title: str
              - visualization: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/templates/{asset_template_name}/update",
            {"asset_template_name": asset_template_name},
            {},
            {},
            {},
            data,
            requests.AssetTemplateUpdate,
            False,
            {
                "200": AssetTemplate,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class AssetTemplateListPaginated(PaginatorDataModel[AssetTemplateItem]):
    """
    AssetTemplateListPaginated object.

    Parameters
    ----------
    data: Optional[List[AssetTemplateItem]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[AssetTemplateItem]] = Field(
        None,
        description="A dictionary which contains an array of up to `page_size` <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin Templates</a> objects. If a bookmark has been used, then the array will start or end based on the `starting_after` or `ending_before` parameters.",
    )
    pagination: Optional[pagination.Pagination] = None


class EmissionsAssetLists(DataModelBase):
    """
    EmissionsAssetLists object.

    Parameters
    ----------
    efficient_assets: Optional[List[EmissionsAsset]]
    inefficient_assets: Optional[List[EmissionsInefficientAsset]]
    non_assessable_assets: Optional[List[EmissionsAsset]]

    """

    efficient_assets: Optional[List[EmissionsAsset]] = None
    inefficient_assets: Optional[List[EmissionsInefficientAsset]] = None
    non_assessable_assets: Optional[List[EmissionsAsset]] = None


class EmissionsDashboard(DataModelBase):
    """
    EmissionsDashboard object.

    Parameters
    ----------
    analytics: Optional[EmissionsDashboardAnalytics]
    assets: Optional[EmissionsAssetLists]
    greenhouse: Optional[EmissionsGreenhouse]
    group_name: Optional[str]
    totals: Optional[EmissionsDashboardTotals]

    """

    analytics: Optional[EmissionsDashboardAnalytics] = None
    assets: Optional[EmissionsAssetLists] = None
    greenhouse: Optional[EmissionsGreenhouse] = None
    group_name: Optional[str] = None
    totals: Optional[EmissionsDashboardTotals] = None

    @instance_classmethod
    @DataModelBase.translate()
    def get_emissions_dashboard(
        self_or_cls, group_name: str, _dry_run: bool = False, _client: Any = None
    ) -> EmissionsDashboard:
        """
        Get Emissions Dashboard endpoint that will provide the data
        to be presented in the maps/emissions dashboard

        **Permission Required:** `kelvin.permission.ui.read`.

        ``getEmissionsDashboard``: ``GET`` ``/api/v4/ui/emissions/dashboard/get``

        Parameters
        ----------
        group_name : :obj:`str`, optional
            The assets group name filter

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/ui/emissions/dashboard/get",
            {},
            {"group_name": group_name},
            {},
            {},
            None,
            None,
            False,
            {"200": EmissionsDashboard, "400": errors.ErrorMessage},
            False,
            _dry_run,
        )
        return result


class FailureClassFull(DataModelBase):
    """
    FailureClassFull object.

    Parameters
    ----------
    children: Optional[Dict[str, Any]]
    created: Optional[datetime]
    entity_type_name: Optional[str]
    name: Optional[str]
    properties: Optional[List[FailureClassProperty]]
    title: Optional[str]
    updated: Optional[datetime]

    """

    children: Optional[Dict[str, Any]] = None
    created: Optional[datetime] = None
    entity_type_name: Optional[str] = None
    name: Optional[str] = None
    properties: Optional[List[FailureClassProperty]] = None
    title: Optional[str] = None
    updated: Optional[datetime] = None

    @classmethod
    def delete_failure_class(
        cls, failure_class_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Failure Class

        **Permission Required:** `kelvin.permission.failure_detection.delete`.

        ``deleteFailureClass``: ``POST`` ``/api/v4/failure-detection/classes/{failure_class_name}/delete``

        Parameters
        ----------
        failure_class_name : :obj:`str`, optional
            Failure Class name

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/classes/{failure_class_name}/delete",
            {"failure_class_name": failure_class_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_failure_class(
        cls, failure_class_name: str, _dry_run: bool = False, _client: Any = None
    ) -> FailureClassFull:
        """
        Get Failure Class

        **Permission Required:** `kelvin.permission.failure_detection.read`.

        ``getFailureClass``: ``GET`` ``/api/v4/failure-detection/classes/{failure_class_name}/get``

        Parameters
        ----------
        failure_class_name : :obj:`str`, optional
            Failure Class Name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/failure-detection/classes/{failure_class_name}/get",
            {"failure_class_name": failure_class_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": FailureClassFull,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def update_failure_class(
        self_or_cls,
        failure_class_name: str,
        data: Optional[Union[requests.FailureClassUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> FailureClass:
        """
        Update Failure Class

        **Permission Required:** `kelvin.permission.failure_detection.update`.

        ``updateFailureClass``: ``POST`` ``/api/v4/failure-detection/classes/{failure_class_name}/update``

        Parameters
        ----------
        failure_class_name : :obj:`str`, optional
            Failure Class name
        data: requests.FailureClassUpdate, optional
        **kwargs:
            Extra parameters for requests.FailureClassUpdate
              - device_type_name: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/failure-detection/classes/{failure_class_name}/update",
            {"failure_class_name": failure_class_name},
            {},
            {},
            {},
            data,
            requests.FailureClassUpdate,
            False,
            {"200": FailureClass, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class FullMap(DataModelBase):
    """
    FullMap object.

    Parameters
    ----------
    alarm_statistics: Optional[AlarmStatistics]
    alarms: Optional[List[Alarm]]
    asset_name: Optional[str]
    end_date: Optional[datetime]
    entities: Optional[List[MapEntity]]
    entities_count: Optional[int]
    failure_detection: Optional[MapFailureDetection]
    id: Optional[str]
    mode: Optional[str]
    name: Optional[str]
    oee: Optional[MapOEE]
    shift: Optional[MapShift]
    start_date: Optional[datetime]
    title: Optional[str]

    """

    alarm_statistics: Optional[AlarmStatistics] = None
    alarms: Optional[List[Alarm]] = None
    asset_name: Optional[str] = None
    end_date: Optional[datetime] = None
    entities: Optional[List[MapEntity]] = None
    entities_count: Optional[int] = None
    failure_detection: Optional[MapFailureDetection] = None
    id: Optional[str] = None
    mode: Optional[str] = None
    name: Optional[str] = None
    oee: Optional[MapOEE] = None
    shift: Optional[MapShift] = None
    start_date: Optional[datetime] = None
    title: Optional[str] = None

    @classmethod
    def list_processes(
        cls,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        data: Optional[Union[requests.ProcessesList, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[FullMap], FullMapListPaginated]:
        """
        List Processes

        **Pagination Sortable Columns:** `map.name`, `map.title`, `start_date`, `mode`, `map.asset_name`

        **Permission Required:** `kelvin.permission.ui.read`.

        ``listProcesses``: ``POST`` ``/api/v4/ui/processes/list``

        Parameters
        ----------
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true
        data: requests.ProcessesList, optional
        **kwargs:
            Extra parameters for requests.ProcessesList
              - alarm_statuses: list
              - asset_name: str
              - mode: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/ui/processes/list",
            {},
            {
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            data,
            requests.ProcessesList,
            False,
            {"200": FullMapListPaginated, "400": errors.ErrorMessage, "424": errors.ErrorMessage},
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/ui/processes/list", "POST") if fetch and not _dry_run else result
        )


class FullMapListPaginated(PaginatorDataModel[FullMap]):
    """
    FullMapListPaginated object.

    Parameters
    ----------
    data: Optional[List[FullMap]]
    pagination: Optional[Page]

    """

    data: Optional[List[FullMap]] = None
    pagination: Optional[Page] = None


class IntegrationList(PaginatorDataModel[IntegrationListItem]):
    """
    IntegrationList object.

    Parameters
    ----------
    data: Optional[List[IntegrationListItem]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[IntegrationListItem]] = None
    pagination: Optional[pagination.Pagination] = None

    @classmethod
    def create_aws_region(
        cls,
        data: Optional[Union[requests.IntegrationAwsRegionCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> IntegrationAwsRegion:
        """
        Create AWS Region

        **Permission Required:** `kelvin.permission.integration.create`.

        ``createAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/create``

        Parameters
        ----------
        data: requests.IntegrationAwsRegionCreate, optional
        **kwargs:
            Extra parameters for requests.IntegrationAwsRegionCreate
              - name: str
              - title: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/create",
            {},
            {},
            {},
            {},
            data,
            requests.IntegrationAwsRegionCreate,
            False,
            {"201": IntegrationAwsRegion, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_aws_regions(
        cls,
        names: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> IntegrationAwsRegionList:
        """
        List AWS Regions

        **Pagination Sortable Columns:** `aws_regions.name`, `aws_regions.title`, `aws_regions.created`, `aws_regions.updated`

        **Permission Required:** `kelvin.permission.integration.read`.

        ``listAWSRegions``: ``GET`` ``/api/v4/integrations/aws/regions/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter Regions by name
        search : :obj:`Sequence[str]`
            Search Regions by name or title
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/integrations/aws/regions/list",
            {},
            {
                "names": names,
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": IntegrationAwsRegionList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def delete_aws_region(cls, name: str, _dry_run: bool = False, _client: Any = None) -> None:
        """
        Delete AWS Region

        **Permission Required:** `kelvin.permission.integration.delete`.

        ``deleteAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/{name}/delete``

        Parameters
        ----------
        name : :obj:`str`, optional
            Region name

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/{name}/delete",
            {"name": name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_aws_region(
        cls, name: str, _dry_run: bool = False, _client: Any = None
    ) -> IntegrationAwsRegion:
        """
        Get AWS Region

        **Permission Required:** `kelvin.permission.integration.read`.

        ``getAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/{name}/get``

        Parameters
        ----------
        name : :obj:`str`, optional
            Region name

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/{name}/get",
            {"name": name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": IntegrationAwsRegion, "400": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def update_aws_region(
        cls,
        name: str,
        data: Optional[Union[requests.IntegrationAwsRegionUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> IntegrationAwsRegion:
        """
        Update AWS Region

        **Permission Required:** `kelvin.permission.integration.update`.

        ``updateAWSRegion``: ``POST`` ``/api/v4/integrations/aws/regions/{name}/update``

        Parameters
        ----------
        name : :obj:`str`, optional
            Region name
        data: requests.IntegrationAwsRegionUpdate, optional
        **kwargs:
            Extra parameters for requests.IntegrationAwsRegionUpdate
              - title: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/aws/regions/{name}/update",
            {"name": name},
            {},
            {},
            {},
            data,
            requests.IntegrationAwsRegionUpdate,
            False,
            {
                "200": IntegrationAwsRegion,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def create_integration(
        cls,
        data: Optional[Union[requests.IntegrationCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Integration:
        """
        Create Integration

        **Permission Required:** `kelvin.permission.integration.create`.

        ``createIntegration``: ``POST`` ``/api/v4/integrations/create``

        Parameters
        ----------
        data: requests.IntegrationCreate, optional
        **kwargs:
            Extra parameters for requests.IntegrationCreate
              - configuration: str
              - enable: bool
              - name: str
              - title: str
              - type: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/create",
            {},
            {},
            {},
            {},
            data,
            requests.IntegrationCreate,
            False,
            {"201": Integration, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_integrations(
        cls,
        names: Optional[Sequence[str]] = None,
        types: Optional[Sequence[str]] = None,
        search: Optional[Sequence[str]] = None,
        enable: Optional[bool] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> IntegrationList:
        """
        List Integrations

        **Pagination Sortable Columns:** `integration.name`, `integration.title`, `integration.type`, `integration.enable`, `integration.state`, `integration.last_seen`, `integration.created`, `integration.updated`

        **Permission Required:** `kelvin.permission.integration.read`.

        ``listIntegrations``: ``GET`` ``/api/v4/integrations/list``

        Parameters
        ----------
        names : :obj:`Sequence[str]`
            Filter Integrations by name
        types : :obj:`Sequence[str]`
            Filter Integrations by type
        search : :obj:`Sequence[str]`
            Search Integrations by name or title
        enable : :obj:`bool`
            Filter by enable Integrations. Possible Values: true/false. Default:
            none
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/integrations/list",
            {},
            {
                "names": names,
                "types": types,
                "search": search,
                "enable": enable,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": IntegrationList, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def delete_integration(cls, name: str, _dry_run: bool = False, _client: Any = None) -> None:
        """
        Delete Integration

        **Permission Required:** `kelvin.permission.integration.delete`.

        ``deleteIntegration``: ``POST`` ``/api/v4/integrations/{name}/delete``

        Parameters
        ----------
        name : :obj:`str`, optional
            Integration name

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/{name}/delete",
            {"name": name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_integration(cls, name: str, _dry_run: bool = False, _client: Any = None) -> Integration:
        """
        Get Integration

        **Permission Required:** `kelvin.permission.integration.read`.

        ``getIntegration``: ``GET`` ``/api/v4/integrations/{name}/get``

        Parameters
        ----------
        name : :obj:`str`, optional
            Integration name

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/integrations/{name}/get",
            {"name": name},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": Integration, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @classmethod
    def update_integration(
        cls,
        name: str,
        data: Optional[Union[requests.IntegrationUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Integration:
        """
        Update Integration

        **Permission Required:** `kelvin.permission.integration.update`.

        ``updateIntegration``: ``POST`` ``/api/v4/integrations/{name}/update``

        Parameters
        ----------
        name : :obj:`str`, optional
            Integration name
        data: requests.IntegrationUpdate, optional
        **kwargs:
            Extra parameters for requests.IntegrationUpdate
              - configuration: str
              - enable: bool
              - title: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/integrations/{name}/update",
            {"name": name},
            {},
            {},
            {},
            data,
            requests.IntegrationUpdate,
            False,
            {"200": Integration, "400": ErrorMessages, "401": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class Recommendation(DataModelBase):
    """
    Recommendation object.

    Parameters
    ----------
    actions: Optional[RecommendationActions]
    confidence: Optional[int]
    created: Optional[str]
    custom_identifier: Optional[str]
    description: Optional[str]
    expiration_date: Optional[str]
    id: Optional[str]
    logs: Optional[List[RecommendationLog]]
    metadata: Optional[Dict[str, Any]]
    resource: Optional[str]
    source: Optional[str]
    state: Optional[str]
    type: Optional[str]
    type_title: Optional[str]
    updated: Optional[str]

    """

    actions: Optional[RecommendationActions] = None
    confidence: Optional[int] = None
    created: Optional[str] = None
    custom_identifier: Optional[str] = None
    description: Optional[str] = None
    expiration_date: Optional[str] = None
    id: Optional[str] = None
    logs: Optional[List[RecommendationLog]] = None
    metadata: Optional[Dict[str, Any]] = None
    resource: Optional[str] = None
    source: Optional[str] = None
    state: Optional[str] = None
    type: Optional[str] = None
    type_title: Optional[str] = None
    updated: Optional[str] = None

    @classmethod
    def get_recommendation_clustering(
        cls,
        data: Optional[Union[requests.RecommendationClustering, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[RecommendationClustering]:
        """
        Get Recommendation Clustering

        **Permission Required:** `kelvin.permission.recommendation.read`.

        ``getRecommendationClustering``: ``POST`` ``/api/v4/recommendations/clustering/get``

        Parameters
        ----------
        data: requests.RecommendationClustering, optional
        **kwargs:
            Extra parameters for requests.RecommendationClustering
              - end_date: datetime
              - resource_names: list
              - start_date: datetime
              - states: list
              - time_bucket: str
              - types: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/recommendations/clustering/get",
            {},
            {},
            {},
            {},
            data,
            requests.RecommendationClustering,
            False,
            {
                "200": List[RecommendationClustering],
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def create_recommendation(
        self_or_cls,
        data: Optional[Union[requests.RecommendationCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Recommendation:
        """
        Create Recommendation

        **Permission Required:** `kelvin.permission.recommendation.create`.

        ``createRecommendation``: ``POST`` ``/api/v4/recommendations/create``

        Parameters
        ----------
        data: requests.RecommendationCreate, optional
        **kwargs:
            Extra parameters for requests.RecommendationCreate
              - actions: str
              - confidence: int
              - custom_identifier: str
              - description: str
              - expiration_date: str
              - metadata: dict
              - resource: str
              - source: str
              - type: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/recommendations/create",
            {},
            {},
            {},
            {},
            data,
            requests.RecommendationCreate,
            False,
            {"201": Recommendation, "400": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def get_last_recommendation(
        cls,
        pagination_type: Optional[Literal["limits", "cursor", "stream"]] = None,
        page_size: Optional[int] = 1000,
        page: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        direction: Optional[Literal["asc", "desc"]] = None,
        sort_by: Optional[Sequence[str]] = None,
        data: Optional[Union[requests.RecommendationLast, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[Recommendation], RecommendationPaginated]:
        """
        Get Last Recommendation

        **Pagination Sortable Columns:** `id`, `custom_identifier`, `source`, `resource`, `description`, `confidence`, `expiration_date`, `created_at`, `updated_at`, `state`, `type`

        **Permission Required:** `kelvin.permission.recommendation.read`.

        ``getLastRecommendation``: ``POST`` ``/api/v4/recommendations/last/get``

        Parameters
        ----------
        pagination_type : :obj:`Literal['limits', 'cursor', 'stream']`
            Desired pagination type (limits, cursor, stream)
        page_size : :obj:`int`
            Desired page sizeNumber of objects to be returned, between 1 and 1000.
            Default: 20
        page : :obj:`int`
            Desired page. Only valid for type=limits pagination
        next : :obj:`str`
            Retrieve next page. Only valid for type=cursor pagination
        previous : :obj:`str`
            Retrieve previous page. Only valid for type=cursor pagination
        direction : :obj:`Literal['asc', 'desc']`
            Direction in which to sort the data (asc, desc)
        sort_by : :obj:`Sequence[str]`
            Columns by which to sort the data
        data: requests.RecommendationLast, optional
        **kwargs:
            Extra parameters for requests.RecommendationLast
              - resources: list
              - states: list
              - types: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/recommendations/last/get",
            {},
            {
                "pagination_type": pagination_type,
                "page_size": page_size,
                "page": page,
                "next": next,
                "previous": previous,
                "direction": direction,
                "sort_by": sort_by,
            },
            {},
            {},
            data,
            requests.RecommendationLast,
            False,
            {"200": RecommendationPaginated, "400": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/recommendations/last/get", "POST")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def list_recommendation(
        cls,
        pagination_type: Optional[Literal["limits", "cursor", "stream"]] = None,
        page_size: Optional[int] = 1000,
        page: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        direction: Optional[Literal["asc", "desc"]] = None,
        sort_by: Optional[Sequence[str]] = None,
        data: Optional[Union[requests.RecommendationList, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[Recommendation], RecommendationPaginated]:
        """
        List Recommendation

        **Pagination Sortable Columns:** `id`, `custom_identifier`, `source`, `resource`, `description`, `confidence`, `expiration_date`, `created_at`, `updated_at`, `state`, `type`

        **Permission Required:** `kelvin.permission.recommendation.read`.

        ``listRecommendation``: ``POST`` ``/api/v4/recommendations/list``

        Parameters
        ----------
        pagination_type : :obj:`Literal['limits', 'cursor', 'stream']`
            Desired pagination type (limits, cursor, stream)
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        page : :obj:`int`
            Desired page. Only valid for type=limits pagination
        next : :obj:`str`
            Retrieve next page. Only valid for type=cursor pagination
        previous : :obj:`str`
            Retrieve previous page. Only valid for type=cursor pagination
        direction : :obj:`Literal['asc', 'desc']`
            Direction in which to sort the data (asc, desc)
        sort_by : :obj:`Sequence[str]`
            Columns by which to sort the data
        data: requests.RecommendationList, optional
        **kwargs:
            Extra parameters for requests.RecommendationList
              - ids: list
              - resources: list
              - states: list
              - types: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/recommendations/list",
            {},
            {
                "pagination_type": pagination_type,
                "page_size": page_size,
                "page": page,
                "next": next,
                "previous": previous,
                "direction": direction,
                "sort_by": sort_by,
            },
            {},
            {},
            data,
            requests.RecommendationList,
            False,
            {"200": RecommendationPaginated, "400": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/recommendations/list", "POST")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def get_range_recommendation(
        cls,
        pagination_type: Optional[Literal["limits", "cursor", "stream"]] = None,
        page_size: Optional[int] = 1000,
        page: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        direction: Optional[Literal["asc", "desc"]] = None,
        sort_by: Optional[Sequence[str]] = None,
        data: Optional[Union[requests.RecommendationRange, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[Recommendation], RecommendationPaginated]:
        """
        Get Range Recommendations

        **Pagination Sortable Columns:** `id`, `custom_identifier`, `source`, `resource`, `description`, `confidence`, `expiration_date`, `created_at`, `updated_at`, `state`, `type`

        **Permission Required:** `kelvin.permission.recommendation.read`.

        ``getRangeRecommendation``: ``POST`` ``/api/v4/recommendations/range/get``

        Parameters
        ----------
        pagination_type : :obj:`Literal['limits', 'cursor', 'stream']`
            Desired pagination type (limits, cursor, stream)
        page_size : :obj:`int`
            Desired page sizeNumber of objects to be returned, between 1 and 1000.
            Default: 20
        page : :obj:`int`
            Desired page. Only valid for type=limits pagination
        next : :obj:`str`
            Retrieve next page. Only valid for type=cursor pagination
        previous : :obj:`str`
            Retrieve previous page. Only valid for type=cursor pagination
        direction : :obj:`Literal['asc', 'desc']`
            Direction in which to sort the data (asc, desc)
        sort_by : :obj:`Sequence[str]`
            Columns by which to sort the data
        data: requests.RecommendationRange, optional
        **kwargs:
            Extra parameters for requests.RecommendationRange
              - end_date: datetime
              - resources: list
              - start_date: datetime
              - states: list
              - types: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/recommendations/range/get",
            {},
            {
                "pagination_type": pagination_type,
                "page_size": page_size,
                "page": page,
                "next": next,
                "previous": previous,
                "direction": direction,
                "sort_by": sort_by,
            },
            {},
            {},
            data,
            requests.RecommendationRange,
            False,
            {"200": RecommendationPaginated, "400": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/recommendations/range/get", "POST")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def list_recommendation_type(
        cls, fetch: bool = True, _dry_run: bool = False, _client: Any = None
    ) -> Union[List[RecommendationType], RecommendationTypePaginated]:
        """
        List Recommendation Type

        **Pagination Sortable Columns:** `type`

        **Permission Required:** `kelvin.permission.recommendation.read`.

        ``listRecommendationType``: ``GET`` ``/api/v4/recommendations/types/list``

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/recommendations/types/list",
            {},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": RecommendationTypePaginated},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/recommendations/types/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"recommendation_id": "id"})
    def update_accept_recommendation(
        self_or_cls,
        recommendation_id: str,
        data: Optional[Union[requests.RecommendationAccept, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> RecommendationResponsePayload:
        """
        Update Accept Recommendation

        **Permission Required:** `kelvin.permission.recommendation.update`.

        ``updateAcceptRecommendation``: ``POST`` ``/api/v4/recommendations/{recommendation_id}/accept/update``

        Parameters
        ----------
        recommendation_id : :obj:`str`, optional
            Recommendation ID
        data: requests.RecommendationAccept, optional
        **kwargs:
            Extra parameters for requests.RecommendationAccept
              - message: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/recommendations/{recommendation_id}/accept/update",
            {"recommendation_id": recommendation_id},
            {},
            {},
            {},
            data,
            requests.RecommendationAccept,
            False,
            {"200": RecommendationResponsePayload, "400": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"recommendation_id": "id"})
    def delete_recommendation(
        self_or_cls, recommendation_id: str, _dry_run: bool = False, _client: Any = None
    ) -> RecommendationResponsePayload:
        """
        Delete Recommendation

        **Permission Required:** `kelvin.permission.recommendation.delete`.

        ``deleteRecommendation``: ``POST`` ``/api/v4/recommendations/{recommendation_id}/delete``

        Parameters
        ----------
        recommendation_id : :obj:`str`, optional
            Recommendation ID

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/recommendations/{recommendation_id}/delete",
            {"recommendation_id": recommendation_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": RecommendationResponsePayload, "400": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"recommendation_id": "id"})
    def get_recommendation(
        self_or_cls, recommendation_id: str, _dry_run: bool = False, _client: Any = None
    ) -> Recommendation:
        """
        Get Recommendation

        **Permission Required:** `kelvin.permission.recommendation.read`.

        ``getRecommendation``: ``GET`` ``/api/v4/recommendations/{recommendation_id}/get``

        Parameters
        ----------
        recommendation_id : :obj:`str`, optional
            Recommendation ID

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/recommendations/{recommendation_id}/get",
            {"recommendation_id": recommendation_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": Recommendation, "404": ErrorMessages},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"recommendation_id": "id"})
    def create_log(
        self_or_cls,
        recommendation_id: str,
        data: Optional[Union[requests.RecommendationCreateLog, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Create Log

        **Permission Required:** `kelvin.permission.recommendation.update`.

        ``createLog``: ``POST`` ``/api/v4/recommendations/{recommendation_id}/log/create``

        Parameters
        ----------
        recommendation_id : :obj:`str`, optional
            Recommendation ID
        data: requests.RecommendationCreateLog, optional
        **kwargs:
            Extra parameters for requests.RecommendationCreateLog
              - message: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/recommendations/{recommendation_id}/log/create",
            {"recommendation_id": recommendation_id},
            {},
            {},
            {},
            data,
            requests.RecommendationCreateLog,
            False,
            {"201": None, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"recommendation_id": "id"})
    def update_reject_recommendation(
        self_or_cls,
        recommendation_id: str,
        data: Optional[Union[requests.RecommendationReject, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> RecommendationResponsePayload:
        """
        Update Reject Recommendation

        **Permission Required:** `kelvin.permission.recommendation.update`.

        ``updateRejectRecommendation``: ``POST`` ``/api/v4/recommendations/{recommendation_id}/reject/update``

        Parameters
        ----------
        recommendation_id : :obj:`str`, optional
            Recommendation ID
        data: requests.RecommendationReject, optional
        **kwargs:
            Extra parameters for requests.RecommendationReject
              - message: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/recommendations/{recommendation_id}/reject/update",
            {"recommendation_id": recommendation_id},
            {},
            {},
            {},
            data,
            requests.RecommendationReject,
            False,
            {"200": RecommendationResponsePayload, "400": ErrorMessages, "404": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result


class RecommendationPaginated(PaginatorDataModel[Recommendation]):
    """
    RecommendationPaginated object.

    Parameters
    ----------
    data: Optional[List[Recommendation]]
    pagination: Optional[paginator.PaginationInfo]

    """

    data: Optional[List[Recommendation]] = None
    pagination: Optional[paginator.PaginationInfo] = None


class Rule(DataModelBase):
    """
    Rule object.

    Parameters
    ----------
    created: Optional[str]
    draft: Optional[bool]
    enabled: Optional[bool]
    map_name: Optional[str]
    name: Optional[str]
    payload: Optional[RulePayload]
    state: Optional[str]
    status: Optional[RuleStatus]
    target: Optional[str]
    title: Optional[str]
    updated: Optional[str]

    """

    created: Optional[str] = None
    draft: Optional[bool] = None
    enabled: Optional[bool] = None
    map_name: Optional[str] = None
    name: Optional[str] = None
    payload: Optional[RulePayload] = None
    state: Optional[str] = None
    status: Optional[RuleStatus] = None
    target: Optional[str] = None
    title: Optional[str] = None
    updated: Optional[str] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_rule(
        self_or_cls,
        data: Optional[Union[requests.RuleCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Rule:
        """
        Create Rule

        **Permission Required:** `kelvin.permission.rule.create`.

        ``createRule``: ``POST`` ``/api/v4/rules/create``

        Parameters
        ----------
        data: requests.RuleCreate, optional
        **kwargs:
            Extra parameters for requests.RuleCreate
              - draft: bool
              - enabled: bool
              - map_name: str
              - name: str
              - payload: str
              - target: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/rules/create",
            {},
            {},
            {},
            {},
            data,
            requests.RuleCreate,
            False,
            {
                "201": Rule,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "409": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_rules(
        cls,
        search: Optional[Sequence[str]] = None,
        map_names: Optional[Sequence[str]] = None,
        states: Optional[Sequence[str]] = None,
        target: Optional[str] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[Rule], RulesListPaginated]:
        """
        List Rules

        **Pagination Sortable Columns:** `rule.name`, `rule.title`, `rule.map_name`, `rule.target`, `rule.state`, `rule.enabled`, `rule.created`, `rule.updated`

        **Permission Required:** `kelvin.permission.rule.read`.

        ``listRules``: ``GET`` ``/api/v4/rules/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search rules by name or title
        map_names : :obj:`Sequence[str]`
            Search rules by map name
        states : :obj:`Sequence[str]`
            Search rules by state
        target : :obj:`str`
            Search rules by target
        page_size : :obj:`int`
            Number of objects to be returned, between 1 and 1000. Default: 20
        starting_after : :obj:`str`
            Lower bound cursor for use in pagination
        ending_before : :obj:`str`
            Upper bound cursor for use in pagination
        sort_by : :obj:`str`
            Parameter to sort by. Must be one of the sortable columns
        sort_asc : :obj:`bool`
            Order of sorting is Ascending. Possible Values: true/false. Default:
            true

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/rules/list",
            {},
            {
                "search": search,
                "map_names": map_names,
                "states": states,
                "target": target,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
            },
            {},
            {},
            None,
            None,
            False,
            {
                "200": RulesListPaginated,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result.fetch("/api/v4/rules/list", "GET") if fetch and not _dry_run else result

    @classmethod
    def validate_rule(
        cls,
        data: Optional[Union[requests.RuleValidate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> RuleScriptErrors:
        """
        Validate Rule

        **Permission Required:** `kelvin.permission.rule.create`.

        ``validateRule``: ``POST`` ``/api/v4/rules/validate``

        Parameters
        ----------
        data: requests.RuleValidate, optional
        **kwargs:
            Extra parameters for requests.RuleValidate
              - script: str

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/rules/validate",
            {},
            {},
            {},
            {},
            data,
            requests.RuleValidate,
            False,
            {"200": RuleScriptErrors},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"rule_name": "name"})
    def delete_rule(
        self_or_cls, rule_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Rule

        **Permission Required:** `kelvin.permission.rule.delete`.

        ``deleteRule``: ``POST`` ``/api/v4/rules/{rule_name}/delete``

        Parameters
        ----------
        rule_name : :obj:`str`, optional
            Rule name

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/rules/{rule_name}/delete",
            {"rule_name": rule_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "409": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"rule_name": "name"})
    def get_rule(self_or_cls, rule_name: str, _dry_run: bool = False, _client: Any = None) -> Rule:
        """
        Get Rule

        **Permission Required:** `kelvin.permission.rule.read`.

        ``getRule``: ``GET`` ``/api/v4/rules/{rule_name}/get``

        Parameters
        ----------
        rule_name : :obj:`str`, optional
            Rule name

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/rules/{rule_name}/get",
            {"rule_name": rule_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": Rule,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"rule_name": "name"})
    def get_logs_rule(
        self_or_cls,
        rule_name: str,
        tail_lines: Optional[str] = None,
        since_time: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> RuleLogs:
        """
        Get Logs Rule

        **Permission Required:** `kelvin.permission.rule.read`.

        ``getLogsRule``: ``GET`` ``/api/v4/rules/{rule_name}/logs/get``

        Parameters
        ----------
        rule_name : :obj:`str`, optional
            Rule name
        tail_lines : :obj:`str`
            The number of lines from the end of the logs to show. Default: 500
        since_time : :obj:`str`
            A timestamp from which to show logs

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/rules/{rule_name}/logs/get",
            {"rule_name": rule_name},
            {"tail_lines": tail_lines, "since_time": since_time},
            {},
            {},
            None,
            None,
            False,
            {
                "200": RuleLogs,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "409": errors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"rule_name": "name"})
    def update_rule(
        self_or_cls,
        rule_name: str,
        data: Optional[Union[requests.RuleUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Rule:
        """
        Update Rule

        **Permission Required:** `kelvin.permission.rule.update`.

        ``updateRule``: ``POST`` ``/api/v4/rules/{rule_name}/update``

        Parameters
        ----------
        rule_name : :obj:`str`, optional
            Rule name
        data: requests.RuleUpdate, optional
        **kwargs:
            Extra parameters for requests.RuleUpdate
              - draft: bool
              - enabled: bool
              - map_name: str
              - payload: str
              - target: str
              - title: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/rules/{rule_name}/update",
            {"rule_name": rule_name},
            {},
            {},
            {},
            data,
            requests.RuleUpdate,
            False,
            {
                "200": Rule,
                "400": errors.ErrorMessage,
                "401": errors.ErrorMessage,
                "404": errors.ErrorMessage,
                "409": errors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class RulesListPaginated(PaginatorDataModel[Rule]):
    """
    RulesListPaginated object.

    Parameters
    ----------
    data: Optional[List[Rule]]
    pagination: Optional[pagination.Pagination]

    """

    data: Optional[List[Rule]] = None
    pagination: Optional[pagination.Pagination] = None


class AssetTemplate(DataModelBase):
    """
    AssetTemplate object.

    Parameters
    ----------
    asset_class_name: Optional[str]
    asset_class_title: Optional[str]
    asset_type_name: Optional[str]
    asset_type_title: Optional[str]
    created: Optional[datetime]
    description: Optional[str]
    entity_type_name: Optional[str]
    entity_type_title: Optional[str]
    failure_detection: Optional[FailureDetection]
    hierarchy: Optional[List[AssetTemplateHierarchy]]
    hints: Optional[Dict[str, Any]]
    image_url: Optional[str]
    metrics: Optional[List[AssetMetricItem]]
    name: Optional[str]
    owner: Optional[str]
    properties: Optional[List[AssetTemplateProperties]]
    title: Optional[str]
    updated: Optional[datetime]
    visualization: Optional[Visualization]

    """

    asset_class_name: Optional[str] = Field(
        None,
        description='The name (not the Display Name / Title) of the default <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> that will be selected.</p> This can be changed by the user when adding the Kelvin Template as a new <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    asset_class_title: Optional[str] = Field(
        None,
        description='The Display Name (Title) of the default <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> that will be selected.</p> This can be changed by the user when adding the Kelvin Template as a new <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    asset_type_name: Optional[str] = Field(
        None,
        description='The name (not the Display Name / Title) of the default <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> that will be selected.</p> This can be changed by the user when adding the Kelvin Template as a new <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    asset_type_title: Optional[str] = Field(
        None,
        description='The Display Name (Title) of the default <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-type" target="_blank">Kelvin Asset Type</a> that will be selected.</p> This can be changed by the user when adding the Kelvin Template as a new <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">Kelvin Asset</a>.',
    )
    created: Optional[datetime] = Field(
        None,
        description='Time of creation of this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )
    description: Optional[str] = Field(
        None,
        description='Detailed description of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Template</a>',
    )
    entity_type_name: Optional[str] = Field(
        None,
        description='Entity type name that is linked to this new Kelvin Template.</p> There are 5 entity type options available to choose from; `group`, `asset`, `component`, `part` and `sensor`.</p> Detailed information about the asset hierarchy and function of each entity type can be found at <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/</a>.',
    )
    entity_type_title: Optional[str] = Field(
        None,
        description='Entity type display name (title) that is linked to this new Kelvin Template.</p> There are 5 entity type options available to choose from; `Group`, `Asset`, `Component`, `Part` and `Sensor`.</p> Detailed information about the asset hierarchy and function of each entity type can be found at <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/" target="_blank">https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/</a>.',
    )
    failure_detection: Optional[FailureDetection] = None
    hierarchy: Optional[List[AssetTemplateHierarchy]] = Field(
        None,
        description="Full details of all <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Assets</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a> in the Kelvin Template <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a>.",
    )
    hints: Optional[Dict[str, Any]] = Field(
        None, description="Unused. This is reserved as a future feature."
    )
    image_url: Optional[str] = Field(
        None,
        description="A http(s) URL link to an image to visually display your template picture next to the description.</p> The file can be in any web-compatible format including jpg, png, gif, animated gif and apng. Even though any size is allowed as it will be automatically resized, it is advised to keep it below 400 x 400 px.</p> If the link is behind a secure login, all login or token details must be incorporated into the URL here.",
    )
    metrics: Optional[List[AssetMetricItem]] = Field(
        None, description="Unused. This is reserved as a future feature."
    )
    name: Optional[str] = Field(
        None,
        description='Unique identifier name of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Template</a>.',
    )
    owner: Optional[str] = Field(
        None,
        description='Who created the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Template</a>. There are two types of owners; custom (any user) or kelvin (core <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Template</a>).',
    )
    properties: Optional[List[AssetTemplateProperties]] = Field(
        None,
        description="List of optional properties for the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>.</p> This is not used within the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a> and is available for use by authorized applications to store and retrieve custom properties for each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>.</p> This can be changed by the user when adding the <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin Template</a> as a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Asset</a>.",
    )
    title: Optional[str] = Field(
        None,
        description='Display name (title) of the <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Template</a>.',
    )
    updated: Optional[datetime] = Field(
        None,
        description='Time of modifying any variable of this <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-class" target="_blank">Kelvin Asset Class</a> in ISO 8601 UTC date/time format. Example; "2022-07-08T08:41:01.657916Z".',
    )
    visualization: Optional[Visualization] = None

    @instance_classmethod
    @DataModelBase.translate()
    def create_asset_template(
        self_or_cls,
        data: Optional[Union[requests.AssetTemplateCreate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTemplate:
        """
        Create Asset Template

        Create a custom <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/asset-groups' target='_blank'>Kelvin Group</a> or <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a> template with a full <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> of <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset' target='_blank'>Kelvin Assets</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#component' target='_blank'>Kelvin Components</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#part' target='_blank'>Kelvin Parts</a> and <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#sensor' target='_blank'>Kelvin Sensors</a>.

        For each <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin Asset</a>, this template can also create all the parameters for <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-ai-failure-detection/' target='_blank'>Kelvin Failure Detection AI</a>, <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-metrics/' target='_blank'>Kelvin Metrics</a> and visualization information for <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-maps/' target='_blank'>Kelvin Maps</a>

        **Permission Required:** `kelvin.permission.asset.create`.

        ``createAssetTemplate``: ``POST`` ``/api/v4/assets/templates/create``

        Parameters
        ----------
        data: requests.AssetTemplateCreate, optional
        **kwargs:
            Extra parameters for requests.AssetTemplateCreate
              - asset_type_name: str
              - description: str
              - entity_type_name: str
              - failure_detection: str
              - hierarchy: list
              - hints: dict
              - image_url: str
              - metrics: list
              - name: str
              - properties: list
              - title: str
              - visualization: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/templates/create",
            {},
            {},
            {},
            {},
            data,
            requests.AssetTemplateCreate,
            False,
            {"201": AssetTemplate, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_asset_template(
        cls,
        search: Optional[Sequence[str]] = None,
        page_size: Optional[int] = 1000,
        starting_after: Optional[str] = None,
        ending_before: Optional[str] = None,
        sort_by: Optional[str] = None,
        sort_asc: Optional[bool] = None,
        asset_type_names: Optional[Sequence[str]] = None,
        entity_type_names: Optional[Sequence[str]] = None,
        asset_class_names: Optional[Sequence[str]] = None,
        owner: Optional[str] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AssetTemplateItem], AssetTemplateListPaginated]:
        """
        List Asset Template

        Returns a dictionary with a data property containing a filtered array of all <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Templates</a> objects on the <a href='https://docs.kelvininc.com/latest/kelvin-overview/overview/#kelvin-platform' target='_blank'>Kelvin Platform</a>.

        **Pagination Sortable Columns:** `asset_template.name`, `asset_template.title`, `asset_template.created`, `asset_template.updated`, `asset_template.asset_type_name`, `asset_template.device_type_name`

        **Permission Required:** `kelvin.permission.asset.read`.

        ``listAssetTemplate``: ``GET`` ``/api/v4/assets/templates/list``

        Parameters
        ----------
        search : :obj:`Sequence[str]`
            Search and filter the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Templates</a> list. Both the Display Name and the Name will be
            included in the search field criteria. This is given as an array, for
            example `[pump,fan]`.</p> The search is case insensitive and will find
            partial matches as well. For example if a Kelvin Asset Type name is
            `centrifugal_pump`, then a match will be made if the search string is
            `pum` or `FUGaL`.
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#kelvin-templates'
            target='_blank'>Kelvin Template</a> objects to be returned. Page size
            can be between 1 and 1000 objects.</p> The default is 20 Kelvin
            Template objects.
        starting_after : :obj:`str`
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Templates</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        ending_before : :obj:`str`
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Templates</a> in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        sort_by : :obj:`str`
            Sort the results by one of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> parameters. Only one parameter can be selected.</p> There
            are six parameter options; `asset_template.name`,
            `asset_template.title`, `asset_template.created`,
            `asset_template.updated`, `asset_template.asset_type_name` and
            `asset_template.device_type_name`.</p> The default is
            `asset_template.name`
        sort_asc : :obj:`bool`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `true` (ascending order) and
            `false` (descending order).</p> The default is `true` (ascending).
        asset_type_names : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-type' target='_blank'>Kelvin Asset
            Type</a> by its name. This is given as an array, for example
            `[pump,fan]`.</p> The search is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end). For example a search with `[pump,fan]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        entity_type_names : :obj:`Sequence[str]`
            Filter and return the results of one or more of the entity type names.
            This is given as an array, for example `[group,asset]`. Prefix any
            entity type name with the character `!` for a NOT operation.</p> There
            are five entity type names available to choose from; `group`, `asset`,
            `component`, `part`, `sensor`.</p> The default will select all
            available entity type name options.</p>
        asset_class_names : :obj:`Sequence[str]`
            Filter on the parameter <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> by its name. This is given as an array, for example
            `[pump,fan]`.</p> The search is done on the full name only according
            to unique identifier name rules (Must contain only lowercase
            alphanumeric characters. The `.`, `_` and `-` characters are also
            allowed to separate words instead of a space but not at the beginning
            or end). For example a search with `[pump,fan]` will return <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#asset-class' target='_blank'>Kelvin Asset
            Class</a> with the name `pump` but not with the names `pumps` or
            `centrifugal-fan`.
        owner : :obj:`str`
            Filter <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/#kelvin-templates'
            target='_blank'>Kelvin Templates</a> by owner.</p> There are two types
            of owners; `custom` (any user) or `kelvin` (core kelvin).

        """

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/assets/templates/list",
            {},
            {
                "search": search,
                "page_size": page_size,
                "starting_after": starting_after,
                "ending_before": ending_before,
                "sort_by": sort_by,
                "sort_asc": sort_asc,
                "asset_type_names": asset_type_names,
                "entity_type_names": entity_type_names,
                "asset_class_names": asset_class_names,
                "owner": owner,
            },
            {},
            {},
            None,
            None,
            False,
            {"200": AssetTemplateListPaginated, "400": ErrorMessages, "401": ErrorMessages},
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/assets/templates/list", "GET")
            if fetch and not _dry_run
            else result
        )

    @instance_classmethod
    @DataModelBase.translate({"asset_template_name": "name"})
    def delete_asset_template(
        self_or_cls, asset_template_name: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Asset Template

        Permanently delete an existing <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin Template</a>. This cannot be undone once the API request has been submitted.

        **Permission Required:** `kelvin.permission.asset.delete`.

        ``deleteAssetTemplate``: ``POST`` ``/api/v4/assets/templates/{asset_template_name}/delete``

        Parameters
        ----------
        asset_template_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> name to retrieve.</p> This is the unique identifier name
            and not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a>.

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/templates/{asset_template_name}/delete",
            {"asset_template_name": asset_template_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": None,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "403": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_template_name": "name"})
    def get_asset_template(
        self_or_cls, asset_template_name: str, _dry_run: bool = False, _client: Any = None
    ) -> AssetTemplate:
        """
        Get Asset Template

        Retrieves the properties of a <a href="https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#kelvin-templates" target="_blank">Kelvin Template</a>.

        **Permission Required:** `kelvin.permission.asset.read`.

        ``getAssetTemplate``: ``GET`` ``/api/v4/assets/templates/{asset_template_name}/get``

        Parameters
        ----------
        asset_template_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> name to retrieve.</p> This is the unique identifier name
            and not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a>.</p> This must contain only lowercase alphanumeric
            characters. The `.`, `_` and `-` characters are also allowed to
            separate words instead of a space BUT can not be at the beginning or
            end of the name.

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/assets/templates/{asset_template_name}/get",
            {"asset_template_name": asset_template_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AssetTemplate,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"asset_template_name": "name"})
    def update_asset_template(
        self_or_cls,
        asset_template_name: str,
        data: Optional[Union[requests.AssetTemplateUpdate, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> AssetTemplate:
        """
        Update Asset Template

        Updates an existing Kelvin Template with any new values passed through the body parameters.</p> All body parameters are optional and if not provided will remain unchanged.

        Only the unique identifier name can not be changed. If you need to change this parameter, then you will need to make a new Kelvin Template with a new <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-platform/kelvin-assets/#asset-hierarchy' target='_blank'>hierarchy</a> (Hint: To avoid having to type everything in again, you can get the current JSON structure of the Kelvin Template from /assets/templates/{asset_template_name}/get API and then use this as the foundation for a new Kelvin Template).

        **Permission Required:** `kelvin.permission.asset.update`.

        ``updateAssetTemplate``: ``POST`` ``/api/v4/assets/templates/{asset_template_name}/update``

        Parameters
        ----------
        asset_template_name : :obj:`str`, optional
            <a href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a> name to retrieve.</p> This is the unique identifier name
            and not the display name (title) of the <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/#kelvin-templates' target='_blank'>Kelvin
            Template</a>.
        data: requests.AssetTemplateUpdate, optional
        **kwargs:
            Extra parameters for requests.AssetTemplateUpdate
              - asset_type_name: str
              - description: str
              - entity_type_name: str
              - failure_detection: str
              - hierarchy: list
              - hints: dict
              - image_url: str
              - metrics: list
              - properties: list
              - title: str
              - visualization: str

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/assets/templates/{asset_template_name}/update",
            {"asset_template_name": asset_template_name},
            {},
            {},
            {},
            data,
            requests.AssetTemplateUpdate,
            False,
            {
                "200": AssetTemplate,
                "400": ErrorMessages,
                "401": ErrorMessages,
                "404": ErrorMessages,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result


class Reply(DataModelBase):
    """
    Reply object.

    Parameters
    ----------
    content: Optional[ThreadContent]
    created: Optional[datetime]
    id: Optional[str]
    updated: Optional[datetime]
    user_id: Optional[str]

    """

    content: Optional[ThreadContent] = None
    created: Optional[datetime] = None
    id: Optional[str] = None
    updated: Optional[datetime] = None
    user_id: Optional[str] = None


class Thread(DataModelBase):
    """
    Thread object.

    Parameters
    ----------
    content: Optional[ThreadContent]
    created: Optional[datetime]
    follows: Optional[Dict[str, UserFollow]]
    id: Optional[str]
    related_to: Optional[str]
    type: Optional[str]
    updated: Optional[datetime]
    user_id: Optional[str]

    """

    content: Optional[ThreadContent] = None
    created: Optional[datetime] = None
    follows: Optional[Dict[str, UserFollow]] = None
    id: Optional[str] = None
    related_to: Optional[str] = None
    type: Optional[str] = None
    updated: Optional[datetime] = None
    user_id: Optional[str] = None

    @classmethod
    def create_thread(
        cls, body: str, file: Optional[str] = None, _dry_run: bool = False, _client: Any = None
    ) -> List[Thread]:
        """
        Create Thread

        **Permission Required:** `kelvin.permission.thread.create`.

        ``createThread``: ``POST`` ``/api/v4/threads/create``

        Parameters
        ----------
        body : :obj:`str`, optional
            requests.ThreadCreate schema
        file : :obj:`str`
            Attachment

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/threads/create",
            {},
            {},
            {"body": body, "file": file},
            {},
            None,
            None,
            False,
            {"201": List[Thread], "400": errors.ErrorMessage, "401": errors.ErrorMessage},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate()
    def list_threads(
        self_or_cls,
        type: Optional[str] = None,
        related_to: Optional[str] = None,
        user_id: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> List[Thread]:
        """
        List Threads

        **Pagination Sortable Columns:** `thread.id`

        **Permission Required:** `kelvin.permission.thread.read`.

        ``listThreads``: ``GET`` ``/api/v4/threads/list``

        Parameters
        ----------
        type : :obj:`str`
            Filter threads by type
        related_to : :obj:`str`
            Filter threads by related_to
        user_id : :obj:`str`
            Filter threads by user_id

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/threads/list",
            {},
            {"type": type, "related_to": related_to, "user_id": user_id},
            {},
            {},
            None,
            None,
            False,
            {"200": List[Thread], "400": errors.ErrorMessage, "401": errors.ErrorMessage},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"thread_id": "id"})
    def delete_thread(
        self_or_cls, thread_id: str, _dry_run: bool = False, _client: Any = None
    ) -> None:
        """
        Delete Thread

        **Permission Required:** `kelvin.permission.thread.delete`.

        ``deleteThread``: ``POST`` ``/api/v4/threads/{thread_id}/delete``

        Parameters
        ----------
        thread_id : :obj:`str`, optional
            Thread ID

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/threads/{thread_id}/delete",
            {"thread_id": thread_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": None, "400": errors.ErrorMessage, "403": errors.ErrorMessage},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"thread_id": "id"})
    def update_thread_follow(
        self_or_cls,
        thread_id: str,
        follow: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> List[Thread]:
        """
        Update Thread Follow

        **Permission Required:** `kelvin.permission.thread.read`.

        ``updateThreadFollow``: ``POST`` ``/api/v4/threads/{thread_id}/follow/update``

        Parameters
        ----------
        thread_id : :obj:`str`, optional
            Thread ID
        follow : :obj:`bool`
            Set user follow value to true or false

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/threads/{thread_id}/follow/update",
            {"thread_id": thread_id},
            {"follow": follow},
            {},
            {},
            None,
            None,
            False,
            {"200": List[Thread], "404": errors.ErrorMessage},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"thread_id": "id"})
    def get_thread(
        self_or_cls, thread_id: str, _dry_run: bool = False, _client: Any = None
    ) -> List[Thread]:
        """
        Get Thread

        **Permission Required:** `kelvin.permission.thread.read`.

        ``getThread``: ``GET`` ``/api/v4/threads/{thread_id}/get``

        Parameters
        ----------
        thread_id : :obj:`str`, optional
            Thread ID

        """

        result = self_or_cls._make_request(
            _client,
            "get",
            "/api/v4/threads/{thread_id}/get",
            {"thread_id": thread_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": List[Thread], "404": errors.ErrorMessage},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"thread_id": "id"})
    def create_thread_reply(
        self_or_cls,
        thread_id: str,
        body: str,
        reply_id: Optional[str] = None,
        file: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> List[Thread]:
        """
        Create Thread Reply

        **Permission Required:** `kelvin.permission.thread.create`.

        ``createThreadReply``: ``POST`` ``/api/v4/threads/{thread_id}/replies/create``

        Parameters
        ----------
        thread_id : :obj:`str`, optional
            Thread ID
        body : :obj:`str`, optional
            requests.ThreadReplyCreate schema
        reply_id : :obj:`str`
            Reply ID
        file : :obj:`str`
            Attachment

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/threads/{thread_id}/replies/create",
            {"thread_id": thread_id},
            {"reply_id": reply_id},
            {"body": body, "file": file},
            {},
            None,
            None,
            False,
            {"200": List[Thread], "400": errors.ErrorMessage, "401": errors.ErrorMessage},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"thread_id": "id"})
    def delete_thread_reply(
        self_or_cls, thread_id: str, reply_id: str, _dry_run: bool = False, _client: Any = None
    ) -> List[Thread]:
        """
        Delete Thread Reply

        **Permission Required:** `kelvin.permission.thread.delete`.

        ``deleteThreadReply``: ``POST`` ``/api/v4/threads/{thread_id}/replies/{reply_id}/delete``

        Parameters
        ----------
        thread_id : :obj:`str`, optional
            Thread ID
        reply_id : :obj:`str`, optional
            Reply ID

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/threads/{thread_id}/replies/{reply_id}/delete",
            {"thread_id": thread_id, "reply_id": reply_id},
            {},
            {},
            {},
            None,
            None,
            False,
            {"200": List[Thread], "400": errors.ErrorMessage, "401": errors.ErrorMessage},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"thread_id": "id"})
    def update_thread_reply(
        self_or_cls,
        thread_id: str,
        reply_id: str,
        body: str,
        file: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> List[Thread]:
        """
        Update Thread Reply

        **Permission Required:** `kelvin.permission.thread.update`.

        ``updateThreadReply``: ``POST`` ``/api/v4/threads/{thread_id}/replies/{reply_id}/update``

        Parameters
        ----------
        thread_id : :obj:`str`, optional
            Thread ID
        reply_id : :obj:`str`, optional
            Reply ID
        body : :obj:`str`, optional
            requests.ThreadReplyUpdate schema
        file : :obj:`str`
            Attachment

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/threads/{thread_id}/replies/{reply_id}/update",
            {"thread_id": thread_id, "reply_id": reply_id},
            {},
            {"body": body, "file": file},
            {},
            None,
            None,
            False,
            {"200": List[Thread], "400": errors.ErrorMessage, "401": errors.ErrorMessage},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"thread_id": "id"})
    def update_thread_seen(
        self_or_cls,
        thread_id: str,
        seen: Optional[bool] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> List[Thread]:
        """
        Update Thread Seen

        **Permission Required:** `kelvin.permission.thread.read`.

        ``updateThreadSeen``: ``POST`` ``/api/v4/threads/{thread_id}/seen/update``

        Parameters
        ----------
        thread_id : :obj:`str`, optional
            Thread ID
        seen : :obj:`bool`
            Set user seen value to true or false

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/threads/{thread_id}/seen/update",
            {"thread_id": thread_id},
            {"seen": seen},
            {},
            {},
            None,
            None,
            False,
            {"200": List[Thread], "404": errors.ErrorMessage},
            False,
            _dry_run,
        )
        return result

    @instance_classmethod
    @DataModelBase.translate({"thread_id": "id"})
    def update_thread(
        self_or_cls,
        thread_id: str,
        body: str,
        file: Optional[str] = None,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> List[Thread]:
        """
        Update Thread

        **Permission Required:** `kelvin.permission.thread.update`.

        ``updateThread``: ``POST`` ``/api/v4/threads/{thread_id}/update``

        Parameters
        ----------
        thread_id : :obj:`str`, optional
            Thread ID
        body : :obj:`str`, optional
            requests.ThreadUpdate schema
        file : :obj:`str`
            Attachment

        """

        result = self_or_cls._make_request(
            _client,
            "post",
            "/api/v4/threads/{thread_id}/update",
            {"thread_id": thread_id},
            {},
            {"body": body, "file": file},
            {},
            None,
            None,
            False,
            {"200": List[Thread], "400": errors.ErrorMessage, "401": errors.ErrorMessage},
            False,
            _dry_run,
        )
        return result


class ThreadContent(DataModelBase):
    """
    ThreadContent object.

    Parameters
    ----------
    attachments: Optional[List[Attachment]]
    mentions: Optional[List[str]]
    replies: Optional[List[Reply]]
    text: Optional[str]

    """

    attachments: Optional[List[Attachment]] = None
    mentions: Optional[List[str]] = None
    replies: Optional[List[Reply]] = None
    text: Optional[str] = None


FailureAnalysisThresholdsUpsert.update_forward_refs()
AssetHierarchyItem.update_forward_refs()
Asset.update_forward_refs()
AssetTemplateHierarchy.update_forward_refs()
Reply.update_forward_refs()
Thread.update_forward_refs()
