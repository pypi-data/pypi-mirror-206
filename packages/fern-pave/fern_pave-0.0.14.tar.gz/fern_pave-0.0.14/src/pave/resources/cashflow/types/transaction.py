# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .fee_tag import FeeTag


class Transaction(pydantic.BaseModel):
    pave_transaction_id: str = pydantic.Field(description=("Unique identifier of the transaction provided by Pave.\n"))
    transaction_id: str = pydantic.Field(description=("Unique identifier of the transaction provided by the source.\n"))
    name: str = pydantic.Field(description=("Name of the merchant for the transaction.\n"))
    date: dt.date = pydantic.Field(description=("Date for the transaction in YYYY-MM-DD format.\n"))
    amount: float = pydantic.Field(description=("Amount of the transaction.\n"))
    triggered_fee: typing.Optional[FeeTag] = pydantic.Field(description=("Type of fee triggered by the transaction.\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
