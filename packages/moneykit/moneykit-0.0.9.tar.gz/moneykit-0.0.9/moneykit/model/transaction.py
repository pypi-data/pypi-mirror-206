# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from moneykit import schemas  # noqa: F401


class Transaction(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "date",
            "transaction_id",
            "amount",
            "account_id",
            "pending",
            "currency",
            "type",
        }

        class properties:
            transaction_id = schemas.StrSchema
            account_id = schemas.StrSchema
            amount = schemas.StrSchema

            class type(
                schemas.ComposedSchema,
            ):
                class MetaOapg:
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TransactionType,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "type":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            currency = schemas.StrSchema
            date = schemas.DateSchema
            pending = schemas.BoolSchema

            class description(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "description":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            class raw_description(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "raw_description":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            class category(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "category":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            __annotations__ = {
                "transaction_id": transaction_id,
                "account_id": account_id,
                "amount": amount,
                "type": type,
                "currency": currency,
                "date": date,
                "pending": pending,
                "description": description,
                "raw_description": raw_description,
                "category": category,
            }

    date: MetaOapg.properties.date
    transaction_id: MetaOapg.properties.transaction_id
    amount: MetaOapg.properties.amount
    account_id: MetaOapg.properties.account_id
    pending: MetaOapg.properties.pending
    currency: MetaOapg.properties.currency
    type: MetaOapg.properties.type

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pending"]) -> MetaOapg.properties.pending:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["raw_description"]) -> MetaOapg.properties.raw_description:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "transaction_id",
                "account_id",
                "amount",
                "type",
                "currency",
                "date",
                "pending",
                "description",
                "raw_description",
                "category",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pending"]) -> MetaOapg.properties.pending:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["description"]
    ) -> typing.Union[MetaOapg.properties.description, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["raw_description"]
    ) -> typing.Union[MetaOapg.properties.raw_description, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["category"]
    ) -> typing.Union[MetaOapg.properties.category, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "transaction_id",
                "account_id",
                "amount",
                "type",
                "currency",
                "date",
                "pending",
                "description",
                "raw_description",
                "category",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        date: typing.Union[
            MetaOapg.properties.date,
            str,
            date,
        ],
        transaction_id: typing.Union[
            MetaOapg.properties.transaction_id,
            str,
        ],
        amount: typing.Union[
            MetaOapg.properties.amount,
            str,
        ],
        account_id: typing.Union[
            MetaOapg.properties.account_id,
            str,
        ],
        pending: typing.Union[
            MetaOapg.properties.pending,
            bool,
        ],
        currency: typing.Union[
            MetaOapg.properties.currency,
            str,
        ],
        type: typing.Union[
            MetaOapg.properties.type,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader,
        ],
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        raw_description: typing.Union[MetaOapg.properties.raw_description, None, str, schemas.Unset] = schemas.unset,
        category: typing.Union[MetaOapg.properties.category, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "Transaction":
        return super().__new__(
            cls,
            *_args,
            date=date,
            transaction_id=transaction_id,
            amount=amount,
            account_id=account_id,
            pending=pending,
            currency=currency,
            type=type,
            description=description,
            raw_description=raw_description,
            category=category,
            _configuration=_configuration,
            **kwargs,
        )


from moneykit.model.transaction_type import TransactionType
