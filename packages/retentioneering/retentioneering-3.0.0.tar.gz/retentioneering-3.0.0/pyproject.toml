[tool.poetry]
name = "retentioneering"
version = "3.0.0"
description = "universal framework for data processing"
authors = ["Retentioneering User Trajectory Analysis Lab <you@example.com>"]
packages = [
    { include = "retentioneering"}
]

[[tool.poetry.source]]
name = "main"
url = "https://pypi.python.org/simple"

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
virtualenv = ">=20.17"
numpy = ">=1.21.5,<1.24"
pandas = "^1.5.0"
jupyterlab = "^3.4.7"
notebook = "6.4.8"
pandas-stubs = "^1.4.4"
pydantic = "^1.10.2"
networkx = "^2.8.6"
plotly = "^5.10.0"
seaborn = "^0.12.1"
umap-learn = "^0.5.3"
statsmodels = "0.14.0rc0"
scipy = "1.10.1"
ipywidgets = "8.0.4"

[tool.poetry.group.dev.dependencies]
poetry-dynamic-versioning = "^0.21.4"
pre-commit = "^2.20.0"
poetry = "^1.2.1"
pytest = "^7.1.3"
tox-poetry = "^0.4.1"
mypy = "^0.971"
types-requests = "^2.28.11.16"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = false
vcs = "git"
format-jinja = "{{ serialize_pep440(base, stage, revision) }}"

[tool.poetry-dynamic-versioning.substitution]
files = ["retentioneering/__version__.py"]

[tool.black]
line-length = 120

[tool.pyright]
useLibraryCodeForTypes = false
typeCheckingMode = 'basic'
stubPath = './typings'
exclude = [
    '**/__init__.py',
    './typings',
    './examples',
    './.tox',
    './tests',
    './examples',
    './venv'
    ]
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
strictParameterNoneValue = true
reportUntypedFunctionDecorator = "error"
reportUntypedClassDecorator = "error"
reportUntypedBaseClass = "error"
reportUnusedClass = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportUnnecessaryIsInstance = "error"
reportImportCycles = "error"
reportDuplicateImport = "error"

[tool.pytest.ini_options]
addopts = "-rfs"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestExperimentalApiWarning",
    "ignore::FutureWarning",
    "ignore::UserWarning",
#    "ignore::pandas.errors.SettingWithCopyWarning",
]
