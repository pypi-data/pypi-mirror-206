# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
import uuid

import pydantic

from ....core.datetime_utils import serialize_datetime
from .fee_tag import FeeTag
from .transaction import Transaction


class DetailedFinancialHealthSummary(pydantic.BaseModel):
    pave_uuid: uuid.UUID = pydantic.Field(description=("Unique identifier of the fee assigned by the Pave API.\n"))
    pave_name: str = pydantic.Field(description=("Fee name assigned by the Pave API.\n"))
    last_description: str = pydantic.Field(description=("The last transaction description given by the data source.\n"))
    last_date: dt.date = pydantic.Field(description=("Date of the last transaction.\n"))
    last_amount: float = pydantic.Field(description=("Amount of the last transaction.\n"))
    iso_currency_code: str = pydantic.Field(description=("ISO 4217 Compliant currency code.\n"))
    count: int = pydantic.Field(description=("The number of times this fee has occurred.\n"))
    avg_amount: float = pydantic.Field(description=("Average amount of the fee.\n"))
    total_amount: float = pydantic.Field(description=("Total amount of the fee.\n"))
    transactions: typing.List[Transaction] = pydantic.Field(description=("Array of individual transactions\n"))
    tags: typing.List[FeeTag] = pydantic.Field(description=("List of grouped fee tags\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
