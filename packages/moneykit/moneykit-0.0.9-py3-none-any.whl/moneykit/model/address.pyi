# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from moneykit import schemas  # noqa: F401

class Address(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        class properties:
            class city(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "city":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            class country(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "country":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            class postal_code(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "postal_code":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            class region(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "region":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            class street(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "street":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            primary = schemas.BoolSchema
            __annotations__ = {
                "city": city,
                "country": country,
                "postal_code": postal_code,
                "region": region,
                "street": street,
                "primary": primary,
            }
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["street"]) -> MetaOapg.properties.street: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary"]) -> MetaOapg.properties.primary: ...
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "city",
                "country",
                "postal_code",
                "region",
                "street",
                "primary",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["city"]
    ) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["country"]
    ) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["postal_code"]
    ) -> typing.Union[MetaOapg.properties.postal_code, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["region"]
    ) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["street"]
    ) -> typing.Union[MetaOapg.properties.street, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["primary"]
    ) -> typing.Union[MetaOapg.properties.primary, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "city",
                "country",
                "postal_code",
                "region",
                "street",
                "primary",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)
    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        city: typing.Union[MetaOapg.properties.city, None, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, None, str, schemas.Unset] = schemas.unset,
        postal_code: typing.Union[MetaOapg.properties.postal_code, None, str, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, None, str, schemas.Unset] = schemas.unset,
        street: typing.Union[MetaOapg.properties.street, None, str, schemas.Unset] = schemas.unset,
        primary: typing.Union[MetaOapg.properties.primary, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "Address":
        return super().__new__(
            cls,
            *_args,
            city=city,
            country=country,
            postal_code=postal_code,
            region=region,
            street=street,
            primary=primary,
            _configuration=_configuration,
            **kwargs,
        )
