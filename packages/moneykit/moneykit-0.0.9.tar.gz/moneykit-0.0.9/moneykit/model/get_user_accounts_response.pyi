# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from moneykit import schemas  # noqa: F401

class GetUserAccountsResponse(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "links",
        }

        class properties:
            class links(schemas.DictSchema):
                class MetaOapg:
                    @staticmethod
                    def additional_properties() -> typing.Type["AccountGroup"]:
                        return AccountGroup
                def __getitem__(self, name: typing.Union[str,]) -> "AccountGroup":
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                def get_item_oapg(self, name: typing.Union[str,]) -> "AccountGroup":
                    return super().get_item_oapg(name)
                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: "AccountGroup",
                ) -> "links":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "links": links,
            }
    links: MetaOapg.properties.links

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["links",], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["links",], str]):
        return super().get_item_oapg(name)
    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        links: typing.Union[
            MetaOapg.properties.links,
            dict,
            frozendict.frozendict,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "GetUserAccountsResponse":
        return super().__new__(
            cls,
            *_args,
            links=links,
            _configuration=_configuration,
            **kwargs,
        )

from moneykit.model.account_group import AccountGroup
