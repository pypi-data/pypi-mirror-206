# coding: utf-8

"""
    Event Ingestion API

    Event Ingestion API for DataKitchenâ€™s DataOps Observability  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@datakitchen.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomEventApiSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pipeline_key': 'str',
        'data': 'object',
        'event_timestamp': 'datetime',
        'metadata': 'object',
        'task_name': 'str',
        'external_url': 'str',
        'task_key': 'str',
        'run_key': 'str',
        'pipeline_name': 'str'
    }

    attribute_map = {
        'pipeline_key': 'pipeline_key',
        'data': 'data',
        'event_timestamp': 'event_timestamp',
        'metadata': 'metadata',
        'task_name': 'task_name',
        'external_url': 'external_url',
        'task_key': 'task_key',
        'run_key': 'run_key',
        'pipeline_name': 'pipeline_name'
    }

    def __init__(self, pipeline_key=None, data=None, event_timestamp=None, metadata=None, task_name=None, external_url=None, task_key=None, run_key=None, pipeline_name=None):  # noqa: E501
        """CustomEventApiSchema - a model defined in Swagger"""  # noqa: E501
        self._pipeline_key = None
        self._data = None
        self._event_timestamp = None
        self._metadata = None
        self._task_name = None
        self._external_url = None
        self._task_key = None
        self._run_key = None
        self._pipeline_name = None
        self.discriminator = None
        self.pipeline_key = pipeline_key
        self.data = data
        if event_timestamp is not None:
            self.event_timestamp = event_timestamp
        if metadata is not None:
            self.metadata = metadata
        if task_name is not None:
            self.task_name = task_name
        if external_url is not None:
            self.external_url = external_url
        if task_key is not None:
            self.task_key = task_key
        self.run_key = run_key
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name

    @property
    def pipeline_key(self):
        """Gets the pipeline_key of this CustomEventApiSchema.  # noqa: E501

        Required. The target pipeline for the event action.  # noqa: E501

        :return: The pipeline_key of this CustomEventApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_key

    @pipeline_key.setter
    def pipeline_key(self, pipeline_key):
        """Sets the pipeline_key of this CustomEventApiSchema.

        Required. The target pipeline for the event action.  # noqa: E501

        :param pipeline_key: The pipeline_key of this CustomEventApiSchema.  # noqa: E501
        :type: str
        """
        if pipeline_key is None:
            raise ValueError("Invalid value for `pipeline_key`, must not be `None`")  # noqa: E501

        self._pipeline_key = pipeline_key

    @property
    def data(self):
        """Gets the data of this CustomEventApiSchema.  # noqa: E501

        Arbitrary value. The user is responsible for validation of the data.  # noqa: E501

        :return: The data of this CustomEventApiSchema.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CustomEventApiSchema.

        Arbitrary value. The user is responsible for validation of the data.  # noqa: E501

        :param data: The data of this CustomEventApiSchema.  # noqa: E501
        :type: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def event_timestamp(self):
        """Gets the event_timestamp of this CustomEventApiSchema.  # noqa: E501

        An ISO8601 timestamp that describes when the event occurred. If no timezone is specified, UTC is assumed. If unset, the Event Ingestion API applies its current time to the field.  # noqa: E501

        :return: The event_timestamp of this CustomEventApiSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._event_timestamp

    @event_timestamp.setter
    def event_timestamp(self, event_timestamp):
        """Sets the event_timestamp of this CustomEventApiSchema.

        An ISO8601 timestamp that describes when the event occurred. If no timezone is specified, UTC is assumed. If unset, the Event Ingestion API applies its current time to the field.  # noqa: E501

        :param event_timestamp: The event_timestamp of this CustomEventApiSchema.  # noqa: E501
        :type: datetime
        """

        self._event_timestamp = event_timestamp

    @property
    def metadata(self):
        """Gets the metadata of this CustomEventApiSchema.  # noqa: E501

        Arbitrary key-value information, supplied by the user, to apply to the event.  # noqa: E501

        :return: The metadata of this CustomEventApiSchema.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CustomEventApiSchema.

        Arbitrary key-value information, supplied by the user, to apply to the event.  # noqa: E501

        :param metadata: The metadata of this CustomEventApiSchema.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def task_name(self):
        """Gets the task_name of this CustomEventApiSchema.  # noqa: E501

        Optional. A friendly name for identifying the task.  # noqa: E501

        :return: The task_name of this CustomEventApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this CustomEventApiSchema.

        Optional. A friendly name for identifying the task.  # noqa: E501

        :param task_name: The task_name of this CustomEventApiSchema.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def external_url(self):
        """Gets the external_url of this CustomEventApiSchema.  # noqa: E501

        A link to source information.  # noqa: E501

        :return: The external_url of this CustomEventApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this CustomEventApiSchema.

        A link to source information.  # noqa: E501

        :param external_url: The external_url of this CustomEventApiSchema.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def task_key(self):
        """Gets the task_key of this CustomEventApiSchema.  # noqa: E501

        Optional. The target task for the event action. Must be unique within a pipeline.  # noqa: E501

        :return: The task_key of this CustomEventApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._task_key

    @task_key.setter
    def task_key(self, task_key):
        """Sets the task_key of this CustomEventApiSchema.

        Optional. The target task for the event action. Must be unique within a pipeline.  # noqa: E501

        :param task_key: The task_key of this CustomEventApiSchema.  # noqa: E501
        :type: str
        """

        self._task_key = task_key

    @property
    def run_key(self):
        """Gets the run_key of this CustomEventApiSchema.  # noqa: E501

        Required. The identifier of the target run for the event action. This key is created and managed by the user.  # noqa: E501

        :return: The run_key of this CustomEventApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._run_key

    @run_key.setter
    def run_key(self, run_key):
        """Sets the run_key of this CustomEventApiSchema.

        Required. The identifier of the target run for the event action. This key is created and managed by the user.  # noqa: E501

        :param run_key: The run_key of this CustomEventApiSchema.  # noqa: E501
        :type: str
        """
        if run_key is None:
            raise ValueError("Invalid value for `run_key`, must not be `None`")  # noqa: E501

        self._run_key = run_key

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this CustomEventApiSchema.  # noqa: E501

        Optional. Human readable display value for a pipeline.  # noqa: E501

        :return: The pipeline_name of this CustomEventApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this CustomEventApiSchema.

        Optional. Human readable display value for a pipeline.  # noqa: E501

        :param pipeline_name: The pipeline_name of this CustomEventApiSchema.  # noqa: E501
        :type: str
        """

        self._pipeline_name = pipeline_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomEventApiSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomEventApiSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
