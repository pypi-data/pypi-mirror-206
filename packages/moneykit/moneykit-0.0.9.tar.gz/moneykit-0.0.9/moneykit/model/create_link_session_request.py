# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from moneykit import schemas  # noqa: F401


class CreateLinkSessionRequest(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "customer_user",
        }

        class properties:
            class customer_user(
                schemas.ComposedSchema,
            ):
                class MetaOapg:
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            LinkSessionCustomerUser,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "customer_user":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class settings(
                schemas.ComposedBase, schemas.DictBase, schemas.NoneBase, schemas.Schema, schemas.NoneFrozenDictMixin
            ):
                class MetaOapg:
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            LinkSessionSettingOverrides,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        None,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "settings":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class existing_link_id(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "existing_link_id":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            class redirect_uri(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                class MetaOapg:
                    format = "uri"
                    max_length = 65536
                    min_length = 1

                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "redirect_uri":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            class webhook(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                class MetaOapg:
                    format = "uri"
                    max_length = 65536
                    min_length = 1

                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "webhook":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            class link_tags(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    _arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "link_tags":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class moneylink_features(
                schemas.ComposedSchema,
            ):
                class MetaOapg:
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            MoneyLinkFeatures,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "moneylink_features":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            __annotations__ = {
                "customer_user": customer_user,
                "settings": settings,
                "existing_link_id": existing_link_id,
                "redirect_uri": redirect_uri,
                "webhook": webhook,
                "link_tags": link_tags,
                "moneylink_features": moneylink_features,
            }

    customer_user: MetaOapg.properties.customer_user

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer_user"]) -> MetaOapg.properties.customer_user:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> MetaOapg.properties.settings:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["existing_link_id"]) -> MetaOapg.properties.existing_link_id:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redirect_uri"]) -> MetaOapg.properties.redirect_uri:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook"]) -> MetaOapg.properties.webhook:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link_tags"]) -> MetaOapg.properties.link_tags:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["moneylink_features"]
    ) -> MetaOapg.properties.moneylink_features:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "customer_user",
                "settings",
                "existing_link_id",
                "redirect_uri",
                "webhook",
                "link_tags",
                "moneylink_features",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer_user"]) -> MetaOapg.properties.customer_user:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["settings"]
    ) -> typing.Union[MetaOapg.properties.settings, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["existing_link_id"]
    ) -> typing.Union[MetaOapg.properties.existing_link_id, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["redirect_uri"]
    ) -> typing.Union[MetaOapg.properties.redirect_uri, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["webhook"]
    ) -> typing.Union[MetaOapg.properties.webhook, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["link_tags"]
    ) -> typing.Union[MetaOapg.properties.link_tags, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["moneylink_features"]
    ) -> typing.Union[MetaOapg.properties.moneylink_features, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "customer_user",
                "settings",
                "existing_link_id",
                "redirect_uri",
                "webhook",
                "link_tags",
                "moneylink_features",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        customer_user: typing.Union[
            MetaOapg.properties.customer_user,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader,
        ],
        settings: typing.Union[
            MetaOapg.properties.settings, dict, frozendict.frozendict, None, schemas.Unset
        ] = schemas.unset,
        existing_link_id: typing.Union[MetaOapg.properties.existing_link_id, None, str, schemas.Unset] = schemas.unset,
        redirect_uri: typing.Union[MetaOapg.properties.redirect_uri, None, str, schemas.Unset] = schemas.unset,
        webhook: typing.Union[MetaOapg.properties.webhook, None, str, schemas.Unset] = schemas.unset,
        link_tags: typing.Union[MetaOapg.properties.link_tags, list, tuple, schemas.Unset] = schemas.unset,
        moneylink_features: typing.Union[
            MetaOapg.properties.moneylink_features,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader,
            schemas.Unset,
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "CreateLinkSessionRequest":
        return super().__new__(
            cls,
            *_args,
            customer_user=customer_user,
            settings=settings,
            existing_link_id=existing_link_id,
            redirect_uri=redirect_uri,
            webhook=webhook,
            link_tags=link_tags,
            moneylink_features=moneylink_features,
            _configuration=_configuration,
            **kwargs,
        )


from moneykit.model.link_session_customer_user import LinkSessionCustomerUser
from moneykit.model.link_session_setting_overrides import LinkSessionSettingOverrides
from moneykit.model.money_link_features import MoneyLinkFeatures
