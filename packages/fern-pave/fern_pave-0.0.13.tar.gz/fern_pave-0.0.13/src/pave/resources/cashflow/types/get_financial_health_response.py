# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .detailed_financial_health_summary import DetailedFinancialHealthSummary
from .top_level_financial_health_summary import TopLevelFinancialHealthSummary


class GetFinancialHealthResponse(pydantic.BaseModel):
    user_id: str = pydantic.Field(description=("The user ID for which the financial health was requested.\n"))
    from_: dt.date = pydantic.Field(
        alias="from", description=("The oldest transaction date on which the financial health was computed.\n")
    )
    to: dt.date = pydantic.Field(
        description=("The most recent transaction date on which the financial health was computed.\n")
    )
    top_level_summary: TopLevelFinancialHealthSummary = pydantic.Field(
        description=("Short summary of fees grouped by tag.\n")
    )
    detailed_summary: typing.List[DetailedFinancialHealthSummary] = pydantic.Field(
        description=("Detailed summary of fees grouped by pave_name\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
