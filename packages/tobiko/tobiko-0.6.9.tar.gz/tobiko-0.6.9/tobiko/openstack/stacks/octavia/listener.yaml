heat_template_version: newton

description: A Listener for a Load Balancer

parameters:
    lb_port:
        type: number
        default: 80
        description: Port used by the listener

    lb_protocol:
        type: string
        default: HTTP
        description: Public protocol exposed by the listener

    loadbalancer_id:
        type: string
        description: ID of the load balancer

    # Pool attributes
    lb_algorithm:
        type: string
        default: ROUND_ROBIN
        description: Load balancing algorithm

    pool_protocol:
        type: string
        default: HTTP
        description: Protocol used by the pool members

    # Health monitor parameters
    has_monitor:
        type: boolean
        description: whenever to create the health monitor
        default: true

    hm_delay:
        type: number
        default: 10
        description: >
            The minimum time in seconds between regular connections of the
            member.

    hm_max_retries:
        type: number
        default: 4
        description: >
            Number of permissible connection failures before changing the member
            status to INACTIVE.

    hm_timeout:
        type: number
        default: 3
        description: >
            Maximum number of seconds for a monitor to wait for a connection
            to be established before it times out.

    hm_type:
        type: string
        default: HTTP
        description: Type of health-monitor

    # Member attributes
    member_address:
        type: string
        description: The IP address of the member

    other_member_address:
        type: string
        description: The IP address of the member

    subnet_id:
        type: string
        description: the ID of the subnet used by member
        constraints:
        - custom_constraint: neutron.subnet

    application_port:
        type: number
        default: 80
        description: The port number of the member's application

conditions:
    has_monitor:
        get_param: has_monitor

resources:
    listener:
        type: OS::Octavia::Listener
        properties:
            loadbalancer: { get_param: loadbalancer_id }
            protocol: { get_param: lb_protocol }
            protocol_port: { get_param: lb_port }

    pool:
        type: OS::Octavia::Pool
        properties:
            lb_algorithm: { get_param: lb_algorithm }
            protocol: { get_param: pool_protocol }
            listener: { get_resource: listener }

    monitor:
        type: OS::Octavia::HealthMonitor
        condition: has_monitor
        properties:
            delay: { get_param: hm_delay }
            type: { get_param: hm_type }
            timeout: { get_param: hm_timeout }
            max_retries: { get_param: hm_max_retries }
            pool: { get_resource: pool }

    member:
        type: OS::Octavia::PoolMember
        properties:
            pool: { get_resource: pool }
            address: { get_param: member_address }
            subnet: { get_param: subnet_id }
            protocol_port: { get_param: application_port }

    other_member:
        type: OS::Octavia::PoolMember
        properties:
            pool: { get_resource: pool }
            address: { get_param: other_member_address }
            subnet: { get_param: subnet_id }
            protocol_port: { get_param: application_port }

outputs:
    listener_id:
        description: Listener ID
        value: { get_resource: listener }

    pool_id:
        description: Pool ID
        value: { get_resource: pool }

    monitor_id:
        description: Healthmonitor ID
        value: { get_resource: monitor }
        condition: has_monitor

    member_id:
        description: member ID
        value: { get_resource: member }

    other_member_id:
        description: member ID
        value: { get_resource: other_member }
