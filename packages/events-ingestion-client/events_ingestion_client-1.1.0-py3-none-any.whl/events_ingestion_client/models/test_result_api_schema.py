# coding: utf-8

"""
    Event Ingestion API

    Event Ingestion API for DataKitchenâ€™s DataOps Observability  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@datakitchen.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestResultApiSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pipeline_key': 'str',
        'test_results': 'list[TestReport]',
        'event_timestamp': 'datetime',
        'metadata': 'object',
        'task_name': 'str',
        'external_url': 'str',
        'test_suite': 'str',
        'task_key': 'str',
        'run_key': 'str',
        'pipeline_name': 'str'
    }

    attribute_map = {
        'pipeline_key': 'pipeline_key',
        'test_results': 'test_results',
        'event_timestamp': 'event_timestamp',
        'metadata': 'metadata',
        'task_name': 'task_name',
        'external_url': 'external_url',
        'test_suite': 'test_suite',
        'task_key': 'task_key',
        'run_key': 'run_key',
        'pipeline_name': 'pipeline_name'
    }

    def __init__(self, pipeline_key=None, test_results=None, event_timestamp=None, metadata=None, task_name=None, external_url=None, test_suite=None, task_key=None, run_key=None, pipeline_name=None):  # noqa: E501
        """TestResultApiSchema - a model defined in Swagger"""  # noqa: E501
        self._pipeline_key = None
        self._test_results = None
        self._event_timestamp = None
        self._metadata = None
        self._task_name = None
        self._external_url = None
        self._test_suite = None
        self._task_key = None
        self._run_key = None
        self._pipeline_name = None
        self.discriminator = None
        self.pipeline_key = pipeline_key
        self.test_results = test_results
        if event_timestamp is not None:
            self.event_timestamp = event_timestamp
        if metadata is not None:
            self.metadata = metadata
        if task_name is not None:
            self.task_name = task_name
        if external_url is not None:
            self.external_url = external_url
        self.test_suite = test_suite
        if task_key is not None:
            self.task_key = task_key
        self.run_key = run_key
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name

    @property
    def pipeline_key(self):
        """Gets the pipeline_key of this TestResultApiSchema.  # noqa: E501

        Required. The target pipeline for the event action.  # noqa: E501

        :return: The pipeline_key of this TestResultApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_key

    @pipeline_key.setter
    def pipeline_key(self, pipeline_key):
        """Sets the pipeline_key of this TestResultApiSchema.

        Required. The target pipeline for the event action.  # noqa: E501

        :param pipeline_key: The pipeline_key of this TestResultApiSchema.  # noqa: E501
        :type: str
        """
        if pipeline_key is None:
            raise ValueError("Invalid value for `pipeline_key`, must not be `None`")  # noqa: E501

        self._pipeline_key = pipeline_key

    @property
    def test_results(self):
        """Gets the test_results of this TestResultApiSchema.  # noqa: E501

        Required. A list of objects, each describing the test in name, result, and an optional description.  # noqa: E501

        :return: The test_results of this TestResultApiSchema.  # noqa: E501
        :rtype: list[TestReport]
        """
        return self._test_results

    @test_results.setter
    def test_results(self, test_results):
        """Sets the test_results of this TestResultApiSchema.

        Required. A list of objects, each describing the test in name, result, and an optional description.  # noqa: E501

        :param test_results: The test_results of this TestResultApiSchema.  # noqa: E501
        :type: list[TestReport]
        """
        if test_results is None:
            raise ValueError("Invalid value for `test_results`, must not be `None`")  # noqa: E501

        self._test_results = test_results

    @property
    def event_timestamp(self):
        """Gets the event_timestamp of this TestResultApiSchema.  # noqa: E501

        An ISO8601 timestamp that describes when the event occurred. If no timezone is specified, UTC is assumed. If unset, the Event Ingestion API applies its current time to the field.  # noqa: E501

        :return: The event_timestamp of this TestResultApiSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._event_timestamp

    @event_timestamp.setter
    def event_timestamp(self, event_timestamp):
        """Sets the event_timestamp of this TestResultApiSchema.

        An ISO8601 timestamp that describes when the event occurred. If no timezone is specified, UTC is assumed. If unset, the Event Ingestion API applies its current time to the field.  # noqa: E501

        :param event_timestamp: The event_timestamp of this TestResultApiSchema.  # noqa: E501
        :type: datetime
        """

        self._event_timestamp = event_timestamp

    @property
    def metadata(self):
        """Gets the metadata of this TestResultApiSchema.  # noqa: E501

        Arbitrary key-value information, supplied by the user, to apply to the event.  # noqa: E501

        :return: The metadata of this TestResultApiSchema.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TestResultApiSchema.

        Arbitrary key-value information, supplied by the user, to apply to the event.  # noqa: E501

        :param metadata: The metadata of this TestResultApiSchema.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def task_name(self):
        """Gets the task_name of this TestResultApiSchema.  # noqa: E501

        Optional. A human-readable display name for the task.  # noqa: E501

        :return: The task_name of this TestResultApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this TestResultApiSchema.

        Optional. A human-readable display name for the task.  # noqa: E501

        :param task_name: The task_name of this TestResultApiSchema.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def external_url(self):
        """Gets the external_url of this TestResultApiSchema.  # noqa: E501

        A link to source information.  # noqa: E501

        :return: The external_url of this TestResultApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this TestResultApiSchema.

        A link to source information.  # noqa: E501

        :param external_url: The external_url of this TestResultApiSchema.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def test_suite(self):
        """Gets the test_suite of this TestResultApiSchema.  # noqa: E501

        The name of the test suite with the results to report.  # noqa: E501

        :return: The test_suite of this TestResultApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._test_suite

    @test_suite.setter
    def test_suite(self, test_suite):
        """Sets the test_suite of this TestResultApiSchema.

        The name of the test suite with the results to report.  # noqa: E501

        :param test_suite: The test_suite of this TestResultApiSchema.  # noqa: E501
        :type: str
        """
        if test_suite is None:
            raise ValueError("Invalid value for `test_suite`, must not be `None`")  # noqa: E501

        self._test_suite = test_suite

    @property
    def task_key(self):
        """Gets the task_key of this TestResultApiSchema.  # noqa: E501

        Optional. The ID of the task that the result is associated with.  # noqa: E501

        :return: The task_key of this TestResultApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._task_key

    @task_key.setter
    def task_key(self, task_key):
        """Sets the task_key of this TestResultApiSchema.

        Optional. The ID of the task that the result is associated with.  # noqa: E501

        :param task_key: The task_key of this TestResultApiSchema.  # noqa: E501
        :type: str
        """

        self._task_key = task_key

    @property
    def run_key(self):
        """Gets the run_key of this TestResultApiSchema.  # noqa: E501

        Required. The identifier of the target run for the event action. This key is created and managed by the user.  # noqa: E501

        :return: The run_key of this TestResultApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._run_key

    @run_key.setter
    def run_key(self, run_key):
        """Sets the run_key of this TestResultApiSchema.

        Required. The identifier of the target run for the event action. This key is created and managed by the user.  # noqa: E501

        :param run_key: The run_key of this TestResultApiSchema.  # noqa: E501
        :type: str
        """
        if run_key is None:
            raise ValueError("Invalid value for `run_key`, must not be `None`")  # noqa: E501

        self._run_key = run_key

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this TestResultApiSchema.  # noqa: E501

        Optional. Human readable display value for a pipeline.  # noqa: E501

        :return: The pipeline_name of this TestResultApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this TestResultApiSchema.

        Optional. Human readable display value for a pipeline.  # noqa: E501

        :param pipeline_name: The pipeline_name of this TestResultApiSchema.  # noqa: E501
        :type: str
        """

        self._pipeline_name = pipeline_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestResultApiSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestResultApiSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
