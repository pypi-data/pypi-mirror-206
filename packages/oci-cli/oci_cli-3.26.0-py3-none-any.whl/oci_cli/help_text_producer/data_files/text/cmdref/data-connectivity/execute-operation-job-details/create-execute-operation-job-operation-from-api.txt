"create-execute-operation-job-operation-from-api"
*************************************************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Call the operation to execute


Usage
=====

   oci data-connectivity execute-operation-job-details create-execute-operation-job-operation-from-api [OPTIONS]


Required Parameters
===================

--connection-key [text]

The connection key.

--operation-name [text]

The operation name. This value is unique.

--operation-resource-name [text]

The resource name.

--registry-id [text]

The registry OCID.

--schema-resource-name [text]

The schema resource name used for retrieving schemas.


Optional Parameters
===================

--call-operation-config [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--endpoint-id [text]

Endpoint ID used for getDataAssetFullDetails.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--input-records [complex type]

Collection of the input parameters supplied.

This option is a JSON list with items of type OperationInputRecord.
For documentation on OperationInputRecord please see our API
reference: https://docs.cloud.oracle.com/api/#/en/dataconnectivityman
agement/20210217/datatypes/OperationInputRecord. This is a complex
type whose value must be valid JSON. The value can be provided as a
string on the command line or passed in as a file using the
file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--operation-external-key [text]

The external key for the object.

--operation-key [text]

The object key.

--operation-metadata [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--operation-model-version [text]

The model version of the object.

--operation-object-status [integer]

The status of an object that can be set to value 1 for shallow
reference across objects, other values reserved.

--operation-object-version [integer]

The version of the object that is used to track changes in the object
instance.

--operation-operation-attributes [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--operation-parent-ref [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--operation-shape [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--query", "--raw-output", "--read-timeout",
"--realm-specific-endpoint", "--region", "--release-info", "--request-
id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export display_name=<substitute-value-of-display_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-connectivity/registry/create.html#cmdoption-display-name
       export connection_key=<substitute-value-of-connection_key> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-connectivity/execute-operation-job-details/create-execute-operation-job-operation-from-api.html#cmdoption-connection-key
       export operation_name=<substitute-value-of-operation_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-connectivity/execute-operation-job-details/create-execute-operation-job-operation-from-api.html#cmdoption-operation-name
       export operation_resource_name=<substitute-value-of-operation_resource_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-connectivity/execute-operation-job-details/create-execute-operation-job-operation-from-api.html#cmdoption-operation-resource-name
       export schema_resource_name=<substitute-value-of-schema_resource_name> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/data-connectivity/execute-operation-job-details/create-execute-operation-job-operation-from-api.html#cmdoption-schema-resource-name

       registry_id=$(oci data-connectivity registry create --display-name $display_name --query data.id --raw-output)

       oci data-connectivity execute-operation-job-details create-execute-operation-job-operation-from-api --connection-key $connection_key --operation-name $operation_name --operation-resource-name $operation_resource_name --registry-id $registry_id --schema-resource-name $schema_resource_name
