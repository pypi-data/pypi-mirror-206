# coding: utf-8

"""
    Events Ingestion API

    The Observation platform's Events Ingestion API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@datakitchen.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskStatusApiSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pipeline_name': 'str',
        'task_status': 'str',
        'external_url': 'str',
        'event_timestamp': 'datetime',
        'metadata': 'object',
        'run_tag': 'str',
        'task_name': 'str'
    }

    attribute_map = {
        'pipeline_name': 'pipeline_name',
        'task_status': 'task_status',
        'external_url': 'external_url',
        'event_timestamp': 'event_timestamp',
        'metadata': 'metadata',
        'run_tag': 'run_tag',
        'task_name': 'task_name'
    }

    def __init__(self, pipeline_name=None, task_status=None, external_url=None, event_timestamp=None, metadata=None, run_tag=None, task_name=None):  # noqa: E501
        """TaskStatusApiSchema - a model defined in Swagger"""  # noqa: E501
        self._pipeline_name = None
        self._task_status = None
        self._external_url = None
        self._event_timestamp = None
        self._metadata = None
        self._run_tag = None
        self._task_name = None
        self.discriminator = None
        self.pipeline_name = pipeline_name
        self.task_status = task_status
        if external_url is not None:
            self.external_url = external_url
        if event_timestamp is not None:
            self.event_timestamp = event_timestamp
        if metadata is not None:
            self.metadata = metadata
        if run_tag is not None:
            self.run_tag = run_tag
        self.task_name = task_name

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this TaskStatusApiSchema.  # noqa: E501

        Required. The target pipeline for the event action.  # noqa: E501

        :return: The pipeline_name of this TaskStatusApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this TaskStatusApiSchema.

        Required. The target pipeline for the event action.  # noqa: E501

        :param pipeline_name: The pipeline_name of this TaskStatusApiSchema.  # noqa: E501
        :type: str
        """
        if pipeline_name is None:
            raise ValueError("Invalid value for `pipeline_name`, must not be `None`")  # noqa: E501

        self._pipeline_name = pipeline_name

    @property
    def task_status(self):
        """Gets the task_status of this TaskStatusApiSchema.  # noqa: E501

        Required. The new status to be applied to the task.  # noqa: E501

        :return: The task_status of this TaskStatusApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._task_status

    @task_status.setter
    def task_status(self, task_status):
        """Sets the task_status of this TaskStatusApiSchema.

        Required. The new status to be applied to the task.  # noqa: E501

        :param task_status: The task_status of this TaskStatusApiSchema.  # noqa: E501
        :type: str
        """
        if task_status is None:
            raise ValueError("Invalid value for `task_status`, must not be `None`")  # noqa: E501
        allowed_values = ["STARTED", "COMPLETED", "WARNING", "ERROR"]  # noqa: E501
        if task_status not in allowed_values:
            raise ValueError(
                "Invalid value for `task_status` ({0}), must be one of {1}"  # noqa: E501
                .format(task_status, allowed_values)
            )

        self._task_status = task_status

    @property
    def external_url(self):
        """Gets the external_url of this TaskStatusApiSchema.  # noqa: E501

        A link to source information.  # noqa: E501

        :return: The external_url of this TaskStatusApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this TaskStatusApiSchema.

        A link to source information.  # noqa: E501

        :param external_url: The external_url of this TaskStatusApiSchema.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def event_timestamp(self):
        """Gets the event_timestamp of this TaskStatusApiSchema.  # noqa: E501

        An ISO8601 timestamp that describes when the event occurred. If no timezone is specified, UTC is assumed. If unset, the Events Ingestion API applies its current time to the field.  # noqa: E501

        :return: The event_timestamp of this TaskStatusApiSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._event_timestamp

    @event_timestamp.setter
    def event_timestamp(self, event_timestamp):
        """Sets the event_timestamp of this TaskStatusApiSchema.

        An ISO8601 timestamp that describes when the event occurred. If no timezone is specified, UTC is assumed. If unset, the Events Ingestion API applies its current time to the field.  # noqa: E501

        :param event_timestamp: The event_timestamp of this TaskStatusApiSchema.  # noqa: E501
        :type: datetime
        """

        self._event_timestamp = event_timestamp

    @property
    def metadata(self):
        """Gets the metadata of this TaskStatusApiSchema.  # noqa: E501

        Arbitrary key-value information, supplied by the user, to apply to the event.  # noqa: E501

        :return: The metadata of this TaskStatusApiSchema.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TaskStatusApiSchema.

        Arbitrary key-value information, supplied by the user, to apply to the event.  # noqa: E501

        :param metadata: The metadata of this TaskStatusApiSchema.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def run_tag(self):
        """Gets the run_tag of this TaskStatusApiSchema.  # noqa: E501

        The tag of the target run for the event action. This identifier is created and managed by the user. If no run_tag is specified, the event applies to the default open run for the pipeline.  # noqa: E501

        :return: The run_tag of this TaskStatusApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._run_tag

    @run_tag.setter
    def run_tag(self, run_tag):
        """Sets the run_tag of this TaskStatusApiSchema.

        The tag of the target run for the event action. This identifier is created and managed by the user. If no run_tag is specified, the event applies to the default open run for the pipeline.  # noqa: E501

        :param run_tag: The run_tag of this TaskStatusApiSchema.  # noqa: E501
        :type: str
        """

        self._run_tag = run_tag

    @property
    def task_name(self):
        """Gets the task_name of this TaskStatusApiSchema.  # noqa: E501

        Required. The target task for the event action. Must be unique within a pipeline.  # noqa: E501

        :return: The task_name of this TaskStatusApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this TaskStatusApiSchema.

        Required. The target task for the event action. Must be unique within a pipeline.  # noqa: E501

        :param task_name: The task_name of this TaskStatusApiSchema.  # noqa: E501
        :type: str
        """
        if task_name is None:
            raise ValueError("Invalid value for `task_name`, must not be `None`")  # noqa: E501

        self._task_name = task_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskStatusApiSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskStatusApiSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
