# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from electrical_openapi_client_v2 import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from electrical_openapi_client_v2 import schemas  # noqa: F401

from electrical_openapi_client_v2.model.paginated_history_list import PaginatedHistoryList

from . import path

# Query params
ApartmentAddressSchema = schemas.StrSchema
ApartmentAreaSchema = schemas.NumberSchema
ApartmentCeilingheightSchema = schemas.NumberSchema
ApartmentCompletionQuarterSchema = schemas.IntSchema
ApartmentCompletionYearSchema = schemas.IntSchema
ApartmentFloorSchema = schemas.IntSchema
ApartmentFloorsTotalSchema = schemas.IntSchema
ApartmentLocationLatSchema = schemas.NumberSchema
ApartmentLocationLonSchema = schemas.NumberSchema
ApartmentPpmSchema = schemas.IntSchema
ApartmentRoomSchema = schemas.IntSchema
BrandSchema = schemas.StrSchema
BrandUrlSchema = schemas.StrSchema
CanonicalUrlSchema = schemas.StrSchema
CategorySchema = schemas.StrSchema
CategoryUrlSchema = schemas.StrSchema
CountCommentsSchema = schemas.IntSchema
CountHowMuchBuySchema = schemas.IntSchema
CountLikesSchema = schemas.IntSchema
CountPhotoSchema = schemas.IntSchema
CountQuestionsSchema = schemas.IntSchema
CountStars1Schema = schemas.IntSchema
CountStars2Schema = schemas.IntSchema
CountStars3Schema = schemas.IntSchema
CountStars4Schema = schemas.IntSchema
CountStars5Schema = schemas.IntSchema
CountStarsAllSchema = schemas.IntSchema
DatetimeCreateSchema = schemas.DateTimeSchema
DayToDeliverySchema = schemas.IntSchema
DescriptionSchema = schemas.StrSchema
ImgUrlSchema = schemas.StrSchema
OrderingSchema = schemas.StrSchema
PageSchema = schemas.IntSchema
ParamsSchema = schemas.StrSchema
PriceSchema = schemas.NumberSchema
PriceSaleSchema = schemas.NumberSchema
QuantitySchema = schemas.IntSchema
ScoreSchema = schemas.NumberSchema
SearchSchema = schemas.StrSchema
SellerSchema = schemas.StrSchema
SellerUrlSchema = schemas.StrSchema
SkuSchema = schemas.StrSchema
SourceUrlSchema = schemas.StrSchema
TaskSchema = schemas.StrSchema
TitleSchema = schemas.StrSchema
UrlSchema = schemas.StrSchema
UrlsOtherProductsOnThePageSchema = schemas.StrSchema
WorkerSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'apartment_address': typing.Union[ApartmentAddressSchema, str, ],
        'apartment_area': typing.Union[ApartmentAreaSchema, decimal.Decimal, int, float, ],
        'apartment_ceilingheight': typing.Union[ApartmentCeilingheightSchema, decimal.Decimal, int, float, ],
        'apartment_completion_quarter': typing.Union[ApartmentCompletionQuarterSchema, decimal.Decimal, int, ],
        'apartment_completion_year': typing.Union[ApartmentCompletionYearSchema, decimal.Decimal, int, ],
        'apartment_floor': typing.Union[ApartmentFloorSchema, decimal.Decimal, int, ],
        'apartment_floors_total': typing.Union[ApartmentFloorsTotalSchema, decimal.Decimal, int, ],
        'apartment_location_lat': typing.Union[ApartmentLocationLatSchema, decimal.Decimal, int, float, ],
        'apartment_location_lon': typing.Union[ApartmentLocationLonSchema, decimal.Decimal, int, float, ],
        'apartment_ppm': typing.Union[ApartmentPpmSchema, decimal.Decimal, int, ],
        'apartment_room': typing.Union[ApartmentRoomSchema, decimal.Decimal, int, ],
        'brand': typing.Union[BrandSchema, str, ],
        'brand_url': typing.Union[BrandUrlSchema, str, ],
        'canonical_url': typing.Union[CanonicalUrlSchema, str, ],
        'category': typing.Union[CategorySchema, str, ],
        'category_url': typing.Union[CategoryUrlSchema, str, ],
        'count_comments': typing.Union[CountCommentsSchema, decimal.Decimal, int, ],
        'count_how_much_buy': typing.Union[CountHowMuchBuySchema, decimal.Decimal, int, ],
        'count_likes': typing.Union[CountLikesSchema, decimal.Decimal, int, ],
        'count_photo': typing.Union[CountPhotoSchema, decimal.Decimal, int, ],
        'count_questions': typing.Union[CountQuestionsSchema, decimal.Decimal, int, ],
        'count_stars_1': typing.Union[CountStars1Schema, decimal.Decimal, int, ],
        'count_stars_2': typing.Union[CountStars2Schema, decimal.Decimal, int, ],
        'count_stars_3': typing.Union[CountStars3Schema, decimal.Decimal, int, ],
        'count_stars_4': typing.Union[CountStars4Schema, decimal.Decimal, int, ],
        'count_stars_5': typing.Union[CountStars5Schema, decimal.Decimal, int, ],
        'count_stars_all': typing.Union[CountStarsAllSchema, decimal.Decimal, int, ],
        'datetime_create': typing.Union[DatetimeCreateSchema, str, datetime, ],
        'day_to_delivery': typing.Union[DayToDeliverySchema, decimal.Decimal, int, ],
        'description': typing.Union[DescriptionSchema, str, ],
        'img_url': typing.Union[ImgUrlSchema, str, ],
        'ordering': typing.Union[OrderingSchema, str, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'params': typing.Union[ParamsSchema, str, ],
        'price': typing.Union[PriceSchema, decimal.Decimal, int, float, ],
        'price_sale': typing.Union[PriceSaleSchema, decimal.Decimal, int, float, ],
        'quantity': typing.Union[QuantitySchema, decimal.Decimal, int, ],
        'score': typing.Union[ScoreSchema, decimal.Decimal, int, float, ],
        'search': typing.Union[SearchSchema, str, ],
        'seller': typing.Union[SellerSchema, str, ],
        'seller_url': typing.Union[SellerUrlSchema, str, ],
        'sku': typing.Union[SkuSchema, str, ],
        'source_url': typing.Union[SourceUrlSchema, str, ],
        'task': typing.Union[TaskSchema, str, ],
        'title': typing.Union[TitleSchema, str, ],
        'url': typing.Union[UrlSchema, str, ],
        'urls_other_products_on_the_page': typing.Union[UrlsOtherProductsOnThePageSchema, str, ],
        'worker': typing.Union[WorkerSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_apartment_address = api_client.QueryParameter(
    name="apartment_address",
    style=api_client.ParameterStyle.FORM,
    schema=ApartmentAddressSchema,
    explode=True,
)
request_query_apartment_area = api_client.QueryParameter(
    name="apartment_area",
    style=api_client.ParameterStyle.FORM,
    schema=ApartmentAreaSchema,
    explode=True,
)
request_query_apartment_ceilingheight = api_client.QueryParameter(
    name="apartment_ceilingheight",
    style=api_client.ParameterStyle.FORM,
    schema=ApartmentCeilingheightSchema,
    explode=True,
)
request_query_apartment_completion_quarter = api_client.QueryParameter(
    name="apartment_completion_quarter",
    style=api_client.ParameterStyle.FORM,
    schema=ApartmentCompletionQuarterSchema,
    explode=True,
)
request_query_apartment_completion_year = api_client.QueryParameter(
    name="apartment_completion_year",
    style=api_client.ParameterStyle.FORM,
    schema=ApartmentCompletionYearSchema,
    explode=True,
)
request_query_apartment_floor = api_client.QueryParameter(
    name="apartment_floor",
    style=api_client.ParameterStyle.FORM,
    schema=ApartmentFloorSchema,
    explode=True,
)
request_query_apartment_floors_total = api_client.QueryParameter(
    name="apartment_floors_total",
    style=api_client.ParameterStyle.FORM,
    schema=ApartmentFloorsTotalSchema,
    explode=True,
)
request_query_apartment_location_lat = api_client.QueryParameter(
    name="apartment_location_lat",
    style=api_client.ParameterStyle.FORM,
    schema=ApartmentLocationLatSchema,
    explode=True,
)
request_query_apartment_location_lon = api_client.QueryParameter(
    name="apartment_location_lon",
    style=api_client.ParameterStyle.FORM,
    schema=ApartmentLocationLonSchema,
    explode=True,
)
request_query_apartment_ppm = api_client.QueryParameter(
    name="apartment_ppm",
    style=api_client.ParameterStyle.FORM,
    schema=ApartmentPpmSchema,
    explode=True,
)
request_query_apartment_room = api_client.QueryParameter(
    name="apartment_room",
    style=api_client.ParameterStyle.FORM,
    schema=ApartmentRoomSchema,
    explode=True,
)
request_query_brand = api_client.QueryParameter(
    name="brand",
    style=api_client.ParameterStyle.FORM,
    schema=BrandSchema,
    explode=True,
)
request_query_brand_url = api_client.QueryParameter(
    name="brand_url",
    style=api_client.ParameterStyle.FORM,
    schema=BrandUrlSchema,
    explode=True,
)
request_query_canonical_url = api_client.QueryParameter(
    name="canonical_url",
    style=api_client.ParameterStyle.FORM,
    schema=CanonicalUrlSchema,
    explode=True,
)
request_query_category = api_client.QueryParameter(
    name="category",
    style=api_client.ParameterStyle.FORM,
    schema=CategorySchema,
    explode=True,
)
request_query_category_url = api_client.QueryParameter(
    name="category_url",
    style=api_client.ParameterStyle.FORM,
    schema=CategoryUrlSchema,
    explode=True,
)
request_query_count_comments = api_client.QueryParameter(
    name="count_comments",
    style=api_client.ParameterStyle.FORM,
    schema=CountCommentsSchema,
    explode=True,
)
request_query_count_how_much_buy = api_client.QueryParameter(
    name="count_how_much_buy",
    style=api_client.ParameterStyle.FORM,
    schema=CountHowMuchBuySchema,
    explode=True,
)
request_query_count_likes = api_client.QueryParameter(
    name="count_likes",
    style=api_client.ParameterStyle.FORM,
    schema=CountLikesSchema,
    explode=True,
)
request_query_count_photo = api_client.QueryParameter(
    name="count_photo",
    style=api_client.ParameterStyle.FORM,
    schema=CountPhotoSchema,
    explode=True,
)
request_query_count_questions = api_client.QueryParameter(
    name="count_questions",
    style=api_client.ParameterStyle.FORM,
    schema=CountQuestionsSchema,
    explode=True,
)
request_query_count_stars_1 = api_client.QueryParameter(
    name="count_stars_1",
    style=api_client.ParameterStyle.FORM,
    schema=CountStars1Schema,
    explode=True,
)
request_query_count_stars_2 = api_client.QueryParameter(
    name="count_stars_2",
    style=api_client.ParameterStyle.FORM,
    schema=CountStars2Schema,
    explode=True,
)
request_query_count_stars_3 = api_client.QueryParameter(
    name="count_stars_3",
    style=api_client.ParameterStyle.FORM,
    schema=CountStars3Schema,
    explode=True,
)
request_query_count_stars_4 = api_client.QueryParameter(
    name="count_stars_4",
    style=api_client.ParameterStyle.FORM,
    schema=CountStars4Schema,
    explode=True,
)
request_query_count_stars_5 = api_client.QueryParameter(
    name="count_stars_5",
    style=api_client.ParameterStyle.FORM,
    schema=CountStars5Schema,
    explode=True,
)
request_query_count_stars_all = api_client.QueryParameter(
    name="count_stars_all",
    style=api_client.ParameterStyle.FORM,
    schema=CountStarsAllSchema,
    explode=True,
)
request_query_datetime_create = api_client.QueryParameter(
    name="datetime_create",
    style=api_client.ParameterStyle.FORM,
    schema=DatetimeCreateSchema,
    explode=True,
)
request_query_day_to_delivery = api_client.QueryParameter(
    name="day_to_delivery",
    style=api_client.ParameterStyle.FORM,
    schema=DayToDeliverySchema,
    explode=True,
)
request_query_description = api_client.QueryParameter(
    name="description",
    style=api_client.ParameterStyle.FORM,
    schema=DescriptionSchema,
    explode=True,
)
request_query_img_url = api_client.QueryParameter(
    name="img_url",
    style=api_client.ParameterStyle.FORM,
    schema=ImgUrlSchema,
    explode=True,
)
request_query_ordering = api_client.QueryParameter(
    name="ordering",
    style=api_client.ParameterStyle.FORM,
    schema=OrderingSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_params = api_client.QueryParameter(
    name="params",
    style=api_client.ParameterStyle.FORM,
    schema=ParamsSchema,
    explode=True,
)
request_query_price = api_client.QueryParameter(
    name="price",
    style=api_client.ParameterStyle.FORM,
    schema=PriceSchema,
    explode=True,
)
request_query_price_sale = api_client.QueryParameter(
    name="price_sale",
    style=api_client.ParameterStyle.FORM,
    schema=PriceSaleSchema,
    explode=True,
)
request_query_quantity = api_client.QueryParameter(
    name="quantity",
    style=api_client.ParameterStyle.FORM,
    schema=QuantitySchema,
    explode=True,
)
request_query_score = api_client.QueryParameter(
    name="score",
    style=api_client.ParameterStyle.FORM,
    schema=ScoreSchema,
    explode=True,
)
request_query_search = api_client.QueryParameter(
    name="search",
    style=api_client.ParameterStyle.FORM,
    schema=SearchSchema,
    explode=True,
)
request_query_seller = api_client.QueryParameter(
    name="seller",
    style=api_client.ParameterStyle.FORM,
    schema=SellerSchema,
    explode=True,
)
request_query_seller_url = api_client.QueryParameter(
    name="seller_url",
    style=api_client.ParameterStyle.FORM,
    schema=SellerUrlSchema,
    explode=True,
)
request_query_sku = api_client.QueryParameter(
    name="sku",
    style=api_client.ParameterStyle.FORM,
    schema=SkuSchema,
    explode=True,
)
request_query_source_url = api_client.QueryParameter(
    name="source_url",
    style=api_client.ParameterStyle.FORM,
    schema=SourceUrlSchema,
    explode=True,
)
request_query_task = api_client.QueryParameter(
    name="task",
    style=api_client.ParameterStyle.FORM,
    schema=TaskSchema,
    explode=True,
)
request_query_title = api_client.QueryParameter(
    name="title",
    style=api_client.ParameterStyle.FORM,
    schema=TitleSchema,
    explode=True,
)
request_query_url = api_client.QueryParameter(
    name="url",
    style=api_client.ParameterStyle.FORM,
    schema=UrlSchema,
    explode=True,
)
request_query_urls_other_products_on_the_page = api_client.QueryParameter(
    name="urls_other_products_on_the_page",
    style=api_client.ParameterStyle.FORM,
    schema=UrlsOtherProductsOnThePageSchema,
    explode=True,
)
request_query_worker = api_client.QueryParameter(
    name="worker",
    style=api_client.ParameterStyle.FORM,
    schema=WorkerSchema,
    explode=True,
)
_auth = [
    'basicAuth',
    'cookieAuth',
]
SchemaFor200ResponseBodyApplicationJson = PaginatedHistoryList


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _history_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _history_list_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _history_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _history_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_apartment_address,
            request_query_apartment_area,
            request_query_apartment_ceilingheight,
            request_query_apartment_completion_quarter,
            request_query_apartment_completion_year,
            request_query_apartment_floor,
            request_query_apartment_floors_total,
            request_query_apartment_location_lat,
            request_query_apartment_location_lon,
            request_query_apartment_ppm,
            request_query_apartment_room,
            request_query_brand,
            request_query_brand_url,
            request_query_canonical_url,
            request_query_category,
            request_query_category_url,
            request_query_count_comments,
            request_query_count_how_much_buy,
            request_query_count_likes,
            request_query_count_photo,
            request_query_count_questions,
            request_query_count_stars_1,
            request_query_count_stars_2,
            request_query_count_stars_3,
            request_query_count_stars_4,
            request_query_count_stars_5,
            request_query_count_stars_all,
            request_query_datetime_create,
            request_query_day_to_delivery,
            request_query_description,
            request_query_img_url,
            request_query_ordering,
            request_query_page,
            request_query_params,
            request_query_price,
            request_query_price_sale,
            request_query_quantity,
            request_query_score,
            request_query_search,
            request_query_seller,
            request_query_seller_url,
            request_query_sku,
            request_query_source_url,
            request_query_task,
            request_query_title,
            request_query_url,
            request_query_urls_other_products_on_the_page,
            request_query_worker,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class HistoryList(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def history_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def history_list(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def history_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def history_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._history_list_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._history_list_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


