from typing import List
from enum import Enum
from pyVmomi import MetadataManager, vim, vmodl
from datetime import datetime
from pyVmomi.VmomiSupport import ManagedObject, NoneType, PropertyPath, binary, long, short
from . import customization, device, guest, replication


class GuestCustomizationManager(ManagedObject):
    def Customize(self, vm: vim.VirtualMachine, auth: guest.GuestAuthentication, spec: customization.Specification, configParams: List[vim.option.OptionValue]) -> vim.Task: ...
    def StartNetwork(self, vm: vim.VirtualMachine, auth: guest.GuestAuthentication) -> vim.Task: ...
    def AbortCustomization(self, vm: vim.VirtualMachine, auth: guest.GuestAuthentication) -> vim.Task: ...


class Snapshot(vim.ExtensibleManagedObject):
    @property
    def config(self) -> ConfigInfo: ...
    @property
    def childSnapshot(self) -> List[Snapshot]: ...
    @property
    def vm(self) -> vim.VirtualMachine: ...
    def Revert(self, host: vim.HostSystem, suppressPowerOn: bool) -> vim.Task: ...
    def Remove(self, removeChildren: bool, consolidate: bool) -> vim.Task: ...
    def Rename(self, name: str, description: str) -> NoneType: ...
    def ExportSnapshot(self) -> vim.HttpNfcLease: ...


class AffinityInfo(vmodl.DynamicData):
    @property
    def affinitySet(self) -> List[int]: ...


class BaseIndependentFilterSpec(vmodl.DynamicData): ...


class BootOptions(vmodl.DynamicData):
    @property
    def bootDelay(self) -> long: ...
    @property
    def enterBIOSSetup(self) -> bool: ...
    @property
    def efiSecureBootEnabled(self) -> bool: ...
    @property
    def bootRetryEnabled(self) -> bool: ...
    @property
    def bootRetryDelay(self) -> long: ...
    @property
    def bootOrder(self) -> List[BootOptions.BootableDevice]: ...
    @property
    def networkBootProtocol(self) -> str: ...


    class BootableCdromDevice(BootOptions.BootableDevice): ...


    class BootableDevice(vmodl.DynamicData): ...


    class BootableDiskDevice(BootOptions.BootableDevice):
        @property
        def deviceKey(self) -> int: ...


    class BootableEthernetDevice(BootOptions.BootableDevice):
        @property
        def deviceKey(self) -> int: ...


    class BootableFloppyDevice(BootOptions.BootableDevice): ...


    class NetworkBootProtocolType(Enum):
        ipv4 = "ipv4"
        ipv6 = "ipv6"


class Capability(vmodl.DynamicData):
    @property
    def snapshotOperationsSupported(self) -> bool: ...
    @property
    def multipleSnapshotsSupported(self) -> bool: ...
    @property
    def snapshotConfigSupported(self) -> bool: ...
    @property
    def poweredOffSnapshotsSupported(self) -> bool: ...
    @property
    def memorySnapshotsSupported(self) -> bool: ...
    @property
    def revertToSnapshotSupported(self) -> bool: ...
    @property
    def quiescedSnapshotsSupported(self) -> bool: ...
    @property
    def disableSnapshotsSupported(self) -> bool: ...
    @property
    def lockSnapshotsSupported(self) -> bool: ...
    @property
    def consolePreferencesSupported(self) -> bool: ...
    @property
    def cpuFeatureMaskSupported(self) -> bool: ...
    @property
    def s1AcpiManagementSupported(self) -> bool: ...
    @property
    def settingScreenResolutionSupported(self) -> bool: ...
    @property
    def toolsAutoUpdateSupported(self) -> bool: ...
    @property
    def vmNpivWwnSupported(self) -> bool: ...
    @property
    def npivWwnOnNonRdmVmSupported(self) -> bool: ...
    @property
    def vmNpivWwnDisableSupported(self) -> bool: ...
    @property
    def vmNpivWwnUpdateSupported(self) -> bool: ...
    @property
    def swapPlacementSupported(self) -> bool: ...
    @property
    def toolsSyncTimeSupported(self) -> bool: ...
    @property
    def virtualMmuUsageSupported(self) -> bool: ...
    @property
    def diskSharesSupported(self) -> bool: ...
    @property
    def bootOptionsSupported(self) -> bool: ...
    @property
    def bootRetryOptionsSupported(self) -> bool: ...
    @property
    def settingVideoRamSizeSupported(self) -> bool: ...
    @property
    def settingDisplayTopologySupported(self) -> bool: ...
    @property
    def recordReplaySupported(self) -> bool: ...
    @property
    def changeTrackingSupported(self) -> bool: ...
    @property
    def multipleCoresPerSocketSupported(self) -> bool: ...
    @property
    def hostBasedReplicationSupported(self) -> bool: ...
    @property
    def guestAutoLockSupported(self) -> bool: ...
    @property
    def memoryReservationLockSupported(self) -> bool: ...
    @property
    def featureRequirementSupported(self) -> bool: ...
    @property
    def poweredOnMonitorTypeChangeSupported(self) -> bool: ...
    @property
    def seSparseDiskSupported(self) -> bool: ...
    @property
    def nestedHVSupported(self) -> bool: ...
    @property
    def vPMCSupported(self) -> bool: ...
    @property
    def secureBootSupported(self) -> bool: ...
    @property
    def perVmEvcSupported(self) -> bool: ...
    @property
    def virtualMmuUsageIgnored(self) -> bool: ...
    @property
    def virtualExecUsageIgnored(self) -> bool: ...
    @property
    def diskOnlySnapshotOnSuspendedVMSupported(self) -> bool: ...
    @property
    def suspendToMemorySupported(self) -> bool: ...
    @property
    def toolsSyncTimeAllowSupported(self) -> bool: ...
    @property
    def sevSupported(self) -> bool: ...
    @property
    def pmemFailoverSupported(self) -> bool: ...
    @property
    def requireSgxAttestationSupported(self) -> bool: ...
    @property
    def changeModeDisksSupported(self) -> bool: ...
    @property
    def vendorDeviceGroupSupported(self) -> bool: ...


class CdromInfo(TargetInfo):
    @property
    def description(self) -> str: ...


class CertThumbprint(vmodl.DynamicData):
    @property
    def thumbprint(self) -> str: ...
    @property
    def hashAlgorithm(self) -> str: ...


    class HashAlgorithm(Enum):
        sha256 = "sha256"


class CloneSpec(vmodl.DynamicData):
    @property
    def location(self) -> RelocateSpec: ...
    @property
    def template(self) -> bool: ...
    @property
    def config(self) -> ConfigSpec: ...
    @property
    def customization(self) -> customization.Specification: ...
    @property
    def powerOn(self) -> bool: ...
    @property
    def snapshot(self) -> Snapshot: ...
    @property
    def memory(self) -> bool: ...
    @property
    def tpmProvisionPolicy(self) -> str: ...


    class TpmProvisionPolicy(Enum):
        copy = "copy"
        replace = "replace"


class ConfigInfo(vmodl.DynamicData):
    @property
    def changeVersion(self) -> str: ...
    @property
    def modified(self) -> datetime: ...
    @property
    def name(self) -> str: ...
    @property
    def guestFullName(self) -> str: ...
    @property
    def version(self) -> str: ...
    @property
    def uuid(self) -> str: ...
    @property
    def createDate(self) -> datetime: ...
    @property
    def instanceUuid(self) -> str: ...
    @property
    def npivNodeWorldWideName(self) -> List[long]: ...
    @property
    def npivPortWorldWideName(self) -> List[long]: ...
    @property
    def npivWorldWideNameType(self) -> str: ...
    @property
    def npivDesiredNodeWwns(self) -> short: ...
    @property
    def npivDesiredPortWwns(self) -> short: ...
    @property
    def npivTemporaryDisabled(self) -> bool: ...
    @property
    def npivOnNonRdmDisks(self) -> bool: ...
    @property
    def locationId(self) -> str: ...
    @property
    def template(self) -> bool: ...
    @property
    def guestId(self) -> str: ...
    @property
    def alternateGuestName(self) -> str: ...
    @property
    def annotation(self) -> str: ...
    @property
    def files(self) -> FileInfo: ...
    @property
    def tools(self) -> ToolsConfigInfo: ...
    @property
    def flags(self) -> FlagInfo: ...
    @property
    def consolePreferences(self) -> ConsolePreferences: ...
    @property
    def defaultPowerOps(self) -> DefaultPowerOpInfo: ...
    @property
    def rebootPowerOff(self) -> bool: ...
    @property
    def hardware(self) -> VirtualHardware: ...
    @property
    def vcpuConfig(self) -> List[VcpuConfig]: ...
    @property
    def cpuAllocation(self) -> vim.ResourceAllocationInfo: ...
    @property
    def memoryAllocation(self) -> vim.ResourceAllocationInfo: ...
    @property
    def latencySensitivity(self) -> vim.LatencySensitivity: ...
    @property
    def memoryHotAddEnabled(self) -> bool: ...
    @property
    def cpuHotAddEnabled(self) -> bool: ...
    @property
    def cpuHotRemoveEnabled(self) -> bool: ...
    @property
    def hotPlugMemoryLimit(self) -> long: ...
    @property
    def hotPlugMemoryIncrementSize(self) -> long: ...
    @property
    def cpuAffinity(self) -> AffinityInfo: ...
    @property
    def memoryAffinity(self) -> AffinityInfo: ...
    @property
    def networkShaper(self) -> NetworkShaperInfo: ...
    @property
    def extraConfig(self) -> List[vim.option.OptionValue]: ...
    @property
    def cpuFeatureMask(self) -> List[vim.host.CpuIdInfo]: ...
    @property
    def datastoreUrl(self) -> List[ConfigInfo.DatastoreUrlPair]: ...
    @property
    def swapPlacement(self) -> str: ...
    @property
    def bootOptions(self) -> BootOptions: ...
    @property
    def ftInfo(self) -> FaultToleranceConfigInfo: ...
    @property
    def repConfig(self) -> ReplicationConfigSpec: ...
    @property
    def vAppConfig(self) -> vim.vApp.VmConfigInfo: ...
    @property
    def vAssertsEnabled(self) -> bool: ...
    @property
    def changeTrackingEnabled(self) -> bool: ...
    @property
    def firmware(self) -> str: ...
    @property
    def maxMksConnections(self) -> int: ...
    @property
    def guestAutoLockEnabled(self) -> bool: ...
    @property
    def managedBy(self) -> vim.ext.ManagedByInfo: ...
    @property
    def memoryReservationLockedToMax(self) -> bool: ...
    @property
    def initialOverhead(self) -> ConfigInfo.OverheadInfo: ...
    @property
    def nestedHVEnabled(self) -> bool: ...
    @property
    def vPMCEnabled(self) -> bool: ...
    @property
    def scheduledHardwareUpgradeInfo(self) -> ScheduledHardwareUpgradeInfo: ...
    @property
    def forkConfigInfo(self) -> ForkConfigInfo: ...
    @property
    def vFlashCacheReservation(self) -> long: ...
    @property
    def vmxConfigChecksum(self) -> binary: ...
    @property
    def messageBusTunnelEnabled(self) -> bool: ...
    @property
    def vmStorageObjectId(self) -> str: ...
    @property
    def swapStorageObjectId(self) -> str: ...
    @property
    def keyId(self) -> vim.encryption.CryptoKeyId: ...
    @property
    def guestIntegrityInfo(self) -> GuestIntegrityInfo: ...
    @property
    def migrateEncryption(self) -> str: ...
    @property
    def sgxInfo(self) -> SgxInfo: ...
    @property
    def contentLibItemInfo(self) -> ContentLibraryItemInfo: ...
    @property
    def ftEncryptionMode(self) -> str: ...
    @property
    def guestMonitoringModeInfo(self) -> GuestMonitoringModeInfo: ...
    @property
    def sevEnabled(self) -> bool: ...
    @property
    def numaInfo(self) -> VirtualNumaInfo: ...
    @property
    def pmemFailoverEnabled(self) -> bool: ...
    @property
    def vmxStatsCollectionEnabled(self) -> bool: ...
    @property
    def vmOpNotificationToAppEnabled(self) -> bool: ...
    @property
    def vmOpNotificationTimeout(self) -> long: ...
    @property
    def deviceSwap(self) -> VirtualDeviceSwap: ...
    @property
    def pmem(self) -> VirtualPMem: ...
    @property
    def deviceGroups(self) -> VirtualDeviceGroups: ...
    @property
    def fixedPassthruHotPlugEnabled(self) -> bool: ...


    class DatastoreUrlPair(vmodl.DynamicData):
        @property
        def name(self) -> str: ...
        @property
        def url(self) -> str: ...


    class OverheadInfo(vmodl.DynamicData):
        @property
        def initialMemoryReservation(self) -> long: ...
        @property
        def initialSwapReservation(self) -> long: ...


    class NpivWwnType(Enum):
        vc = "vc"
        host = "host"
        external = "external"


    class SwapPlacementType(Enum):
        inherit = "inherit"
        vmDirectory = "vmdirectory"
        hostLocal = "hostlocal"


class ConfigOption(vmodl.DynamicData):
    @property
    def version(self) -> str: ...
    @property
    def description(self) -> str: ...
    @property
    def guestOSDescriptor(self) -> List[GuestOsDescriptor]: ...
    @property
    def guestOSDefaultIndex(self) -> int: ...
    @property
    def hardwareOptions(self) -> VirtualHardwareOption: ...
    @property
    def capabilities(self) -> Capability: ...
    @property
    def datastore(self) -> DatastoreOption: ...
    @property
    def defaultDevice(self) -> List[device.VirtualDevice]: ...
    @property
    def supportedMonitorType(self) -> List[str]: ...
    @property
    def supportedOvfEnvironmentTransport(self) -> List[str]: ...
    @property
    def supportedOvfInstallTransport(self) -> List[str]: ...
    @property
    def propertyRelations(self) -> List[PropertyRelation]: ...


class ConfigOptionDescriptor(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def description(self) -> str: ...
    @property
    def host(self) -> List[vim.HostSystem]: ...
    @property
    def createSupported(self) -> bool: ...
    @property
    def defaultConfigOption(self) -> bool: ...
    @property
    def runSupported(self) -> bool: ...
    @property
    def upgradeSupported(self) -> bool: ...


class ConfigSpec(vmodl.DynamicData):
    @property
    def changeVersion(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def version(self) -> str: ...
    @property
    def createDate(self) -> datetime: ...
    @property
    def uuid(self) -> str: ...
    @property
    def instanceUuid(self) -> str: ...
    @property
    def npivNodeWorldWideName(self) -> List[long]: ...
    @property
    def npivPortWorldWideName(self) -> List[long]: ...
    @property
    def npivWorldWideNameType(self) -> str: ...
    @property
    def npivDesiredNodeWwns(self) -> short: ...
    @property
    def npivDesiredPortWwns(self) -> short: ...
    @property
    def npivTemporaryDisabled(self) -> bool: ...
    @property
    def npivOnNonRdmDisks(self) -> bool: ...
    @property
    def npivWorldWideNameOp(self) -> str: ...
    @property
    def locationId(self) -> str: ...
    @property
    def guestId(self) -> str: ...
    @property
    def alternateGuestName(self) -> str: ...
    @property
    def annotation(self) -> str: ...
    @property
    def files(self) -> FileInfo: ...
    @property
    def tools(self) -> ToolsConfigInfo: ...
    @property
    def flags(self) -> FlagInfo: ...
    @property
    def consolePreferences(self) -> ConsolePreferences: ...
    @property
    def powerOpInfo(self) -> DefaultPowerOpInfo: ...
    @property
    def rebootPowerOff(self) -> bool: ...
    @property
    def numCPUs(self) -> int: ...
    @property
    def vcpuConfig(self) -> List[VcpuConfig]: ...
    @property
    def numCoresPerSocket(self) -> int: ...
    @property
    def memoryMB(self) -> long: ...
    @property
    def memoryHotAddEnabled(self) -> bool: ...
    @property
    def cpuHotAddEnabled(self) -> bool: ...
    @property
    def cpuHotRemoveEnabled(self) -> bool: ...
    @property
    def virtualICH7MPresent(self) -> bool: ...
    @property
    def virtualSMCPresent(self) -> bool: ...
    @property
    def deviceChange(self) -> List[device.VirtualDeviceSpec]: ...
    @property
    def cpuAllocation(self) -> vim.ResourceAllocationInfo: ...
    @property
    def memoryAllocation(self) -> vim.ResourceAllocationInfo: ...
    @property
    def latencySensitivity(self) -> vim.LatencySensitivity: ...
    @property
    def cpuAffinity(self) -> AffinityInfo: ...
    @property
    def memoryAffinity(self) -> AffinityInfo: ...
    @property
    def networkShaper(self) -> NetworkShaperInfo: ...
    @property
    def cpuFeatureMask(self) -> List[ConfigSpec.CpuIdInfoSpec]: ...
    @property
    def extraConfig(self) -> List[vim.option.OptionValue]: ...
    @property
    def swapPlacement(self) -> str: ...
    @property
    def bootOptions(self) -> BootOptions: ...
    @property
    def vAppConfig(self) -> vim.vApp.VmConfigSpec: ...
    @property
    def ftInfo(self) -> FaultToleranceConfigInfo: ...
    @property
    def repConfig(self) -> ReplicationConfigSpec: ...
    @property
    def vAppConfigRemoved(self) -> bool: ...
    @property
    def vAssertsEnabled(self) -> bool: ...
    @property
    def changeTrackingEnabled(self) -> bool: ...
    @property
    def firmware(self) -> str: ...
    @property
    def maxMksConnections(self) -> int: ...
    @property
    def guestAutoLockEnabled(self) -> bool: ...
    @property
    def managedBy(self) -> vim.ext.ManagedByInfo: ...
    @property
    def memoryReservationLockedToMax(self) -> bool: ...
    @property
    def nestedHVEnabled(self) -> bool: ...
    @property
    def vPMCEnabled(self) -> bool: ...
    @property
    def scheduledHardwareUpgradeInfo(self) -> ScheduledHardwareUpgradeInfo: ...
    @property
    def vmProfile(self) -> List[ProfileSpec]: ...
    @property
    def messageBusTunnelEnabled(self) -> bool: ...
    @property
    def crypto(self) -> vim.encryption.CryptoSpec: ...
    @property
    def migrateEncryption(self) -> str: ...
    @property
    def sgxInfo(self) -> SgxInfo: ...
    @property
    def ftEncryptionMode(self) -> str: ...
    @property
    def guestMonitoringModeInfo(self) -> GuestMonitoringModeInfo: ...
    @property
    def sevEnabled(self) -> bool: ...
    @property
    def virtualNuma(self) -> VirtualNuma: ...
    @property
    def motherboardLayout(self) -> str: ...
    @property
    def pmemFailoverEnabled(self) -> bool: ...
    @property
    def vmxStatsCollectionEnabled(self) -> bool: ...
    @property
    def vmOpNotificationToAppEnabled(self) -> bool: ...
    @property
    def vmOpNotificationTimeout(self) -> long: ...
    @property
    def deviceSwap(self) -> VirtualDeviceSwap: ...
    @property
    def simultaneousThreads(self) -> int: ...
    @property
    def pmem(self) -> VirtualPMem: ...
    @property
    def deviceGroups(self) -> VirtualDeviceGroups: ...
    @property
    def fixedPassthruHotPlugEnabled(self) -> bool: ...


    class CpuIdInfoSpec(vim.option.ArrayUpdateSpec):
        @property
        def info(self) -> vim.host.CpuIdInfo: ...


    class EncryptedFtModes(Enum):
        ftEncryptionDisabled = "ftencryptiondisabled"
        ftEncryptionOpportunistic = "ftencryptionopportunistic"
        ftEncryptionRequired = "ftencryptionrequired"


    class EncryptedVMotionModes(Enum):
        disabled = "disabled"
        opportunistic = "opportunistic"
        required = "required"


    class NpivWwnOp(Enum):
        generate = "generate"
        set = "set"
        remove = "remove"
        extend = "extend"


class ConfigTarget(vmodl.DynamicData):
    @property
    def numCpus(self) -> int: ...
    @property
    def numCpuCores(self) -> int: ...
    @property
    def numNumaNodes(self) -> int: ...
    @property
    def maxCpusPerHost(self) -> int: ...
    @property
    def smcPresent(self) -> bool: ...
    @property
    def datastore(self) -> List[DatastoreInfo]: ...
    @property
    def network(self) -> List[NetworkInfo]: ...
    @property
    def opaqueNetwork(self) -> List[OpaqueNetworkInfo]: ...
    @property
    def distributedVirtualPortgroup(self) -> List[vim.dvs.DistributedVirtualPortgroupInfo]: ...
    @property
    def distributedVirtualSwitch(self) -> List[vim.dvs.DistributedVirtualSwitchInfo]: ...
    @property
    def cdRom(self) -> List[CdromInfo]: ...
    @property
    def serial(self) -> List[SerialInfo]: ...
    @property
    def parallel(self) -> List[ParallelInfo]: ...
    @property
    def sound(self) -> List[SoundInfo]: ...
    @property
    def usb(self) -> List[UsbInfo]: ...
    @property
    def floppy(self) -> List[FloppyInfo]: ...
    @property
    def legacyNetworkInfo(self) -> List[LegacyNetworkSwitchInfo]: ...
    @property
    def scsiPassthrough(self) -> List[ScsiPassthroughInfo]: ...
    @property
    def scsiDisk(self) -> List[ScsiDiskDeviceInfo]: ...
    @property
    def ideDisk(self) -> List[IdeDiskDeviceInfo]: ...
    @property
    def maxMemMBOptimalPerf(self) -> int: ...
    @property
    def supportedMaxMemMB(self) -> int: ...
    @property
    def resourcePool(self) -> vim.ResourcePool.RuntimeInfo: ...
    @property
    def autoVmotion(self) -> bool: ...
    @property
    def pciPassthrough(self) -> List[PciPassthroughInfo]: ...
    @property
    def sriov(self) -> List[SriovInfo]: ...
    @property
    def vFlashModule(self) -> List[VFlashModuleInfo]: ...
    @property
    def sharedGpuPassthroughTypes(self) -> List[PciSharedGpuPassthroughInfo]: ...
    @property
    def availablePersistentMemoryReservationMB(self) -> long: ...
    @property
    def dynamicPassthrough(self) -> List[DynamicPassthroughInfo]: ...
    @property
    def sgxTargetInfo(self) -> SgxTargetInfo: ...
    @property
    def precisionClockInfo(self) -> List[PrecisionClockInfo]: ...
    @property
    def sevSupported(self) -> bool: ...
    @property
    def vgpuDeviceInfo(self) -> List[VgpuDeviceInfo]: ...
    @property
    def vgpuProfileInfo(self) -> List[VgpuProfileInfo]: ...
    @property
    def vendorDeviceGroupInfo(self) -> List[VendorDeviceGroupInfo]: ...
    @property
    def maxSimultaneousThreads(self) -> int: ...
    @property
    def dvxClassInfo(self) -> List[DvxClassInfo]: ...


class ConsolePreferences(vmodl.DynamicData):
    @property
    def powerOnWhenOpened(self) -> bool: ...
    @property
    def enterFullScreenOnPowerOn(self) -> bool: ...
    @property
    def closeOnPowerOffOrSuspend(self) -> bool: ...


class ContentLibraryItemInfo(vmodl.DynamicData):
    @property
    def contentLibraryItemUuid(self) -> str: ...
    @property
    def contentLibraryItemVersion(self) -> str: ...


class DatastoreInfo(TargetInfo):
    @property
    def datastore(self) -> vim.Datastore.Summary: ...
    @property
    def capability(self) -> vim.Datastore.Capability: ...
    @property
    def maxFileSize(self) -> long: ...
    @property
    def maxVirtualDiskCapacity(self) -> long: ...
    @property
    def maxPhysicalRDMFileSize(self) -> long: ...
    @property
    def maxVirtualRDMFileSize(self) -> long: ...
    @property
    def mode(self) -> str: ...
    @property
    def vStorageSupport(self) -> str: ...


class DatastoreOption(vmodl.DynamicData):
    @property
    def unsupportedVolumes(self) -> List[DatastoreOption.FileSystemVolumeOption]: ...


    class FileSystemVolumeOption(vmodl.DynamicData):
        @property
        def fileSystemType(self) -> type: ...
        @property
        def majorVersion(self) -> int: ...


class DefaultPowerOpInfo(vmodl.DynamicData):
    @property
    def powerOffType(self) -> str: ...
    @property
    def suspendType(self) -> str: ...
    @property
    def resetType(self) -> str: ...
    @property
    def defaultPowerOffType(self) -> str: ...
    @property
    def defaultSuspendType(self) -> str: ...
    @property
    def defaultResetType(self) -> str: ...
    @property
    def standbyAction(self) -> str: ...


    class PowerOpType(Enum):
        soft = "soft"
        hard = "hard"
        preset = "preset"


    class StandbyActionType(Enum):
        checkpoint = "checkpoint"
        powerOnSuspend = "poweronsuspend"


class DefaultProfileSpec(ProfileSpec): ...


class DefinedProfileSpec(ProfileSpec):
    @property
    def profileId(self) -> str: ...
    @property
    def replicationSpec(self) -> replication.ReplicationSpec: ...
    @property
    def profileData(self) -> ProfileRawData: ...
    @property
    def profileParams(self) -> List[vim.KeyValue]: ...


class DeviceRuntimeInfo(vmodl.DynamicData):
    @property
    def runtimeState(self) -> DeviceRuntimeInfo.DeviceRuntimeState: ...
    @property
    def key(self) -> int: ...


    class DeviceRuntimeState(vmodl.DynamicData): ...


    class VirtualEthernetCardRuntimeState(DeviceRuntimeInfo.DeviceRuntimeState):
        @property
        def vmDirectPathGen2Active(self) -> bool: ...
        @property
        def vmDirectPathGen2InactiveReasonVm(self) -> List[str]: ...
        @property
        def vmDirectPathGen2InactiveReasonOther(self) -> List[str]: ...
        @property
        def vmDirectPathGen2InactiveReasonExtended(self) -> str: ...
        @property
        def uptv2Active(self) -> bool: ...
        @property
        def uptv2InactiveReasonVm(self) -> List[str]: ...
        @property
        def uptv2InactiveReasonOther(self) -> List[str]: ...
        @property
        def reservationStatus(self) -> str: ...
        @property
        def attachmentStatus(self) -> str: ...
        @property
        def featureRequirement(self) -> List[FeatureRequirement]: ...


        class VmDirectPathGen2InactiveReasonOther(Enum):
            vmNptIncompatibleHost = "vmnptincompatiblehost"
            vmNptIncompatibleNetwork = "vmnptincompatiblenetwork"


        class VmDirectPathGen2InactiveReasonVm(Enum):
            vmNptIncompatibleGuest = "vmnptincompatibleguest"
            vmNptIncompatibleGuestDriver = "vmnptincompatibleguestdriver"
            vmNptIncompatibleAdapterType = "vmnptincompatibleadaptertype"
            vmNptDisabledOrDisconnectedAdapter = "vmnptdisabledordisconnectedadapter"
            vmNptIncompatibleAdapterFeatures = "vmnptincompatibleadapterfeatures"
            vmNptIncompatibleBackingType = "vmnptincompatiblebackingtype"
            vmNptInsufficientMemoryReservation = "vmnptinsufficientmemoryreservation"
            vmNptFaultToleranceOrRecordReplayConfigured = "vmnptfaulttoleranceorrecordreplayconfigured"
            vmNptConflictingIOChainConfigured = "vmnptconflictingiochainconfigured"
            vmNptMonitorBlocks = "vmnptmonitorblocks"
            vmNptConflictingOperationInProgress = "vmnptconflictingoperationinprogress"
            vmNptRuntimeError = "vmnptruntimeerror"
            vmNptOutOfIntrVector = "vmnptoutofintrvector"
            vmNptVMCIActive = "vmnptvmciactive"


class DiskDeviceInfo(TargetInfo):
    @property
    def capacity(self) -> long: ...
    @property
    def vm(self) -> List[vim.VirtualMachine]: ...


class DvxClassInfo(vmodl.DynamicData):
    @property
    def deviceClass(self) -> vim.ElementDescription: ...
    @property
    def vendorName(self) -> str: ...
    @property
    def sriovNic(self) -> bool: ...
    @property
    def configParams(self) -> List[vim.option.OptionDef]: ...


class DynamicPassthroughInfo(TargetInfo):
    @property
    def vendorName(self) -> str: ...
    @property
    def deviceName(self) -> str: ...
    @property
    def customLabel(self) -> str: ...
    @property
    def vendorId(self) -> int: ...
    @property
    def deviceId(self) -> int: ...


class EmptyIndependentFilterSpec(BaseIndependentFilterSpec): ...


class EmptyProfileSpec(ProfileSpec): ...


class FaultToleranceConfigInfo(vmodl.DynamicData):
    @property
    def role(self) -> int: ...
    @property
    def instanceUuids(self) -> List[str]: ...
    @property
    def configPaths(self) -> List[str]: ...
    @property
    def orphaned(self) -> bool: ...


class FaultToleranceConfigSpec(vmodl.DynamicData):
    @property
    def metaDataPath(self) -> FaultToleranceMetaSpec: ...
    @property
    def secondaryVmSpec(self) -> FaultToleranceVMConfigSpec: ...


class FaultToleranceMetaSpec(vmodl.DynamicData):
    @property
    def metaDataDatastore(self) -> vim.Datastore: ...


class FaultTolerancePrimaryConfigInfo(FaultToleranceConfigInfo):
    @property
    def secondaries(self) -> List[vim.VirtualMachine]: ...


class FaultToleranceSecondaryConfigInfo(FaultToleranceConfigInfo):
    @property
    def primaryVM(self) -> vim.VirtualMachine: ...


class FaultToleranceSecondaryOpResult(vmodl.DynamicData):
    @property
    def vm(self) -> vim.VirtualMachine: ...
    @property
    def powerOnAttempted(self) -> bool: ...
    @property
    def powerOnResult(self) -> vim.cluster.PowerOnVmResult: ...


class FaultToleranceVMConfigSpec(vmodl.DynamicData):
    @property
    def vmConfig(self) -> vim.Datastore: ...
    @property
    def disks(self) -> List[FaultToleranceVMConfigSpec.FaultToleranceDiskSpec]: ...


    class FaultToleranceDiskSpec(vmodl.DynamicData):
        @property
        def disk(self) -> device.VirtualDevice: ...
        @property
        def datastore(self) -> vim.Datastore: ...


class FeatureRequirement(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def featureName(self) -> str: ...
    @property
    def value(self) -> str: ...


class FileInfo(vmodl.DynamicData):
    @property
    def vmPathName(self) -> str: ...
    @property
    def snapshotDirectory(self) -> str: ...
    @property
    def suspendDirectory(self) -> str: ...
    @property
    def logDirectory(self) -> str: ...
    @property
    def ftMetadataDirectory(self) -> str: ...


class FileLayout(vmodl.DynamicData):
    @property
    def configFile(self) -> List[str]: ...
    @property
    def logFile(self) -> List[str]: ...
    @property
    def disk(self) -> List[FileLayout.DiskLayout]: ...
    @property
    def snapshot(self) -> List[FileLayout.SnapshotLayout]: ...
    @property
    def swapFile(self) -> str: ...


    class DiskLayout(vmodl.DynamicData):
        @property
        def key(self) -> int: ...
        @property
        def diskFile(self) -> List[str]: ...


    class SnapshotLayout(vmodl.DynamicData):
        @property
        def key(self) -> Snapshot: ...
        @property
        def snapshotFile(self) -> List[str]: ...


class FileLayoutEx(vmodl.DynamicData):
    @property
    def file(self) -> List[FileLayoutEx.FileInfo]: ...
    @property
    def disk(self) -> List[FileLayoutEx.DiskLayout]: ...
    @property
    def snapshot(self) -> List[FileLayoutEx.SnapshotLayout]: ...
    @property
    def timestamp(self) -> datetime: ...


    class DiskUnit(vmodl.DynamicData):
        @property
        def fileKey(self) -> List[int]: ...


    class FileType(Enum):
        config = "config"
        extendedConfig = "extendedconfig"
        diskDescriptor = "diskdescriptor"
        diskExtent = "diskextent"
        digestDescriptor = "digestdescriptor"
        digestExtent = "digestextent"
        diskReplicationState = "diskreplicationstate"
        log = "log"
        stat = "stat"
        namespaceData = "namespacedata"
        dataSetsDiskModeStore = "datasetsdiskmodestore"
        dataSetsVmModeStore = "datasetsvmmodestore"
        nvram = "nvram"
        snapshotData = "snapshotdata"
        snapshotMemory = "snapshotmemory"
        snapshotList = "snapshotlist"
        snapshotManifestList = "snapshotmanifestlist"
        suspend = "suspend"
        suspendMemory = "suspendmemory"
        swap = "swap"
        uwswap = "uwswap"
        core = "core"
        screenshot = "screenshot"
        ftMetadata = "ftmetadata"
        guestCustomization = "guestcustomization"


class FlagInfo(vmodl.DynamicData):
    @property
    def disableAcceleration(self) -> bool: ...
    @property
    def enableLogging(self) -> bool: ...
    @property
    def useToe(self) -> bool: ...
    @property
    def runWithDebugInfo(self) -> bool: ...
    @property
    def monitorType(self) -> str: ...
    @property
    def htSharing(self) -> str: ...
    @property
    def snapshotDisabled(self) -> bool: ...
    @property
    def snapshotLocked(self) -> bool: ...
    @property
    def diskUuidEnabled(self) -> bool: ...
    @property
    def virtualMmuUsage(self) -> str: ...
    @property
    def virtualExecUsage(self) -> str: ...
    @property
    def snapshotPowerOffBehavior(self) -> str: ...
    @property
    def recordReplayEnabled(self) -> bool: ...
    @property
    def faultToleranceType(self) -> str: ...
    @property
    def cbrcCacheEnabled(self) -> bool: ...
    @property
    def vvtdEnabled(self) -> bool: ...
    @property
    def vbsEnabled(self) -> bool: ...


    class HtSharing(Enum):
        any = "any"
        none = "none"
        internal = "internal"


    class MonitorType(Enum):
        release = "release"
        debug = "debug"
        stats = "stats"


    class PowerOffBehavior(Enum):
        powerOff = "poweroff"
        revert = "revert"
        prompt = "prompt"
        take = "take"


    class VirtualExecUsage(Enum):
        hvAuto = "hvauto"
        hvOn = "hvon"
        hvOff = "hvoff"


    class VirtualMmuUsage(Enum):
        automatic = "automatic"
        on = "on"
        off = "off"


class FloppyInfo(TargetInfo): ...


class ForkConfigInfo(vmodl.DynamicData):
    @property
    def parentEnabled(self) -> bool: ...
    @property
    def childForkGroupId(self) -> str: ...
    @property
    def parentForkGroupId(self) -> str: ...
    @property
    def childType(self) -> str: ...


    class ChildType(Enum):
        none = "none"
        persistent = "persistent"
        nonpersistent = "nonpersistent"


class GuestInfo(vmodl.DynamicData):
    @property
    def toolsStatus(self) -> GuestInfo.ToolsStatus: ...
    @property
    def toolsVersionStatus(self) -> str: ...
    @property
    def toolsVersionStatus2(self) -> str: ...
    @property
    def toolsRunningStatus(self) -> str: ...
    @property
    def toolsVersion(self) -> str: ...
    @property
    def toolsInstallType(self) -> str: ...
    @property
    def guestId(self) -> str: ...
    @property
    def guestFamily(self) -> str: ...
    @property
    def guestFullName(self) -> str: ...
    @property
    def hostName(self) -> str: ...
    @property
    def ipAddress(self) -> str: ...
    @property
    def net(self) -> List[GuestInfo.NicInfo]: ...
    @property
    def ipStack(self) -> List[GuestInfo.StackInfo]: ...
    @property
    def disk(self) -> List[GuestInfo.DiskInfo]: ...
    @property
    def screen(self) -> GuestInfo.ScreenInfo: ...
    @property
    def guestState(self) -> str: ...
    @property
    def appHeartbeatStatus(self) -> str: ...
    @property
    def guestKernelCrashed(self) -> bool: ...
    @property
    def appState(self) -> str: ...
    @property
    def guestOperationsReady(self) -> bool: ...
    @property
    def interactiveGuestOperationsReady(self) -> bool: ...
    @property
    def guestStateChangeSupported(self) -> bool: ...
    @property
    def generationInfo(self) -> List[GuestInfo.NamespaceGenerationInfo]: ...
    @property
    def hwVersion(self) -> str: ...
    @property
    def customizationInfo(self) -> GuestInfo.CustomizationInfo: ...


    class CustomizationInfo(vmodl.DynamicData):
        @property
        def customizationStatus(self) -> str: ...
        @property
        def startTime(self) -> datetime: ...
        @property
        def endTime(self) -> datetime: ...
        @property
        def errorMsg(self) -> str: ...


    class DiskInfo(vmodl.DynamicData):
        @property
        def diskPath(self) -> str: ...
        @property
        def capacity(self) -> long: ...
        @property
        def freeSpace(self) -> long: ...
        @property
        def filesystemType(self) -> str: ...
        @property
        def mappings(self) -> List[GuestInfo.VirtualDiskMapping]: ...


    class NamespaceGenerationInfo(vmodl.DynamicData):
        @property
        def key(self) -> str: ...
        @property
        def generationNo(self) -> int: ...


    class NicInfo(vmodl.DynamicData):
        @property
        def network(self) -> str: ...
        @property
        def ipAddress(self) -> List[str]: ...
        @property
        def macAddress(self) -> str: ...
        @property
        def connected(self) -> bool: ...
        @property
        def deviceConfigId(self) -> int: ...
        @property
        def dnsConfig(self) -> vim.net.DnsConfigInfo: ...
        @property
        def ipConfig(self) -> vim.net.IpConfigInfo: ...
        @property
        def netBIOSConfig(self) -> vim.net.NetBIOSConfigInfo: ...


    class ScreenInfo(vmodl.DynamicData):
        @property
        def width(self) -> int: ...
        @property
        def height(self) -> int: ...


    class StackInfo(vmodl.DynamicData):
        @property
        def dnsConfig(self) -> vim.net.DnsConfigInfo: ...
        @property
        def ipRouteConfig(self) -> vim.net.IpRouteConfigInfo: ...
        @property
        def ipStackConfig(self) -> List[vim.KeyValue]: ...
        @property
        def dhcpConfig(self) -> vim.net.DhcpConfigInfo: ...


    class VirtualDiskMapping(vmodl.DynamicData):
        @property
        def key(self) -> int: ...


    class AppStateType(Enum):
        none = "none"
        appStateOk = "appstateok"
        appStateNeedReset = "appstateneedreset"


    class CustomizationStatus(Enum):
        TOOLSDEPLOYPKG_IDLE = "toolsdeploypkg_idle"
        TOOLSDEPLOYPKG_PENDING = "toolsdeploypkg_pending"
        TOOLSDEPLOYPKG_RUNNING = "toolsdeploypkg_running"
        TOOLSDEPLOYPKG_SUCCEEDED = "toolsdeploypkg_succeeded"
        TOOLSDEPLOYPKG_FAILED = "toolsdeploypkg_failed"


    class GuestState(Enum):
        running = "running"
        shuttingDown = "shuttingdown"
        resetting = "resetting"
        standby = "standby"
        notRunning = "notrunning"
        unknown = "unknown"


    class ToolsInstallType(Enum):
        guestToolsTypeUnknown = "guesttoolstypeunknown"
        guestToolsTypeMSI = "guesttoolstypemsi"
        guestToolsTypeTar = "guesttoolstypetar"
        guestToolsTypeOSP = "guesttoolstypeosp"
        guestToolsTypeOpenVMTools = "guesttoolstypeopenvmtools"


    class ToolsRunningStatus(Enum):
        guestToolsNotRunning = "guesttoolsnotrunning"
        guestToolsRunning = "guesttoolsrunning"
        guestToolsExecutingScripts = "guesttoolsexecutingscripts"


    class ToolsStatus(Enum):
        toolsNotInstalled = "toolsnotinstalled"
        toolsNotRunning = "toolsnotrunning"
        toolsOld = "toolsold"
        toolsOk = "toolsok"


    class ToolsVersionStatus(Enum):
        guestToolsNotInstalled = "guesttoolsnotinstalled"
        guestToolsNeedUpgrade = "guesttoolsneedupgrade"
        guestToolsCurrent = "guesttoolscurrent"
        guestToolsUnmanaged = "guesttoolsunmanaged"
        guestToolsTooOld = "guesttoolstooold"
        guestToolsSupportedOld = "guesttoolssupportedold"
        guestToolsSupportedNew = "guesttoolssupportednew"
        guestToolsTooNew = "guesttoolstoonew"
        guestToolsBlacklisted = "guesttoolsblacklisted"


class GuestIntegrityInfo(vmodl.DynamicData):
    @property
    def enabled(self) -> bool: ...


class GuestMonitoringModeInfo(vmodl.DynamicData):
    @property
    def gmmFile(self) -> str: ...
    @property
    def gmmAppliance(self) -> str: ...


class GuestOsDescriptor(vmodl.DynamicData):
    @property
    def id(self) -> str: ...
    @property
    def family(self) -> str: ...
    @property
    def fullName(self) -> str: ...
    @property
    def supportedMaxCPUs(self) -> int: ...
    @property
    def numSupportedPhysicalSockets(self) -> int: ...
    @property
    def numSupportedCoresPerSocket(self) -> int: ...
    @property
    def supportedMinMemMB(self) -> int: ...
    @property
    def supportedMaxMemMB(self) -> int: ...
    @property
    def recommendedMemMB(self) -> int: ...
    @property
    def recommendedColorDepth(self) -> int: ...
    @property
    def supportedDiskControllerList(self) -> List[type]: ...
    @property
    def recommendedSCSIController(self) -> type: ...
    @property
    def recommendedDiskController(self) -> type: ...
    @property
    def supportedNumDisks(self) -> int: ...
    @property
    def recommendedDiskSizeMB(self) -> int: ...
    @property
    def recommendedCdromController(self) -> type: ...
    @property
    def supportedEthernetCard(self) -> List[type]: ...
    @property
    def recommendedEthernetCard(self) -> type: ...
    @property
    def supportsSlaveDisk(self) -> bool: ...
    @property
    def cpuFeatureMask(self) -> List[vim.host.CpuIdInfo]: ...
    @property
    def smcRequired(self) -> bool: ...
    @property
    def supportsWakeOnLan(self) -> bool: ...
    @property
    def supportsVMI(self) -> bool: ...
    @property
    def supportsMemoryHotAdd(self) -> bool: ...
    @property
    def supportsCpuHotAdd(self) -> bool: ...
    @property
    def supportsCpuHotRemove(self) -> bool: ...
    @property
    def supportedFirmware(self) -> List[str]: ...
    @property
    def recommendedFirmware(self) -> str: ...
    @property
    def supportedUSBControllerList(self) -> List[type]: ...
    @property
    def recommendedUSBController(self) -> type: ...
    @property
    def supports3D(self) -> bool: ...
    @property
    def recommended3D(self) -> bool: ...
    @property
    def smcRecommended(self) -> bool: ...
    @property
    def ich7mRecommended(self) -> bool: ...
    @property
    def usbRecommended(self) -> bool: ...
    @property
    def supportLevel(self) -> str: ...
    @property
    def supportedForCreate(self) -> bool: ...
    @property
    def vRAMSizeInKB(self) -> vim.option.IntOption: ...
    @property
    def numSupportedFloppyDevices(self) -> int: ...
    @property
    def wakeOnLanEthernetCard(self) -> List[type]: ...
    @property
    def supportsPvscsiControllerForBoot(self) -> bool: ...
    @property
    def diskUuidEnabled(self) -> bool: ...
    @property
    def supportsHotPlugPCI(self) -> bool: ...
    @property
    def supportsSecureBoot(self) -> bool: ...
    @property
    def defaultSecureBoot(self) -> bool: ...
    @property
    def persistentMemorySupported(self) -> bool: ...
    @property
    def supportedMinPersistentMemoryMB(self) -> long: ...
    @property
    def supportedMaxPersistentMemoryMB(self) -> long: ...
    @property
    def recommendedPersistentMemoryMB(self) -> long: ...
    @property
    def persistentMemoryHotAddSupported(self) -> bool: ...
    @property
    def persistentMemoryHotRemoveSupported(self) -> bool: ...
    @property
    def persistentMemoryColdGrowthSupported(self) -> bool: ...
    @property
    def persistentMemoryColdGrowthGranularityMB(self) -> long: ...
    @property
    def persistentMemoryHotGrowthSupported(self) -> bool: ...
    @property
    def persistentMemoryHotGrowthGranularityMB(self) -> long: ...
    @property
    def numRecommendedPhysicalSockets(self) -> int: ...
    @property
    def numRecommendedCoresPerSocket(self) -> int: ...
    @property
    def vvtdSupported(self) -> vim.option.BoolOption: ...
    @property
    def vbsSupported(self) -> vim.option.BoolOption: ...
    @property
    def vsgxSupported(self) -> vim.option.BoolOption: ...
    @property
    def vsgxRemoteAttestationSupported(self) -> bool: ...
    @property
    def supportsTPM20(self) -> bool: ...
    @property
    def recommendedTPM20(self) -> bool: ...
    @property
    def vwdtSupported(self) -> bool: ...


    class FirmwareType(Enum):
        bios = "bios"
        efi = "efi"
        csm = "csm"


    class GuestOsFamily(Enum):
        windowsGuest = "windowsguest"
        linuxGuest = "linuxguest"
        netwareGuest = "netwareguest"
        solarisGuest = "solarisguest"
        darwinGuestFamily = "darwinguestfamily"
        otherGuestFamily = "otherguestfamily"


    class GuestOsIdentifier(Enum):
        dosGuest = "dosguest"
        win31Guest = "win31guest"
        win95Guest = "win95guest"
        win98Guest = "win98guest"
        winMeGuest = "winmeguest"
        winNTGuest = "winntguest"
        win2000ProGuest = "win2000proguest"
        win2000ServGuest = "win2000servguest"
        win2000AdvServGuest = "win2000advservguest"
        winXPHomeGuest = "winxphomeguest"
        winXPProGuest = "winxpproguest"
        winXPPro64Guest = "winxppro64guest"
        winNetWebGuest = "winnetwebguest"
        winNetStandardGuest = "winnetstandardguest"
        winNetEnterpriseGuest = "winnetenterpriseguest"
        winNetDatacenterGuest = "winnetdatacenterguest"
        winNetBusinessGuest = "winnetbusinessguest"
        winNetStandard64Guest = "winnetstandard64guest"
        winNetEnterprise64Guest = "winnetenterprise64guest"
        winLonghornGuest = "winlonghornguest"
        winLonghorn64Guest = "winlonghorn64guest"
        winNetDatacenter64Guest = "winnetdatacenter64guest"
        winVistaGuest = "winvistaguest"
        winVista64Guest = "winvista64guest"
        windows7Guest = "windows7guest"
        windows7_64Guest = "windows7_64guest"
        windows7Server64Guest = "windows7server64guest"
        windows8Guest = "windows8guest"
        windows8_64Guest = "windows8_64guest"
        windows8Server64Guest = "windows8server64guest"
        windows9Guest = "windows9guest"
        windows9_64Guest = "windows9_64guest"
        windows9Server64Guest = "windows9server64guest"
        windows11_64Guest = "windows11_64guest"
        windows12_64Guest = "windows12_64guest"
        windowsHyperVGuest = "windowshypervguest"
        windows2019srv_64Guest = "windows2019srv_64guest"
        windows2019srvNext_64Guest = "windows2019srvnext_64guest"
        windows2022srvNext_64Guest = "windows2022srvnext_64guest"
        freebsdGuest = "freebsdguest"
        freebsd64Guest = "freebsd64guest"
        freebsd11Guest = "freebsd11guest"
        freebsd11_64Guest = "freebsd11_64guest"
        freebsd12Guest = "freebsd12guest"
        freebsd12_64Guest = "freebsd12_64guest"
        freebsd13Guest = "freebsd13guest"
        freebsd13_64Guest = "freebsd13_64guest"
        freebsd14Guest = "freebsd14guest"
        freebsd14_64Guest = "freebsd14_64guest"
        redhatGuest = "redhatguest"
        rhel2Guest = "rhel2guest"
        rhel3Guest = "rhel3guest"
        rhel3_64Guest = "rhel3_64guest"
        rhel4Guest = "rhel4guest"
        rhel4_64Guest = "rhel4_64guest"
        rhel5Guest = "rhel5guest"
        rhel5_64Guest = "rhel5_64guest"
        rhel6Guest = "rhel6guest"
        rhel6_64Guest = "rhel6_64guest"
        rhel7Guest = "rhel7guest"
        rhel7_64Guest = "rhel7_64guest"
        rhel8_64Guest = "rhel8_64guest"
        rhel9_64Guest = "rhel9_64guest"
        centosGuest = "centosguest"
        centos64Guest = "centos64guest"
        centos6Guest = "centos6guest"
        centos6_64Guest = "centos6_64guest"
        centos7Guest = "centos7guest"
        centos7_64Guest = "centos7_64guest"
        centos8_64Guest = "centos8_64guest"
        centos9_64Guest = "centos9_64guest"
        oracleLinuxGuest = "oraclelinuxguest"
        oracleLinux64Guest = "oraclelinux64guest"
        oracleLinux6Guest = "oraclelinux6guest"
        oracleLinux6_64Guest = "oraclelinux6_64guest"
        oracleLinux7Guest = "oraclelinux7guest"
        oracleLinux7_64Guest = "oraclelinux7_64guest"
        oracleLinux8_64Guest = "oraclelinux8_64guest"
        oracleLinux9_64Guest = "oraclelinux9_64guest"
        suseGuest = "suseguest"
        suse64Guest = "suse64guest"
        slesGuest = "slesguest"
        sles64Guest = "sles64guest"
        sles10Guest = "sles10guest"
        sles10_64Guest = "sles10_64guest"
        sles11Guest = "sles11guest"
        sles11_64Guest = "sles11_64guest"
        sles12Guest = "sles12guest"
        sles12_64Guest = "sles12_64guest"
        sles15_64Guest = "sles15_64guest"
        sles16_64Guest = "sles16_64guest"
        nld9Guest = "nld9guest"
        oesGuest = "oesguest"
        sjdsGuest = "sjdsguest"
        mandrakeGuest = "mandrakeguest"
        mandrivaGuest = "mandrivaguest"
        mandriva64Guest = "mandriva64guest"
        turboLinuxGuest = "turbolinuxguest"
        turboLinux64Guest = "turbolinux64guest"
        ubuntuGuest = "ubuntuguest"
        ubuntu64Guest = "ubuntu64guest"
        debian4Guest = "debian4guest"
        debian4_64Guest = "debian4_64guest"
        debian5Guest = "debian5guest"
        debian5_64Guest = "debian5_64guest"
        debian6Guest = "debian6guest"
        debian6_64Guest = "debian6_64guest"
        debian7Guest = "debian7guest"
        debian7_64Guest = "debian7_64guest"
        debian8Guest = "debian8guest"
        debian8_64Guest = "debian8_64guest"
        debian9Guest = "debian9guest"
        debian9_64Guest = "debian9_64guest"
        debian10Guest = "debian10guest"
        debian10_64Guest = "debian10_64guest"
        debian11Guest = "debian11guest"
        debian11_64Guest = "debian11_64guest"
        debian12Guest = "debian12guest"
        debian12_64Guest = "debian12_64guest"
        asianux3Guest = "asianux3guest"
        asianux3_64Guest = "asianux3_64guest"
        asianux4Guest = "asianux4guest"
        asianux4_64Guest = "asianux4_64guest"
        asianux5_64Guest = "asianux5_64guest"
        asianux7_64Guest = "asianux7_64guest"
        asianux8_64Guest = "asianux8_64guest"
        asianux9_64Guest = "asianux9_64guest"
        opensuseGuest = "opensuseguest"
        opensuse64Guest = "opensuse64guest"
        fedoraGuest = "fedoraguest"
        fedora64Guest = "fedora64guest"
        coreos64Guest = "coreos64guest"
        vmwarePhoton64Guest = "vmwarephoton64guest"
        other24xLinuxGuest = "other24xlinuxguest"
        other26xLinuxGuest = "other26xlinuxguest"
        otherLinuxGuest = "otherlinuxguest"
        other3xLinuxGuest = "other3xlinuxguest"
        other4xLinuxGuest = "other4xlinuxguest"
        other5xLinuxGuest = "other5xlinuxguest"
        other6xLinuxGuest = "other6xlinuxguest"
        genericLinuxGuest = "genericlinuxguest"
        other24xLinux64Guest = "other24xlinux64guest"
        other26xLinux64Guest = "other26xlinux64guest"
        other3xLinux64Guest = "other3xlinux64guest"
        other4xLinux64Guest = "other4xlinux64guest"
        other5xLinux64Guest = "other5xlinux64guest"
        other6xLinux64Guest = "other6xlinux64guest"
        otherLinux64Guest = "otherlinux64guest"
        solaris6Guest = "solaris6guest"
        solaris7Guest = "solaris7guest"
        solaris8Guest = "solaris8guest"
        solaris9Guest = "solaris9guest"
        solaris10Guest = "solaris10guest"
        solaris10_64Guest = "solaris10_64guest"
        solaris11_64Guest = "solaris11_64guest"
        os2Guest = "os2guest"
        eComStationGuest = "ecomstationguest"
        eComStation2Guest = "ecomstation2guest"
        netware4Guest = "netware4guest"
        netware5Guest = "netware5guest"
        netware6Guest = "netware6guest"
        openServer5Guest = "openserver5guest"
        openServer6Guest = "openserver6guest"
        unixWare7Guest = "unixware7guest"
        darwinGuest = "darwinguest"
        darwin64Guest = "darwin64guest"
        darwin10Guest = "darwin10guest"
        darwin10_64Guest = "darwin10_64guest"
        darwin11Guest = "darwin11guest"
        darwin11_64Guest = "darwin11_64guest"
        darwin12_64Guest = "darwin12_64guest"
        darwin13_64Guest = "darwin13_64guest"
        darwin14_64Guest = "darwin14_64guest"
        darwin15_64Guest = "darwin15_64guest"
        darwin16_64Guest = "darwin16_64guest"
        darwin17_64Guest = "darwin17_64guest"
        darwin18_64Guest = "darwin18_64guest"
        darwin19_64Guest = "darwin19_64guest"
        darwin20_64Guest = "darwin20_64guest"
        darwin21_64Guest = "darwin21_64guest"
        darwin22_64Guest = "darwin22_64guest"
        darwin23_64Guest = "darwin23_64guest"
        vmkernelGuest = "vmkernelguest"
        vmkernel5Guest = "vmkernel5guest"
        vmkernel6Guest = "vmkernel6guest"
        vmkernel65Guest = "vmkernel65guest"
        vmkernel7Guest = "vmkernel7guest"
        vmkernel8Guest = "vmkernel8guest"
        amazonlinux2_64Guest = "amazonlinux2_64guest"
        amazonlinux3_64Guest = "amazonlinux3_64guest"
        crxPod1Guest = "crxpod1guest"
        rockylinux_64Guest = "rockylinux_64guest"
        almalinux_64Guest = "almalinux_64guest"
        otherGuest = "otherguest"
        otherGuest64 = "otherguest64"


    class SupportLevel(Enum):
        experimental = "experimental"
        legacy = "legacy"
        terminated = "terminated"
        supported = "supported"
        unsupported = "unsupported"
        deprecated = "deprecated"
        techPreview = "techpreview"


class GuestQuiesceSpec(vmodl.DynamicData):
    @property
    def timeout(self) -> int: ...


class IdeDiskDeviceInfo(DiskDeviceInfo):
    @property
    def partitionTable(self) -> List[IdeDiskDeviceInfo.PartitionInfo]: ...


    class PartitionInfo(vmodl.DynamicData):
        @property
        def id(self) -> int: ...
        @property
        def capacity(self) -> int: ...


class IndependentFilterSpec(BaseIndependentFilterSpec):
    @property
    def filterName(self) -> str: ...
    @property
    def filterClass(self) -> str: ...
    @property
    def filterCapabilities(self) -> List[vim.KeyValue]: ...


class InstantCloneSpec(vmodl.DynamicData):
    @property
    def name(self) -> str: ...
    @property
    def location(self) -> RelocateSpec: ...
    @property
    def config(self) -> List[vim.option.OptionValue]: ...
    @property
    def biosUuid(self) -> str: ...


class LegacyNetworkSwitchInfo(vmodl.DynamicData):
    @property
    def name(self) -> str: ...


class Message(vmodl.DynamicData):
    @property
    def id(self) -> str: ...
    @property
    def argument(self) -> List[object]: ...
    @property
    def text(self) -> str: ...


class VmMetadata(vmodl.DynamicData):
    @property
    def vmId(self) -> str: ...
    @property
    def metadata(self) -> str: ...


class VmMetadataInput(vmodl.DynamicData):
    @property
    def operation(self) -> str: ...
    @property
    def vmMetadata(self) -> MetadataManager.VmMetadata: ...


class VmMetadataOwner(vmodl.DynamicData):
    @property
    def name(self) -> str: ...


    class Owner(Enum):
        ComVmwareVsphereHA = "comvmwarevsphereha"


class VmMetadataResult(vmodl.DynamicData):
    @property
    def vmMetadata(self) -> MetadataManager.VmMetadata: ...
    @property
    def error(self) -> vmodl.MethodFault: ...


class NetworkInfo(TargetInfo):
    @property
    def network(self) -> vim.Network.Summary: ...
    @property
    def vswitch(self) -> str: ...


class NetworkShaperInfo(vmodl.DynamicData):
    @property
    def enabled(self) -> bool: ...
    @property
    def peakBps(self) -> long: ...
    @property
    def averageBps(self) -> long: ...
    @property
    def burstSize(self) -> long: ...


class OpaqueNetworkInfo(TargetInfo):
    @property
    def network(self) -> vim.OpaqueNetwork.Summary: ...
    @property
    def networkReservationSupported(self) -> bool: ...


class ParallelInfo(TargetInfo): ...


class PciPassthroughInfo(TargetInfo):
    @property
    def pciDevice(self) -> vim.host.PciDevice: ...
    @property
    def systemId(self) -> str: ...


class PciSharedGpuPassthroughInfo(TargetInfo):
    @property
    def vgpu(self) -> str: ...


class PrecisionClockInfo(TargetInfo):
    @property
    def systemClockProtocol(self) -> str: ...


class ProfileDetails(vmodl.DynamicData):
    @property
    def profile(self) -> List[ProfileSpec]: ...
    @property
    def diskProfileDetails(self) -> List[ProfileDetails.DiskProfileDetails]: ...


    class DiskProfileDetails(vmodl.DynamicData):
        @property
        def diskId(self) -> int: ...
        @property
        def profile(self) -> List[ProfileSpec]: ...


class ProfileRawData(vmodl.DynamicData):
    @property
    def extensionKey(self) -> str: ...
    @property
    def objectData(self) -> str: ...


class ProfileSpec(vmodl.DynamicData): ...


class PropertyRelation(vmodl.DynamicData):
    @property
    def key(self) -> vmodl.DynamicProperty: ...
    @property
    def relations(self) -> List[vmodl.DynamicProperty]: ...


class QuestionInfo(vmodl.DynamicData):
    @property
    def id(self) -> str: ...
    @property
    def text(self) -> str: ...
    @property
    def choice(self) -> vim.option.ChoiceOption: ...
    @property
    def message(self) -> List[Message]: ...


class RelocateSpec(vmodl.DynamicData):
    @property
    def service(self) -> vim.ServiceLocator: ...
    @property
    def folder(self) -> vim.Folder: ...
    @property
    def datastore(self) -> vim.Datastore: ...
    @property
    def diskMoveType(self) -> str: ...
    @property
    def pool(self) -> vim.ResourcePool: ...
    @property
    def host(self) -> vim.HostSystem: ...
    @property
    def disk(self) -> List[RelocateSpec.DiskLocator]: ...
    @property
    def transform(self) -> RelocateSpec.Transformation: ...
    @property
    def deviceChange(self) -> List[device.VirtualDeviceSpec]: ...
    @property
    def profile(self) -> List[ProfileSpec]: ...
    @property
    def cryptoSpec(self) -> vim.encryption.CryptoSpec: ...


    class DiskLocator(vmodl.DynamicData):
        @property
        def diskId(self) -> int: ...
        @property
        def datastore(self) -> vim.Datastore: ...
        @property
        def diskMoveType(self) -> str: ...
        @property
        def diskBackingInfo(self) -> device.VirtualDevice.BackingInfo: ...
        @property
        def profile(self) -> List[ProfileSpec]: ...
        @property
        def backing(self) -> RelocateSpec.DiskLocator.BackingSpec: ...
        @property
        def filterSpec(self) -> List[BaseIndependentFilterSpec]: ...


        class BackingSpec(vmodl.DynamicData):
            @property
            def parent(self) -> RelocateSpec.DiskLocator.BackingSpec: ...
            @property
            def crypto(self) -> vim.encryption.CryptoSpec: ...


    class DiskMoveOptions(Enum):
        moveAllDiskBackingsAndAllowSharing = "movealldiskbackingsandallowsharing"
        moveAllDiskBackingsAndDisallowSharing = "movealldiskbackingsanddisallowsharing"
        moveChildMostDiskBacking = "movechildmostdiskbacking"
        createNewChildDiskBacking = "createnewchilddiskbacking"
        moveAllDiskBackingsAndConsolidate = "movealldiskbackingsandconsolidate"


    class Transformation(Enum):
        flat = "flat"
        sparse = "sparse"


class ReplicationConfigSpec(vmodl.DynamicData):
    @property
    def generation(self) -> long: ...
    @property
    def vmReplicationId(self) -> str: ...
    @property
    def destination(self) -> str: ...
    @property
    def port(self) -> int: ...
    @property
    def rpo(self) -> long: ...
    @property
    def quiesceGuestEnabled(self) -> bool: ...
    @property
    def paused(self) -> bool: ...
    @property
    def oppUpdatesEnabled(self) -> bool: ...
    @property
    def netCompressionEnabled(self) -> bool: ...
    @property
    def netEncryptionEnabled(self) -> bool: ...
    @property
    def encryptionDestination(self) -> str: ...
    @property
    def encryptionPort(self) -> int: ...
    @property
    def remoteCertificateThumbprint(self) -> str: ...
    @property
    def dataSetsReplicationEnabled(self) -> bool: ...
    @property
    def disk(self) -> List[ReplicationConfigSpec.DiskSettings]: ...


    class DiskSettings(vmodl.DynamicData):
        @property
        def key(self) -> int: ...
        @property
        def diskReplicationId(self) -> str: ...


class RuntimeInfo(vmodl.DynamicData):
    @property
    def device(self) -> List[DeviceRuntimeInfo]: ...
    @property
    def host(self) -> vim.HostSystem: ...
    @property
    def connectionState(self) -> vim.VirtualMachine.ConnectionState: ...
    @property
    def powerState(self) -> vim.VirtualMachine.PowerState: ...
    @property
    def vmFailoverInProgress(self) -> bool: ...
    @property
    def faultToleranceState(self) -> vim.VirtualMachine.FaultToleranceState: ...
    @property
    def dasVmProtection(self) -> RuntimeInfo.DasProtectionState: ...
    @property
    def toolsInstallerMounted(self) -> bool: ...
    @property
    def suspendTime(self) -> datetime: ...
    @property
    def bootTime(self) -> datetime: ...
    @property
    def suspendInterval(self) -> long: ...
    @property
    def question(self) -> QuestionInfo: ...
    @property
    def memoryOverhead(self) -> long: ...
    @property
    def maxCpuUsage(self) -> int: ...
    @property
    def maxMemoryUsage(self) -> int: ...
    @property
    def numMksConnections(self) -> int: ...
    @property
    def recordReplayState(self) -> vim.VirtualMachine.RecordReplayState: ...
    @property
    def cleanPowerOff(self) -> bool: ...
    @property
    def needSecondaryReason(self) -> str: ...
    @property
    def onlineStandby(self) -> bool: ...
    @property
    def minRequiredEVCModeKey(self) -> str: ...
    @property
    def consolidationNeeded(self) -> bool: ...
    @property
    def offlineFeatureRequirement(self) -> List[FeatureRequirement]: ...
    @property
    def featureRequirement(self) -> List[FeatureRequirement]: ...
    @property
    def featureMask(self) -> List[vim.host.FeatureMask]: ...
    @property
    def vFlashCacheAllocation(self) -> long: ...
    @property
    def paused(self) -> bool: ...
    @property
    def snapshotInBackground(self) -> bool: ...
    @property
    def quiescedForkParent(self) -> bool: ...
    @property
    def instantCloneFrozen(self) -> bool: ...
    @property
    def cryptoState(self) -> str: ...
    @property
    def suspendedToMemory(self) -> bool: ...
    @property
    def opNotificationTimeout(self) -> long: ...
    @property
    def iommuActive(self) -> bool: ...


    class DasProtectionState(vmodl.DynamicData):
        @property
        def dasProtected(self) -> bool: ...


class ScheduledHardwareUpgradeInfo(vmodl.DynamicData):
    @property
    def upgradePolicy(self) -> str: ...
    @property
    def versionKey(self) -> str: ...
    @property
    def scheduledHardwareUpgradeStatus(self) -> str: ...
    @property
    def fault(self) -> vmodl.MethodFault: ...


    class HardwareUpgradePolicy(Enum):
        never = "never"
        onSoftPowerOff = "onsoftpoweroff"
        always = "always"


    class HardwareUpgradeStatus(Enum):
        none = "none"
        pending = "pending"
        success = "success"
        failed = "failed"


class ScsiDiskDeviceInfo(DiskDeviceInfo):
    @property
    def disk(self) -> vim.host.ScsiDisk: ...
    @property
    def transportHint(self) -> str: ...
    @property
    def lunNumber(self) -> int: ...


class ScsiPassthroughInfo(TargetInfo):
    @property
    def scsiClass(self) -> str: ...
    @property
    def vendor(self) -> str: ...
    @property
    def physicalUnitNumber(self) -> int: ...


    class ScsiClass(Enum):
        disk = "disk"
        tape = "tape"
        printer = "printer"
        processor = "processor"
        worm = "worm"
        cdrom = "cdrom"
        scanner = "scanner"
        optical = "optical"
        media = "media"
        com = "com"
        raid = "raid"
        unknown = "unknown"


class SerialInfo(TargetInfo): ...


class SgxInfo(vmodl.DynamicData):
    @property
    def epcSize(self) -> long: ...
    @property
    def flcMode(self) -> str: ...
    @property
    def lePubKeyHash(self) -> str: ...
    @property
    def requireAttestation(self) -> bool: ...


    class FlcModes(Enum):
        locked = "locked"
        unlocked = "unlocked"


class SgxTargetInfo(TargetInfo):
    @property
    def maxEpcSize(self) -> long: ...
    @property
    def flcModes(self) -> List[str]: ...
    @property
    def lePubKeyHashes(self) -> List[str]: ...
    @property
    def requireAttestationSupported(self) -> bool: ...


class SnapshotInfo(vmodl.DynamicData):
    @property
    def currentSnapshot(self) -> Snapshot: ...
    @property
    def rootSnapshotList(self) -> List[SnapshotTree]: ...


class SnapshotTree(vmodl.DynamicData):
    @property
    def snapshot(self) -> Snapshot: ...
    @property
    def vm(self) -> vim.VirtualMachine: ...
    @property
    def name(self) -> str: ...
    @property
    def description(self) -> str: ...
    @property
    def id(self) -> int: ...
    @property
    def createTime(self) -> datetime: ...
    @property
    def state(self) -> vim.VirtualMachine.PowerState: ...
    @property
    def quiesced(self) -> bool: ...
    @property
    def backupManifest(self) -> str: ...
    @property
    def childSnapshotList(self) -> List[SnapshotTree]: ...
    @property
    def replaySupported(self) -> bool: ...


class SoundInfo(TargetInfo): ...


class SriovDevicePoolInfo(vmodl.DynamicData):
    @property
    def key(self) -> str: ...


class SriovInfo(PciPassthroughInfo):
    @property
    def virtualFunction(self) -> bool: ...
    @property
    def pnic(self) -> str: ...
    @property
    def devicePool(self) -> SriovDevicePoolInfo: ...


class SriovNetworkDevicePoolInfo(SriovDevicePoolInfo):
    @property
    def switchKey(self) -> str: ...
    @property
    def switchUuid(self) -> str: ...


class StorageInfo(vmodl.DynamicData):
    @property
    def perDatastoreUsage(self) -> List[StorageInfo.UsageOnDatastore]: ...
    @property
    def timestamp(self) -> datetime: ...


    class UsageOnDatastore(vmodl.DynamicData):
        @property
        def datastore(self) -> vim.Datastore: ...
        @property
        def committed(self) -> long: ...
        @property
        def uncommitted(self) -> long: ...
        @property
        def unshared(self) -> long: ...


class Summary(vmodl.DynamicData):
    @property
    def vm(self) -> vim.VirtualMachine: ...
    @property
    def runtime(self) -> RuntimeInfo: ...
    @property
    def guest(self) -> Summary.GuestSummary: ...
    @property
    def config(self) -> Summary.ConfigSummary: ...
    @property
    def storage(self) -> Summary.StorageSummary: ...
    @property
    def quickStats(self) -> Summary.QuickStats: ...
    @property
    def overallStatus(self) -> vim.ManagedEntity.Status: ...
    @property
    def customValue(self) -> List[vim.CustomFieldsManager.Value]: ...


    class ConfigSummary(vmodl.DynamicData):
        @property
        def name(self) -> str: ...
        @property
        def template(self) -> bool: ...
        @property
        def vmPathName(self) -> str: ...
        @property
        def memorySizeMB(self) -> int: ...
        @property
        def cpuReservation(self) -> int: ...
        @property
        def memoryReservation(self) -> int: ...
        @property
        def numCpu(self) -> int: ...
        @property
        def numEthernetCards(self) -> int: ...
        @property
        def numVirtualDisks(self) -> int: ...
        @property
        def uuid(self) -> str: ...
        @property
        def instanceUuid(self) -> str: ...
        @property
        def guestId(self) -> str: ...
        @property
        def guestFullName(self) -> str: ...
        @property
        def annotation(self) -> str: ...
        @property
        def product(self) -> vim.vApp.ProductInfo: ...
        @property
        def installBootRequired(self) -> bool: ...
        @property
        def ftInfo(self) -> FaultToleranceConfigInfo: ...
        @property
        def managedBy(self) -> vim.ext.ManagedByInfo: ...
        @property
        def tpmPresent(self) -> bool: ...
        @property
        def numVmiopBackings(self) -> int: ...
        @property
        def hwVersion(self) -> str: ...


    class GuestSummary(vmodl.DynamicData):
        @property
        def guestId(self) -> str: ...
        @property
        def guestFullName(self) -> str: ...
        @property
        def toolsStatus(self) -> GuestInfo.ToolsStatus: ...
        @property
        def toolsVersionStatus(self) -> str: ...
        @property
        def toolsVersionStatus2(self) -> str: ...
        @property
        def toolsRunningStatus(self) -> str: ...
        @property
        def hostName(self) -> str: ...
        @property
        def ipAddress(self) -> str: ...
        @property
        def hwVersion(self) -> str: ...


    class QuickStats(vmodl.DynamicData):
        @property
        def overallCpuUsage(self) -> int: ...
        @property
        def overallCpuDemand(self) -> int: ...
        @property
        def overallCpuReadiness(self) -> int: ...
        @property
        def guestMemoryUsage(self) -> int: ...
        @property
        def hostMemoryUsage(self) -> int: ...
        @property
        def guestHeartbeatStatus(self) -> vim.ManagedEntity.Status: ...
        @property
        def distributedCpuEntitlement(self) -> int: ...
        @property
        def distributedMemoryEntitlement(self) -> int: ...
        @property
        def staticCpuEntitlement(self) -> int: ...
        @property
        def staticMemoryEntitlement(self) -> int: ...
        @property
        def grantedMemory(self) -> int: ...
        @property
        def privateMemory(self) -> int: ...
        @property
        def sharedMemory(self) -> int: ...
        @property
        def swappedMemory(self) -> int: ...
        @property
        def balloonedMemory(self) -> int: ...
        @property
        def consumedOverheadMemory(self) -> int: ...
        @property
        def ftLogBandwidth(self) -> int: ...
        @property
        def ftSecondaryLatency(self) -> int: ...
        @property
        def ftLatencyStatus(self) -> vim.ManagedEntity.Status: ...
        @property
        def compressedMemory(self) -> long: ...
        @property
        def uptimeSeconds(self) -> int: ...
        @property
        def ssdSwappedMemory(self) -> long: ...
        @property
        def activeMemory(self) -> int: ...
        @property
        def memoryTierStats(self) -> List[Summary.QuickStats.MemoryTierStats]: ...


        class MemoryTierStats(vmodl.DynamicData):
            @property
            def memoryTierType(self) -> str: ...
            @property
            def readBandwidth(self) -> long: ...


    class StorageSummary(vmodl.DynamicData):
        @property
        def committed(self) -> long: ...
        @property
        def uncommitted(self) -> long: ...
        @property
        def unshared(self) -> long: ...
        @property
        def timestamp(self) -> datetime: ...


class TargetInfo(vmodl.DynamicData):
    @property
    def name(self) -> str: ...
    @property
    def configurationTag(self) -> List[str]: ...


    class ConfigurationTag(Enum):
        compliant = "compliant"
        clusterWide = "clusterwide"


class ToolsConfigInfo(vmodl.DynamicData):
    @property
    def toolsVersion(self) -> int: ...
    @property
    def toolsInstallType(self) -> str: ...
    @property
    def afterPowerOn(self) -> bool: ...
    @property
    def afterResume(self) -> bool: ...
    @property
    def beforeGuestStandby(self) -> bool: ...
    @property
    def beforeGuestShutdown(self) -> bool: ...
    @property
    def beforeGuestReboot(self) -> bool: ...
    @property
    def toolsUpgradePolicy(self) -> str: ...
    @property
    def pendingCustomization(self) -> str: ...
    @property
    def customizationKeyId(self) -> vim.encryption.CryptoKeyId: ...
    @property
    def syncTimeWithHostAllowed(self) -> bool: ...
    @property
    def syncTimeWithHost(self) -> bool: ...
    @property
    def lastInstallInfo(self) -> ToolsConfigInfo.ToolsLastInstallInfo: ...


    class ToolsLastInstallInfo(vmodl.DynamicData):
        @property
        def counter(self) -> int: ...
        @property
        def fault(self) -> vmodl.MethodFault: ...


    class UpgradePolicy(Enum):
        manual = "manual"
        upgradeAtPowerCycle = "upgradeatpowercycle"


class UsbInfo(TargetInfo):
    @property
    def description(self) -> str: ...
    @property
    def vendor(self) -> int: ...
    @property
    def product(self) -> int: ...
    @property
    def physicalPath(self) -> str: ...
    @property
    def family(self) -> List[str]: ...
    @property
    def speed(self) -> List[str]: ...
    @property
    def summary(self) -> Summary: ...


    class Family(Enum):
        audio = "audio"
        hid = "hid"
        hid_bootable = "hid_bootable"
        physical = "physical"
        communication = "communication"
        imaging = "imaging"
        printer = "printer"
        storage = "storage"
        hub = "hub"
        smart_card = "smart_card"
        security = "security"
        video = "video"
        wireless = "wireless"
        bluetooth = "bluetooth"
        wusb = "wusb"
        pda = "pda"
        vendor_specific = "vendor_specific"
        other = "other"
        unknownFamily = "unknownfamily"


    class Speed(Enum):
        low = "low"
        full = "full"
        high = "high"
        superSpeed = "superspeed"
        superSpeedPlus = "superspeedplus"
        superSpeed20Gbps = "superspeed20gbps"
        unknownSpeed = "unknownspeed"


class UsbScanCodeSpec(vmodl.DynamicData):
    @property
    def keyEvents(self) -> List[UsbScanCodeSpec.KeyEvent]: ...


    class KeyEvent(vmodl.DynamicData):
        @property
        def usbHidCode(self) -> int: ...
        @property
        def modifiers(self) -> UsbScanCodeSpec.ModifierType: ...


    class ModifierType(vmodl.DynamicData):
        @property
        def leftControl(self) -> bool: ...
        @property
        def leftShift(self) -> bool: ...
        @property
        def leftAlt(self) -> bool: ...
        @property
        def leftGui(self) -> bool: ...
        @property
        def rightControl(self) -> bool: ...
        @property
        def rightShift(self) -> bool: ...
        @property
        def rightAlt(self) -> bool: ...
        @property
        def rightGui(self) -> bool: ...


class VFlashModuleInfo(TargetInfo):
    @property
    def vFlashModule(self) -> vim.host.VFlashManager.VFlashCacheConfigInfo.VFlashModuleConfigOption: ...


class VcpuConfig(vmodl.DynamicData):
    @property
    def latencySensitivity(self) -> vim.LatencySensitivity: ...


class VendorDeviceGroupInfo(TargetInfo):
    @property
    def deviceGroupName(self) -> str: ...
    @property
    def deviceGroupDescription(self) -> str: ...
    @property
    def componentDeviceInfo(self) -> List[VendorDeviceGroupInfo.ComponentDeviceInfo]: ...


    class ComponentDeviceInfo(vmodl.DynamicData):
        @property
        def type(self) -> str: ...
        @property
        def vendorName(self) -> str: ...
        @property
        def deviceName(self) -> str: ...
        @property
        def isConfigurable(self) -> bool: ...
        @property
        def device(self) -> device.VirtualDevice: ...


        class ComponentType(Enum):
            pciPassthru = "pcipassthru"
            nvidiaVgpu = "nvidiavgpu"
            sriovNic = "sriovnic"
            dvx = "dvx"


class VgpuDeviceInfo(TargetInfo):
    @property
    def deviceName(self) -> str: ...
    @property
    def deviceVendorId(self) -> long: ...
    @property
    def maxFbSizeInGib(self) -> long: ...
    @property
    def timeSlicedCapable(self) -> bool: ...
    @property
    def migCapable(self) -> bool: ...
    @property
    def computeProfileCapable(self) -> bool: ...
    @property
    def quadroProfileCapable(self) -> bool: ...


class VgpuProfileInfo(TargetInfo):
    @property
    def profileName(self) -> str: ...
    @property
    def deviceVendorId(self) -> long: ...
    @property
    def fbSizeInGib(self) -> long: ...
    @property
    def profileSharing(self) -> str: ...
    @property
    def profileClass(self) -> str: ...


    class ProfileClass(Enum):
        compute = "compute"
        quadro = "quadro"


    class ProfileSharing(Enum):
        timeSliced = "timesliced"
        mig = "mig"


class VirtualDeviceGroups(vmodl.DynamicData):
    @property
    def deviceGroup(self) -> List[VirtualDeviceGroups.DeviceGroup]: ...


    class DeviceGroup(vmodl.DynamicData):
        @property
        def groupInstanceKey(self) -> int: ...
        @property
        def deviceInfo(self) -> vim.Description: ...


    class VendorDeviceGroup(VirtualDeviceGroups.DeviceGroup):
        @property
        def deviceGroupName(self) -> str: ...


class VirtualDeviceSwap(vmodl.DynamicData):
    @property
    def lsiToPvscsi(self) -> VirtualDeviceSwap.DeviceSwapInfo: ...


    class DeviceSwapInfo(vmodl.DynamicData):
        @property
        def enabled(self) -> bool: ...
        @property
        def applicable(self) -> bool: ...
        @property
        def status(self) -> str: ...


    class DeviceSwapStatus(Enum):
        none = "none"
        scheduled = "scheduled"
        inprogress = "inprogress"
        failed = "failed"
        completed = "completed"


class VirtualHardware(vmodl.DynamicData):
    @property
    def numCPU(self) -> int: ...
    @property
    def numCoresPerSocket(self) -> int: ...
    @property
    def autoCoresPerSocket(self) -> bool: ...
    @property
    def memoryMB(self) -> int: ...
    @property
    def virtualICH7MPresent(self) -> bool: ...
    @property
    def virtualSMCPresent(self) -> bool: ...
    @property
    def device(self) -> List[device.VirtualDevice]: ...
    @property
    def motherboardLayout(self) -> str: ...
    @property
    def simultaneousThreads(self) -> int: ...


    class MotherboardLayout(Enum):
        i440bxHostBridge = "i440bxhostbridge"
        acpiHostBridges = "acpihostbridges"


class VirtualHardwareOption(vmodl.DynamicData):
    @property
    def hwVersion(self) -> int: ...
    @property
    def virtualDeviceOption(self) -> List[device.VirtualDeviceOption]: ...
    @property
    def deviceListReadonly(self) -> bool: ...
    @property
    def numCPU(self) -> List[int]: ...
    @property
    def numCoresPerSocket(self) -> vim.option.IntOption: ...
    @property
    def autoCoresPerSocket(self) -> vim.option.BoolOption: ...
    @property
    def numCpuReadonly(self) -> bool: ...
    @property
    def memoryMB(self) -> vim.option.LongOption: ...
    @property
    def numPCIControllers(self) -> vim.option.IntOption: ...
    @property
    def numIDEControllers(self) -> vim.option.IntOption: ...
    @property
    def numUSBControllers(self) -> vim.option.IntOption: ...
    @property
    def numUSBXHCIControllers(self) -> vim.option.IntOption: ...
    @property
    def numSIOControllers(self) -> vim.option.IntOption: ...
    @property
    def numPS2Controllers(self) -> vim.option.IntOption: ...
    @property
    def licensingLimit(self) -> List[PropertyPath]: ...
    @property
    def numSupportedWwnPorts(self) -> vim.option.IntOption: ...
    @property
    def numSupportedWwnNodes(self) -> vim.option.IntOption: ...
    @property
    def resourceConfigOption(self) -> vim.ResourceConfigOption: ...
    @property
    def numNVDIMMControllers(self) -> vim.option.IntOption: ...
    @property
    def numTPMDevices(self) -> vim.option.IntOption: ...
    @property
    def numWDTDevices(self) -> vim.option.IntOption: ...
    @property
    def numPrecisionClockDevices(self) -> vim.option.IntOption: ...
    @property
    def epcMemoryMB(self) -> vim.option.LongOption: ...
    @property
    def acpiHostBridgesFirmware(self) -> List[str]: ...
    @property
    def numCpuSimultaneousThreads(self) -> vim.option.IntOption: ...
    @property
    def numNumaNodes(self) -> vim.option.IntOption: ...
    @property
    def numDeviceGroups(self) -> vim.option.IntOption: ...
    @property
    def deviceGroupTypes(self) -> List[type]: ...


class VirtualNuma(vmodl.DynamicData):
    @property
    def coresPerNumaNode(self) -> int: ...
    @property
    def exposeVnumaOnCpuHotadd(self) -> bool: ...


class VirtualNumaInfo(vmodl.DynamicData):
    @property
    def coresPerNumaNode(self) -> int: ...
    @property
    def autoCoresPerNumaNode(self) -> bool: ...
    @property
    def vnumaOnCpuHotaddExposed(self) -> bool: ...


class VirtualPMem(vmodl.DynamicData):
    @property
    def snapshotMode(self) -> str: ...


    class SnapshotMode(Enum):
        independent_persistent = "independent_persistent"
        independent_eraseonrevert = "independent_eraseonrevert"


class VmImportSpec(vim.ImportSpec):
    @property
    def configSpec(self) -> ConfigSpec: ...
    @property
    def resPoolEntity(self) -> vim.ResourcePool: ...


class WindowsQuiesceSpec(GuestQuiesceSpec):
    @property
    def vssBackupType(self) -> int: ...
    @property
    def vssBootableSystemState(self) -> bool: ...
    @property
    def vssPartialFileSupport(self) -> bool: ...
    @property
    def vssBackupContext(self) -> str: ...


    class VssBackupContext(Enum):
        ctx_auto = "ctx_auto"
        ctx_backup = "ctx_backup"
        ctx_file_share_backup = "ctx_file_share_backup"


class EndGuestQuiesceError(vim.version.version1): ...


class VmMetadataOp(vim.version.version9): ...


class Owner(vim.version.version9): ...