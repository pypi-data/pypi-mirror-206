[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 120
skip-string-normalization = true
extend-exclude = '''
/(
  | tests/config/data
  | tests/run/runs_dir
  | tests/run/test_dir_1
  | tests/run/test_dir_2
)/
'''

[tool.pytest.ini_options]
# Disable entrypoints for hyalus, re-enabling any functionality in conftest.py
addopts = "-p no:run_dir"

[tool.coverage.run]
source = ["hyalus"]
omit = ["tests/*"]
parallel = true
concurrency = ["multiprocessing"]
sigterm = true
# When using pytest --cov and spawning subprocesses, this is incorrectly logged based on module import order
disable_warnings = ["module-not-measured", "no-data-collected", "module-not-imported"]

[tool.coverage.paths]
source = ["src/hyalus", "*/site-packages/hyalus"]

[tool.coverage.report]
show_missing = true
omit = ["**/pytest*/*"]
fail_under = 90

[tool.pylint.main]
# Specify a score threshold to be exceeded before program exits with error.
fail-under = 9.5

# Files or directories to be skipped. They should be base names, not paths.
ignore = ["build", "docs", "confluence"]

# Add files or directories matching the regex patterns to the ignore-list. The
# regex matches against paths and can be in Posix or Windows format.
ignore-paths = ['tests/.*/config.py']

[tool.pylint.basic]
good-names = ["fh", "fn", "df", "i", "j", "k", "ex", "Run", "_"]

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions = []

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 120

[tool.pylint.similarities]
min-similarity-lines = 8
ignore-imports = true

[tool.pylint."messages control"]
disable = ["raw-checker-failed", "locally-disabled", "file-ignored", "suppressed-message", "deprecated-pragma", "use-symbolic-message-instead", "logging-fstring-interpolation"]

[tool.mypy]
show_error_codes = true
no_strict_optional = true
exclude = [
    'build',
    'docs',
    'confluence',
    'tests/config/data',
    'tests/run/runs_dir/*',
    'tests/run/test_dir_*/*'
]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true
allow_untyped_calls = true
# mypy doesn't handle staticmethods that are defined without the @decorator syntax, as is done with @apply_decorator(staticmethod) to a test class, see https://github.com/python/mypy/issues/13434
disable_error_code = ["misc"]
