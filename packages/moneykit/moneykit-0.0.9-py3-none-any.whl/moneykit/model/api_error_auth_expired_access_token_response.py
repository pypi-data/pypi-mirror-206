# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from moneykit import schemas  # noqa: F401


class APIErrorAuthExpiredAccessTokenResponse(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        class properties:
            class error_code(schemas.EnumBase, schemas.StrSchema):
                class MetaOapg:
                    enum_value_to_name = {
                        "api_error.auth.expired_access_token": "API_ERROR_AUTH_EXPIRED_ACCESS_TOKEN",
                    }

                @schemas.classproperty
                def API_ERROR_AUTH_EXPIRED_ACCESS_TOKEN(cls):
                    return cls("api_error.auth.expired_access_token")

            error_message = schemas.StrSchema

            class documentation_url(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "documentation_url":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            __annotations__ = {
                "error_code": error_code,
                "error_message": error_message,
                "documentation_url": documentation_url,
            }

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_code"]) -> MetaOapg.properties.error_code:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_message"]) -> MetaOapg.properties.error_message:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["documentation_url"]
    ) -> MetaOapg.properties.documentation_url:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "error_code",
                "error_message",
                "documentation_url",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["error_code"]
    ) -> typing.Union[MetaOapg.properties.error_code, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["error_message"]
    ) -> typing.Union[MetaOapg.properties.error_message, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["documentation_url"]
    ) -> typing.Union[MetaOapg.properties.documentation_url, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "error_code",
                "error_message",
                "documentation_url",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        error_code: typing.Union[MetaOapg.properties.error_code, str, schemas.Unset] = schemas.unset,
        error_message: typing.Union[MetaOapg.properties.error_message, str, schemas.Unset] = schemas.unset,
        documentation_url: typing.Union[
            MetaOapg.properties.documentation_url, None, str, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "APIErrorAuthExpiredAccessTokenResponse":
        return super().__new__(
            cls,
            *_args,
            error_code=error_code,
            error_message=error_message,
            documentation_url=documentation_url,
            _configuration=_configuration,
            **kwargs,
        )
