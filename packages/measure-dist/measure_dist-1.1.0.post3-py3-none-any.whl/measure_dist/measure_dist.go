/*
cgo stubs for package measure_dist.
File is generated by gopy. Do not edit.
gopy build -output=measure_dist -vm=/home/gmnx/.pyenv/versions/3.6.15/bin/python3.6 .
*/

package main

/*

#cgo CFLAGS: -I/home/gmnx/.pyenv/versions/3.6.15/include/python3.6m -Wno-error -Wno-implicit-function-declaration -Wno-int-conversion
#cgo LDFLAGS: -L/home/gmnx/.pyenv/versions/3.6.15/lib -lpython3.6m -ldl -lm

// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}

*/
import "C"
import (
	"errors"
	"reflect"

	"github.com/go-python/gopy/gopyh" // handler

	"encoding/xml"
	"measure_dist"
)

// main doesn't do anything in lib / pkg mode, but is essential for exe mode
func main() {

}

// initialization functions -- can be called from python after library is loaded
// GoPyInitRunFile runs a separate python file -- call in GoPyInit if it
// steals the main thread e.g., for GUI event loop, as in GoGi startup.

//export GoPyInit
func GoPyInit() {

}

// type for the handle -- int64 for speed (can switch to string)
type GoHandle int64
type CGoHandle C.longlong

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
//export DecRef
func DecRef(handle CGoHandle) {
	gopyh.DecRef(gopyh.CGoHandle(handle))
}

// IncRef increments the reference count for the specified handle.
//
//export IncRef
func IncRef(handle CGoHandle) {
	gopyh.IncRef(gopyh.CGoHandle(handle))
}

// NumHandles returns the number of handles currently in use.
//
//export NumHandles
func NumHandles() int {
	return gopyh.NumHandles()
}

// boolGoToPy converts a Go bool to python-compatible C.char
func boolGoToPy(b bool) C.char {
	if b {
		return 1
	}
	return 0
}

// boolPyToGo converts a python-compatible C.Char to Go bool
func boolPyToGo(b C.char) bool {
	if b != 0 {
		return true
	}
	return false
}

func complex64GoToPy(c complex64) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex64PyToGo(o *C.PyObject) complex64 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float32(v.real), float32(v.imag))
}

func complex128GoToPy(c complex128) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex128PyToGo(o *C.PyObject) complex128 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float64(v.real), float64(v.imag))
}

// errorGoToPy converts a Go error to python-compatible C.CString
func errorGoToPy(e error) *C.char {
	if e != nil {
		return C.CString(e.Error())
	}
	return C.CString("")
}

// --- generated code for package: measure_dist below: ---

// ---- External Types Outside of Targeted Packages ---

// Converters for non-pointer handles for type: xml.Name
func ptrFromHandle_xml_Name(h CGoHandle) *xml.Name {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "xml.Name")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(xml.Name{})).(*xml.Name)
}
func handleFromPtr_xml_Name(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("xml.Name", p))
}

// ---- Package: go ---

// ---- Types ---

// Converters for implicit pointer handles for type: []bool
func ptrFromHandle_Slice_bool(h CGoHandle) *[]bool {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]bool")
	if p == nil {
		return nil
	}
	return p.(*[]bool)
}
func deptrFromHandle_Slice_bool(h CGoHandle) []bool {
	p := ptrFromHandle_Slice_bool(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_bool(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]bool", p))
}

// --- wrapping slice: []bool ---
//
//export Slice_bool_CTor
func Slice_bool_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_bool(&[]bool{}))
}

//export Slice_bool_len
func Slice_bool_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_bool(handle))
}

//export Slice_bool_elem
func Slice_bool_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_bool(handle)
	return boolGoToPy(s[_idx])
}

//export Slice_bool_subslice
func Slice_bool_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_bool(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_bool(&ss))
}

//export Slice_bool_set
func Slice_bool_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_bool(handle)
	s[_idx] = boolPyToGo(_vl)
}

//export Slice_bool_append
func Slice_bool_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_bool(handle)
	*s = append(*s, boolPyToGo(_vl))
}

// Converters for implicit pointer handles for type: []byte
func ptrFromHandle_Slice_byte(h CGoHandle) *[]byte {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]byte")
	if p == nil {
		return nil
	}
	return p.(*[]byte)
}
func deptrFromHandle_Slice_byte(h CGoHandle) []byte {
	p := ptrFromHandle_Slice_byte(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_byte(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]byte", p))
}

// --- wrapping slice: []byte ---
//
//export Slice_byte_CTor
func Slice_byte_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_byte(&[]byte{}))
}

//export Slice_byte_len
func Slice_byte_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_byte(handle))
}

//export Slice_byte_elem
func Slice_byte_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_byte(handle)
	return C.char(s[_idx])
}

//export Slice_byte_subslice
func Slice_byte_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_byte(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_byte(&ss))
}

//export Slice_byte_set
func Slice_byte_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_byte(handle)
	s[_idx] = byte(_vl)
}

//export Slice_byte_append
func Slice_byte_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_byte(handle)
	*s = append(*s, byte(_vl))
}

// Converters for implicit pointer handles for type: []error
func ptrFromHandle_Slice_error(h CGoHandle) *[]error {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]error")
	if p == nil {
		return nil
	}
	return p.(*[]error)
}
func deptrFromHandle_Slice_error(h CGoHandle) []error {
	p := ptrFromHandle_Slice_error(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_error(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]error", p))
}

// --- wrapping slice: []error ---
//
//export Slice_error_CTor
func Slice_error_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_error(&[]error{}))
}

//export Slice_error_len
func Slice_error_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_error(handle))
}

//export Slice_error_elem
func Slice_error_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_error(handle)
	return errorGoToPy(s[_idx])
}

//export Slice_error_subslice
func Slice_error_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_error(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_error(&ss))
}

//export Slice_error_set
func Slice_error_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_error(handle)
	s[_idx] = errors.New(C.GoString(_vl))
}

//export Slice_error_append
func Slice_error_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_error(handle)
	*s = append(*s, errors.New(C.GoString(_vl)))
}

// Converters for implicit pointer handles for type: []float32
func ptrFromHandle_Slice_float32(h CGoHandle) *[]float32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float32")
	if p == nil {
		return nil
	}
	return p.(*[]float32)
}
func deptrFromHandle_Slice_float32(h CGoHandle) []float32 {
	p := ptrFromHandle_Slice_float32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float32", p))
}

// --- wrapping slice: []float32 ---
//
//export Slice_float32_CTor
func Slice_float32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float32(&[]float32{}))
}

//export Slice_float32_len
func Slice_float32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float32(handle))
}

//export Slice_float32_elem
func Slice_float32_elem(handle CGoHandle, _idx int) C.float {
	s := deptrFromHandle_Slice_float32(handle)
	return C.float(s[_idx])
}

//export Slice_float32_subslice
func Slice_float32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float32(&ss))
}

//export Slice_float32_set
func Slice_float32_set(handle CGoHandle, _idx int, _vl C.float) {
	s := deptrFromHandle_Slice_float32(handle)
	s[_idx] = float32(_vl)
}

//export Slice_float32_append
func Slice_float32_append(handle CGoHandle, _vl C.float) {
	s := ptrFromHandle_Slice_float32(handle)
	*s = append(*s, float32(_vl))
}

// Converters for implicit pointer handles for type: []float64
func ptrFromHandle_Slice_float64(h CGoHandle) *[]float64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float64")
	if p == nil {
		return nil
	}
	return p.(*[]float64)
}
func deptrFromHandle_Slice_float64(h CGoHandle) []float64 {
	p := ptrFromHandle_Slice_float64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float64", p))
}

// --- wrapping slice: []float64 ---
//
//export Slice_float64_CTor
func Slice_float64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float64(&[]float64{}))
}

//export Slice_float64_len
func Slice_float64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float64(handle))
}

//export Slice_float64_elem
func Slice_float64_elem(handle CGoHandle, _idx int) C.double {
	s := deptrFromHandle_Slice_float64(handle)
	return C.double(s[_idx])
}

//export Slice_float64_subslice
func Slice_float64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float64(&ss))
}

//export Slice_float64_set
func Slice_float64_set(handle CGoHandle, _idx int, _vl C.double) {
	s := deptrFromHandle_Slice_float64(handle)
	s[_idx] = float64(_vl)
}

//export Slice_float64_append
func Slice_float64_append(handle CGoHandle, _vl C.double) {
	s := ptrFromHandle_Slice_float64(handle)
	*s = append(*s, float64(_vl))
}

// Converters for implicit pointer handles for type: []int
func ptrFromHandle_Slice_int(h CGoHandle) *[]int {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int")
	if p == nil {
		return nil
	}
	return p.(*[]int)
}
func deptrFromHandle_Slice_int(h CGoHandle) []int {
	p := ptrFromHandle_Slice_int(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int", p))
}

// --- wrapping slice: []int ---
//
//export Slice_int_CTor
func Slice_int_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int(&[]int{}))
}

//export Slice_int_len
func Slice_int_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int(handle))
}

//export Slice_int_elem
func Slice_int_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int(handle)
	return C.longlong(s[_idx])
}

//export Slice_int_subslice
func Slice_int_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int(&ss))
}

//export Slice_int_set
func Slice_int_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int(handle)
	s[_idx] = int(_vl)
}

//export Slice_int_append
func Slice_int_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int(handle)
	*s = append(*s, int(_vl))
}

// Converters for implicit pointer handles for type: []int16
func ptrFromHandle_Slice_int16(h CGoHandle) *[]int16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int16")
	if p == nil {
		return nil
	}
	return p.(*[]int16)
}
func deptrFromHandle_Slice_int16(h CGoHandle) []int16 {
	p := ptrFromHandle_Slice_int16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int16", p))
}

// --- wrapping slice: []int16 ---
//
//export Slice_int16_CTor
func Slice_int16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int16(&[]int16{}))
}

//export Slice_int16_len
func Slice_int16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int16(handle))
}

//export Slice_int16_elem
func Slice_int16_elem(handle CGoHandle, _idx int) C.short {
	s := deptrFromHandle_Slice_int16(handle)
	return C.short(s[_idx])
}

//export Slice_int16_subslice
func Slice_int16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int16(&ss))
}

//export Slice_int16_set
func Slice_int16_set(handle CGoHandle, _idx int, _vl C.short) {
	s := deptrFromHandle_Slice_int16(handle)
	s[_idx] = int16(_vl)
}

//export Slice_int16_append
func Slice_int16_append(handle CGoHandle, _vl C.short) {
	s := ptrFromHandle_Slice_int16(handle)
	*s = append(*s, int16(_vl))
}

// Converters for implicit pointer handles for type: []int32
func ptrFromHandle_Slice_int32(h CGoHandle) *[]int32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int32")
	if p == nil {
		return nil
	}
	return p.(*[]int32)
}
func deptrFromHandle_Slice_int32(h CGoHandle) []int32 {
	p := ptrFromHandle_Slice_int32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int32", p))
}

// --- wrapping slice: []int32 ---
//
//export Slice_int32_CTor
func Slice_int32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int32(&[]int32{}))
}

//export Slice_int32_len
func Slice_int32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int32(handle))
}

//export Slice_int32_elem
func Slice_int32_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_int32(handle)
	return C.long(s[_idx])
}

//export Slice_int32_subslice
func Slice_int32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int32(&ss))
}

//export Slice_int32_set
func Slice_int32_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_int32(handle)
	s[_idx] = int32(_vl)
}

//export Slice_int32_append
func Slice_int32_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_int32(handle)
	*s = append(*s, int32(_vl))
}

// Converters for implicit pointer handles for type: []int64
func ptrFromHandle_Slice_int64(h CGoHandle) *[]int64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int64")
	if p == nil {
		return nil
	}
	return p.(*[]int64)
}
func deptrFromHandle_Slice_int64(h CGoHandle) []int64 {
	p := ptrFromHandle_Slice_int64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int64", p))
}

// --- wrapping slice: []int64 ---
//
//export Slice_int64_CTor
func Slice_int64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int64(&[]int64{}))
}

//export Slice_int64_len
func Slice_int64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int64(handle))
}

//export Slice_int64_elem
func Slice_int64_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int64(handle)
	return C.longlong(s[_idx])
}

//export Slice_int64_subslice
func Slice_int64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int64(&ss))
}

//export Slice_int64_set
func Slice_int64_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int64(handle)
	s[_idx] = int64(_vl)
}

//export Slice_int64_append
func Slice_int64_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int64(handle)
	*s = append(*s, int64(_vl))
}

// Converters for implicit pointer handles for type: []int8
func ptrFromHandle_Slice_int8(h CGoHandle) *[]int8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int8")
	if p == nil {
		return nil
	}
	return p.(*[]int8)
}
func deptrFromHandle_Slice_int8(h CGoHandle) []int8 {
	p := ptrFromHandle_Slice_int8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int8", p))
}

// --- wrapping slice: []int8 ---
//
//export Slice_int8_CTor
func Slice_int8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int8(&[]int8{}))
}

//export Slice_int8_len
func Slice_int8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int8(handle))
}

//export Slice_int8_elem
func Slice_int8_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_int8(handle)
	return C.char(s[_idx])
}

//export Slice_int8_subslice
func Slice_int8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int8(&ss))
}

//export Slice_int8_set
func Slice_int8_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_int8(handle)
	s[_idx] = int8(_vl)
}

//export Slice_int8_append
func Slice_int8_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_int8(handle)
	*s = append(*s, int8(_vl))
}

// Converters for implicit pointer handles for type: []rune
func ptrFromHandle_Slice_rune(h CGoHandle) *[]rune {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]rune")
	if p == nil {
		return nil
	}
	return p.(*[]rune)
}
func deptrFromHandle_Slice_rune(h CGoHandle) []rune {
	p := ptrFromHandle_Slice_rune(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_rune(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]rune", p))
}

// --- wrapping slice: []rune ---
//
//export Slice_rune_CTor
func Slice_rune_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_rune(&[]rune{}))
}

//export Slice_rune_len
func Slice_rune_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_rune(handle))
}

//export Slice_rune_elem
func Slice_rune_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_rune(handle)
	return C.long(s[_idx])
}

//export Slice_rune_subslice
func Slice_rune_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_rune(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_rune(&ss))
}

//export Slice_rune_set
func Slice_rune_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_rune(handle)
	s[_idx] = rune(_vl)
}

//export Slice_rune_append
func Slice_rune_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_rune(handle)
	*s = append(*s, rune(_vl))
}

// Converters for implicit pointer handles for type: []string
func ptrFromHandle_Slice_string(h CGoHandle) *[]string {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]string")
	if p == nil {
		return nil
	}
	return p.(*[]string)
}
func deptrFromHandle_Slice_string(h CGoHandle) []string {
	p := ptrFromHandle_Slice_string(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_string(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]string", p))
}

// --- wrapping slice: []string ---
//
//export Slice_string_CTor
func Slice_string_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_string(&[]string{}))
}

//export Slice_string_len
func Slice_string_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_string(handle))
}

//export Slice_string_elem
func Slice_string_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_string(handle)
	return C.CString(s[_idx])
}

//export Slice_string_subslice
func Slice_string_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_string(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_string(&ss))
}

//export Slice_string_set
func Slice_string_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_string(handle)
	s[_idx] = C.GoString(_vl)
}

//export Slice_string_append
func Slice_string_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_string(handle)
	*s = append(*s, C.GoString(_vl))
}

// Converters for implicit pointer handles for type: []uint
func ptrFromHandle_Slice_uint(h CGoHandle) *[]uint {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint")
	if p == nil {
		return nil
	}
	return p.(*[]uint)
}
func deptrFromHandle_Slice_uint(h CGoHandle) []uint {
	p := ptrFromHandle_Slice_uint(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint", p))
}

// --- wrapping slice: []uint ---
//
//export Slice_uint_CTor
func Slice_uint_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint(&[]uint{}))
}

//export Slice_uint_len
func Slice_uint_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint(handle))
}

//export Slice_uint_elem
func Slice_uint_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint_subslice
func Slice_uint_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint(&ss))
}

//export Slice_uint_set
func Slice_uint_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint(handle)
	s[_idx] = uint(_vl)
}

//export Slice_uint_append
func Slice_uint_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint(handle)
	*s = append(*s, uint(_vl))
}

// Converters for implicit pointer handles for type: []uint16
func ptrFromHandle_Slice_uint16(h CGoHandle) *[]uint16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint16")
	if p == nil {
		return nil
	}
	return p.(*[]uint16)
}
func deptrFromHandle_Slice_uint16(h CGoHandle) []uint16 {
	p := ptrFromHandle_Slice_uint16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint16", p))
}

// --- wrapping slice: []uint16 ---
//
//export Slice_uint16_CTor
func Slice_uint16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint16(&[]uint16{}))
}

//export Slice_uint16_len
func Slice_uint16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint16(handle))
}

//export Slice_uint16_elem
func Slice_uint16_elem(handle CGoHandle, _idx int) C.ushort {
	s := deptrFromHandle_Slice_uint16(handle)
	return C.ushort(s[_idx])
}

//export Slice_uint16_subslice
func Slice_uint16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint16(&ss))
}

//export Slice_uint16_set
func Slice_uint16_set(handle CGoHandle, _idx int, _vl C.ushort) {
	s := deptrFromHandle_Slice_uint16(handle)
	s[_idx] = uint16(_vl)
}

//export Slice_uint16_append
func Slice_uint16_append(handle CGoHandle, _vl C.ushort) {
	s := ptrFromHandle_Slice_uint16(handle)
	*s = append(*s, uint16(_vl))
}

// Converters for implicit pointer handles for type: []uint32
func ptrFromHandle_Slice_uint32(h CGoHandle) *[]uint32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint32")
	if p == nil {
		return nil
	}
	return p.(*[]uint32)
}
func deptrFromHandle_Slice_uint32(h CGoHandle) []uint32 {
	p := ptrFromHandle_Slice_uint32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint32", p))
}

// --- wrapping slice: []uint32 ---
//
//export Slice_uint32_CTor
func Slice_uint32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint32(&[]uint32{}))
}

//export Slice_uint32_len
func Slice_uint32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint32(handle))
}

//export Slice_uint32_elem
func Slice_uint32_elem(handle CGoHandle, _idx int) C.ulong {
	s := deptrFromHandle_Slice_uint32(handle)
	return C.ulong(s[_idx])
}

//export Slice_uint32_subslice
func Slice_uint32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint32(&ss))
}

//export Slice_uint32_set
func Slice_uint32_set(handle CGoHandle, _idx int, _vl C.ulong) {
	s := deptrFromHandle_Slice_uint32(handle)
	s[_idx] = uint32(_vl)
}

//export Slice_uint32_append
func Slice_uint32_append(handle CGoHandle, _vl C.ulong) {
	s := ptrFromHandle_Slice_uint32(handle)
	*s = append(*s, uint32(_vl))
}

// Converters for implicit pointer handles for type: []uint64
func ptrFromHandle_Slice_uint64(h CGoHandle) *[]uint64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint64")
	if p == nil {
		return nil
	}
	return p.(*[]uint64)
}
func deptrFromHandle_Slice_uint64(h CGoHandle) []uint64 {
	p := ptrFromHandle_Slice_uint64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint64", p))
}

// --- wrapping slice: []uint64 ---
//
//export Slice_uint64_CTor
func Slice_uint64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint64(&[]uint64{}))
}

//export Slice_uint64_len
func Slice_uint64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint64(handle))
}

//export Slice_uint64_elem
func Slice_uint64_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint64(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint64_subslice
func Slice_uint64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint64(&ss))
}

//export Slice_uint64_set
func Slice_uint64_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint64(handle)
	s[_idx] = uint64(_vl)
}

//export Slice_uint64_append
func Slice_uint64_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint64(handle)
	*s = append(*s, uint64(_vl))
}

// Converters for implicit pointer handles for type: []uint8
func ptrFromHandle_Slice_uint8(h CGoHandle) *[]uint8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint8")
	if p == nil {
		return nil
	}
	return p.(*[]uint8)
}
func deptrFromHandle_Slice_uint8(h CGoHandle) []uint8 {
	p := ptrFromHandle_Slice_uint8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint8", p))
}

// --- wrapping slice: []uint8 ---
//
//export Slice_uint8_CTor
func Slice_uint8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint8(&[]uint8{}))
}

//export Slice_uint8_len
func Slice_uint8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint8(handle))
}

//export Slice_uint8_elem
func Slice_uint8_elem(handle CGoHandle, _idx int) C.uchar {
	s := deptrFromHandle_Slice_uint8(handle)
	return C.uchar(s[_idx])
}

//export Slice_uint8_subslice
func Slice_uint8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint8(&ss))
}

//export Slice_uint8_set
func Slice_uint8_set(handle CGoHandle, _idx int, _vl C.uchar) {
	s := deptrFromHandle_Slice_uint8(handle)
	s[_idx] = uint8(_vl)
}

//export Slice_uint8_append
func Slice_uint8_append(handle CGoHandle, _vl C.uchar) {
	s := ptrFromHandle_Slice_uint8(handle)
	*s = append(*s, uint8(_vl))
}

// ---- Package: measure_dist ---

// ---- Types ---

// Converters for pointer handles for type: *measure_dist.Annotation
func ptrFromHandle_Ptr_measure_dist_Annotation(h CGoHandle) *measure_dist.Annotation {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*measure_dist.Annotation")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(measure_dist.Annotation{})).(*measure_dist.Annotation)
}
func handleFromPtr_Ptr_measure_dist_Annotation(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*measure_dist.Annotation", p))
}

// Converters for pointer handles for type: *measure_dist.AnnotationResult
func ptrFromHandle_Ptr_measure_dist_AnnotationResult(h CGoHandle) *measure_dist.AnnotationResult {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*measure_dist.AnnotationResult")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(measure_dist.AnnotationResult{})).(*measure_dist.AnnotationResult)
}
func handleFromPtr_Ptr_measure_dist_AnnotationResult(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*measure_dist.AnnotationResult", p))
}

// Converters for pointer handles for type: *measure_dist.BndBox
func ptrFromHandle_Ptr_measure_dist_BndBox(h CGoHandle) *measure_dist.BndBox {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*measure_dist.BndBox")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(measure_dist.BndBox{})).(*measure_dist.BndBox)
}
func handleFromPtr_Ptr_measure_dist_BndBox(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*measure_dist.BndBox", p))
}

// Converters for pointer handles for type: *measure_dist.Object
func ptrFromHandle_Ptr_measure_dist_Object(h CGoHandle) *measure_dist.Object {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*measure_dist.Object")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(measure_dist.Object{})).(*measure_dist.Object)
}
func handleFromPtr_Ptr_measure_dist_Object(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*measure_dist.Object", p))
}

// Converters for implicit pointer handles for type: [][]float64
func ptrFromHandle_Slice_Slice_float64(h CGoHandle) *[][]float64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[][]float64")
	if p == nil {
		return nil
	}
	return p.(*[][]float64)
}
func deptrFromHandle_Slice_Slice_float64(h CGoHandle) [][]float64 {
	p := ptrFromHandle_Slice_Slice_float64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_Slice_float64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[][]float64", p))
}

// --- wrapping slice: [][]float64 ---
//
//export Slice_Slice_float64_CTor
func Slice_Slice_float64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_Slice_float64(&[][]float64{}))
}

//export Slice_Slice_float64_len
func Slice_Slice_float64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_Slice_float64(handle))
}

//export Slice_Slice_float64_elem
func Slice_Slice_float64_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_Slice_float64(handle)
	return handleFromPtr_Slice_float64(s[_idx])
}

//export Slice_Slice_float64_subslice
func Slice_Slice_float64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_Slice_float64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_Slice_float64(&ss))
}

//export Slice_Slice_float64_set
func Slice_Slice_float64_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_Slice_float64(handle)
	s[_idx] = deptrFromHandle_Slice_float64(_vl)
}

//export Slice_Slice_float64_append
func Slice_Slice_float64_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_Slice_float64(handle)
	*s = append(*s, deptrFromHandle_Slice_float64(_vl))
}

// Converters for implicit pointer handles for type: []measure_dist.Object
func ptrFromHandle_Slice_measure_dist_Object(h CGoHandle) *[]measure_dist.Object {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]measure_dist.Object")
	if p == nil {
		return nil
	}
	return p.(*[]measure_dist.Object)
}
func deptrFromHandle_Slice_measure_dist_Object(h CGoHandle) []measure_dist.Object {
	p := ptrFromHandle_Slice_measure_dist_Object(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_measure_dist_Object(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]measure_dist.Object", p))
}

// --- wrapping slice: []measure_dist.Object ---
//
//export Slice_measure_dist_Object_CTor
func Slice_measure_dist_Object_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_measure_dist_Object(&[]measure_dist.Object{}))
}

//export Slice_measure_dist_Object_len
func Slice_measure_dist_Object_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_measure_dist_Object(handle))
}

//export Slice_measure_dist_Object_elem
func Slice_measure_dist_Object_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_measure_dist_Object(handle)
	return handleFromPtr_measure_dist_Object(&(s[_idx]))
}

//export Slice_measure_dist_Object_subslice
func Slice_measure_dist_Object_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_measure_dist_Object(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_measure_dist_Object(&ss))
}

//export Slice_measure_dist_Object_set
func Slice_measure_dist_Object_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_measure_dist_Object(handle)
	s[_idx] = *ptrFromHandle_measure_dist_Object(_vl)
}

//export Slice_measure_dist_Object_append
func Slice_measure_dist_Object_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_measure_dist_Object(handle)
	*s = append(*s, *ptrFromHandle_measure_dist_Object(_vl))
}

// Converters for non-pointer handles for type: measure_dist.Annotation
func ptrFromHandle_measure_dist_Annotation(h CGoHandle) *measure_dist.Annotation {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "measure_dist.Annotation")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(measure_dist.Annotation{})).(*measure_dist.Annotation)
}
func handleFromPtr_measure_dist_Annotation(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("measure_dist.Annotation", p))
}

// Converters for non-pointer handles for type: measure_dist.AnnotationResult
func ptrFromHandle_measure_dist_AnnotationResult(h CGoHandle) *measure_dist.AnnotationResult {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "measure_dist.AnnotationResult")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(measure_dist.AnnotationResult{})).(*measure_dist.AnnotationResult)
}
func handleFromPtr_measure_dist_AnnotationResult(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("measure_dist.AnnotationResult", p))
}

// Converters for non-pointer handles for type: measure_dist.BndBox
func ptrFromHandle_measure_dist_BndBox(h CGoHandle) *measure_dist.BndBox {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "measure_dist.BndBox")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(measure_dist.BndBox{})).(*measure_dist.BndBox)
}
func handleFromPtr_measure_dist_BndBox(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("measure_dist.BndBox", p))
}

// Converters for non-pointer handles for type: measure_dist.Object
func ptrFromHandle_measure_dist_Object(h CGoHandle) *measure_dist.Object {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "measure_dist.Object")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(measure_dist.Object{})).(*measure_dist.Object)
}
func handleFromPtr_measure_dist_Object(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("measure_dist.Object", p))
}

// ---- Global Variables: can only use functions to access ---

// ---- Interfaces ---

// ---- Structs ---

// --- wrapping struct: measure_dist.Annotation ---
//
//export measure_dist_Annotation_CTor
func measure_dist_Annotation_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_measure_dist_Annotation(&measure_dist.Annotation{}))
}

//export measure_dist_Annotation_XMLName_Get
func measure_dist_Annotation_XMLName_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_measure_dist_Annotation(handle)
	return handleFromPtr_xml_Name(&op.XMLName)
}

//export measure_dist_Annotation_XMLName_Set
func measure_dist_Annotation_XMLName_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_measure_dist_Annotation(handle)
	op.XMLName = *ptrFromHandle_xml_Name(val)
}

//export measure_dist_Annotation_Object_Get
func measure_dist_Annotation_Object_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_measure_dist_Annotation(handle)
	return handleFromPtr_Slice_measure_dist_Object(&op.Object)
}

//export measure_dist_Annotation_Object_Set
func measure_dist_Annotation_Object_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_measure_dist_Annotation(handle)
	op.Object = deptrFromHandle_Slice_measure_dist_Object(val)
}

// --- wrapping struct: measure_dist.AnnotationResult ---
//
//export measure_dist_AnnotationResult_CTor
func measure_dist_AnnotationResult_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_measure_dist_AnnotationResult(&measure_dist.AnnotationResult{}))
}

//export measure_dist_AnnotationResult_List_object_names_Get
func measure_dist_AnnotationResult_List_object_names_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_measure_dist_AnnotationResult(handle)
	return handleFromPtr_Slice_string(&op.List_object_names)
}

//export measure_dist_AnnotationResult_List_object_names_Set
func measure_dist_AnnotationResult_List_object_names_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_measure_dist_AnnotationResult(handle)
	op.List_object_names = deptrFromHandle_Slice_string(val)
}

//export measure_dist_AnnotationResult_List_with_all_boxes_Get
func measure_dist_AnnotationResult_List_with_all_boxes_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_measure_dist_AnnotationResult(handle)
	return handleFromPtr_Slice_int(&op.List_with_all_boxes)
}

//export measure_dist_AnnotationResult_List_with_all_boxes_Set
func measure_dist_AnnotationResult_List_with_all_boxes_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_measure_dist_AnnotationResult(handle)
	op.List_with_all_boxes = deptrFromHandle_Slice_int(val)
}

// --- wrapping struct: measure_dist.BndBox ---
//
//export measure_dist_BndBox_CTor
func measure_dist_BndBox_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_measure_dist_BndBox(&measure_dist.BndBox{}))
}

//export measure_dist_BndBox_XMin_Get
func measure_dist_BndBox_XMin_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_measure_dist_BndBox(handle)
	return C.double(op.XMin)
}

//export measure_dist_BndBox_XMin_Set
func measure_dist_BndBox_XMin_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_measure_dist_BndBox(handle)
	op.XMin = float64(val)
}

//export measure_dist_BndBox_YMin_Get
func measure_dist_BndBox_YMin_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_measure_dist_BndBox(handle)
	return C.double(op.YMin)
}

//export measure_dist_BndBox_YMin_Set
func measure_dist_BndBox_YMin_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_measure_dist_BndBox(handle)
	op.YMin = float64(val)
}

//export measure_dist_BndBox_XMax_Get
func measure_dist_BndBox_XMax_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_measure_dist_BndBox(handle)
	return C.double(op.XMax)
}

//export measure_dist_BndBox_XMax_Set
func measure_dist_BndBox_XMax_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_measure_dist_BndBox(handle)
	op.XMax = float64(val)
}

//export measure_dist_BndBox_YMax_Get
func measure_dist_BndBox_YMax_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_measure_dist_BndBox(handle)
	return C.double(op.YMax)
}

//export measure_dist_BndBox_YMax_Set
func measure_dist_BndBox_YMax_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_measure_dist_BndBox(handle)
	op.YMax = float64(val)
}

// --- wrapping struct: measure_dist.Object ---
//
//export measure_dist_Object_CTor
func measure_dist_Object_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_measure_dist_Object(&measure_dist.Object{}))
}

//export measure_dist_Object_Name_Get
func measure_dist_Object_Name_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_measure_dist_Object(handle)
	return C.CString(op.Name)
}

//export measure_dist_Object_Name_Set
func measure_dist_Object_Name_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_measure_dist_Object(handle)
	op.Name = C.GoString(val)
}

//export measure_dist_Object_BndBox_Get
func measure_dist_Object_BndBox_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_measure_dist_Object(handle)
	return handleFromPtr_measure_dist_BndBox(&op.BndBox)
}

//export measure_dist_Object_BndBox_Set
func measure_dist_Object_BndBox_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_measure_dist_Object(handle)
	op.BndBox = *ptrFromHandle_measure_dist_BndBox(val)
}

// ---- Slices ---

// ---- Maps ---

// ---- Constructors ---

//export measure_dist_ReadAnnotation
func measure_dist_ReadAnnotation(xmlFile *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	cret := measure_dist.ReadAnnotation(C.GoString(xmlFile))

	return handleFromPtr_measure_dist_AnnotationResult(&cret)
}

// ---- Functions ---

//export measure_dist_Contains
func measure_dist_Contains(s CGoHandle, e *C.char) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return boolGoToPy(measure_dist.Contains(deptrFromHandle_Slice_string(s), C.GoString(e)))

}

//export measure_dist_MergeBoxes
func measure_dist_MergeBoxes(box1 CGoHandle, box2 CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	cret := measure_dist.MergeBoxes(deptrFromHandle_Slice_int(box1), deptrFromHandle_Slice_int(box2))

	return handleFromPtr_Slice_int(&cret)
}

//export measure_dist_TwoPCenterPoint
func measure_dist_TwoPCenterPoint(mesh CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	cret := measure_dist.TwoPCenterPoint(deptrFromHandle_Slice_Slice_float64(mesh))

	return handleFromPtr_Slice_float64(&cret)
}

//export measure_dist_XywhToXyxy
func measure_dist_XywhToXyxy(iCrop CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	cret := measure_dist.XywhToXyxy(deptrFromHandle_Slice_int(iCrop))

	return handleFromPtr_Slice_int(&cret)
}

//export measure_dist_CalculateArea
func measure_dist_CalculateArea(box CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return C.longlong(measure_dist.CalculateArea(deptrFromHandle_Slice_int(box)))

}

//export measure_dist_CoordinateToAzimuth
func measure_dist_CoordinateToAzimuth(coordinate CGoHandle) C.double {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return C.double(measure_dist.CoordinateToAzimuth(deptrFromHandle_Slice_float64(coordinate)))

}

//export measure_dist_EnlargeArea
func measure_dist_EnlargeArea(area CGoHandle, margin C.longlong, imageWidth C.longlong, imageHeight C.longlong) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	cret := measure_dist.EnlargeArea(deptrFromHandle_Slice_int(area), int(margin), int(imageWidth), int(imageHeight))

	return handleFromPtr_Slice_int(&cret)
}

//export measure_dist_IsInsideArea
func measure_dist_IsInsideArea(objectBox CGoHandle, area CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return boolGoToPy(measure_dist.IsInsideArea(deptrFromHandle_Slice_int(objectBox), deptrFromHandle_Slice_int(area)))

}

//export measure_dist_ThreePCenterPoint
func measure_dist_ThreePCenterPoint(mesh CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	cret := measure_dist.ThreePCenterPoint(deptrFromHandle_Slice_Slice_float64(mesh))

	return handleFromPtr_Slice_float64(&cret)
}

//export measure_dist_CalculateIOU
func measure_dist_CalculateIOU(boxA CGoHandle, boxB CGoHandle) C.double {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return C.double(measure_dist.CalculateIOU(deptrFromHandle_Slice_int(boxA), deptrFromHandle_Slice_int(boxB)))

}
