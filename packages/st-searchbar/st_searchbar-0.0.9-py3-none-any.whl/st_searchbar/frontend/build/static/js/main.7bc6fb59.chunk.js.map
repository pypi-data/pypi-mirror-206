{"version":3,"sources":["SearchBarComponent.tsx","index.tsx"],"names":["SearchBarComponent","props","render","speech","SpeechRecognition","window","webkitSpeechRecognition","interimResults","onresult","event","text","Array","from","results","map","result","transcript","join","setState","value","onend","onSearch","isListening","subtext","args","suggestions","input","textwidth","className","type","onFocus","onBlur","state","placeholder","onKeyPress","_handleKeyDown","onChange","style","width","onClick","xmlnsXlink","xlinkHref","start","id","backgroundColor","boxShadow","maxHeight","isActive","overflowY","filter","item","searchTerm","toLowerCase","suggestion","startsWith","onMouseDown","setSuggestion","xmlns","height","display","viewBox","d","target","Streamlit","setComponentValue","e","key","defaultValue","console","log","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bc6fb59.chunk.js","sourcesContent":["import {\r\n  ComponentProps,\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { useState, ReactNode } from \"react\"\r\nimport \"./styles.scss\"\r\nimport { FamilyRestroomOutlined } from \"@mui/icons-material\"\r\n\r\ninterface State {\r\n  value: string\r\n  isListening: boolean\r\n  isActive: boolean\r\n}\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass SearchBarComponent extends StreamlitComponentBase<State> {\r\n  public constructor(props: ComponentProps) {\r\n    super(props)\r\n\r\n    // Determine our initially selected index\r\n    const defaultValue = this.props.args[\"default\"]\r\n\r\n    if (defaultValue != null) {\r\n      this.state = { value: defaultValue as string, isListening: false, isActive: false}\r\n    }\r\n\r\n    console.log(defaultValue)\r\n  }\r\n\r\n  public render = (): ReactNode => {    \r\n    const SpeechRecognition = (window as any).webkitSpeechRecognition;\r\n    const speech = new SpeechRecognition();\r\n    speech.interimResults = true;\r\n\r\n    speech.onresult = (event: any) => {\r\n      const text = Array.from(event.results)\r\n          .map((result: any) => result[0])\r\n          .map((result: any) => result.transcript)\r\n          .join('');\r\n\r\n      this.setState({value: text});\r\n    };\r\n\r\n    speech.onend = () => {\r\n      this.onSearch();\r\n      this.setState({isListening: false})\r\n    }\r\n\r\n    const listen = () => {\r\n      if (!this.state?.isListening) {\r\n        speech.start();\r\n      }\r\n      this.setState({isListening: true})\r\n    };\r\n\r\n    const subtext = this.props.args[\"subtext\"]\r\n    const suggestions = this.props.args[\"suggestions\"]\r\n    const input = this.props.args[\"value\"]\r\n    const textwidth: string = this.props.args[\"width\"]\r\n\r\n    if (input) {\r\n      this.setState({value: input});\r\n    }\r\n\r\n    return (\r\n      <span>\r\n        <div className=\"search-form\">\r\n          <input type=\"text\" onFocus={this.onFocus} onBlur={this.onBlur} \r\n                value={this.state?.value} placeholder={subtext} \r\n                onKeyPress={this._handleKeyDown} onChange={this.onChange}\r\n                className=\"search-input\" style={{width: textwidth}}></input>\r\n\r\n          <button type=\"button\" className=\"search-button\" onClick={this.onSearch}>\r\n            <svg className=\"submit-button\">\r\n              <use xmlnsXlink=\"http://www.w3.org/1999/xlink\" xlinkHref=\"#search\"></use>\r\n            </svg>\r\n          </button>\r\n          <div className=\"search-option\">\r\n            <div>\r\n              <button type=\"button\" onFocus={this.onFocus}\r\n                      onBlur={this.onBlur} onClick={listen}>\r\n                <svg id=\"record-button\" className={this.state?.isListening ? \"recording\" : \"\"}>\r\n                  <use xmlnsXlink=\"http://www.w3.org/1999/xlink\" xlinkHref=\"#user\"></use>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"dropdown\" style={{backgroundColor: 'white', \r\n                                            boxShadow: '0 6px 8px rgba(0, 0, 0, 0.15)'}}>\r\n            <div className=\"scroll\" style={{maxHeight: (this.state?.isActive ? 100 : 'initial'),\r\n                                            overflowY: (this.state?.isActive ? 'scroll' : 'hidden')}}>\r\n              {\r\n                suggestions?.filter((item: string) => {\r\n                  if (!this.state?.isActive) {\r\n                    return '';\r\n                  } else if (this.state?.value != null && this.state.value != \"\") {\r\n                    const searchTerm = this.state.value.toLowerCase();\r\n                    const suggestion = item.toLowerCase();\r\n\r\n                    return searchTerm && suggestion.startsWith(searchTerm)\r\n                          && suggestion !== searchTerm;\r\n                  } else {\r\n                    return item;\r\n                  }\r\n                })\r\n                .map((suggestion: string) => \r\n                  <div className=\"dropdown-row\" \r\n                        onMouseDown={() => this.setSuggestion(suggestion)}>\r\n                          {suggestion}\r\n                  </div>)\r\n              }\r\n            </div>\r\n          </div>\r\n          <div className=\"dropdown\">&nbsp;</div>\r\n        </div>\r\n\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0\" height=\"0\" display=\"none\">\r\n          <symbol id=\"search\" viewBox=\"0 0 32 32\">\r\n            <path d=\"M 19.5 3 C 14.26514 3 10 7.2651394 10 12.5 C 10 14.749977 10.810825 16.807458 12.125 18.4375 L 3.28125 27.28125 L 4.71875 28.71875 L 13.5625 19.875 C 15.192542 21.189175 17.250023 22 19.5 22 C 24.73486 22 29 17.73486 29 12.5 C 29 7.2651394 24.73486 3 19.5 3 z M 19.5 5 C 23.65398 5 27 8.3460198 27 12.5 C 27 16.65398 23.65398 20 19.5 20 C 15.34602 20 12 16.65398 12 12.5 C 12 8.3460198 15.34602 5 19.5 5 z\" />\r\n          </symbol>\r\n          <symbol id=\"user\" viewBox=\"0 0 18 18\">\r\n            <path d=\"M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z\"/>\r\n            <path d=\"M10 8a2 2 0 1 1-4 0V3a2 2 0 1 1 4 0v5zM8 0a3 3 0 0 0-3 3v5a3 3 0 0 0 6 0V3a3 3 0 0 0-3-3z\"/>\r\n          </symbol>\r\n        </svg> \r\n      </span>\r\n    )\r\n  }\r\n\r\n  private onChange = (event: any) => {\r\n    this.setState({value: event.target.value})\r\n  }\r\n\r\n  private setSuggestion = (suggestion: string) => {\r\n    this.setState(\r\n                  {value: suggestion},\r\n                  () => Streamlit.setComponentValue(this.state?.value)\r\n                 )\r\n  }\r\n\r\n  private onFocus = (event: any) => {\r\n    this.setState({isActive: true});\r\n  }\r\n\r\n  private onBlur = (event: any) => {\r\n    this.setState({isActive: false});\r\n  }\r\n\r\n  private onSearch = (): void => {\r\n    this.setState(\r\n      () => Streamlit.setComponentValue(this.state?.value)\r\n    )\r\n  }\r\n\r\n  private _handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      this.setState(\r\n        () => Streamlit.setComponentValue(this.state.value)\r\n      )\r\n    }\r\n  }\r\n\r\n  // /** Click handler for our \"Click Me!\" button. */\r\n  // private onClicked = (): void => {\r\n  //   // Increment state.numClicks, and pass the new value back to\r\n  //   // Streamlit via `Streamlit.setComponentValue`.\r\n  //   this.setState(\r\n  //     prevState => ({ numClicks: prevState.numClicks + 1 }),\r\n  //     () => Streamlit.setComponentValue(this.state.numClicks)\r\n  //   )\r\n  // }\r\n\r\n  // /** Focus handler for our \"Click Me!\" button. */\r\n  // private _onFocus = (): void => {\r\n  //   this.setState({ isFocused: true })\r\n  // }\r\n\r\n  // /** Blur handler for our \"Click Me!\" button. */\r\n  // private _onBlur = (): void => {\r\n  //   this.setState({ isFocused: false })\r\n  // }\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(SearchBarComponent)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport SearchBarComponent from \"./SearchBarComponent\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <SearchBarComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}