# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from moneykit import schemas  # noqa: F401

class Owner(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "emails",
            "phone_numbers",
            "addresses",
            "names",
        }

        class properties:
            class names(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema
                def __new__(
                    cls,
                    _arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "names":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class addresses(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["Address"]:
                        return Address
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple["Address"], typing.List["Address"]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "addresses":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
                def __getitem__(self, i: int) -> "Address":
                    return super().__getitem__(i)

            class phone_numbers(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["PhoneNumber"]:
                        return PhoneNumber
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple["PhoneNumber"], typing.List["PhoneNumber"]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "phone_numbers":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
                def __getitem__(self, i: int) -> "PhoneNumber":
                    return super().__getitem__(i)

            class emails(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["Email"]:
                        return Email
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple["Email"], typing.List["Email"]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "emails":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
                def __getitem__(self, i: int) -> "Email":
                    return super().__getitem__(i)
            __annotations__ = {
                "names": names,
                "addresses": addresses,
                "phone_numbers": phone_numbers,
                "emails": emails,
            }
    emails: MetaOapg.properties.emails
    phone_numbers: MetaOapg.properties.phone_numbers
    addresses: MetaOapg.properties.addresses
    names: MetaOapg.properties.names

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["names"]) -> MetaOapg.properties.names: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addresses"]) -> MetaOapg.properties.addresses: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_numbers"]) -> MetaOapg.properties.phone_numbers: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emails"]) -> MetaOapg.properties.emails: ...
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "names",
                "addresses",
                "phone_numbers",
                "emails",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["names"]) -> MetaOapg.properties.names: ...
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addresses"]) -> MetaOapg.properties.addresses: ...
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_numbers"]) -> MetaOapg.properties.phone_numbers: ...
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emails"]) -> MetaOapg.properties.emails: ...
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "names",
                "addresses",
                "phone_numbers",
                "emails",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)
    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        emails: typing.Union[
            MetaOapg.properties.emails,
            list,
            tuple,
        ],
        phone_numbers: typing.Union[
            MetaOapg.properties.phone_numbers,
            list,
            tuple,
        ],
        addresses: typing.Union[
            MetaOapg.properties.addresses,
            list,
            tuple,
        ],
        names: typing.Union[
            MetaOapg.properties.names,
            list,
            tuple,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "Owner":
        return super().__new__(
            cls,
            *_args,
            emails=emails,
            phone_numbers=phone_numbers,
            addresses=addresses,
            names=names,
            _configuration=_configuration,
            **kwargs,
        )

from moneykit.model.address import Address
from moneykit.model.email import Email
from moneykit.model.phone_number import PhoneNumber
