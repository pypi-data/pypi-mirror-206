# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from moneykit import schemas  # noqa: F401


class AccountGroup(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "accounts",
        }

        class properties:
            class accounts(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["Account"]:
                        return Account

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple["Account"], typing.List["Account"]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "accounts":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> "Account":
                    return super().__getitem__(i)

            class last_synced_at(
                schemas.DateTimeBase, schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin
            ):
                class MetaOapg:
                    format = "date-time"

                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                        datetime,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "last_synced_at":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            __annotations__ = {
                "accounts": accounts,
                "last_synced_at": last_synced_at,
            }

    accounts: MetaOapg.properties.accounts

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounts"]) -> MetaOapg.properties.accounts:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_synced_at"]) -> MetaOapg.properties.last_synced_at:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "accounts",
                "last_synced_at",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounts"]) -> MetaOapg.properties.accounts:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["last_synced_at"]
    ) -> typing.Union[MetaOapg.properties.last_synced_at, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "accounts",
                "last_synced_at",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        accounts: typing.Union[
            MetaOapg.properties.accounts,
            list,
            tuple,
        ],
        last_synced_at: typing.Union[
            MetaOapg.properties.last_synced_at, None, str, datetime, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "AccountGroup":
        return super().__new__(
            cls,
            *_args,
            accounts=accounts,
            last_synced_at=last_synced_at,
            _configuration=_configuration,
            **kwargs,
        )


from moneykit.model.account import Account
