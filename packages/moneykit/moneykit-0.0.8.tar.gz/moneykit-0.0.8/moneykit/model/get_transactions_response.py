# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from moneykit import schemas  # noqa: F401


class GetTransactionsResponse(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "total",
            "size",
            "link",
            "accounts",
            "page",
            "transactions",
        }

        class properties:
            total = schemas.IntSchema
            page = schemas.IntSchema
            size = schemas.IntSchema

            class transactions(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["Transaction"]:
                        return Transaction

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple["Transaction"], typing.List["Transaction"]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "transactions":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> "Transaction":
                    return super().__getitem__(i)

            class accounts(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["Account"]:
                        return Account

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple["Account"], typing.List["Account"]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "accounts":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> "Account":
                    return super().__getitem__(i)

            class link(
                schemas.ComposedSchema,
            ):
                class MetaOapg:
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            LinkCommon,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "link":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            __annotations__ = {
                "total": total,
                "page": page,
                "size": size,
                "transactions": transactions,
                "accounts": accounts,
                "link": link,
            }

    total: MetaOapg.properties.total
    size: MetaOapg.properties.size
    link: MetaOapg.properties.link
    accounts: MetaOapg.properties.accounts
    page: MetaOapg.properties.page
    transactions: MetaOapg.properties.transactions

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["page"]) -> MetaOapg.properties.page:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounts"]) -> MetaOapg.properties.accounts:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "total",
                "page",
                "size",
                "transactions",
                "accounts",
                "link",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["page"]) -> MetaOapg.properties.page:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounts"]) -> MetaOapg.properties.accounts:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link:
        ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "total",
                "page",
                "size",
                "transactions",
                "accounts",
                "link",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        total: typing.Union[
            MetaOapg.properties.total,
            decimal.Decimal,
            int,
        ],
        size: typing.Union[
            MetaOapg.properties.size,
            decimal.Decimal,
            int,
        ],
        link: typing.Union[
            MetaOapg.properties.link,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader,
        ],
        accounts: typing.Union[
            MetaOapg.properties.accounts,
            list,
            tuple,
        ],
        page: typing.Union[
            MetaOapg.properties.page,
            decimal.Decimal,
            int,
        ],
        transactions: typing.Union[
            MetaOapg.properties.transactions,
            list,
            tuple,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "GetTransactionsResponse":
        return super().__new__(
            cls,
            *_args,
            total=total,
            size=size,
            link=link,
            accounts=accounts,
            page=page,
            transactions=transactions,
            _configuration=_configuration,
            **kwargs,
        )


from moneykit.model.account import Account
from moneykit.model.link_common import LinkCommon
from moneykit.model.transaction import Transaction
