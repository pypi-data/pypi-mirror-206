from typing import List
from enum import Enum
from pyVmomi import vim, vmodl
from datetime import datetime
from pyVmomi.VmomiSupport import ManagedObject, long


class EVCManager(vim.ExtensibleManagedObject):
    @property
    def managedCluster(self) -> vim.ClusterComputeResource: ...
    @property
    def evcState(self) -> EVCManager.EVCState: ...
    def ConfigureEvc(self, evcModeKey: str, evcGraphicsModeKey: str) -> vim.Task: ...
    def DisableEvc(self) -> vim.Task: ...
    def CheckConfigureEvc(self, evcModeKey: str, evcGraphicsModeKey: str) -> vim.Task: ...
    def CheckAddHostEvc(self, cnxSpec: vim.host.ConnectSpec) -> vim.Task: ...


    class CheckResult(vmodl.DynamicData):
        @property
        def evcModeKey(self) -> str: ...
        @property
        def error(self) -> vmodl.MethodFault: ...
        @property
        def host(self) -> List[vim.HostSystem]: ...


    class EVCState(vmodl.DynamicData):
        @property
        def supportedEVCMode(self) -> List[vim.EVCMode]: ...
        @property
        def currentEVCModeKey(self) -> str: ...
        @property
        def guaranteedCPUFeatures(self) -> List[vim.host.CpuIdInfo]: ...
        @property
        def featureCapability(self) -> List[vim.host.FeatureCapability]: ...
        @property
        def featureMask(self) -> List[vim.host.FeatureMask]: ...
        @property
        def featureRequirement(self) -> List[vim.vm.FeatureRequirement]: ...


class Action(vmodl.DynamicData):
    @property
    def type(self) -> str: ...
    @property
    def target(self) -> ManagedObject: ...


    class ActionType(Enum):
        MigrationV1 = "migrationv1"
        VmPowerV1 = "vmpowerv1"
        HostPowerV1 = "hostpowerv1"
        IncreaseLimitV1 = "increaselimitv1"
        IncreaseSizeV1 = "increasesizev1"
        IncreaseSharesV1 = "increasesharesv1"
        IncreaseReservationV1 = "increasereservationv1"
        DecreaseOthersReservationV1 = "decreaseothersreservationv1"
        IncreaseClusterCapacityV1 = "increaseclustercapacityv1"
        DecreaseMigrationThresholdV1 = "decreasemigrationthresholdv1"
        HostMaintenanceV1 = "hostmaintenancev1"
        StorageMigrationV1 = "storagemigrationv1"
        StoragePlacementV1 = "storageplacementv1"
        PlacementV1 = "placementv1"
        HostInfraUpdateHaV1 = "hostinfraupdatehav1"


class ActionHistory(vmodl.DynamicData):
    @property
    def action(self) -> Action: ...
    @property
    def time(self) -> datetime: ...


class AffinityRuleSpec(RuleInfo):
    @property
    def vm(self) -> List[vim.VirtualMachine]: ...


class AntiAffinityRuleSpec(RuleInfo):
    @property
    def vm(self) -> List[vim.VirtualMachine]: ...


class AttemptedVmInfo(vmodl.DynamicData):
    @property
    def vm(self) -> vim.VirtualMachine: ...
    @property
    def task(self) -> vim.Task: ...


class ClusterInitialPlacementAction(Action):
    @property
    def targetHost(self) -> vim.HostSystem: ...
    @property
    def pool(self) -> vim.ResourcePool: ...
    @property
    def configSpec(self) -> vim.vm.ConfigSpec: ...


class ConfigInfo(vmodl.DynamicData):
    @property
    def dasConfig(self) -> DasConfigInfo: ...
    @property
    def dasVmConfig(self) -> List[DasVmConfigInfo]: ...
    @property
    def drsConfig(self) -> DrsConfigInfo: ...
    @property
    def drsVmConfig(self) -> List[DrsVmConfigInfo]: ...
    @property
    def rule(self) -> List[RuleInfo]: ...


class ConfigInfoEx(vim.ComputeResource.ConfigInfo):
    @property
    def systemVMsConfig(self) -> SystemVMsConfigInfo: ...
    @property
    def dasConfig(self) -> DasConfigInfo: ...
    @property
    def dasVmConfig(self) -> List[DasVmConfigInfo]: ...
    @property
    def drsConfig(self) -> DrsConfigInfo: ...
    @property
    def drsVmConfig(self) -> List[DrsVmConfigInfo]: ...
    @property
    def rule(self) -> List[RuleInfo]: ...
    @property
    def orchestration(self) -> OrchestrationInfo: ...
    @property
    def vmOrchestration(self) -> List[VmOrchestrationInfo]: ...
    @property
    def dpmConfigInfo(self) -> DpmConfigInfo: ...
    @property
    def dpmHostConfig(self) -> List[DpmHostConfigInfo]: ...
    @property
    def vsanConfigInfo(self) -> ConfigInfo: ...
    @property
    def vsanHostConfig(self) -> List[vim.vsan.host.ConfigInfo]: ...
    @property
    def group(self) -> List[GroupInfo]: ...
    @property
    def infraUpdateHaConfig(self) -> InfraUpdateHaConfigInfo: ...
    @property
    def proactiveDrsConfig(self) -> ProactiveDrsConfigInfo: ...
    @property
    def cryptoConfig(self) -> CryptoConfigInfo: ...


class ConfigSpec(vmodl.DynamicData):
    @property
    def dasConfig(self) -> DasConfigInfo: ...
    @property
    def dasVmConfigSpec(self) -> List[DasVmConfigSpec]: ...
    @property
    def drsConfig(self) -> DrsConfigInfo: ...
    @property
    def drsVmConfigSpec(self) -> List[DrsVmConfigSpec]: ...
    @property
    def rulesSpec(self) -> List[RuleSpec]: ...


class ConfigSpecEx(vim.ComputeResource.ConfigSpec):
    @property
    def systemVMsConfig(self) -> SystemVMsConfigSpec: ...
    @property
    def dasConfig(self) -> DasConfigInfo: ...
    @property
    def dasVmConfigSpec(self) -> List[DasVmConfigSpec]: ...
    @property
    def drsConfig(self) -> DrsConfigInfo: ...
    @property
    def drsVmConfigSpec(self) -> List[DrsVmConfigSpec]: ...
    @property
    def rulesSpec(self) -> List[RuleSpec]: ...
    @property
    def orchestration(self) -> OrchestrationInfo: ...
    @property
    def vmOrchestrationSpec(self) -> List[VmOrchestrationSpec]: ...
    @property
    def dpmConfig(self) -> DpmConfigInfo: ...
    @property
    def dpmHostConfigSpec(self) -> List[DpmHostConfigSpec]: ...
    @property
    def vsanConfig(self) -> ConfigInfo: ...
    @property
    def vsanHostConfigSpec(self) -> List[vim.vsan.host.ConfigInfo]: ...
    @property
    def groupSpec(self) -> List[GroupSpec]: ...
    @property
    def infraUpdateHaConfig(self) -> InfraUpdateHaConfigInfo: ...
    @property
    def proactiveDrsConfig(self) -> ProactiveDrsConfigInfo: ...
    @property
    def inHciWorkflow(self) -> bool: ...
    @property
    def cryptoConfig(self) -> CryptoConfigInfo: ...


class CryptoConfigInfo(vmodl.DynamicData):
    @property
    def cryptoMode(self) -> str: ...


    class CryptoMode(Enum):
        onDemand = "ondemand"
        forceEnable = "forceenable"


class DasAamHostInfo(DasHostInfo):
    @property
    def hostDasState(self) -> List[DasAamNodeState]: ...
    @property
    def primaryHosts(self) -> List[str]: ...


class DasAamNodeState(vmodl.DynamicData):
    @property
    def host(self) -> vim.HostSystem: ...
    @property
    def name(self) -> str: ...
    @property
    def configState(self) -> str: ...
    @property
    def runtimeState(self) -> str: ...


    class DasState(Enum):
        uninitialized = "uninitialized"
        initialized = "initialized"
        configuring = "configuring"
        unconfiguring = "unconfiguring"
        running = "running"
        error = "error"
        agentShutdown = "agentshutdown"
        nodeFailed = "nodefailed"


class DasAdmissionControlInfo(vmodl.DynamicData): ...


class DasAdmissionControlPolicy(vmodl.DynamicData):
    @property
    def resourceReductionToToleratePercent(self) -> int: ...
    @property
    def pMemAdmissionControlEnabled(self) -> bool: ...


class DasAdvancedRuntimeInfo(vmodl.DynamicData):
    @property
    def dasHostInfo(self) -> DasHostInfo: ...
    @property
    def vmcpSupported(self) -> DasAdvancedRuntimeInfo.VmcpCapabilityInfo: ...
    @property
    def heartbeatDatastoreInfo(self) -> List[DasAdvancedRuntimeInfo.HeartbeatDatastoreInfo]: ...


    class HeartbeatDatastoreInfo(vmodl.DynamicData):
        @property
        def datastore(self) -> vim.Datastore: ...
        @property
        def hosts(self) -> List[vim.HostSystem]: ...


    class VmcpCapabilityInfo(vmodl.DynamicData):
        @property
        def storageAPDSupported(self) -> bool: ...
        @property
        def storagePDLSupported(self) -> bool: ...


class DasConfigInfo(vmodl.DynamicData):
    @property
    def enabled(self) -> bool: ...
    @property
    def vmMonitoring(self) -> str: ...
    @property
    def hostMonitoring(self) -> str: ...
    @property
    def vmComponentProtecting(self) -> str: ...
    @property
    def failoverLevel(self) -> int: ...
    @property
    def admissionControlPolicy(self) -> DasAdmissionControlPolicy: ...
    @property
    def admissionControlEnabled(self) -> bool: ...
    @property
    def defaultVmSettings(self) -> DasVmSettings: ...
    @property
    def option(self) -> List[vim.option.OptionValue]: ...
    @property
    def heartbeatDatastore(self) -> List[vim.Datastore]: ...
    @property
    def hBDatastoreCandidatePolicy(self) -> str: ...


    class HBDatastoreCandidate(Enum):
        userSelectedDs = "userselectedds"
        allFeasibleDs = "allfeasibleds"
        allFeasibleDsWithUserPreference = "allfeasibledswithuserpreference"


    class ServiceState(Enum):
        disabled = "disabled"
        enabled = "enabled"


    class VmMonitoringState(Enum):
        vmMonitoringDisabled = "vmmonitoringdisabled"
        vmMonitoringOnly = "vmmonitoringonly"
        vmAndAppMonitoring = "vmandappmonitoring"


class DasData(vmodl.DynamicData): ...


class DasDataSummary(DasData):
    @property
    def hostListVersion(self) -> long: ...
    @property
    def clusterConfigVersion(self) -> long: ...
    @property
    def compatListVersion(self) -> long: ...


class DasFailoverLevelAdvancedRuntimeInfo(DasAdvancedRuntimeInfo):
    @property
    def slotInfo(self) -> DasFailoverLevelAdvancedRuntimeInfo.SlotInfo: ...
    @property
    def totalSlots(self) -> int: ...
    @property
    def usedSlots(self) -> int: ...
    @property
    def unreservedSlots(self) -> int: ...
    @property
    def totalVms(self) -> int: ...
    @property
    def totalHosts(self) -> int: ...
    @property
    def totalGoodHosts(self) -> int: ...
    @property
    def hostSlots(self) -> List[DasFailoverLevelAdvancedRuntimeInfo.HostSlots]: ...
    @property
    def vmsRequiringMultipleSlots(self) -> List[DasFailoverLevelAdvancedRuntimeInfo.VmSlots]: ...


    class HostSlots(vmodl.DynamicData):
        @property
        def host(self) -> vim.HostSystem: ...
        @property
        def slots(self) -> int: ...


    class SlotInfo(vmodl.DynamicData):
        @property
        def numVcpus(self) -> int: ...
        @property
        def cpuMHz(self) -> int: ...
        @property
        def memoryMB(self) -> int: ...


    class VmSlots(vmodl.DynamicData):
        @property
        def vm(self) -> vim.VirtualMachine: ...
        @property
        def slots(self) -> int: ...


class DasFdmHostState(vmodl.DynamicData):
    @property
    def state(self) -> str: ...
    @property
    def stateReporter(self) -> vim.HostSystem: ...


class DasHostInfo(vmodl.DynamicData): ...


class DasHostRecommendation(vmodl.DynamicData):
    @property
    def host(self) -> vim.HostSystem: ...
    @property
    def drsRating(self) -> int: ...


class DasVmConfigInfo(vmodl.DynamicData):
    @property
    def key(self) -> vim.VirtualMachine: ...
    @property
    def restartPriority(self) -> DasVmConfigInfo.Priority: ...
    @property
    def powerOffOnIsolation(self) -> bool: ...
    @property
    def dasSettings(self) -> DasVmSettings: ...


    class Priority(Enum):
        disabled = "disabled"
        low = "low"
        medium = "medium"
        high = "high"


class DasVmConfigSpec(vim.option.ArrayUpdateSpec):
    @property
    def info(self) -> DasVmConfigInfo: ...


class DasVmSettings(vmodl.DynamicData):
    @property
    def restartPriority(self) -> str: ...
    @property
    def restartPriorityTimeout(self) -> int: ...
    @property
    def isolationResponse(self) -> str: ...
    @property
    def vmToolsMonitoringSettings(self) -> VmToolsMonitoringSettings: ...
    @property
    def vmComponentProtectionSettings(self) -> VmComponentProtectionSettings: ...


    class IsolationResponse(Enum):
        none = "none"
        powerOff = "poweroff"
        shutdown = "shutdown"
        clusterIsolationResponse = "clusterisolationresponse"


    class RestartPriority(Enum):
        disabled = "disabled"
        lowest = "lowest"
        low = "low"
        medium = "medium"
        high = "high"
        highest = "highest"
        clusterRestartPriority = "clusterrestartpriority"


class DatastoreUpdateSpec(vim.option.ArrayUpdateSpec):
    @property
    def datastore(self) -> vim.Datastore: ...


class DependencyRuleInfo(RuleInfo):
    @property
    def vmGroup(self) -> str: ...
    @property
    def dependsOnVmGroup(self) -> str: ...


class DpmConfigInfo(vmodl.DynamicData):
    @property
    def enabled(self) -> bool: ...
    @property
    def defaultDpmBehavior(self) -> DpmConfigInfo.DpmBehavior: ...
    @property
    def hostPowerActionRate(self) -> int: ...
    @property
    def option(self) -> List[vim.option.OptionValue]: ...


    class DpmBehavior(Enum):
        manual = "manual"
        automated = "automated"


class DpmHostConfigInfo(vmodl.DynamicData):
    @property
    def key(self) -> vim.HostSystem: ...
    @property
    def enabled(self) -> bool: ...
    @property
    def behavior(self) -> DpmConfigInfo.DpmBehavior: ...


class DpmHostConfigSpec(vim.option.ArrayUpdateSpec):
    @property
    def info(self) -> DpmHostConfigInfo: ...


class DrsConfigInfo(vmodl.DynamicData):
    @property
    def enabled(self) -> bool: ...
    @property
    def enableVmBehaviorOverrides(self) -> bool: ...
    @property
    def defaultVmBehavior(self) -> DrsConfigInfo.DrsBehavior: ...
    @property
    def vmotionRate(self) -> int: ...
    @property
    def scaleDescendantsShares(self) -> str: ...
    @property
    def option(self) -> List[vim.option.OptionValue]: ...


    class DrsBehavior(Enum):
        manual = "manual"
        partiallyAutomated = "partiallyautomated"
        fullyAutomated = "fullyautomated"


class DrsFaults(vmodl.DynamicData):
    @property
    def reason(self) -> str: ...
    @property
    def faultsByVm(self) -> List[DrsFaults.FaultsByVm]: ...


    class FaultsByVirtualDisk(DrsFaults.FaultsByVm):
        @property
        def disk(self) -> vim.vm.device.VirtualDiskId: ...


    class FaultsByVm(vmodl.DynamicData):
        @property
        def vm(self) -> vim.VirtualMachine: ...
        @property
        def fault(self) -> List[vmodl.MethodFault]: ...


class DrsMigration(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def time(self) -> datetime: ...
    @property
    def vm(self) -> vim.VirtualMachine: ...
    @property
    def cpuLoad(self) -> int: ...
    @property
    def memoryLoad(self) -> long: ...
    @property
    def source(self) -> vim.HostSystem: ...
    @property
    def sourceCpuLoad(self) -> int: ...
    @property
    def sourceMemoryLoad(self) -> long: ...
    @property
    def destination(self) -> vim.HostSystem: ...
    @property
    def destinationCpuLoad(self) -> int: ...
    @property
    def destinationMemoryLoad(self) -> long: ...


class DrsRecommendation(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def rating(self) -> int: ...
    @property
    def reason(self) -> str: ...
    @property
    def reasonText(self) -> str: ...
    @property
    def migrationList(self) -> List[DrsMigration]: ...


    class ReasonCode(Enum):
        fairnessCpuAvg = "fairnesscpuavg"
        fairnessMemAvg = "fairnessmemavg"
        jointAffin = "jointaffin"
        antiAffin = "antiaffin"
        hostMaint = "hostmaint"


class DrsVmConfigInfo(vmodl.DynamicData):
    @property
    def key(self) -> vim.VirtualMachine: ...
    @property
    def enabled(self) -> bool: ...
    @property
    def behavior(self) -> DrsConfigInfo.DrsBehavior: ...


class DrsVmConfigSpec(vim.option.ArrayUpdateSpec):
    @property
    def info(self) -> DrsVmConfigInfo: ...


class EnterMaintenanceResult(vmodl.DynamicData):
    @property
    def recommendations(self) -> List[Recommendation]: ...
    @property
    def fault(self) -> DrsFaults: ...


class FailoverHostAdmissionControlInfo(DasAdmissionControlInfo):
    @property
    def hostStatus(self) -> List[FailoverHostAdmissionControlInfo.HostStatus]: ...


    class HostStatus(vmodl.DynamicData):
        @property
        def host(self) -> vim.HostSystem: ...
        @property
        def status(self) -> vim.ManagedEntity.Status: ...


class FailoverHostAdmissionControlPolicy(DasAdmissionControlPolicy):
    @property
    def failoverHosts(self) -> List[vim.HostSystem]: ...
    @property
    def failoverLevel(self) -> int: ...


class FailoverLevelAdmissionControlInfo(DasAdmissionControlInfo):
    @property
    def currentFailoverLevel(self) -> int: ...


class FailoverLevelAdmissionControlPolicy(DasAdmissionControlPolicy):
    @property
    def failoverLevel(self) -> int: ...
    @property
    def slotPolicy(self) -> SlotPolicy: ...


class FailoverResourcesAdmissionControlInfo(DasAdmissionControlInfo):
    @property
    def currentCpuFailoverResourcesPercent(self) -> int: ...
    @property
    def currentMemoryFailoverResourcesPercent(self) -> int: ...
    @property
    def currentPMemFailoverResourcesPercent(self) -> int: ...


class FailoverResourcesAdmissionControlPolicy(DasAdmissionControlPolicy):
    @property
    def cpuFailoverResourcesPercent(self) -> int: ...
    @property
    def memoryFailoverResourcesPercent(self) -> int: ...
    @property
    def failoverLevel(self) -> int: ...
    @property
    def autoComputePercentages(self) -> bool: ...
    @property
    def pMemFailoverResourcesPercent(self) -> int: ...
    @property
    def autoComputePMemFailoverResourcesPercent(self) -> bool: ...


class FixedSizeSlotPolicy(SlotPolicy):
    @property
    def cpu(self) -> int: ...
    @property
    def memory(self) -> int: ...


class GroupInfo(vmodl.DynamicData):
    @property
    def name(self) -> str: ...
    @property
    def userCreated(self) -> bool: ...
    @property
    def uniqueID(self) -> str: ...


class GroupSpec(vim.option.ArrayUpdateSpec):
    @property
    def info(self) -> GroupInfo: ...


class HostGroup(GroupInfo):
    @property
    def host(self) -> List[vim.HostSystem]: ...


class HostInfraUpdateHaModeAction(Action):
    @property
    def operationType(self) -> str: ...


    class OperationType(Enum):
        enterQuarantine = "enterquarantine"
        exitQuarantine = "exitquarantine"
        enterMaintenance = "entermaintenance"


class HostPowerAction(Action):
    @property
    def operationType(self) -> HostPowerAction.OperationType: ...
    @property
    def powerConsumptionWatt(self) -> int: ...
    @property
    def cpuCapacityMHz(self) -> int: ...
    @property
    def memCapacityMB(self) -> int: ...


class HostRecommendation(vmodl.DynamicData):
    @property
    def host(self) -> vim.HostSystem: ...
    @property
    def rating(self) -> int: ...


class InfraUpdateHaConfigInfo(vmodl.DynamicData):
    @property
    def enabled(self) -> bool: ...
    @property
    def behavior(self) -> str: ...
    @property
    def moderateRemediation(self) -> str: ...
    @property
    def severeRemediation(self) -> str: ...
    @property
    def providers(self) -> List[str]: ...


    class BehaviorType(Enum):
        Manual = "manual"
        Automated = "automated"


    class RemediationType(Enum):
        QuarantineMode = "quarantinemode"
        MaintenanceMode = "maintenancemode"


class InitialPlacementAction(Action):
    @property
    def targetHost(self) -> vim.HostSystem: ...
    @property
    def pool(self) -> vim.ResourcePool: ...


class MigrationAction(Action):
    @property
    def drsMigration(self) -> DrsMigration: ...


class NotAttemptedVmInfo(vmodl.DynamicData):
    @property
    def vm(self) -> vim.VirtualMachine: ...
    @property
    def fault(self) -> vmodl.MethodFault: ...


class OrchestrationInfo(vmodl.DynamicData):
    @property
    def defaultVmReadiness(self) -> VmReadiness: ...


class PlacementAction(Action):
    @property
    def vm(self) -> vim.VirtualMachine: ...
    @property
    def targetHost(self) -> vim.HostSystem: ...
    @property
    def relocateSpec(self) -> vim.vm.RelocateSpec: ...


class PlacementResult(vmodl.DynamicData):
    @property
    def recommendations(self) -> List[Recommendation]: ...
    @property
    def drsFault(self) -> DrsFaults: ...


class PlacementSpec(vmodl.DynamicData):
    @property
    def priority(self) -> vim.VirtualMachine.MovePriority: ...
    @property
    def vm(self) -> vim.VirtualMachine: ...
    @property
    def configSpec(self) -> vim.vm.ConfigSpec: ...
    @property
    def relocateSpec(self) -> vim.vm.RelocateSpec: ...
    @property
    def hosts(self) -> List[vim.HostSystem]: ...
    @property
    def datastores(self) -> List[vim.Datastore]: ...
    @property
    def storagePods(self) -> List[vim.StoragePod]: ...
    @property
    def disallowPrerequisiteMoves(self) -> bool: ...
    @property
    def rules(self) -> List[RuleInfo]: ...
    @property
    def key(self) -> str: ...
    @property
    def placementType(self) -> str: ...
    @property
    def cloneSpec(self) -> vim.vm.CloneSpec: ...
    @property
    def cloneName(self) -> str: ...


    class PlacementType(Enum):
        create = "create"
        reconfigure = "reconfigure"
        relocate = "relocate"
        clone = "clone"


class PowerOnVmResult(vmodl.DynamicData):
    @property
    def attempted(self) -> List[AttemptedVmInfo]: ...
    @property
    def notAttempted(self) -> List[NotAttemptedVmInfo]: ...
    @property
    def recommendations(self) -> List[Recommendation]: ...


class PreemptibleVmPairInfo(vmodl.DynamicData):
    @property
    def id(self) -> int: ...
    @property
    def monitoredVm(self) -> vim.VirtualMachine: ...
    @property
    def preemptibleVm(self) -> vim.VirtualMachine: ...


class PreemptibleVmPairSpec(vim.option.ArrayUpdateSpec):
    @property
    def info(self) -> PreemptibleVmPairInfo: ...


class ProactiveDrsConfigInfo(vmodl.DynamicData):
    @property
    def enabled(self) -> bool: ...


class Recommendation(vmodl.DynamicData):
    @property
    def key(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def time(self) -> datetime: ...
    @property
    def rating(self) -> int: ...
    @property
    def reason(self) -> str: ...
    @property
    def reasonText(self) -> str: ...
    @property
    def warningText(self) -> str: ...
    @property
    def warningDetails(self) -> vmodl.LocalizableMessage: ...
    @property
    def prerequisite(self) -> List[str]: ...
    @property
    def action(self) -> List[Action]: ...
    @property
    def target(self) -> ManagedObject: ...


    class RecommendationType(Enum):
        V1 = "v1"


class ResourceUsageSummary(vmodl.DynamicData):
    @property
    def cpuUsedMHz(self) -> int: ...
    @property
    def cpuCapacityMHz(self) -> int: ...
    @property
    def memUsedMB(self) -> int: ...
    @property
    def memCapacityMB(self) -> int: ...
    @property
    def pMemAvailableMB(self) -> long: ...
    @property
    def pMemCapacityMB(self) -> long: ...
    @property
    def storageUsedMB(self) -> long: ...
    @property
    def storageCapacityMB(self) -> long: ...


class RuleInfo(vmodl.DynamicData):
    @property
    def key(self) -> int: ...
    @property
    def status(self) -> vim.ManagedEntity.Status: ...
    @property
    def enabled(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def mandatory(self) -> bool: ...
    @property
    def userCreated(self) -> bool: ...
    @property
    def inCompliance(self) -> bool: ...
    @property
    def ruleUuid(self) -> str: ...


class RuleSpec(vim.option.ArrayUpdateSpec):
    @property
    def info(self) -> RuleInfo: ...


class SlotPolicy(vmodl.DynamicData): ...


class SystemVMsConfigInfo(vmodl.DynamicData):
    @property
    def allowedDatastores(self) -> List[vim.Datastore]: ...
    @property
    def notAllowedDatastores(self) -> List[vim.Datastore]: ...
    @property
    def dsTagCategoriesToExclude(self) -> List[str]: ...


class SystemVMsConfigSpec(vmodl.DynamicData):
    @property
    def allowedDatastores(self) -> List[DatastoreUpdateSpec]: ...
    @property
    def notAllowedDatastores(self) -> List[DatastoreUpdateSpec]: ...
    @property
    def dsTagCategoriesToExclude(self) -> List[TagCategoryUpdateSpec]: ...


class TagCategoryUpdateSpec(vim.option.ArrayUpdateSpec):
    @property
    def category(self) -> str: ...


class UsageSummary(vmodl.DynamicData):
    @property
    def totalCpuCapacityMhz(self) -> int: ...
    @property
    def totalMemCapacityMB(self) -> int: ...
    @property
    def cpuReservationMhz(self) -> int: ...
    @property
    def memReservationMB(self) -> int: ...
    @property
    def poweredOffCpuReservationMhz(self) -> int: ...
    @property
    def poweredOffMemReservationMB(self) -> int: ...
    @property
    def cpuDemandMhz(self) -> int: ...
    @property
    def memDemandMB(self) -> int: ...
    @property
    def statsGenNumber(self) -> long: ...
    @property
    def cpuEntitledMhz(self) -> int: ...
    @property
    def memEntitledMB(self) -> int: ...
    @property
    def poweredOffVmCount(self) -> int: ...
    @property
    def totalVmCount(self) -> int: ...


class VmComponentProtectionSettings(vmodl.DynamicData):
    @property
    def vmStorageProtectionForAPD(self) -> str: ...
    @property
    def enableAPDTimeoutForHosts(self) -> bool: ...
    @property
    def vmTerminateDelayForAPDSec(self) -> int: ...
    @property
    def vmReactionOnAPDCleared(self) -> str: ...
    @property
    def vmStorageProtectionForPDL(self) -> str: ...


    class StorageVmReaction(Enum):
        disabled = "disabled"
        warning = "warning"
        restartConservative = "restartconservative"
        restartAggressive = "restartaggressive"
        clusterDefault = "clusterdefault"


    class VmReactionOnAPDCleared(Enum):
        none = "none"
        reset = "reset"
        useClusterDefault = "useclusterdefault"


class VmGroup(GroupInfo):
    @property
    def vm(self) -> List[vim.VirtualMachine]: ...


class VmHostRuleInfo(RuleInfo):
    @property
    def vmGroupName(self) -> str: ...
    @property
    def affineHostGroupName(self) -> str: ...
    @property
    def antiAffineHostGroupName(self) -> str: ...


class VmOrchestrationInfo(vmodl.DynamicData):
    @property
    def vm(self) -> vim.VirtualMachine: ...
    @property
    def vmReadiness(self) -> VmReadiness: ...


class VmOrchestrationSpec(vim.option.ArrayUpdateSpec):
    @property
    def info(self) -> VmOrchestrationInfo: ...


class VmReadiness(vmodl.DynamicData):
    @property
    def readyCondition(self) -> str: ...
    @property
    def postReadyDelay(self) -> int: ...


    class ReadyCondition(Enum):
        none = "none"
        poweredOn = "poweredon"
        guestHbStatusGreen = "guesthbstatusgreen"
        appHbStatusGreen = "apphbstatusgreen"
        useClusterDefault = "useclusterdefault"


class VmToolsMonitoringSettings(vmodl.DynamicData):
    @property
    def enabled(self) -> bool: ...
    @property
    def vmMonitoring(self) -> str: ...
    @property
    def clusterSettings(self) -> bool: ...
    @property
    def failureInterval(self) -> int: ...
    @property
    def minUpTime(self) -> int: ...
    @property
    def maxFailures(self) -> int: ...
    @property
    def maxFailureWindow(self) -> int: ...