# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from electricalclientv4 import schemas  # noqa: F401


class PatchedHistory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            pk = schemas.IntSchema
            
            
            class place_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 30
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'place_key':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class device_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 30
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'device_key':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class urms(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,6}(?:\.\d{0,6})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'urms':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class irms(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,6}(?:\.\d{0,6})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'irms':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class power_active(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,6}(?:\.\d{0,6})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'power_active':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class power_reactive(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,6}(?:\.\d{0,6})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'power_reactive':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class power_total(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,6}(?:\.\d{0,6})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'power_total':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class power_apparent(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,6}(?:\.\d{0,6})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'power_apparent':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class power_factor(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,6}(?:\.\d{0,6})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'power_factor':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class energy_active(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,6}(?:\.\d{0,6})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'energy_active':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class energy_reactive(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,6}(?:\.\d{0,6})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'energy_reactive':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class energy_apparent(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,6}(?:\.\d{0,6})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'energy_apparent':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class energy_inactive(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,6}(?:\.\d{0,6})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'energy_inactive':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class phase_shift_angles(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,6}(?:\.\d{0,6})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'phase_shift_angles':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class frequency(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,6}(?:\.\d{0,6})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'frequency':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class datetime_create(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'datetime_create':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class datetime(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'datetime':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "pk": pk,
                "place_key": place_key,
                "device_key": device_key,
                "urms": urms,
                "irms": irms,
                "power_active": power_active,
                "power_reactive": power_reactive,
                "power_total": power_total,
                "power_apparent": power_apparent,
                "power_factor": power_factor,
                "energy_active": energy_active,
                "energy_reactive": energy_reactive,
                "energy_apparent": energy_apparent,
                "energy_inactive": energy_inactive,
                "phase_shift_angles": phase_shift_angles,
                "frequency": frequency,
                "datetime_create": datetime_create,
                "datetime": datetime,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pk"]) -> MetaOapg.properties.pk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["place_key"]) -> MetaOapg.properties.place_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_key"]) -> MetaOapg.properties.device_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["urms"]) -> MetaOapg.properties.urms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["irms"]) -> MetaOapg.properties.irms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["power_active"]) -> MetaOapg.properties.power_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["power_reactive"]) -> MetaOapg.properties.power_reactive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["power_total"]) -> MetaOapg.properties.power_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["power_apparent"]) -> MetaOapg.properties.power_apparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["power_factor"]) -> MetaOapg.properties.power_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["energy_active"]) -> MetaOapg.properties.energy_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["energy_reactive"]) -> MetaOapg.properties.energy_reactive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["energy_apparent"]) -> MetaOapg.properties.energy_apparent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["energy_inactive"]) -> MetaOapg.properties.energy_inactive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phase_shift_angles"]) -> MetaOapg.properties.phase_shift_angles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datetime_create"]) -> MetaOapg.properties.datetime_create: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datetime"]) -> MetaOapg.properties.datetime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pk", "place_key", "device_key", "urms", "irms", "power_active", "power_reactive", "power_total", "power_apparent", "power_factor", "energy_active", "energy_reactive", "energy_apparent", "energy_inactive", "phase_shift_angles", "frequency", "datetime_create", "datetime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pk"]) -> typing.Union[MetaOapg.properties.pk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["place_key"]) -> typing.Union[MetaOapg.properties.place_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_key"]) -> typing.Union[MetaOapg.properties.device_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["urms"]) -> typing.Union[MetaOapg.properties.urms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["irms"]) -> typing.Union[MetaOapg.properties.irms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["power_active"]) -> typing.Union[MetaOapg.properties.power_active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["power_reactive"]) -> typing.Union[MetaOapg.properties.power_reactive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["power_total"]) -> typing.Union[MetaOapg.properties.power_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["power_apparent"]) -> typing.Union[MetaOapg.properties.power_apparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["power_factor"]) -> typing.Union[MetaOapg.properties.power_factor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["energy_active"]) -> typing.Union[MetaOapg.properties.energy_active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["energy_reactive"]) -> typing.Union[MetaOapg.properties.energy_reactive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["energy_apparent"]) -> typing.Union[MetaOapg.properties.energy_apparent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["energy_inactive"]) -> typing.Union[MetaOapg.properties.energy_inactive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phase_shift_angles"]) -> typing.Union[MetaOapg.properties.phase_shift_angles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> typing.Union[MetaOapg.properties.frequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datetime_create"]) -> typing.Union[MetaOapg.properties.datetime_create, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datetime"]) -> typing.Union[MetaOapg.properties.datetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pk", "place_key", "device_key", "urms", "irms", "power_active", "power_reactive", "power_total", "power_apparent", "power_factor", "energy_active", "energy_reactive", "energy_apparent", "energy_inactive", "phase_shift_angles", "frequency", "datetime_create", "datetime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        pk: typing.Union[MetaOapg.properties.pk, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        place_key: typing.Union[MetaOapg.properties.place_key, None, str, schemas.Unset] = schemas.unset,
        device_key: typing.Union[MetaOapg.properties.device_key, None, str, schemas.Unset] = schemas.unset,
        urms: typing.Union[MetaOapg.properties.urms, None, str, schemas.Unset] = schemas.unset,
        irms: typing.Union[MetaOapg.properties.irms, None, str, schemas.Unset] = schemas.unset,
        power_active: typing.Union[MetaOapg.properties.power_active, None, str, schemas.Unset] = schemas.unset,
        power_reactive: typing.Union[MetaOapg.properties.power_reactive, None, str, schemas.Unset] = schemas.unset,
        power_total: typing.Union[MetaOapg.properties.power_total, None, str, schemas.Unset] = schemas.unset,
        power_apparent: typing.Union[MetaOapg.properties.power_apparent, None, str, schemas.Unset] = schemas.unset,
        power_factor: typing.Union[MetaOapg.properties.power_factor, None, str, schemas.Unset] = schemas.unset,
        energy_active: typing.Union[MetaOapg.properties.energy_active, None, str, schemas.Unset] = schemas.unset,
        energy_reactive: typing.Union[MetaOapg.properties.energy_reactive, None, str, schemas.Unset] = schemas.unset,
        energy_apparent: typing.Union[MetaOapg.properties.energy_apparent, None, str, schemas.Unset] = schemas.unset,
        energy_inactive: typing.Union[MetaOapg.properties.energy_inactive, None, str, schemas.Unset] = schemas.unset,
        phase_shift_angles: typing.Union[MetaOapg.properties.phase_shift_angles, None, str, schemas.Unset] = schemas.unset,
        frequency: typing.Union[MetaOapg.properties.frequency, None, str, schemas.Unset] = schemas.unset,
        datetime_create: typing.Union[MetaOapg.properties.datetime_create, None, str, datetime, schemas.Unset] = schemas.unset,
        datetime: typing.Union[MetaOapg.properties.datetime, None, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PatchedHistory':
        return super().__new__(
            cls,
            *_args,
            pk=pk,
            place_key=place_key,
            device_key=device_key,
            urms=urms,
            irms=irms,
            power_active=power_active,
            power_reactive=power_reactive,
            power_total=power_total,
            power_apparent=power_apparent,
            power_factor=power_factor,
            energy_active=energy_active,
            energy_reactive=energy_reactive,
            energy_apparent=energy_apparent,
            energy_inactive=energy_inactive,
            phase_shift_angles=phase_shift_angles,
            frequency=frequency,
            datetime_create=datetime_create,
            datetime=datetime,
            _configuration=_configuration,
            **kwargs,
        )
