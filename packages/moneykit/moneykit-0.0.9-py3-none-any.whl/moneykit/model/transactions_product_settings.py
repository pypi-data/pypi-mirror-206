# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from moneykit import schemas  # noqa: F401


class TransactionsProductSettings(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        class properties:
            required = schemas.BoolSchema
            prefetch = schemas.BoolSchema
            extend_history = schemas.BoolSchema
            __annotations__ = {
                "required": required,
                "prefetch": prefetch,
                "extend_history": extend_history,
            }

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefetch"]) -> MetaOapg.properties.prefetch:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extend_history"]) -> MetaOapg.properties.extend_history:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "required",
                "prefetch",
                "extend_history",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["required"]
    ) -> typing.Union[MetaOapg.properties.required, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["prefetch"]
    ) -> typing.Union[MetaOapg.properties.prefetch, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["extend_history"]
    ) -> typing.Union[MetaOapg.properties.extend_history, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "required",
                "prefetch",
                "extend_history",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        required: typing.Union[MetaOapg.properties.required, bool, schemas.Unset] = schemas.unset,
        prefetch: typing.Union[MetaOapg.properties.prefetch, bool, schemas.Unset] = schemas.unset,
        extend_history: typing.Union[MetaOapg.properties.extend_history, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "TransactionsProductSettings":
        return super().__new__(
            cls,
            *_args,
            required=required,
            prefetch=prefetch,
            extend_history=extend_history,
            _configuration=_configuration,
            **kwargs,
        )
