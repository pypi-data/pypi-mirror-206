# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from moneykit import schemas  # noqa: F401

class InstitutionStylingResponse(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "color",
            "name",
            "avatar",
        }

        class properties:
            name = schemas.StrSchema
            color = schemas.StrSchema
            avatar = schemas.StrSchema

            class domain(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "domain":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            class color_dark(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "color_dark":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            class avatar_dark(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "avatar_dark":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            class logo(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "logo":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            class logo_dark(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
                def __new__(
                    cls,
                    *_args: typing.Union[
                        None,
                        str,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "logo_dark":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "name": name,
                "color": color,
                "avatar": avatar,
                "domain": domain,
                "color_dark": color_dark,
                "avatar_dark": avatar_dark,
                "logo": logo,
                "logo_dark": logo_dark,
            }
    color: MetaOapg.properties.color
    name: MetaOapg.properties.name
    avatar: MetaOapg.properties.avatar

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color_dark"]) -> MetaOapg.properties.color_dark: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar_dark"]) -> MetaOapg.properties.avatar_dark: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo"]) -> MetaOapg.properties.logo: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo_dark"]) -> MetaOapg.properties.logo_dark: ...
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "name",
                "color",
                "avatar",
                "domain",
                "color_dark",
                "avatar_dark",
                "logo",
                "logo_dark",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["domain"]
    ) -> typing.Union[MetaOapg.properties.domain, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["color_dark"]
    ) -> typing.Union[MetaOapg.properties.color_dark, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["avatar_dark"]
    ) -> typing.Union[MetaOapg.properties.avatar_dark, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["logo"]
    ) -> typing.Union[MetaOapg.properties.logo, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["logo_dark"]
    ) -> typing.Union[MetaOapg.properties.logo_dark, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "name",
                "color",
                "avatar",
                "domain",
                "color_dark",
                "avatar_dark",
                "logo",
                "logo_dark",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)
    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        color: typing.Union[
            MetaOapg.properties.color,
            str,
        ],
        name: typing.Union[
            MetaOapg.properties.name,
            str,
        ],
        avatar: typing.Union[
            MetaOapg.properties.avatar,
            str,
        ],
        domain: typing.Union[MetaOapg.properties.domain, None, str, schemas.Unset] = schemas.unset,
        color_dark: typing.Union[MetaOapg.properties.color_dark, None, str, schemas.Unset] = schemas.unset,
        avatar_dark: typing.Union[MetaOapg.properties.avatar_dark, None, str, schemas.Unset] = schemas.unset,
        logo: typing.Union[MetaOapg.properties.logo, None, str, schemas.Unset] = schemas.unset,
        logo_dark: typing.Union[MetaOapg.properties.logo_dark, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "InstitutionStylingResponse":
        return super().__new__(
            cls,
            *_args,
            color=color,
            name=name,
            avatar=avatar,
            domain=domain,
            color_dark=color_dark,
            avatar_dark=avatar_dark,
            logo=logo,
            logo_dark=logo_dark,
            _configuration=_configuration,
            **kwargs,
        )
