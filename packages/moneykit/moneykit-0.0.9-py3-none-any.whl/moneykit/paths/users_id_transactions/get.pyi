# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from dataclasses import dataclass
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401
import urllib3
from urllib3._collections import HTTPHeaderDict

from moneykit import (
    api_client,
    exceptions,
    schemas,  # noqa: F401
)
from moneykit.model.api_error_auth_expired_access_token_response import APIErrorAuthExpiredAccessTokenResponse
from moneykit.model.api_error_auth_unauthorized_response import APIErrorAuthUnauthorizedResponse
from moneykit.model.get_user_transactions_response import GetUserTransactionsResponse
from moneykit.model.supported_version import SupportedVersion
from moneykit.model.transaction_type_filter import TransactionTypeFilter

# Query params

class TransactionTypeSchema(schemas.ListBase, schemas.NoneBase, schemas.Schema, schemas.NoneTupleMixin):
    class MetaOapg:
        @staticmethod
        def items() -> typing.Type["TransactionTypeFilter"]:
            return TransactionTypeFilter
    def __new__(
        cls,
        *_args: typing.Union[
            list,
            tuple,
            None,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> "TransactionTypeSchema":
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
        )

class CategorySchema(schemas.ListBase, schemas.NoneBase, schemas.Schema, schemas.NoneTupleMixin):
    class MetaOapg:
        items = schemas.StrSchema
    def __new__(
        cls,
        *_args: typing.Union[
            list,
            tuple,
            None,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> "CategorySchema":
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
        )

class AccountIdSchema(schemas.ListBase, schemas.NoneBase, schemas.Schema, schemas.NoneTupleMixin):
    class MetaOapg:
        class items(schemas.StrSchema):
            pass
    def __new__(
        cls,
        *_args: typing.Union[
            list,
            tuple,
            None,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> "AccountIdSchema":
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
        )

class InstitutionIdSchema(schemas.ListBase, schemas.NoneBase, schemas.Schema, schemas.NoneTupleMixin):
    class MetaOapg:
        class items(schemas.StrSchema):
            pass
    def __new__(
        cls,
        *_args: typing.Union[
            list,
            tuple,
            None,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> "InstitutionIdSchema":
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
        )

class PageSchema(schemas.IntSchema):
    pass

class SizeSchema(schemas.IntSchema):
    pass

class StartDateSchema(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
    def __new__(
        cls,
        *_args: typing.Union[
            None,
            str,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> "StartDateSchema":
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
        )

class EndDateSchema(schemas.StrBase, schemas.NoneBase, schemas.Schema, schemas.NoneStrMixin):
    def __new__(
        cls,
        *_args: typing.Union[
            None,
            str,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> "EndDateSchema":
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
        )

RequestRequiredQueryParams = typing_extensions.TypedDict("RequestRequiredQueryParams", {})
RequestOptionalQueryParams = typing_extensions.TypedDict(
    "RequestOptionalQueryParams",
    {
        "transaction_type": typing.Union[
            TransactionTypeSchema,
            list,
            tuple,
            None,
        ],
        "category": typing.Union[
            CategorySchema,
            list,
            tuple,
            None,
        ],
        "account_id": typing.Union[
            AccountIdSchema,
            list,
            tuple,
            None,
        ],
        "institution_id": typing.Union[
            InstitutionIdSchema,
            list,
            tuple,
            None,
        ],
        "page": typing.Union[
            PageSchema,
            decimal.Decimal,
            int,
        ],
        "size": typing.Union[
            SizeSchema,
            decimal.Decimal,
            int,
        ],
        "start_date": typing.Union[
            StartDateSchema,
            None,
            str,
        ],
        "end_date": typing.Union[
            EndDateSchema,
            None,
            str,
        ],
    },
    total=False,
)

class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass

request_query_transaction_type = api_client.QueryParameter(
    name="transaction_type",
    style=api_client.ParameterStyle.FORM,
    schema=TransactionTypeSchema,
    explode=True,
)
request_query_category = api_client.QueryParameter(
    name="category",
    style=api_client.ParameterStyle.FORM,
    schema=CategorySchema,
    explode=True,
)
request_query_account_id = api_client.QueryParameter(
    name="account_id",
    style=api_client.ParameterStyle.FORM,
    schema=AccountIdSchema,
    explode=True,
)
request_query_institution_id = api_client.QueryParameter(
    name="institution_id",
    style=api_client.ParameterStyle.FORM,
    schema=InstitutionIdSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_size = api_client.QueryParameter(
    name="size",
    style=api_client.ParameterStyle.FORM,
    schema=SizeSchema,
    explode=True,
)
request_query_start_date = api_client.QueryParameter(
    name="start_date",
    style=api_client.ParameterStyle.FORM,
    schema=StartDateSchema,
    explode=True,
)
request_query_end_date = api_client.QueryParameter(
    name="end_date",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateSchema,
    explode=True,
)
# Header params

class MoneykitVersionSchema(
    schemas.ComposedBase, schemas.DictBase, schemas.NoneBase, schemas.Schema, schemas.NoneFrozenDictMixin
):
    class MetaOapg:
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                SupportedVersion,
            ]
    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
            None,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "MoneykitVersionSchema":
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

RequestRequiredHeaderParams = typing_extensions.TypedDict("RequestRequiredHeaderParams", {})
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    "RequestOptionalHeaderParams",
    {
        "moneykit-version": typing.Union[
            MoneykitVersionSchema,
            dict,
            frozendict.frozendict,
            None,
        ],
    },
    total=False,
)

class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass

request_header_moneykit_version = api_client.HeaderParameter(
    name="moneykit-version",
    style=api_client.ParameterStyle.SIMPLE,
    schema=MoneykitVersionSchema,
)
# Path params
IdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    "RequestRequiredPathParams",
    {
        "id": typing.Union[
            IdSchema,
            str,
        ],
    },
)
RequestOptionalPathParams = typing_extensions.TypedDict("RequestOptionalPathParams", {}, total=False)

class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass

request_path_id = api_client.PathParameter(
    name="id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=IdSchema,
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = GetUserTransactionsResponse

@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[SchemaFor200ResponseBodyApplicationJson,]
    headers: schemas.Unset = schemas.unset

_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        "application/json": api_client.MediaType(schema=SchemaFor200ResponseBodyApplicationJson),
    },
)

class SchemaFor401ResponseBodyApplicationJson(
    schemas.ComposedSchema,
):
    class MetaOapg:
        @classmethod
        @functools.lru_cache()
        def any_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                APIErrorAuthExpiredAccessTokenResponse,
                APIErrorAuthUnauthorizedResponse,
            ]
    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "SchemaFor401ResponseBodyApplicationJson":
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[SchemaFor401ResponseBodyApplicationJson,]
    headers: schemas.Unset = schemas.unset

_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    content={
        "application/json": api_client.MediaType(schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = ("application/json",)

class BaseApi(api_client.Api):
    @typing.overload
    def _get_user_transactions_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]: ...
    @typing.overload
    def _get_user_transactions_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...
    @typing.overload
    def _get_user_transactions_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization,]: ...
    def _get_user_transactions_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        /users/{id}/transactions
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (request_path_id,):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace("{%s}" % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_transaction_type,
            request_query_category,
            request_query_account_id,
            request_query_institution_id,
            request_query_page,
            request_query_size,
            request_query_start_date,
            request_query_end_date,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        for parameter in (request_header_moneykit_version,):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add("Accept", accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method="get".upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(status=response.status, reason=response.reason, api_response=api_response)

        return api_response

class GetUserTransactions(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def get_user_transactions(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]: ...
    @typing.overload
    def get_user_transactions(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...
    @typing.overload
    def get_user_transactions(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization,]: ...
    def get_user_transactions(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_user_transactions_oapg(
            query_params=query_params,
            header_params=header_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )

class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]: ...
    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...
    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization,]: ...
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_user_transactions_oapg(
            query_params=query_params,
            header_params=header_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )
