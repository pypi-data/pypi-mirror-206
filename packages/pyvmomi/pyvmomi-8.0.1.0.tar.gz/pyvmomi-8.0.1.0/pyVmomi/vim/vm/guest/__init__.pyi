from typing import List
from enum import Enum
from pyVmomi import vim, vmodl
from datetime import datetime
from pyVmomi.VmomiSupport import ManagedObject, NoneType, binary, long


class AliasManager(ManagedObject):
    def AddAlias(self, vm: vim.VirtualMachine, auth: GuestAuthentication, username: str, mapCert: bool, base64Cert: str, aliasInfo: AliasManager.GuestAuthAliasInfo) -> NoneType: ...
    def RemoveAlias(self, vm: vim.VirtualMachine, auth: GuestAuthentication, username: str, base64Cert: str, subject: AliasManager.GuestAuthSubject) -> NoneType: ...
    def RemoveAliasByCert(self, vm: vim.VirtualMachine, auth: GuestAuthentication, username: str, base64Cert: str) -> NoneType: ...
    def ListAliases(self, vm: vim.VirtualMachine, auth: GuestAuthentication, username: str) -> List[AliasManager.GuestAliases]: ...
    def ListMappedAliases(self, vm: vim.VirtualMachine, auth: GuestAuthentication) -> List[AliasManager.GuestMappedAliases]: ...


    class GuestAliases(vmodl.DynamicData):
        @property
        def base64Cert(self) -> str: ...
        @property
        def aliases(self) -> List[AliasManager.GuestAuthAliasInfo]: ...


    class GuestAuthAliasInfo(vmodl.DynamicData):
        @property
        def subject(self) -> AliasManager.GuestAuthSubject: ...
        @property
        def comment(self) -> str: ...


    class GuestAuthAnySubject(AliasManager.GuestAuthSubject): ...


    class GuestAuthNamedSubject(AliasManager.GuestAuthSubject):
        @property
        def name(self) -> str: ...


    class GuestAuthSubject(vmodl.DynamicData): ...


    class GuestMappedAliases(vmodl.DynamicData):
        @property
        def base64Cert(self) -> str: ...
        @property
        def username(self) -> str: ...
        @property
        def subjects(self) -> List[AliasManager.GuestAuthSubject]: ...


class AuthManager(ManagedObject):
    def ValidateCredentials(self, vm: vim.VirtualMachine, auth: GuestAuthentication) -> NoneType: ...
    def AcquireCredentials(self, vm: vim.VirtualMachine, requestedAuth: GuestAuthentication, sessionID: long) -> GuestAuthentication: ...
    def ReleaseCredentials(self, vm: vim.VirtualMachine, auth: GuestAuthentication) -> NoneType: ...


class FileManager(ManagedObject):
    def MakeDirectory(self, vm: vim.VirtualMachine, auth: GuestAuthentication, directoryPath: str, createParentDirectories: bool) -> NoneType: ...
    def DeleteFile(self, vm: vim.VirtualMachine, auth: GuestAuthentication, filePath: str) -> NoneType: ...
    def DeleteDirectory(self, vm: vim.VirtualMachine, auth: GuestAuthentication, directoryPath: str, recursive: bool) -> NoneType: ...
    def MoveDirectory(self, vm: vim.VirtualMachine, auth: GuestAuthentication, srcDirectoryPath: str, dstDirectoryPath: str) -> NoneType: ...
    def MoveFile(self, vm: vim.VirtualMachine, auth: GuestAuthentication, srcFilePath: str, dstFilePath: str, overwrite: bool) -> NoneType: ...
    def CreateTemporaryFile(self, vm: vim.VirtualMachine, auth: GuestAuthentication, prefix: str, suffix: str, directoryPath: str) -> str: ...
    def CreateTemporaryDirectory(self, vm: vim.VirtualMachine, auth: GuestAuthentication, prefix: str, suffix: str, directoryPath: str) -> str: ...
    def ListFiles(self, vm: vim.VirtualMachine, auth: GuestAuthentication, filePath: str, index: int, maxResults: int, matchPattern: str) -> FileManager.ListFileInfo: ...
    def ChangeFileAttributes(self, vm: vim.VirtualMachine, auth: GuestAuthentication, guestFilePath: str, fileAttributes: FileManager.FileAttributes) -> NoneType: ...
    def InitiateFileTransferFromGuest(self, vm: vim.VirtualMachine, auth: GuestAuthentication, guestFilePath: str) -> FileManager.FileTransferInformation: ...
    def InitiateFileTransferToGuest(self, vm: vim.VirtualMachine, auth: GuestAuthentication, guestFilePath: str, fileAttributes: FileManager.FileAttributes, fileSize: long, overwrite: bool) -> str: ...


    class FileAttributes(vmodl.DynamicData):
        @property
        def modificationTime(self) -> datetime: ...
        @property
        def accessTime(self) -> datetime: ...
        @property
        def symlinkTarget(self) -> str: ...


    class FileInfo(vmodl.DynamicData):
        @property
        def path(self) -> str: ...
        @property
        def type(self) -> str: ...
        @property
        def size(self) -> long: ...
        @property
        def attributes(self) -> FileManager.FileAttributes: ...


        class FileType(Enum):
            file = "file"
            directory = "directory"
            symlink = "symlink"


    class FileTransferInformation(vmodl.DynamicData):
        @property
        def attributes(self) -> FileManager.FileAttributes: ...
        @property
        def size(self) -> long: ...
        @property
        def url(self) -> str: ...


    class ListFileInfo(vmodl.DynamicData):
        @property
        def files(self) -> List[FileManager.FileInfo]: ...
        @property
        def remaining(self) -> int: ...


    class PosixFileAttributes(FileManager.FileAttributes):
        @property
        def ownerId(self) -> int: ...
        @property
        def groupId(self) -> int: ...
        @property
        def permissions(self) -> long: ...


    class WindowsFileAttributes(FileManager.FileAttributes):
        @property
        def hidden(self) -> bool: ...
        @property
        def readOnly(self) -> bool: ...
        @property
        def createTime(self) -> datetime: ...


class GuestOperationsManager(ManagedObject):
    @property
    def authManager(self) -> AuthManager: ...
    @property
    def fileManager(self) -> FileManager: ...
    @property
    def processManager(self) -> ProcessManager: ...
    @property
    def guestWindowsRegistryManager(self) -> WindowsRegistryManager: ...
    @property
    def aliasManager(self) -> AliasManager: ...


class ProcessManager(ManagedObject):
    def StartProgram(self, vm: vim.VirtualMachine, auth: GuestAuthentication, spec: ProcessManager.ProgramSpec) -> long: ...
    def ListProcesses(self, vm: vim.VirtualMachine, auth: GuestAuthentication, pids: List[long]) -> List[ProcessManager.ProcessInfo]: ...
    def TerminateProcess(self, vm: vim.VirtualMachine, auth: GuestAuthentication, pid: long) -> NoneType: ...
    def ReadEnvironmentVariable(self, vm: vim.VirtualMachine, auth: GuestAuthentication, names: List[str]) -> List[str]: ...


    class ProcessInfo(vmodl.DynamicData):
        @property
        def name(self) -> str: ...
        @property
        def pid(self) -> long: ...
        @property
        def owner(self) -> str: ...
        @property
        def cmdLine(self) -> str: ...
        @property
        def startTime(self) -> datetime: ...
        @property
        def endTime(self) -> datetime: ...
        @property
        def exitCode(self) -> int: ...


    class ProgramSpec(vmodl.DynamicData):
        @property
        def programPath(self) -> str: ...
        @property
        def arguments(self) -> str: ...
        @property
        def workingDirectory(self) -> str: ...
        @property
        def envVariables(self) -> List[str]: ...


    class WindowsProgramSpec(ProcessManager.ProgramSpec):
        @property
        def startMinimized(self) -> bool: ...


class WindowsRegistryManager(ManagedObject):
    def CreateRegistryKey(self, vm: vim.VirtualMachine, auth: GuestAuthentication, keyName: WindowsRegistryManager.RegistryKeyName, isVolatile: bool, classType: str) -> NoneType: ...
    def ListRegistryKeys(self, vm: vim.VirtualMachine, auth: GuestAuthentication, keyName: WindowsRegistryManager.RegistryKeyName, recursive: bool, matchPattern: str) -> List[WindowsRegistryManager.RegistryKeyRecord]: ...
    def DeleteRegistryKey(self, vm: vim.VirtualMachine, auth: GuestAuthentication, keyName: WindowsRegistryManager.RegistryKeyName, recursive: bool) -> NoneType: ...
    def SetRegistryValue(self, vm: vim.VirtualMachine, auth: GuestAuthentication, value: WindowsRegistryManager.RegistryValue) -> NoneType: ...
    def ListRegistryValues(self, vm: vim.VirtualMachine, auth: GuestAuthentication, keyName: WindowsRegistryManager.RegistryKeyName, expandStrings: bool, matchPattern: str) -> List[WindowsRegistryManager.RegistryValue]: ...
    def DeleteRegistryValue(self, vm: vim.VirtualMachine, auth: GuestAuthentication, valueName: WindowsRegistryManager.RegistryValueName) -> NoneType: ...


    class RegistryKey(vmodl.DynamicData):
        @property
        def keyName(self) -> WindowsRegistryManager.RegistryKeyName: ...
        @property
        def classType(self) -> str: ...
        @property
        def lastWritten(self) -> datetime: ...


    class RegistryKeyName(vmodl.DynamicData):
        @property
        def registryPath(self) -> str: ...
        @property
        def wowBitness(self) -> str: ...


        class RegistryKeyWowBitness(Enum):
            WOWNative = "wownative"
            WOW32 = "wow32"
            WOW64 = "wow64"


    class RegistryKeyRecord(vmodl.DynamicData):
        @property
        def key(self) -> WindowsRegistryManager.RegistryKey: ...
        @property
        def fault(self) -> vmodl.MethodFault: ...


    class RegistryValue(vmodl.DynamicData):
        @property
        def name(self) -> WindowsRegistryManager.RegistryValueName: ...
        @property
        def data(self) -> WindowsRegistryManager.RegistryValueData: ...


    class RegistryValueBinary(WindowsRegistryManager.RegistryValueData):
        @property
        def value(self) -> binary: ...


    class RegistryValueData(vmodl.DynamicData): ...


    class RegistryValueDword(WindowsRegistryManager.RegistryValueData):
        @property
        def value(self) -> int: ...


    class RegistryValueExpandString(WindowsRegistryManager.RegistryValueData):
        @property
        def value(self) -> str: ...


    class RegistryValueMultiString(WindowsRegistryManager.RegistryValueData):
        @property
        def value(self) -> List[str]: ...


    class RegistryValueName(vmodl.DynamicData):
        @property
        def keyName(self) -> WindowsRegistryManager.RegistryKeyName: ...
        @property
        def name(self) -> str: ...


    class RegistryValueQword(WindowsRegistryManager.RegistryValueData):
        @property
        def value(self) -> long: ...


    class RegistryValueString(WindowsRegistryManager.RegistryValueData):
        @property
        def value(self) -> str: ...


class GuestAuthentication(vmodl.DynamicData):
    @property
    def interactiveSession(self) -> bool: ...


class NamePasswordAuthentication(GuestAuthentication):
    @property
    def username(self) -> str: ...
    @property
    def password(self) -> str: ...


class SAMLTokenAuthentication(GuestAuthentication):
    @property
    def token(self) -> str: ...
    @property
    def username(self) -> str: ...


class SSPIAuthentication(GuestAuthentication):
    @property
    def sspiToken(self) -> str: ...


class TicketedSessionAuthentication(GuestAuthentication):
    @property
    def ticket(self) -> str: ...