import base64, sys

from textwrap import wrap

def Parvus(*argv):
    sys.set_int_max_str_digits(9999999)
    argv = str(argv).encode()

    argv = wrap(argv.decode(), 18)

    intmax = 0
    args = 0
    hashes = 0

    for arg in argv:
        intmax = intmax + 1

        argf = str(argv[intmax - 2])
        argc = str(0)

        for char in [*argf]:
            argc = argc + str(base64.b64encode(argf.encode()))

        argf = base64.b64encode(argc.encode())
        dev = 0
        index = 0
        ray = 0

        for char in [*argf]:
            index = index + 1
            char = str(char)[:1]
            dev = int(f"{dev}{ord(char) - 48}") * 65536
        table = 9970180

        while not dev > 101299114634853701530070991244049411032358979390385745132874542750992454531380804009834642026525918323779046853062661343285860158051492908896682934084965709736715816729832388359017133619991470380333508241822287446828579812806615510609183391935624109864656657750377305855590617416533757667468583454136586677908398621164435898717666007160387961062946268938602765718776615270997649684833861190692672035508434986035985759422974504401649066304182857877805451435028147501678120953599575601136702761797704618927973480486834067279340293881936996013860795477011728637206867346791328073590287369233913450453844172067638878582645457942945088093689671609239419173802006470785988741066705437700783617143811128085212163761378850945698772556404632626828970468132186875167028691771282307621480722657855325926162425109745135271386813684241010691796510692874924737400192945263672221865223397243578512721828174224564898660006276890460959920101654871043590098477251280400371852907184320499964462247476933387981334290131796014723270954003525052396909195234488555231222481791385678016964304697267292720963311783368687695849384022337068761373920848423535880473185851274624230339731492574444179406662476308043494142153788245491295717814262113618156113425197231232444723890922095641300410578344124556022640335852390673810654600601231264368222199874954383263300556273264896941439986847530114431866120213585534283360411562827471349635212444059097536345360352448317666156101033203403029340180773538508915310948587300556050527941098965498947826784466163290306952890604721707156660158669084215656848897654481328695468126349826915416771548245551515783390356325969992396808765535607961092650833762700520361687646198685749569302099059903157696271030391262002303166619985480661167796560739012226744371342202813177505584430923692685491336315231172684346463342005130846313741000400312581407506144688586301987424641197028892816797220061918672194706666222405070155769116377635582196515071883263462137199205381729794266445973929778549740903434115402101899285183863559911763400622305981387243519854852734315172336041728197979219180437989395439291337392501163778548880613572161630195813214619547037703095051620111396897793397645948847729777731285696863012481029323220933002237654675370707064312501664065581656908866206674168358267374075173258584502911994823726776692547000779275057509565203572628891850518139933438113797939987960278046162060051819058205968764392896955011860923187971166622086819227628000318705783366908973219321721971819025340660451259527080262434616937186415469899248309316238144724851034878512130931806922736037292195058181114408461963937674546847813791330583635479616767856993384530790312637454079891832973430756585902848813753604490904222859112804451450474884436039867697950338749385809876881112013889388319609843369040956689267279117655186256064886813700755556468777667668924027669962304214431014971982924833983606564028545676591264476645273071675084384905677177950457632662079607594526584264323896205886572629458474069668806295207920155891653351793534845068950210355041756618739660060968978429126038496480892890593843329829766483200303682806964034063406787055775477758348333485895690596876616955050194557219628481998974914394365599726196247283362927759235803106049057929848927284077039196325560962762598077789013334505208512147294944350424858158089928907765031092076277477459331887715436968297877242718085131543751761436731176259029580540402304138535177388790495115737169759699975540157400536712728380238095129103871018046725165821100741745108298508956681664532724690662336832021611331422627475376506862870309886216718477892834151128257923623340396627868137797262237131078663799844940161886621381625577030269932597340789389158537164083429578160030847172675655010323335315450334999135589467710795243956793816649447120582141202108948075706188309660081430066136179525173877742596091094374251460914834734319264880258923379352322288867536753469353251549263236887090589460844339118093737502096176467312083024915012346651053871315593157286553541039053503273544811026735080983746487998426513431780003628540592733855092446150580772488521192706480820691043196265136148855003182220944552756432000187988309934739675100658432107304703873398418182131680623120212268098795791442228918797137267629587956174920070635997106322800640000:
            dev = int(f"{dev}{index}") * index
            table = hex(dev)[2:] + hex(dev * 2)[2:] + hex(dev * 3)[2:] + hex(dev * 4)[2:] + hex(dev * 5)[2:]

        table = str(table)

        #for char in [*table]:
        #    ray = ray + 1

        mint = f"{hex(int(index))[2:]}{table}{hex(int(dev))[2:]}"
        try:
            for char in [*mint[:90]]:
                ray = f"{ray}{hex(int(char) * index)[2:]}"
            mint = ray * intmax
        except ValueError:
            for char in [*str(dev)]:
                ray = f"{ray}{hex(int(char))[2:]}"
            mint = base64.b64encode(hex(int(ray[64:]) * intmax)[2:].encode()).decode()
            for char in [*mint]:
                ray = f"{ray}{ord(char) - 48}"

            mint = hex(int(ray[64:]))[2:]

        hashes = hashes, mint

    hashes = list(hashes)
    hashes = str(str(str(str(str(str(hashes).replace(', ', '')).replace('(', '')).replace(')', '')).replace('[', '')).replace(']', '')).replace("'", '')

    hashes = base64.b64encode(hashes.encode()).decode()
    for char in [*hashes]:
        ray = f"{ray}{ord(char) - 48}"

    hashes = hex(int(ray[18:]))[2:]

    return f"{hashes[:32]}{hashes[2:32]}" #indexdata(hashes)

def Magnum(*argv):
    sys.set_int_max_str_digits(9999999)
    argv = str(argv).encode()

    argv = wrap(argv.decode(), 18)

    intmax = 0
    args = 0
    hashes = 0

    for arg in argv:
        intmax = intmax + 1

        argf = str(argv[intmax - 2])
        argc = str(0)

        for char in [*argf]:
            argc = argc + str(base64.b64encode(argf.encode()))

        argf = base64.b64encode(argc.encode())
        dev = 0
        index = 0
        ray = 0

        for char in [*argf]:
            index = index + 1
            char = str(char)[:1]
            dev = int(f"{dev}{ord(char) - 48}") * 65536
        table = 9970180

        while not dev > 101299114634853701530070991244049411032358979390385745132874542750992454531380804009834642026525918323779046853062661343285860158051492908896682934084965709736715816729832388359017133619991470380333508241822287446828579812806615510609183391935624109864656657750377305855590617416533757667468583454136586677908398621164435898717666007160387961062946268938602765718776615270997649684833861190692672035508434986035985759422974504401649066304182857877805451435028147501678120953599575601136702761797704618927973480486834067279340293881936996013860795477011728637206867346791328073590287369233913450453844172067638878582645457942945088093689671609239419173802006470785988741066705437700783617143811128085212163761378850945698772556404632626828970468132186875167028691771282307621480722657855325926162425109745135271386813684241010691796510692874924737400192945263672221865223397243578512721828174224564898660006276890460959920101654871043590098477251280400371852907184320499964462247476933387981334290131796014723270954003525052396909195234488555231222481791385678016964304697267292720963311783368687695849384022337068761373920848423535880473185851274624230339731492574444179406662476308043494142153788245491295717814262113618156113425197231232444723890922095641300410578344124556022640335852390673810654600601231264368222199874954383263300556273264896941439986847530114431866120213585534283360411562827471349635212444059097536345360352448317666156101033203403029340180773538508915310948587300556050527941098965498947826784466163290306952890604721707156660158669084215656848897654481328695468126349826915416771548245551515783390356325969992396808765535607961092650833762700520361687646198685749569302099059903157696271030391262002303166619985480661167796560739012226744371342202813177505584430923692685491336315231172684346463342005130846313741000400312581407506144688586301987424641197028892816797220061918672194706666222405070155769116377635582196515071883263462137199205381729794266445973929778549740903434115402101899285183863559911763400622305981387243519854852734315172336041728197979219180437989395439291337392501163778548880613572161630195813214619547037703095051620111396897793397645948847729777731285696863012481029323220933002237654675370707064312501664065581656908866206674168358267374075173258584502911994823726776692547000779275057509565203572628891850518139933438113797939987960278046162060051819058205968764392896955011860923187971166622086819227628000318705783366908973219321721971819025340660451259527080262434616937186415469899248309316238144724851034878512130931806922736037292195058181114408461963937674546847813791330583635479616767856993384530790312637454079891832973430756585902848813753604490904222859112804451450474884436039867697950338749385809876881112013889388319609843369040956689267279117655186256064886813700755556468777667668924027669962304214431014971982924833983606564028545676591264476645273071675084384905677177950457632662079607594526584264323896205886572629458474069668806295207920155891653351793534845068950210355041756618739660060968978429126038496480892890593843329829766483200303682806964034063406787055775477758348333485895690596876616955050194557219628481998974914394365599726196247283362927759235803106049057929848927284077039196325560962762598077789013334505208512147294944350424858158089928907765031092076277477459331887715436968297877242718085131543751761436731176259029580540402304138535177388790495115737169759699975540157400536712728380238095129103871018046725165821100741745108298508956681664532724690662336832021611331422627475376506862870309886216718477892834151128257923623340396627868137797262237131078663799844940161886621381625577030269932597340789389158537164083429578160030847172675655010323335315450334999135589467710795243956793816649447120582141202108948075706188309660081430066136179525173877742596091094374251460914834734319264880258923379352322288867536753469353251549263236887090589460844339118093737502096176467312083024915012346651053871315593157286553541039053503273544811026735080983746487998426513431780003628540592733855092446150580772488521192706480820691043196265136148855003182220944552756432000187988309934739675100658432107304703873398418182131680623120212268098795791442228918797137267629587956174920070635997106322800640000:
            dev = int(f"{dev}{index}") * index
            table = hex(dev)[2:] + hex(dev * 2)[2:] + hex(dev * 3)[2:] + hex(dev * 4)[2:] + hex(dev * 5)[2:]

        table = str(table)

        #for char in [*table]:
        #    ray = ray + 1

        mint = f"{hex(int(index))[2:]}{table}{hex(int(dev))[2:]}"
        try:
            for char in [*mint[:90]]:
                ray = f"{ray}{hex(int(char) * index)[2:]}"
            mint = ray * intmax
        except ValueError:
            for char in [*str(dev)]:
                ray = f"{ray}{hex(int(char))[2:]}"
            mint = base64.b64encode(hex(int(ray[64:]) * intmax)[2:].encode()).decode()
            for char in [*mint]:
                ray = f"{ray}{ord(char) - 48}"

            mint = hex(int(ray[64:]))[2:]

        hashes = hashes, mint

    hashes = list(hashes)
    hashes = str(str(str(str(str(str(hashes).replace(', ', '')).replace('(', '')).replace(')', '')).replace('[', '')).replace(']', '')).replace("'", '')

    hashes = base64.b64encode(hashes.encode()).decode()
    for char in [*hashes]:
        ray = f"{ray}{ord(char) - 48}"

    hashes = hex(int(ray[18:]))[2:]

    return f"{hashes}"