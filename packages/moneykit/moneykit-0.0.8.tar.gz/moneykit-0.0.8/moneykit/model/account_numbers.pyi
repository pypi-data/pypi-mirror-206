# coding: utf-8

"""
    MoneyKit API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from moneykit import schemas  # noqa: F401

class AccountNumbers(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "bacs",
            "eft",
            "ach",
            "international",
        }

        class properties:
            class ach(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["AchNumber"]:
                        return AchNumber
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple["AchNumber"], typing.List["AchNumber"]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "ach":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
                def __getitem__(self, i: int) -> "AchNumber":
                    return super().__getitem__(i)

            class bacs(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["BacsNumber"]:
                        return BacsNumber
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple["BacsNumber"], typing.List["BacsNumber"]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "bacs":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
                def __getitem__(self, i: int) -> "BacsNumber":
                    return super().__getitem__(i)

            class eft(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["EftNumber"]:
                        return EftNumber
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple["EftNumber"], typing.List["EftNumber"]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "eft":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
                def __getitem__(self, i: int) -> "EftNumber":
                    return super().__getitem__(i)

            class international(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["InternationalNumber"]:
                        return InternationalNumber
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple["InternationalNumber"], typing.List["InternationalNumber"]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "international":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
                def __getitem__(self, i: int) -> "InternationalNumber":
                    return super().__getitem__(i)
            __annotations__ = {
                "ach": ach,
                "bacs": bacs,
                "eft": eft,
                "international": international,
            }
    bacs: MetaOapg.properties.bacs
    eft: MetaOapg.properties.eft
    ach: MetaOapg.properties.ach
    international: MetaOapg.properties.international

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ach"]) -> MetaOapg.properties.ach: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bacs"]) -> MetaOapg.properties.bacs: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eft"]) -> MetaOapg.properties.eft: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["international"]) -> MetaOapg.properties.international: ...
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "ach",
                "bacs",
                "eft",
                "international",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ach"]) -> MetaOapg.properties.ach: ...
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bacs"]) -> MetaOapg.properties.bacs: ...
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eft"]) -> MetaOapg.properties.eft: ...
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["international"]) -> MetaOapg.properties.international: ...
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "ach",
                "bacs",
                "eft",
                "international",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)
    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        bacs: typing.Union[
            MetaOapg.properties.bacs,
            list,
            tuple,
        ],
        eft: typing.Union[
            MetaOapg.properties.eft,
            list,
            tuple,
        ],
        ach: typing.Union[
            MetaOapg.properties.ach,
            list,
            tuple,
        ],
        international: typing.Union[
            MetaOapg.properties.international,
            list,
            tuple,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "AccountNumbers":
        return super().__new__(
            cls,
            *_args,
            bacs=bacs,
            eft=eft,
            ach=ach,
            international=international,
            _configuration=_configuration,
            **kwargs,
        )

from moneykit.model.ach_number import AchNumber
from moneykit.model.bacs_number import BacsNumber
from moneykit.model.eft_number import EftNumber
from moneykit.model.international_number import InternationalNumber
