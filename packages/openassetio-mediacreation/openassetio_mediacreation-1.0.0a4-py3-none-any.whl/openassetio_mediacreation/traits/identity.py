
"""
Trait definitions in the 'identity' namespace.

Traits that aid identification of an entity
"""

# WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

from typing import Union

from openassetio import TraitBase


class DisplayNameTrait(TraitBase):
    """
    Names that can be presented to a user in order to identify and/or
    disambiguate the entity. These strings are potentially unstable and
    should not be used as a UUID or other persistent anchor.
    Usage: entity
    """
    kId = "openassetio-mediacreation:identity.DisplayName"

    
    def setName(self, name: str):
        """
        Sets the name property.

        The humanized name of entity itself, not including any
        hierarchy or classification.

        For example:
        - `"Cuttlefish v1"` - for a version of an asset
        - `"seq003"` - for a sequence in a hierarchy
        """
        if not isinstance(name, str):
            raise TypeError("name must be a 'str'.")
        self._data.setTraitProperty(self.kId, "name", name)

    def getName(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the name property or the supplied default.

        The humanized name of entity itself, not including any
        hierarchy or classification.

        For example:
        - `"Cuttlefish v1"` - for a version of an asset
        - `"seq003"` - for a sequence in a hierarchy
        """
        value = self._data.getTraitProperty(self.kId, "name")
        if value is None:
            return defaultValue

        if not isinstance(value, str):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    def setQualifiedName(self, qualifiedName: str):
        """
        Sets the qualifiedName property.

        An unambiguous, humanised name for the entity.

        The display name may want to consider the host, and any other
        relevant Context information to form a display name for an
        entity that can uniquely identify the entity in that context.

        For example:
        - `"dive / build / cuttlefish / model / v1"` for a version
            of an asset in an 'open recent' menu.
        - `"Sequence 003 [ Dive / Episode 1 ]"` for a sequence in
           an hierarchy as a window title.
        """
        if not isinstance(qualifiedName, str):
            raise TypeError("qualifiedName must be a 'str'.")
        self._data.setTraitProperty(self.kId, "qualifiedName", qualifiedName)

    def getQualifiedName(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the qualifiedName property or the supplied default.

        An unambiguous, humanised name for the entity.

        The display name may want to consider the host, and any other
        relevant Context information to form a display name for an
        entity that can uniquely identify the entity in that context.

        For example:
        - `"dive / build / cuttlefish / model / v1"` for a version
            of an asset in an 'open recent' menu.
        - `"Sequence 003 [ Dive / Episode 1 ]"` for a sequence in
           an hierarchy as a window title.
        """
        value = self._data.getTraitProperty(self.kId, "qualifiedName")
        if value is None:
            return defaultValue

        if not isinstance(value, str):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    

