[tool.poetry]
name = "mlcvzoo_yolox"
version = "6.0.1"
license = "Open Logistics License Version 1.0"
description = "MLCVZoo YOLOX Package"
readme = "README.md"
homepage = "https://git.openlogisticsfoundation.org/silicon-economy/base/ml-toolbox/mlcvzoo"
repository = "https://git.openlogisticsfoundation.org/silicon-economy/base/ml-toolbox/mlcvzoo"
documentation = "https://git.openlogisticsfoundation.org/silicon-economy/base/ml-toolbox/mlcvzoo/-/blob/main/documentation/index.adoc"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Natural Language :: English",
]
authors = [
    "Maximilian Otten <maximilian.otten@iml.fraunhofer.de>",
    "Christian Hoppe <christian.hoppe@iml.fraunhofer.de>",
    "Oliver Bredtmann <oliver.bredtmann@dbschenker.com>",
    "Thilo Bauer <thilo.bauer@dbschenker.com>",
    "Oliver Urbann <oliver.urbann@iml.fraunhofer.de>",
    "Jan Basrawi <jan.basrawi@dbschenker.com>",
    "Luise Weickhmann <luise.weickhmann@iml.fraunhofer.de>",
    "Luca Kotulla <luca.kotulla@iml.fraunhofer.de>",
]

exclude = ["mlcvzoo_yolox/tests/**/*"]

packages = [
    { include = "mlcvzoo_yolox" },
]

[[tool.poetry.source]]
name = "nvidia-ngc"
url = "https://pypi.ngc.nvidia.com"
default = false
secondary = true

[tool.poetry.dependencies]
python = "^3.8"

yaml-config-builder = { version = "^8" }
related-mltoolbox = { version = "^1.0" }
mlcvzoo_base = { version = "^5.0" }
attrs = { version = ">=20" }
nvidia-tensorrt = { version = "8.4.2.4", source = "nvidia-ngc", optional=true }
# Builds and installs just fine but only _after_ torch is available, run
#     poetry run python3 -m pip install "git+https://github.com/NVIDIA-AI-IOT/torch2trt.git@11073308f5fbbc06ba8c33bd41fe43e25d03a861"
# after poetry install instead
# torch2trt = { git = "https://github.com/NVIDIA-AI-IOT/torch2trt", rev = "11073308f5fbbc06ba8c33bd41fe43e25d03a861", optional=true }
# 1.19.2 is oldest available on aarch64 but 1.19.5 leads to unbuildable pytorch there, all is well on amd64
numpy = { version = ">=1.19.2,!=1.19.5" }
nptyping = { version = ">=2.0" }
opencv-python = { version = "^4.5,!=4.5.5.64" }
opencv-contrib-python = { version = "^4.5,!=4.5.5.64" }
torch = { version = ">=1.9" }
torchvision = { version = ">=0.10" }
# This might fail because it needs --no-use-pep-517, so install it afterwards manually:
#    poetry run python -m pip install --no-use-pep517 --no-binary yolox
# You may use build.sh as a wrapper for poetry install/update to automate this
#yolox = { version = "~0.3" }
#yolox = { git = "https://github.com/Megvii-BaseDetection/YOLOX.git", rev = "bb9185c095dfd7a8015a1b82f3e9a065090860b8" }
# YOLOX is uninstallable in its current form on anything > python 3.8 so
# just depend on YOLOX's dependencies as specified in bb9185c095dfd7a8015a1b82f3e9a065090860b8 and install
# YOLOX afterwards. You may use build.sh as a wrapper for poetry install/update to automate this
loguru = { version = "*" }
tqdm = { version = "*" }
thop = { version = "*" }
ninja = { version = "*" }
tabulate = { version = "*" }
psutil = { version = "*" }
tensorboard = { version = "*" }
# verified versions
# pycocotools corresponds to https://github.com/ppwwyyxx/cocoapi
pycocotools = { version = ">=2.0.2" }
onnx  = { version = ">=1.13.0", optional=true }
onnx-simplifier  = { version = "==0.4.10", optional=true }

[tool.poetry.extras]
tensorrt = ["nvidia-tensorrt"]
onnx = ["onnx", "onnx-simplifier"]

[tool.poetry.dev-dependencies]
mock = { version = ">=4.0" }
pytest = { version = ">=7.0" }
pytest-cov = { version = ">=3.0.0" }
black = { version = ">=22" }
mypy = { version = ">=0.961" }
pylint = { version = ">=2.9.6" }
isort = { version = ">=5.9" }
pytest-mock = ">=3.7"
torch = {version = "*"}

[build-system]
# NOTE: Don't remove setuptools, therefore require it from the build system
requires = ["setuptools", "poetry_core>=1.0", "torch"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"

[tool.pylint.master]
extension-pkg-whitelist = ["numpy", "cv2"]
jobs = 0

[tool.pytest.ini_options]
log_cli = 1
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s | %(filename)s:%(funcName)s:%(lineno)s"
log_cli_date_format= "%Y-%m-%d %H:%M:%S"

[tool.mypy]
python_version = 3.8
exclude = ['mlcvzoo_yolox/tests']

junit_xml = "xunit-reports/xunit-result-mypy.xml"

# output style configuration
show_column_numbers = true
show_error_codes = true
pretty = true

# additional warnings
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_no_return = true

no_implicit_optional = true
# unreachable code checking produces practically only false positives
warn_unreachable = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
# disallow_any_explicit = true
disallow_any_generics = true
disallow_untyped_calls = true
ignore_missing_imports = false
# plugins = "numpy.typing.mypy_plugin"

# ignores that library has no typing information with it
[[tool.mypy.overrides]]
module = [
    "cv2", # https://github.com/opencv/opencv/issues/14590
    "imageio.*",
    "mlflow.*",
    "numpy.*",
    "pandas.*",
    "PIL.*",
    "related.*",
    "scipy.*",
    "sklearn.*",
    "terminaltables.*",
    "torch.*",
    "torch2trt.*",
    "torchvision.*",
    "tqdm.*",
    "yolox.*"
]
ignore_missing_imports = true
