from typing import List
from enum import Enum
from pyVmomi import vim, vmodl
from datetime import datetime
from pyVmomi.VmomiSupport import ManagedObject, NoneType


class ScheduledTask(vim.ExtensibleManagedObject):
    @property
    def info(self) -> ScheduledTaskInfo: ...
    def Remove(self) -> NoneType: ...
    def Reconfigure(self, spec: ScheduledTaskSpec) -> NoneType: ...
    def Run(self) -> NoneType: ...


class ScheduledTaskManager(ManagedObject):
    @property
    def scheduledTask(self) -> List[ScheduledTask]: ...
    @property
    def description(self) -> ScheduledTaskDescription: ...
    def Create(self, entity: vim.ManagedEntity, spec: ScheduledTaskSpec) -> ScheduledTask: ...
    def RetrieveEntityScheduledTask(self, entity: vim.ManagedEntity) -> List[ScheduledTask]: ...
    def CreateObjectScheduledTask(self, obj: ManagedObject, spec: ScheduledTaskSpec) -> ScheduledTask: ...
    def RetrieveObjectScheduledTask(self, obj: ManagedObject) -> List[ScheduledTask]: ...


class AfterStartupTaskScheduler(TaskScheduler):
    @property
    def minute(self) -> int: ...


class DailyTaskScheduler(HourlyTaskScheduler):
    @property
    def hour(self) -> int: ...


class HourlyTaskScheduler(RecurrentTaskScheduler):
    @property
    def minute(self) -> int: ...


class MonthlyByDayTaskScheduler(MonthlyTaskScheduler):
    @property
    def day(self) -> int: ...


class MonthlyByWeekdayTaskScheduler(MonthlyTaskScheduler):
    @property
    def offset(self) -> MonthlyByWeekdayTaskScheduler.WeekOfMonth: ...
    @property
    def weekday(self) -> MonthlyByWeekdayTaskScheduler.DayOfWeek: ...


    class DayOfWeek(Enum):
        sunday = "sunday"
        monday = "monday"
        tuesday = "tuesday"
        wednesday = "wednesday"
        thursday = "thursday"
        friday = "friday"
        saturday = "saturday"


    class WeekOfMonth(Enum):
        first = "first"
        second = "second"
        third = "third"
        fourth = "fourth"
        last = "last"


class MonthlyTaskScheduler(DailyTaskScheduler): ...


class OnceTaskScheduler(TaskScheduler):
    @property
    def runAt(self) -> datetime: ...


class RecurrentTaskScheduler(TaskScheduler):
    @property
    def interval(self) -> int: ...


class ScheduledTaskDescription(vmodl.DynamicData):
    @property
    def action(self) -> List[vim.TypeDescription]: ...
    @property
    def schedulerInfo(self) -> List[ScheduledTaskDescription.SchedulerDetail]: ...
    @property
    def state(self) -> List[vim.ElementDescription]: ...
    @property
    def dayOfWeek(self) -> List[vim.ElementDescription]: ...
    @property
    def weekOfMonth(self) -> List[vim.ElementDescription]: ...


    class SchedulerDetail(vim.TypeDescription):
        @property
        def frequency(self) -> str: ...


class ScheduledTaskInfo(ScheduledTaskSpec):
    @property
    def scheduledTask(self) -> ScheduledTask: ...
    @property
    def entity(self) -> vim.ManagedEntity: ...
    @property
    def lastModifiedTime(self) -> datetime: ...
    @property
    def lastModifiedUser(self) -> str: ...
    @property
    def nextRunTime(self) -> datetime: ...
    @property
    def prevRunTime(self) -> datetime: ...
    @property
    def state(self) -> vim.TaskInfo.State: ...
    @property
    def error(self) -> vmodl.MethodFault: ...
    @property
    def result(self) -> object: ...
    @property
    def progress(self) -> int: ...
    @property
    def activeTask(self) -> vim.Task: ...
    @property
    def taskObject(self) -> ManagedObject: ...


class ScheduledTaskSpec(vmodl.DynamicData):
    @property
    def name(self) -> str: ...
    @property
    def description(self) -> str: ...
    @property
    def enabled(self) -> bool: ...
    @property
    def scheduler(self) -> TaskScheduler: ...
    @property
    def action(self) -> vim.action.Action: ...
    @property
    def notification(self) -> str: ...


class TaskScheduler(vmodl.DynamicData):
    @property
    def activeTime(self) -> datetime: ...
    @property
    def expireTime(self) -> datetime: ...


class WeeklyTaskScheduler(DailyTaskScheduler):
    @property
    def sunday(self) -> bool: ...
    @property
    def monday(self) -> bool: ...
    @property
    def tuesday(self) -> bool: ...
    @property
    def wednesday(self) -> bool: ...
    @property
    def thursday(self) -> bool: ...
    @property
    def friday(self) -> bool: ...
    @property
    def saturday(self) -> bool: ...