# coding: utf-8

"""
    Your Project API

    Your project description  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from electricalclientv4 import schemas  # noqa: F401


class PatchedHistory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            pk = schemas.IntSchema
            
            
            class title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 200
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'title':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class quantity(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'quantity':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class price(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,9}(?:\.\d{0,2})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'price':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class price_sale(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,9}(?:\.\d{0,2})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'price_sale':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class datetime_create(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'datetime_create':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class score(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,3}(?:\.\d{0,2})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'score':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class count_comments(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'count_comments':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class count_likes(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'count_likes':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class count_stars_all(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'count_stars_all':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class count_stars_1(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'count_stars_1':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class count_stars_2(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'count_stars_2':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class count_stars_3(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'count_stars_3':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class count_stars_4(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'count_stars_4':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class count_stars_5(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'count_stars_5':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class count_how_much_buy(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'count_how_much_buy':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class count_questions(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'count_questions':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class count_photo(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'count_photo':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class category(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1000
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'category':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class category_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1000
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'category_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class brand(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1000
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'brand':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class brand_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1000
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'brand_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class day_to_delivery(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'day_to_delivery':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sku(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1000
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sku':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1000
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class canonical_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1000
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'canonical_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class img_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1000
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'img_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 10000
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class params(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 10000
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'params':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class seller(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1000
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'seller':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class seller_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1000
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'seller_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class source_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1000
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'source_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class urls_other_products_on_the_page(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 10000
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'urls_other_products_on_the_page':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class worker(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 200
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'worker':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class task(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 200
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'task':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class apartment_area(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,3}(?:\.\d{0,2})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'apartment_area':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class apartment_completion_quarter(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'apartment_completion_quarter':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class apartment_completion_year(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'apartment_completion_year':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class apartment_floor(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'apartment_floor':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class apartment_floors_total(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'apartment_floors_total':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class apartment_ceilingheight(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,3}(?:\.\d{0,2})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'apartment_ceilingheight':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class apartment_room(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'apartment_room':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class apartment_ppm(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'apartment_ppm':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class apartment_address(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 200
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'apartment_address':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class apartment_location_lat(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,3}(?:\.\d{0,6})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'apartment_location_lat':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class apartment_location_lon(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^-?\d{0,3}(?:\.\d{0,6})?$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'apartment_location_lon':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "pk": pk,
                "title": title,
                "quantity": quantity,
                "price": price,
                "price_sale": price_sale,
                "datetime_create": datetime_create,
                "score": score,
                "count_comments": count_comments,
                "count_likes": count_likes,
                "count_stars_all": count_stars_all,
                "count_stars_1": count_stars_1,
                "count_stars_2": count_stars_2,
                "count_stars_3": count_stars_3,
                "count_stars_4": count_stars_4,
                "count_stars_5": count_stars_5,
                "count_how_much_buy": count_how_much_buy,
                "count_questions": count_questions,
                "count_photo": count_photo,
                "category": category,
                "category_url": category_url,
                "brand": brand,
                "brand_url": brand_url,
                "day_to_delivery": day_to_delivery,
                "sku": sku,
                "url": url,
                "canonical_url": canonical_url,
                "img_url": img_url,
                "description": description,
                "params": params,
                "seller": seller,
                "seller_url": seller_url,
                "source_url": source_url,
                "urls_other_products_on_the_page": urls_other_products_on_the_page,
                "worker": worker,
                "task": task,
                "apartment_area": apartment_area,
                "apartment_completion_quarter": apartment_completion_quarter,
                "apartment_completion_year": apartment_completion_year,
                "apartment_floor": apartment_floor,
                "apartment_floors_total": apartment_floors_total,
                "apartment_ceilingheight": apartment_ceilingheight,
                "apartment_room": apartment_room,
                "apartment_ppm": apartment_ppm,
                "apartment_address": apartment_address,
                "apartment_location_lat": apartment_location_lat,
                "apartment_location_lon": apartment_location_lon,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pk"]) -> MetaOapg.properties.pk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_sale"]) -> MetaOapg.properties.price_sale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datetime_create"]) -> MetaOapg.properties.datetime_create: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count_comments"]) -> MetaOapg.properties.count_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count_likes"]) -> MetaOapg.properties.count_likes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count_stars_all"]) -> MetaOapg.properties.count_stars_all: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count_stars_1"]) -> MetaOapg.properties.count_stars_1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count_stars_2"]) -> MetaOapg.properties.count_stars_2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count_stars_3"]) -> MetaOapg.properties.count_stars_3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count_stars_4"]) -> MetaOapg.properties.count_stars_4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count_stars_5"]) -> MetaOapg.properties.count_stars_5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count_how_much_buy"]) -> MetaOapg.properties.count_how_much_buy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count_questions"]) -> MetaOapg.properties.count_questions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count_photo"]) -> MetaOapg.properties.count_photo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_url"]) -> MetaOapg.properties.category_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brand"]) -> MetaOapg.properties.brand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brand_url"]) -> MetaOapg.properties.brand_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["day_to_delivery"]) -> MetaOapg.properties.day_to_delivery: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canonical_url"]) -> MetaOapg.properties.canonical_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["img_url"]) -> MetaOapg.properties.img_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["params"]) -> MetaOapg.properties.params: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seller"]) -> MetaOapg.properties.seller: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seller_url"]) -> MetaOapg.properties.seller_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_url"]) -> MetaOapg.properties.source_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["urls_other_products_on_the_page"]) -> MetaOapg.properties.urls_other_products_on_the_page: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["worker"]) -> MetaOapg.properties.worker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["task"]) -> MetaOapg.properties.task: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apartment_area"]) -> MetaOapg.properties.apartment_area: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apartment_completion_quarter"]) -> MetaOapg.properties.apartment_completion_quarter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apartment_completion_year"]) -> MetaOapg.properties.apartment_completion_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apartment_floor"]) -> MetaOapg.properties.apartment_floor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apartment_floors_total"]) -> MetaOapg.properties.apartment_floors_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apartment_ceilingheight"]) -> MetaOapg.properties.apartment_ceilingheight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apartment_room"]) -> MetaOapg.properties.apartment_room: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apartment_ppm"]) -> MetaOapg.properties.apartment_ppm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apartment_address"]) -> MetaOapg.properties.apartment_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apartment_location_lat"]) -> MetaOapg.properties.apartment_location_lat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apartment_location_lon"]) -> MetaOapg.properties.apartment_location_lon: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pk", "title", "quantity", "price", "price_sale", "datetime_create", "score", "count_comments", "count_likes", "count_stars_all", "count_stars_1", "count_stars_2", "count_stars_3", "count_stars_4", "count_stars_5", "count_how_much_buy", "count_questions", "count_photo", "category", "category_url", "brand", "brand_url", "day_to_delivery", "sku", "url", "canonical_url", "img_url", "description", "params", "seller", "seller_url", "source_url", "urls_other_products_on_the_page", "worker", "task", "apartment_area", "apartment_completion_quarter", "apartment_completion_year", "apartment_floor", "apartment_floors_total", "apartment_ceilingheight", "apartment_room", "apartment_ppm", "apartment_address", "apartment_location_lat", "apartment_location_lon", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pk"]) -> typing.Union[MetaOapg.properties.pk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> typing.Union[MetaOapg.properties.quantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union[MetaOapg.properties.price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_sale"]) -> typing.Union[MetaOapg.properties.price_sale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datetime_create"]) -> typing.Union[MetaOapg.properties.datetime_create, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> typing.Union[MetaOapg.properties.score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count_comments"]) -> typing.Union[MetaOapg.properties.count_comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count_likes"]) -> typing.Union[MetaOapg.properties.count_likes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count_stars_all"]) -> typing.Union[MetaOapg.properties.count_stars_all, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count_stars_1"]) -> typing.Union[MetaOapg.properties.count_stars_1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count_stars_2"]) -> typing.Union[MetaOapg.properties.count_stars_2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count_stars_3"]) -> typing.Union[MetaOapg.properties.count_stars_3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count_stars_4"]) -> typing.Union[MetaOapg.properties.count_stars_4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count_stars_5"]) -> typing.Union[MetaOapg.properties.count_stars_5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count_how_much_buy"]) -> typing.Union[MetaOapg.properties.count_how_much_buy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count_questions"]) -> typing.Union[MetaOapg.properties.count_questions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count_photo"]) -> typing.Union[MetaOapg.properties.count_photo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_url"]) -> typing.Union[MetaOapg.properties.category_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brand"]) -> typing.Union[MetaOapg.properties.brand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brand_url"]) -> typing.Union[MetaOapg.properties.brand_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["day_to_delivery"]) -> typing.Union[MetaOapg.properties.day_to_delivery, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> typing.Union[MetaOapg.properties.sku, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canonical_url"]) -> typing.Union[MetaOapg.properties.canonical_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["img_url"]) -> typing.Union[MetaOapg.properties.img_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["params"]) -> typing.Union[MetaOapg.properties.params, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seller"]) -> typing.Union[MetaOapg.properties.seller, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seller_url"]) -> typing.Union[MetaOapg.properties.seller_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_url"]) -> typing.Union[MetaOapg.properties.source_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["urls_other_products_on_the_page"]) -> typing.Union[MetaOapg.properties.urls_other_products_on_the_page, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["worker"]) -> typing.Union[MetaOapg.properties.worker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["task"]) -> typing.Union[MetaOapg.properties.task, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apartment_area"]) -> typing.Union[MetaOapg.properties.apartment_area, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apartment_completion_quarter"]) -> typing.Union[MetaOapg.properties.apartment_completion_quarter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apartment_completion_year"]) -> typing.Union[MetaOapg.properties.apartment_completion_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apartment_floor"]) -> typing.Union[MetaOapg.properties.apartment_floor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apartment_floors_total"]) -> typing.Union[MetaOapg.properties.apartment_floors_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apartment_ceilingheight"]) -> typing.Union[MetaOapg.properties.apartment_ceilingheight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apartment_room"]) -> typing.Union[MetaOapg.properties.apartment_room, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apartment_ppm"]) -> typing.Union[MetaOapg.properties.apartment_ppm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apartment_address"]) -> typing.Union[MetaOapg.properties.apartment_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apartment_location_lat"]) -> typing.Union[MetaOapg.properties.apartment_location_lat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apartment_location_lon"]) -> typing.Union[MetaOapg.properties.apartment_location_lon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pk", "title", "quantity", "price", "price_sale", "datetime_create", "score", "count_comments", "count_likes", "count_stars_all", "count_stars_1", "count_stars_2", "count_stars_3", "count_stars_4", "count_stars_5", "count_how_much_buy", "count_questions", "count_photo", "category", "category_url", "brand", "brand_url", "day_to_delivery", "sku", "url", "canonical_url", "img_url", "description", "params", "seller", "seller_url", "source_url", "urls_other_products_on_the_page", "worker", "task", "apartment_area", "apartment_completion_quarter", "apartment_completion_year", "apartment_floor", "apartment_floors_total", "apartment_ceilingheight", "apartment_room", "apartment_ppm", "apartment_address", "apartment_location_lat", "apartment_location_lon", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        pk: typing.Union[MetaOapg.properties.pk, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, None, str, schemas.Unset] = schemas.unset,
        quantity: typing.Union[MetaOapg.properties.quantity, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        price: typing.Union[MetaOapg.properties.price, None, str, schemas.Unset] = schemas.unset,
        price_sale: typing.Union[MetaOapg.properties.price_sale, None, str, schemas.Unset] = schemas.unset,
        datetime_create: typing.Union[MetaOapg.properties.datetime_create, None, str, datetime, schemas.Unset] = schemas.unset,
        score: typing.Union[MetaOapg.properties.score, None, str, schemas.Unset] = schemas.unset,
        count_comments: typing.Union[MetaOapg.properties.count_comments, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        count_likes: typing.Union[MetaOapg.properties.count_likes, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        count_stars_all: typing.Union[MetaOapg.properties.count_stars_all, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        count_stars_1: typing.Union[MetaOapg.properties.count_stars_1, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        count_stars_2: typing.Union[MetaOapg.properties.count_stars_2, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        count_stars_3: typing.Union[MetaOapg.properties.count_stars_3, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        count_stars_4: typing.Union[MetaOapg.properties.count_stars_4, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        count_stars_5: typing.Union[MetaOapg.properties.count_stars_5, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        count_how_much_buy: typing.Union[MetaOapg.properties.count_how_much_buy, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        count_questions: typing.Union[MetaOapg.properties.count_questions, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        count_photo: typing.Union[MetaOapg.properties.count_photo, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        category: typing.Union[MetaOapg.properties.category, None, str, schemas.Unset] = schemas.unset,
        category_url: typing.Union[MetaOapg.properties.category_url, None, str, schemas.Unset] = schemas.unset,
        brand: typing.Union[MetaOapg.properties.brand, None, str, schemas.Unset] = schemas.unset,
        brand_url: typing.Union[MetaOapg.properties.brand_url, None, str, schemas.Unset] = schemas.unset,
        day_to_delivery: typing.Union[MetaOapg.properties.day_to_delivery, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sku: typing.Union[MetaOapg.properties.sku, None, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, None, str, schemas.Unset] = schemas.unset,
        canonical_url: typing.Union[MetaOapg.properties.canonical_url, None, str, schemas.Unset] = schemas.unset,
        img_url: typing.Union[MetaOapg.properties.img_url, None, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        params: typing.Union[MetaOapg.properties.params, None, str, schemas.Unset] = schemas.unset,
        seller: typing.Union[MetaOapg.properties.seller, None, str, schemas.Unset] = schemas.unset,
        seller_url: typing.Union[MetaOapg.properties.seller_url, None, str, schemas.Unset] = schemas.unset,
        source_url: typing.Union[MetaOapg.properties.source_url, None, str, schemas.Unset] = schemas.unset,
        urls_other_products_on_the_page: typing.Union[MetaOapg.properties.urls_other_products_on_the_page, None, str, schemas.Unset] = schemas.unset,
        worker: typing.Union[MetaOapg.properties.worker, None, str, schemas.Unset] = schemas.unset,
        task: typing.Union[MetaOapg.properties.task, None, str, schemas.Unset] = schemas.unset,
        apartment_area: typing.Union[MetaOapg.properties.apartment_area, None, str, schemas.Unset] = schemas.unset,
        apartment_completion_quarter: typing.Union[MetaOapg.properties.apartment_completion_quarter, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        apartment_completion_year: typing.Union[MetaOapg.properties.apartment_completion_year, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        apartment_floor: typing.Union[MetaOapg.properties.apartment_floor, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        apartment_floors_total: typing.Union[MetaOapg.properties.apartment_floors_total, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        apartment_ceilingheight: typing.Union[MetaOapg.properties.apartment_ceilingheight, None, str, schemas.Unset] = schemas.unset,
        apartment_room: typing.Union[MetaOapg.properties.apartment_room, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        apartment_ppm: typing.Union[MetaOapg.properties.apartment_ppm, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        apartment_address: typing.Union[MetaOapg.properties.apartment_address, None, str, schemas.Unset] = schemas.unset,
        apartment_location_lat: typing.Union[MetaOapg.properties.apartment_location_lat, None, str, schemas.Unset] = schemas.unset,
        apartment_location_lon: typing.Union[MetaOapg.properties.apartment_location_lon, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PatchedHistory':
        return super().__new__(
            cls,
            *_args,
            pk=pk,
            title=title,
            quantity=quantity,
            price=price,
            price_sale=price_sale,
            datetime_create=datetime_create,
            score=score,
            count_comments=count_comments,
            count_likes=count_likes,
            count_stars_all=count_stars_all,
            count_stars_1=count_stars_1,
            count_stars_2=count_stars_2,
            count_stars_3=count_stars_3,
            count_stars_4=count_stars_4,
            count_stars_5=count_stars_5,
            count_how_much_buy=count_how_much_buy,
            count_questions=count_questions,
            count_photo=count_photo,
            category=category,
            category_url=category_url,
            brand=brand,
            brand_url=brand_url,
            day_to_delivery=day_to_delivery,
            sku=sku,
            url=url,
            canonical_url=canonical_url,
            img_url=img_url,
            description=description,
            params=params,
            seller=seller,
            seller_url=seller_url,
            source_url=source_url,
            urls_other_products_on_the_page=urls_other_products_on_the_page,
            worker=worker,
            task=task,
            apartment_area=apartment_area,
            apartment_completion_quarter=apartment_completion_quarter,
            apartment_completion_year=apartment_completion_year,
            apartment_floor=apartment_floor,
            apartment_floors_total=apartment_floors_total,
            apartment_ceilingheight=apartment_ceilingheight,
            apartment_room=apartment_room,
            apartment_ppm=apartment_ppm,
            apartment_address=apartment_address,
            apartment_location_lat=apartment_location_lat,
            apartment_location_lon=apartment_location_lon,
            _configuration=_configuration,
            **kwargs,
        )
